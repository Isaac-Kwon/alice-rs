/* automatically generated by rust-bindgen */

pub type CEsd = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct primary_vertex_t {
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub n_contrib: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_primary_vertex_t() {
    assert_eq!(::std::mem::size_of::<primary_vertex_t>() , 32usize , concat !
               ( "Size of: " , stringify ! ( primary_vertex_t ) ));
    assert_eq! (::std::mem::align_of::<primary_vertex_t>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( primary_vertex_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const primary_vertex_t ) ) . x as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( primary_vertex_t ) ,
                "::" , stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const primary_vertex_t ) ) . y as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( primary_vertex_t ) ,
                "::" , stringify ! ( y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const primary_vertex_t ) ) . z as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( primary_vertex_t ) ,
                "::" , stringify ! ( z ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const primary_vertex_t ) ) . n_contrib as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( primary_vertex_t ) ,
                "::" , stringify ! ( n_contrib ) ));
}
impl Clone for primary_vertex_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct track_t {
    pub ext_track_paras: ext_track_parameters_t,
    pub alpha: f64,
    pub x: f64,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_track_t() {
    assert_eq!(::std::mem::size_of::<track_t>() , 64usize , concat ! (
               "Size of: " , stringify ! ( track_t ) ));
    assert_eq! (::std::mem::align_of::<track_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( track_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const track_t ) ) . ext_track_paras as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( track_t ) , "::" ,
                stringify ! ( ext_track_paras ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const track_t ) ) . alpha as * const _ as usize
                } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( track_t ) , "::" ,
                stringify ! ( alpha ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const track_t ) ) . x as * const _ as usize } ,
                48usize , concat ! (
                "Alignment of field: " , stringify ! ( track_t ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const track_t ) ) . flags as * const _ as usize
                } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( track_t ) , "::" ,
                stringify ! ( flags ) ));
}
impl Clone for track_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ext_track_parameters_t {
    pub loc_y: f64,
    pub loc_z: f64,
    pub loc_sin: f64,
    pub tang: f64,
    pub one_over_pt: f64,
}
#[test]
fn bindgen_test_layout_ext_track_parameters_t() {
    assert_eq!(::std::mem::size_of::<ext_track_parameters_t>() , 40usize ,
               concat ! ( "Size of: " , stringify ! ( ext_track_parameters_t )
               ));
    assert_eq! (::std::mem::align_of::<ext_track_parameters_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( ext_track_parameters_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ext_track_parameters_t ) ) . loc_y as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ext_track_parameters_t
                ) , "::" , stringify ! ( loc_y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ext_track_parameters_t ) ) . loc_z as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ext_track_parameters_t
                ) , "::" , stringify ! ( loc_z ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ext_track_parameters_t ) ) . loc_sin as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( ext_track_parameters_t
                ) , "::" , stringify ! ( loc_sin ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ext_track_parameters_t ) ) . tang as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( ext_track_parameters_t
                ) , "::" , stringify ! ( tang ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ext_track_parameters_t ) ) . one_over_pt
                as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( ext_track_parameters_t
                ) , "::" , stringify ! ( one_over_pt ) ));
}
impl Clone for ext_track_parameters_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn esd_new() -> *mut CEsd;
}
extern "C" {
    pub fn esd_load_next(cesd: *const CEsd, ievent: ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn primary_vertex_get_pos(cesd: *const CEsd) -> primary_vertex_t;
}
extern "C" {
    pub fn get_ext_tracks_parameters(cesd: *const CEsd, tracks: *mut track_t,
                                     ntracks: usize);
}
extern "C" {
    pub fn get_n_tracks(cesd: *const CEsd) -> usize;
}
extern "C" {
    pub fn esd_destroy(cesd: *const CEsd);
}
