//
// File generated by rootcint at Sat Jun 24 14:46:58 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME G__STEERBase
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__STEERBase.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::AliVAODHeader AliVAODHeader;
      #else
      class AliVAODHeader  :  public ::AliVHeader {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~AliVAODHeader() throw() {};
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::AliVTPCseed AliVTPCseed;
      #else
      class AliVTPCseed  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~AliVTPCseed() throw() {};
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void AliCentrality_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliCentrality(void *p = 0);
   static void *newArray_AliCentrality(Long_t size, void *p);
   static void delete_AliCentrality(void *p);
   static void deleteArray_AliCentrality(void *p);
   static void destruct_AliCentrality(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliCentrality*)
   {
      ::AliCentrality *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliCentrality >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliCentrality", ::AliCentrality::Class_Version(), "./AliCentrality.h", 16,
                  typeid(::AliCentrality), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliCentrality::Dictionary, isa_proxy, 4,
                  sizeof(::AliCentrality) );
      instance.SetNew(&new_AliCentrality);
      instance.SetNewArray(&newArray_AliCentrality);
      instance.SetDelete(&delete_AliCentrality);
      instance.SetDeleteArray(&deleteArray_AliCentrality);
      instance.SetDestructor(&destruct_AliCentrality);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliCentrality*)
   {
      return GenerateInitInstanceLocal((::AliCentrality*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliCentrality*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliCheb2DStack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliCheb2DStack(void *p);
   static void deleteArray_AliCheb2DStack(void *p);
   static void destruct_AliCheb2DStack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliCheb2DStack*)
   {
      ::AliCheb2DStack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliCheb2DStack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliCheb2DStack", ::AliCheb2DStack::Class_Version(), "./AliCheb2DStack.h", 20,
                  typeid(::AliCheb2DStack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliCheb2DStack::Dictionary, isa_proxy, 4,
                  sizeof(::AliCheb2DStack) );
      instance.SetDelete(&delete_AliCheb2DStack);
      instance.SetDeleteArray(&deleteArray_AliCheb2DStack);
      instance.SetDestructor(&destruct_AliCheb2DStack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliCheb2DStack*)
   {
      return GenerateInitInstanceLocal((::AliCheb2DStack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliCheb2DStack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliCheb2DStackF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliCheb2DStackF(void *p = 0);
   static void *newArray_AliCheb2DStackF(Long_t size, void *p);
   static void delete_AliCheb2DStackF(void *p);
   static void deleteArray_AliCheb2DStackF(void *p);
   static void destruct_AliCheb2DStackF(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliCheb2DStackF*)
   {
      ::AliCheb2DStackF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliCheb2DStackF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliCheb2DStackF", ::AliCheb2DStackF::Class_Version(), "./AliCheb2DStackF.h", 23,
                  typeid(::AliCheb2DStackF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliCheb2DStackF::Dictionary, isa_proxy, 4,
                  sizeof(::AliCheb2DStackF) );
      instance.SetNew(&new_AliCheb2DStackF);
      instance.SetNewArray(&newArray_AliCheb2DStackF);
      instance.SetDelete(&delete_AliCheb2DStackF);
      instance.SetDeleteArray(&deleteArray_AliCheb2DStackF);
      instance.SetDestructor(&destruct_AliCheb2DStackF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliCheb2DStackF*)
   {
      return GenerateInitInstanceLocal((::AliCheb2DStackF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliCheb2DStackF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliCheb2DStackS_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliCheb2DStackS(void *p = 0);
   static void *newArray_AliCheb2DStackS(Long_t size, void *p);
   static void delete_AliCheb2DStackS(void *p);
   static void deleteArray_AliCheb2DStackS(void *p);
   static void destruct_AliCheb2DStackS(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliCheb2DStackS*)
   {
      ::AliCheb2DStackS *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliCheb2DStackS >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliCheb2DStackS", ::AliCheb2DStackS::Class_Version(), "./AliCheb2DStackS.h", 23,
                  typeid(::AliCheb2DStackS), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliCheb2DStackS::Dictionary, isa_proxy, 4,
                  sizeof(::AliCheb2DStackS) );
      instance.SetNew(&new_AliCheb2DStackS);
      instance.SetNewArray(&newArray_AliCheb2DStackS);
      instance.SetDelete(&delete_AliCheb2DStackS);
      instance.SetDeleteArray(&deleteArray_AliCheb2DStackS);
      instance.SetDestructor(&destruct_AliCheb2DStackS);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliCheb2DStackS*)
   {
      return GenerateInitInstanceLocal((::AliCheb2DStackS*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliCheb2DStackS*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliCheb3DCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliCheb3DCalc(void *p = 0);
   static void *newArray_AliCheb3DCalc(Long_t size, void *p);
   static void delete_AliCheb3DCalc(void *p);
   static void deleteArray_AliCheb3DCalc(void *p);
   static void destruct_AliCheb3DCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliCheb3DCalc*)
   {
      ::AliCheb3DCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliCheb3DCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliCheb3DCalc", ::AliCheb3DCalc::Class_Version(), "./AliCheb3DCalc.h", 25,
                  typeid(::AliCheb3DCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliCheb3DCalc::Dictionary, isa_proxy, 4,
                  sizeof(::AliCheb3DCalc) );
      instance.SetNew(&new_AliCheb3DCalc);
      instance.SetNewArray(&newArray_AliCheb3DCalc);
      instance.SetDelete(&delete_AliCheb3DCalc);
      instance.SetDeleteArray(&deleteArray_AliCheb3DCalc);
      instance.SetDestructor(&destruct_AliCheb3DCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliCheb3DCalc*)
   {
      return GenerateInitInstanceLocal((::AliCheb3DCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliCheb3DCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliCheb3D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliCheb3D(void *p = 0);
   static void *newArray_AliCheb3D(Long_t size, void *p);
   static void delete_AliCheb3D(void *p);
   static void deleteArray_AliCheb3D(void *p);
   static void destruct_AliCheb3D(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliCheb3D*)
   {
      ::AliCheb3D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliCheb3D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliCheb3D", ::AliCheb3D::Class_Version(), "./AliCheb3D.h", 83,
                  typeid(::AliCheb3D), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliCheb3D::Dictionary, isa_proxy, 4,
                  sizeof(::AliCheb3D) );
      instance.SetNew(&new_AliCheb3D);
      instance.SetNewArray(&newArray_AliCheb3D);
      instance.SetDelete(&delete_AliCheb3D);
      instance.SetDeleteArray(&deleteArray_AliCheb3D);
      instance.SetDestructor(&destruct_AliCheb3D);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliCheb3D*)
   {
      return GenerateInitInstanceLocal((::AliCheb3D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliCheb3D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliLog_ShowMembers(void *obj, TMemberInspector &R__insp);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliLog*)
   {
      ::AliLog *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliLog >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliLog", ::AliLog::Class_Version(), "./AliLog.h", 28,
                  typeid(::AliLog), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliLog::Dictionary, isa_proxy, 4,
                  sizeof(::AliLog) );
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliLog*)
   {
      return GenerateInitInstanceLocal((::AliLog*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliLog*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliCodeTimer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliCodeTimer(void *p = 0);
   static void *newArray_AliCodeTimer(Long_t size, void *p);
   static void delete_AliCodeTimer(void *p);
   static void deleteArray_AliCodeTimer(void *p);
   static void destruct_AliCodeTimer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliCodeTimer*)
   {
      ::AliCodeTimer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliCodeTimer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliCodeTimer", ::AliCodeTimer::Class_Version(), "./AliCodeTimer.h", 28,
                  typeid(::AliCodeTimer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliCodeTimer::Dictionary, isa_proxy, 4,
                  sizeof(::AliCodeTimer) );
      instance.SetNew(&new_AliCodeTimer);
      instance.SetNewArray(&newArray_AliCodeTimer);
      instance.SetDelete(&delete_AliCodeTimer);
      instance.SetDeleteArray(&deleteArray_AliCodeTimer);
      instance.SetDestructor(&destruct_AliCodeTimer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliCodeTimer*)
   {
      return GenerateInitInstanceLocal((::AliCodeTimer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliCodeTimer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliCodeTimercLcLAliPair_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliCodeTimercLcLAliPair(void *p = 0);
   static void *newArray_AliCodeTimercLcLAliPair(Long_t size, void *p);
   static void delete_AliCodeTimercLcLAliPair(void *p);
   static void deleteArray_AliCodeTimercLcLAliPair(void *p);
   static void destruct_AliCodeTimercLcLAliPair(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliCodeTimer::AliPair*)
   {
      ::AliCodeTimer::AliPair *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliCodeTimer::AliPair >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliCodeTimer::AliPair", ::AliCodeTimer::AliPair::Class_Version(), "./AliCodeTimer.h", 61,
                  typeid(::AliCodeTimer::AliPair), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliCodeTimer::AliPair::Dictionary, isa_proxy, 4,
                  sizeof(::AliCodeTimer::AliPair) );
      instance.SetNew(&new_AliCodeTimercLcLAliPair);
      instance.SetNewArray(&newArray_AliCodeTimercLcLAliPair);
      instance.SetDelete(&delete_AliCodeTimercLcLAliPair);
      instance.SetDeleteArray(&deleteArray_AliCodeTimercLcLAliPair);
      instance.SetDestructor(&destruct_AliCodeTimercLcLAliPair);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliCodeTimer::AliPair*)
   {
      return GenerateInitInstanceLocal((::AliCodeTimer::AliPair*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliCodeTimer::AliPair*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliCollisionGeometry_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliCollisionGeometry(void *p = 0);
   static void *newArray_AliCollisionGeometry(Long_t size, void *p);
   static void delete_AliCollisionGeometry(void *p);
   static void deleteArray_AliCollisionGeometry(void *p);
   static void destruct_AliCollisionGeometry(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliCollisionGeometry*)
   {
      ::AliCollisionGeometry *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliCollisionGeometry >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliCollisionGeometry", ::AliCollisionGeometry::Class_Version(), "./AliCollisionGeometry.h", 16,
                  typeid(::AliCollisionGeometry), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliCollisionGeometry::Dictionary, isa_proxy, 4,
                  sizeof(::AliCollisionGeometry) );
      instance.SetNew(&new_AliCollisionGeometry);
      instance.SetNewArray(&newArray_AliCollisionGeometry);
      instance.SetDelete(&delete_AliCollisionGeometry);
      instance.SetDeleteArray(&deleteArray_AliCollisionGeometry);
      instance.SetDestructor(&destruct_AliCollisionGeometry);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliCollisionGeometry*)
   {
      return GenerateInitInstanceLocal((::AliCollisionGeometry*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliCollisionGeometry*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliCounterCollection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliCounterCollection(void *p = 0);
   static void *newArray_AliCounterCollection(Long_t size, void *p);
   static void delete_AliCounterCollection(void *p);
   static void deleteArray_AliCounterCollection(void *p);
   static void destruct_AliCounterCollection(void *p);
   static Long64_t merge_AliCounterCollection(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliCounterCollection*)
   {
      ::AliCounterCollection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliCounterCollection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliCounterCollection", ::AliCounterCollection::Class_Version(), "./AliCounterCollection.h", 24,
                  typeid(::AliCounterCollection), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliCounterCollection::Dictionary, isa_proxy, 4,
                  sizeof(::AliCounterCollection) );
      instance.SetNew(&new_AliCounterCollection);
      instance.SetNewArray(&newArray_AliCounterCollection);
      instance.SetDelete(&delete_AliCounterCollection);
      instance.SetDeleteArray(&deleteArray_AliCounterCollection);
      instance.SetDestructor(&destruct_AliCounterCollection);
      instance.SetMerge(&merge_AliCounterCollection);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliCounterCollection*)
   {
      return GenerateInitInstanceLocal((::AliCounterCollection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliCounterCollection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliDAQ_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliDAQ(void *p = 0);
   static void *newArray_AliDAQ(Long_t size, void *p);
   static void delete_AliDAQ(void *p);
   static void deleteArray_AliDAQ(void *p);
   static void destruct_AliDAQ(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliDAQ*)
   {
      ::AliDAQ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliDAQ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliDAQ", ::AliDAQ::Class_Version(), "./AliDAQ.h", 31,
                  typeid(::AliDAQ), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliDAQ::Dictionary, isa_proxy, 4,
                  sizeof(::AliDAQ) );
      instance.SetNew(&new_AliDAQ);
      instance.SetNewArray(&newArray_AliDAQ);
      instance.SetDelete(&delete_AliDAQ);
      instance.SetDeleteArray(&deleteArray_AliDAQ);
      instance.SetDestructor(&destruct_AliDAQ);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliDAQ*)
   {
      return GenerateInitInstanceLocal((::AliDAQ*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliDAQ*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliDataFile_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliDataFile(void *p = 0);
   static void *newArray_AliDataFile(Long_t size, void *p);
   static void delete_AliDataFile(void *p);
   static void deleteArray_AliDataFile(void *p);
   static void destruct_AliDataFile(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliDataFile*)
   {
      ::AliDataFile *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliDataFile >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliDataFile", ::AliDataFile::Class_Version(), "./AliDataFile.h", 6,
                  typeid(::AliDataFile), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliDataFile::Dictionary, isa_proxy, 4,
                  sizeof(::AliDataFile) );
      instance.SetNew(&new_AliDataFile);
      instance.SetNewArray(&newArray_AliDataFile);
      instance.SetDelete(&delete_AliDataFile);
      instance.SetDeleteArray(&deleteArray_AliDataFile);
      instance.SetDestructor(&destruct_AliDataFile);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliDataFile*)
   {
      return GenerateInitInstanceLocal((::AliDataFile*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliDataFile*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliDetectorEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliDetectorEventHeader(void *p = 0);
   static void *newArray_AliDetectorEventHeader(Long_t size, void *p);
   static void delete_AliDetectorEventHeader(void *p);
   static void deleteArray_AliDetectorEventHeader(void *p);
   static void destruct_AliDetectorEventHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliDetectorEventHeader*)
   {
      ::AliDetectorEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliDetectorEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliDetectorEventHeader", ::AliDetectorEventHeader::Class_Version(), "./AliDetectorEventHeader.h", 17,
                  typeid(::AliDetectorEventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliDetectorEventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliDetectorEventHeader) );
      instance.SetNew(&new_AliDetectorEventHeader);
      instance.SetNewArray(&newArray_AliDetectorEventHeader);
      instance.SetDelete(&delete_AliDetectorEventHeader);
      instance.SetDeleteArray(&deleteArray_AliDetectorEventHeader);
      instance.SetDestructor(&destruct_AliDetectorEventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliDetectorEventHeader*)
   {
      return GenerateInitInstanceLocal((::AliDetectorEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliDetectorEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliPID_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliPID(void *p = 0);
   static void *newArray_AliPID(Long_t size, void *p);
   static void delete_AliPID(void *p);
   static void deleteArray_AliPID(void *p);
   static void destruct_AliPID(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliPID*)
   {
      ::AliPID *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliPID >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliPID", ::AliPID::Class_Version(), "./AliPID.h", 19,
                  typeid(::AliPID), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliPID::Dictionary, isa_proxy, 4,
                  sizeof(::AliPID) );
      instance.SetNew(&new_AliPID);
      instance.SetNewArray(&newArray_AliPID);
      instance.SetDelete(&delete_AliPID);
      instance.SetDeleteArray(&deleteArray_AliPID);
      instance.SetDestructor(&destruct_AliPID);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliPID*)
   {
      return GenerateInitInstanceLocal((::AliPID*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliPID*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVParticle(void *p);
   static void deleteArray_AliVParticle(void *p);
   static void destruct_AliVParticle(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVParticle*)
   {
      ::AliVParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVParticle", ::AliVParticle::Class_Version(), "./AliVParticle.h", 25,
                  typeid(::AliVParticle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVParticle::Dictionary, isa_proxy, 4,
                  sizeof(::AliVParticle) );
      instance.SetDelete(&delete_AliVParticle);
      instance.SetDeleteArray(&deleteArray_AliVParticle);
      instance.SetDestructor(&destruct_AliVParticle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVParticle*)
   {
      return GenerateInitInstanceLocal((::AliVParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVEvent(void *p);
   static void deleteArray_AliVEvent(void *p);
   static void destruct_AliVEvent(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVEvent*)
   {
      ::AliVEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVEvent", ::AliVEvent::Class_Version(), "./AliVEvent.h", 43,
                  typeid(::AliVEvent), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVEvent::Dictionary, isa_proxy, 4,
                  sizeof(::AliVEvent) );
      instance.SetDelete(&delete_AliVEvent);
      instance.SetDeleteArray(&deleteArray_AliVEvent);
      instance.SetDestructor(&destruct_AliVEvent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVEvent*)
   {
      return GenerateInitInstanceLocal((::AliVEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVVertex(void *p);
   static void deleteArray_AliVVertex(void *p);
   static void destruct_AliVVertex(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVVertex*)
   {
      ::AliVVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVVertex", ::AliVVertex::Class_Version(), "./AliVVertex.h", 13,
                  typeid(::AliVVertex), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVVertex::Dictionary, isa_proxy, 4,
                  sizeof(::AliVVertex) );
      instance.SetDelete(&delete_AliVVertex);
      instance.SetDeleteArray(&deleteArray_AliVVertex);
      instance.SetDestructor(&destruct_AliVVertex);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVVertex*)
   {
      return GenerateInitInstanceLocal((::AliVVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliExternalTrackParam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliExternalTrackParam(void *p = 0);
   static void *newArray_AliExternalTrackParam(Long_t size, void *p);
   static void delete_AliExternalTrackParam(void *p);
   static void deleteArray_AliExternalTrackParam(void *p);
   static void destruct_AliExternalTrackParam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliExternalTrackParam*)
   {
      ::AliExternalTrackParam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliExternalTrackParam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliExternalTrackParam", ::AliExternalTrackParam::Class_Version(), "./AliExternalTrackParam.h", 37,
                  typeid(::AliExternalTrackParam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliExternalTrackParam::Dictionary, isa_proxy, 4,
                  sizeof(::AliExternalTrackParam) );
      instance.SetNew(&new_AliExternalTrackParam);
      instance.SetNewArray(&newArray_AliExternalTrackParam);
      instance.SetDelete(&delete_AliExternalTrackParam);
      instance.SetDeleteArray(&deleteArray_AliExternalTrackParam);
      instance.SetDestructor(&destruct_AliExternalTrackParam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliExternalTrackParam*)
   {
      return GenerateInitInstanceLocal((::AliExternalTrackParam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliExternalTrackParam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTPCdEdxInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTPCdEdxInfo(void *p = 0);
   static void *newArray_AliTPCdEdxInfo(Long_t size, void *p);
   static void delete_AliTPCdEdxInfo(void *p);
   static void deleteArray_AliTPCdEdxInfo(void *p);
   static void destruct_AliTPCdEdxInfo(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTPCdEdxInfo*)
   {
      ::AliTPCdEdxInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTPCdEdxInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTPCdEdxInfo", ::AliTPCdEdxInfo::Class_Version(), "./AliTPCdEdxInfo.h", 10,
                  typeid(::AliTPCdEdxInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTPCdEdxInfo::Dictionary, isa_proxy, 4,
                  sizeof(::AliTPCdEdxInfo) );
      instance.SetNew(&new_AliTPCdEdxInfo);
      instance.SetNewArray(&newArray_AliTPCdEdxInfo);
      instance.SetDelete(&delete_AliTPCdEdxInfo);
      instance.SetDeleteArray(&deleteArray_AliTPCdEdxInfo);
      instance.SetDestructor(&destruct_AliTPCdEdxInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTPCdEdxInfo*)
   {
      return GenerateInitInstanceLocal((::AliTPCdEdxInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTPCdEdxInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliDetectorPID_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliDetectorPID(void *p = 0);
   static void *newArray_AliDetectorPID(Long_t size, void *p);
   static void delete_AliDetectorPID(void *p);
   static void deleteArray_AliDetectorPID(void *p);
   static void destruct_AliDetectorPID(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliDetectorPID*)
   {
      ::AliDetectorPID *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliDetectorPID >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliDetectorPID", ::AliDetectorPID::Class_Version(), "./AliDetectorPID.h", 20,
                  typeid(::AliDetectorPID), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliDetectorPID::Dictionary, isa_proxy, 4,
                  sizeof(::AliDetectorPID) );
      instance.SetNew(&new_AliDetectorPID);
      instance.SetNewArray(&newArray_AliDetectorPID);
      instance.SetDelete(&delete_AliDetectorPID);
      instance.SetDeleteArray(&deleteArray_AliDetectorPID);
      instance.SetDestructor(&destruct_AliDetectorPID);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliDetectorPID*)
   {
      return GenerateInitInstanceLocal((::AliDetectorPID*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliDetectorPID*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTOFHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTOFHeader(void *p = 0);
   static void *newArray_AliTOFHeader(Long_t size, void *p);
   static void delete_AliTOFHeader(void *p);
   static void deleteArray_AliTOFHeader(void *p);
   static void destruct_AliTOFHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTOFHeader*)
   {
      ::AliTOFHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTOFHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTOFHeader", ::AliTOFHeader::Class_Version(), "./AliTOFHeader.h", 32,
                  typeid(::AliTOFHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTOFHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliTOFHeader) );
      instance.SetNew(&new_AliTOFHeader);
      instance.SetNewArray(&newArray_AliTOFHeader);
      instance.SetDelete(&delete_AliTOFHeader);
      instance.SetDeleteArray(&deleteArray_AliTOFHeader);
      instance.SetDestructor(&destruct_AliTOFHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTOFHeader*)
   {
      return GenerateInitInstanceLocal((::AliTOFHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTOFHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVTrack(void *p);
   static void deleteArray_AliVTrack(void *p);
   static void destruct_AliVTrack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVTrack*)
   {
      ::AliVTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVTrack", ::AliVTrack::Class_Version(), "./AliVTrack.h", 27,
                  typeid(::AliVTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVTrack::Dictionary, isa_proxy, 4,
                  sizeof(::AliVTrack) );
      instance.SetDelete(&delete_AliVTrack);
      instance.SetDeleteArray(&deleteArray_AliVTrack);
      instance.SetDestructor(&destruct_AliVTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVTrack*)
   {
      return GenerateInitInstanceLocal((::AliVTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliITSPidParams_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliITSPidParams(void *p = 0);
   static void *newArray_AliITSPidParams(Long_t size, void *p);
   static void delete_AliITSPidParams(void *p);
   static void deleteArray_AliITSPidParams(void *p);
   static void destruct_AliITSPidParams(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliITSPidParams*)
   {
      ::AliITSPidParams *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliITSPidParams >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliITSPidParams", ::AliITSPidParams::Class_Version(), "./AliITSPidParams.h", 21,
                  typeid(::AliITSPidParams), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliITSPidParams::Dictionary, isa_proxy, 4,
                  sizeof(::AliITSPidParams) );
      instance.SetNew(&new_AliITSPidParams);
      instance.SetNewArray(&newArray_AliITSPidParams);
      instance.SetDelete(&delete_AliITSPidParams);
      instance.SetDeleteArray(&deleteArray_AliITSPidParams);
      instance.SetDestructor(&destruct_AliITSPidParams);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliITSPidParams*)
   {
      return GenerateInitInstanceLocal((::AliITSPidParams*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliITSPidParams*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliITSPIDResponse_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliITSPIDResponse(void *p = 0);
   static void *newArray_AliITSPIDResponse(Long_t size, void *p);
   static void delete_AliITSPIDResponse(void *p);
   static void deleteArray_AliITSPIDResponse(void *p);
   static void destruct_AliITSPIDResponse(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliITSPIDResponse*)
   {
      ::AliITSPIDResponse *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliITSPIDResponse >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliITSPIDResponse", ::AliITSPIDResponse::Class_Version(), "./AliITSPIDResponse.h", 20,
                  typeid(::AliITSPIDResponse), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliITSPIDResponse::Dictionary, isa_proxy, 4,
                  sizeof(::AliITSPIDResponse) );
      instance.SetNew(&new_AliITSPIDResponse);
      instance.SetNewArray(&newArray_AliITSPIDResponse);
      instance.SetDelete(&delete_AliITSPIDResponse);
      instance.SetDeleteArray(&deleteArray_AliITSPIDResponse);
      instance.SetDestructor(&destruct_AliITSPIDResponse);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliITSPIDResponse*)
   {
      return GenerateInitInstanceLocal((::AliITSPIDResponse*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliITSPIDResponse*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliOADBContainer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliOADBContainer(void *p = 0);
   static void *newArray_AliOADBContainer(Long_t size, void *p);
   static void delete_AliOADBContainer(void *p);
   static void deleteArray_AliOADBContainer(void *p);
   static void destruct_AliOADBContainer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliOADBContainer*)
   {
      ::AliOADBContainer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliOADBContainer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliOADBContainer", ::AliOADBContainer::Class_Version(), "./AliOADBContainer.h", 21,
                  typeid(::AliOADBContainer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliOADBContainer::Dictionary, isa_proxy, 4,
                  sizeof(::AliOADBContainer) );
      instance.SetNew(&new_AliOADBContainer);
      instance.SetNewArray(&newArray_AliOADBContainer);
      instance.SetDelete(&delete_AliOADBContainer);
      instance.SetDeleteArray(&deleteArray_AliOADBContainer);
      instance.SetDestructor(&destruct_AliOADBContainer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliOADBContainer*)
   {
      return GenerateInitInstanceLocal((::AliOADBContainer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliOADBContainer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTPCPIDResponse_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTPCPIDResponse(void *p = 0);
   static void *newArray_AliTPCPIDResponse(Long_t size, void *p);
   static void delete_AliTPCPIDResponse(void *p);
   static void deleteArray_AliTPCPIDResponse(void *p);
   static void destruct_AliTPCPIDResponse(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTPCPIDResponse*)
   {
      ::AliTPCPIDResponse *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTPCPIDResponse >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTPCPIDResponse", ::AliTPCPIDResponse::Class_Version(), "./AliTPCPIDResponse.h", 33,
                  typeid(::AliTPCPIDResponse), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTPCPIDResponse::Dictionary, isa_proxy, 4,
                  sizeof(::AliTPCPIDResponse) );
      instance.SetNew(&new_AliTPCPIDResponse);
      instance.SetNewArray(&newArray_AliTPCPIDResponse);
      instance.SetDelete(&delete_AliTPCPIDResponse);
      instance.SetDeleteArray(&deleteArray_AliTPCPIDResponse);
      instance.SetDestructor(&destruct_AliTPCPIDResponse);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTPCPIDResponse*)
   {
      return GenerateInitInstanceLocal((::AliTPCPIDResponse*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTPCPIDResponse*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTRDPIDResponseObject_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTRDPIDResponseObject(void *p = 0);
   static void *newArray_AliTRDPIDResponseObject(Long_t size, void *p);
   static void delete_AliTRDPIDResponseObject(void *p);
   static void deleteArray_AliTRDPIDResponseObject(void *p);
   static void destruct_AliTRDPIDResponseObject(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTRDPIDResponseObject*)
   {
      ::AliTRDPIDResponseObject *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTRDPIDResponseObject >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTRDPIDResponseObject", ::AliTRDPIDResponseObject::Class_Version(), "./AliTRDPIDResponseObject.h", 34,
                  typeid(::AliTRDPIDResponseObject), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTRDPIDResponseObject::Dictionary, isa_proxy, 4,
                  sizeof(::AliTRDPIDResponseObject) );
      instance.SetNew(&new_AliTRDPIDResponseObject);
      instance.SetNewArray(&newArray_AliTRDPIDResponseObject);
      instance.SetDelete(&delete_AliTRDPIDResponseObject);
      instance.SetDeleteArray(&deleteArray_AliTRDPIDResponseObject);
      instance.SetDestructor(&destruct_AliTRDPIDResponseObject);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTRDPIDResponseObject*)
   {
      return GenerateInitInstanceLocal((::AliTRDPIDResponseObject*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTRDPIDResponseObject*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTRDdEdxParams_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTRDdEdxParams(void *p = 0);
   static void *newArray_AliTRDdEdxParams(Long_t size, void *p);
   static void delete_AliTRDdEdxParams(void *p);
   static void deleteArray_AliTRDdEdxParams(void *p);
   static void destruct_AliTRDdEdxParams(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTRDdEdxParams*)
   {
      ::AliTRDdEdxParams *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTRDdEdxParams >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTRDdEdxParams", ::AliTRDdEdxParams::Class_Version(), "./AliTRDdEdxParams.h", 34,
                  typeid(::AliTRDdEdxParams), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTRDdEdxParams::Dictionary, isa_proxy, 4,
                  sizeof(::AliTRDdEdxParams) );
      instance.SetNew(&new_AliTRDdEdxParams);
      instance.SetNewArray(&newArray_AliTRDdEdxParams);
      instance.SetDelete(&delete_AliTRDdEdxParams);
      instance.SetDeleteArray(&deleteArray_AliTRDdEdxParams);
      instance.SetDestructor(&destruct_AliTRDdEdxParams);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTRDdEdxParams*)
   {
      return GenerateInitInstanceLocal((::AliTRDdEdxParams*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTRDdEdxParams*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTRDPIDResponse_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTRDPIDResponse(void *p = 0);
   static void *newArray_AliTRDPIDResponse(Long_t size, void *p);
   static void delete_AliTRDPIDResponse(void *p);
   static void deleteArray_AliTRDPIDResponse(void *p);
   static void destruct_AliTRDPIDResponse(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTRDPIDResponse*)
   {
      ::AliTRDPIDResponse *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTRDPIDResponse >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTRDPIDResponse", ::AliTRDPIDResponse::Class_Version(), "./AliTRDPIDResponse.h", 38,
                  typeid(::AliTRDPIDResponse), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTRDPIDResponse::Dictionary, isa_proxy, 4,
                  sizeof(::AliTRDPIDResponse) );
      instance.SetNew(&new_AliTRDPIDResponse);
      instance.SetNewArray(&newArray_AliTRDPIDResponse);
      instance.SetDelete(&delete_AliTRDPIDResponse);
      instance.SetDeleteArray(&deleteArray_AliTRDPIDResponse);
      instance.SetDestructor(&destruct_AliTRDPIDResponse);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTRDPIDResponse*)
   {
      return GenerateInitInstanceLocal((::AliTRDPIDResponse*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTRDPIDResponse*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTOFPIDParams_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTOFPIDParams(void *p = 0);
   static void *newArray_AliTOFPIDParams(Long_t size, void *p);
   static void delete_AliTOFPIDParams(void *p);
   static void deleteArray_AliTOFPIDParams(void *p);
   static void destruct_AliTOFPIDParams(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTOFPIDParams*)
   {
      ::AliTOFPIDParams *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTOFPIDParams >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTOFPIDParams", ::AliTOFPIDParams::Class_Version(), "./AliTOFPIDParams.h", 16,
                  typeid(::AliTOFPIDParams), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTOFPIDParams::Dictionary, isa_proxy, 4,
                  sizeof(::AliTOFPIDParams) );
      instance.SetNew(&new_AliTOFPIDParams);
      instance.SetNewArray(&newArray_AliTOFPIDParams);
      instance.SetDelete(&delete_AliTOFPIDParams);
      instance.SetDeleteArray(&deleteArray_AliTOFPIDParams);
      instance.SetDestructor(&destruct_AliTOFPIDParams);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTOFPIDParams*)
   {
      return GenerateInitInstanceLocal((::AliTOFPIDParams*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTOFPIDParams*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTOFPIDResponse_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTOFPIDResponse(void *p = 0);
   static void *newArray_AliTOFPIDResponse(Long_t size, void *p);
   static void delete_AliTOFPIDResponse(void *p);
   static void deleteArray_AliTOFPIDResponse(void *p);
   static void destruct_AliTOFPIDResponse(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTOFPIDResponse*)
   {
      ::AliTOFPIDResponse *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTOFPIDResponse >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTOFPIDResponse", ::AliTOFPIDResponse::Class_Version(), "./AliTOFPIDResponse.h", 22,
                  typeid(::AliTOFPIDResponse), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTOFPIDResponse::Dictionary, isa_proxy, 4,
                  sizeof(::AliTOFPIDResponse) );
      instance.SetNew(&new_AliTOFPIDResponse);
      instance.SetNewArray(&newArray_AliTOFPIDResponse);
      instance.SetDelete(&delete_AliTOFPIDResponse);
      instance.SetDeleteArray(&deleteArray_AliTOFPIDResponse);
      instance.SetDestructor(&destruct_AliTOFPIDResponse);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTOFPIDResponse*)
   {
      return GenerateInitInstanceLocal((::AliTOFPIDResponse*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTOFPIDResponse*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliHMPIDPIDResponse_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliHMPIDPIDResponse(void *p = 0);
   static void *newArray_AliHMPIDPIDResponse(Long_t size, void *p);
   static void delete_AliHMPIDPIDResponse(void *p);
   static void deleteArray_AliHMPIDPIDResponse(void *p);
   static void destruct_AliHMPIDPIDResponse(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliHMPIDPIDResponse*)
   {
      ::AliHMPIDPIDResponse *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliHMPIDPIDResponse >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliHMPIDPIDResponse", ::AliHMPIDPIDResponse::Class_Version(), "./AliHMPIDPIDResponse.h", 27,
                  typeid(::AliHMPIDPIDResponse), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliHMPIDPIDResponse::Dictionary, isa_proxy, 4,
                  sizeof(::AliHMPIDPIDResponse) );
      instance.SetNew(&new_AliHMPIDPIDResponse);
      instance.SetNewArray(&newArray_AliHMPIDPIDResponse);
      instance.SetDelete(&delete_AliHMPIDPIDResponse);
      instance.SetDeleteArray(&deleteArray_AliHMPIDPIDResponse);
      instance.SetDestructor(&destruct_AliHMPIDPIDResponse);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliHMPIDPIDResponse*)
   {
      return GenerateInitInstanceLocal((::AliHMPIDPIDResponse*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliHMPIDPIDResponse*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliEMCALPIDResponse_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliEMCALPIDResponse(void *p = 0);
   static void *newArray_AliEMCALPIDResponse(Long_t size, void *p);
   static void delete_AliEMCALPIDResponse(void *p);
   static void deleteArray_AliEMCALPIDResponse(void *p);
   static void destruct_AliEMCALPIDResponse(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliEMCALPIDResponse*)
   {
      ::AliEMCALPIDResponse *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliEMCALPIDResponse >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliEMCALPIDResponse", ::AliEMCALPIDResponse::Class_Version(), "./AliEMCALPIDResponse.h", 23,
                  typeid(::AliEMCALPIDResponse), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliEMCALPIDResponse::Dictionary, isa_proxy, 4,
                  sizeof(::AliEMCALPIDResponse) );
      instance.SetNew(&new_AliEMCALPIDResponse);
      instance.SetNewArray(&newArray_AliEMCALPIDResponse);
      instance.SetDelete(&delete_AliEMCALPIDResponse);
      instance.SetDeleteArray(&deleteArray_AliEMCALPIDResponse);
      instance.SetDestructor(&destruct_AliEMCALPIDResponse);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliEMCALPIDResponse*)
   {
      return GenerateInitInstanceLocal((::AliEMCALPIDResponse*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliEMCALPIDResponse*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliMCEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliMCEvent(void *p = 0);
   static void *newArray_AliMCEvent(Long_t size, void *p);
   static void delete_AliMCEvent(void *p);
   static void deleteArray_AliMCEvent(void *p);
   static void destruct_AliMCEvent(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliMCEvent*)
   {
      ::AliMCEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliMCEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliMCEvent", ::AliMCEvent::Class_Version(), "./AliMCEvent.h", 36,
                  typeid(::AliMCEvent), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliMCEvent::Dictionary, isa_proxy, 4,
                  sizeof(::AliMCEvent) );
      instance.SetNew(&new_AliMCEvent);
      instance.SetNewArray(&newArray_AliMCEvent);
      instance.SetDelete(&delete_AliMCEvent);
      instance.SetDeleteArray(&deleteArray_AliMCEvent);
      instance.SetDestructor(&destruct_AliMCEvent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliMCEvent*)
   {
      return GenerateInitInstanceLocal((::AliMCEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliMCEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliHMPIDPIDParams_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliHMPIDPIDParams(void *p = 0);
   static void *newArray_AliHMPIDPIDParams(Long_t size, void *p);
   static void delete_AliHMPIDPIDParams(void *p);
   static void deleteArray_AliHMPIDPIDParams(void *p);
   static void destruct_AliHMPIDPIDParams(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliHMPIDPIDParams*)
   {
      ::AliHMPIDPIDParams *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliHMPIDPIDParams >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliHMPIDPIDParams", ::AliHMPIDPIDParams::Class_Version(), "./AliHMPIDPIDParams.h", 16,
                  typeid(::AliHMPIDPIDParams), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliHMPIDPIDParams::Dictionary, isa_proxy, 4,
                  sizeof(::AliHMPIDPIDParams) );
      instance.SetNew(&new_AliHMPIDPIDParams);
      instance.SetNewArray(&newArray_AliHMPIDPIDParams);
      instance.SetDelete(&delete_AliHMPIDPIDParams);
      instance.SetDeleteArray(&deleteArray_AliHMPIDPIDParams);
      instance.SetDestructor(&destruct_AliHMPIDPIDParams);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliHMPIDPIDParams*)
   {
      return GenerateInitInstanceLocal((::AliHMPIDPIDParams*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliHMPIDPIDParams*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliPIDResponse_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliPIDResponse(void *p = 0);
   static void *newArray_AliPIDResponse(Long_t size, void *p);
   static void delete_AliPIDResponse(void *p);
   static void deleteArray_AliPIDResponse(void *p);
   static void destruct_AliPIDResponse(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliPIDResponse*)
   {
      ::AliPIDResponse *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliPIDResponse >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliPIDResponse", ::AliPIDResponse::Class_Version(), "./AliPIDResponse.h", 39,
                  typeid(::AliPIDResponse), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliPIDResponse::Dictionary, isa_proxy, 4,
                  sizeof(::AliPIDResponse) );
      instance.SetNew(&new_AliPIDResponse);
      instance.SetNewArray(&newArray_AliPIDResponse);
      instance.SetDelete(&delete_AliPIDResponse);
      instance.SetDeleteArray(&deleteArray_AliPIDResponse);
      instance.SetDestructor(&destruct_AliPIDResponse);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliPIDResponse*)
   {
      return GenerateInitInstanceLocal((::AliPIDResponse*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliPIDResponse*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliDetectorTag_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliDetectorTag(void *p = 0);
   static void *newArray_AliDetectorTag(Long_t size, void *p);
   static void delete_AliDetectorTag(void *p);
   static void deleteArray_AliDetectorTag(void *p);
   static void destruct_AliDetectorTag(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliDetectorTag*)
   {
      ::AliDetectorTag *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliDetectorTag >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliDetectorTag", ::AliDetectorTag::Class_Version(), "./AliDetectorTag.h", 21,
                  typeid(::AliDetectorTag), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliDetectorTag::Dictionary, isa_proxy, 4,
                  sizeof(::AliDetectorTag) );
      instance.SetNew(&new_AliDetectorTag);
      instance.SetNewArray(&newArray_AliDetectorTag);
      instance.SetDelete(&delete_AliDetectorTag);
      instance.SetDeleteArray(&deleteArray_AliDetectorTag);
      instance.SetDestructor(&destruct_AliDetectorTag);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliDetectorTag*)
   {
      return GenerateInitInstanceLocal((::AliDetectorTag*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliDetectorTag*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliDetectorTagCuts_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliDetectorTagCuts(void *p = 0);
   static void *newArray_AliDetectorTagCuts(Long_t size, void *p);
   static void delete_AliDetectorTagCuts(void *p);
   static void deleteArray_AliDetectorTagCuts(void *p);
   static void destruct_AliDetectorTagCuts(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliDetectorTagCuts*)
   {
      ::AliDetectorTagCuts *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliDetectorTagCuts >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliDetectorTagCuts", ::AliDetectorTagCuts::Class_Version(), "./AliDetectorTagCuts.h", 22,
                  typeid(::AliDetectorTagCuts), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliDetectorTagCuts::Dictionary, isa_proxy, 4,
                  sizeof(::AliDetectorTagCuts) );
      instance.SetNew(&new_AliDetectorTagCuts);
      instance.SetNewArray(&newArray_AliDetectorTagCuts);
      instance.SetDelete(&delete_AliDetectorTagCuts);
      instance.SetDeleteArray(&deleteArray_AliDetectorTagCuts);
      instance.SetDestructor(&destruct_AliDetectorTagCuts);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliDetectorTagCuts*)
   {
      return GenerateInitInstanceLocal((::AliDetectorTagCuts*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliDetectorTagCuts*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVfriendEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVfriendEvent(void *p);
   static void deleteArray_AliVfriendEvent(void *p);
   static void destruct_AliVfriendEvent(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVfriendEvent*)
   {
      ::AliVfriendEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVfriendEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVfriendEvent", ::AliVfriendEvent::Class_Version(), "./AliVfriendEvent.h", 12,
                  typeid(::AliVfriendEvent), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVfriendEvent::Dictionary, isa_proxy, 4,
                  sizeof(::AliVfriendEvent) );
      instance.SetDelete(&delete_AliVfriendEvent);
      instance.SetDeleteArray(&deleteArray_AliVfriendEvent);
      instance.SetDestructor(&destruct_AliVfriendEvent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVfriendEvent*)
   {
      return GenerateInitInstanceLocal((::AliVfriendEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVfriendEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVEventHandler_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVEventHandler(void *p);
   static void deleteArray_AliVEventHandler(void *p);
   static void destruct_AliVEventHandler(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVEventHandler*)
   {
      ::AliVEventHandler *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVEventHandler >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVEventHandler", ::AliVEventHandler::Class_Version(), "./AliVEventHandler.h", 20,
                  typeid(::AliVEventHandler), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVEventHandler::Dictionary, isa_proxy, 4,
                  sizeof(::AliVEventHandler) );
      instance.SetDelete(&delete_AliVEventHandler);
      instance.SetDeleteArray(&deleteArray_AliVEventHandler);
      instance.SetDestructor(&destruct_AliVEventHandler);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVEventHandler*)
   {
      return GenerateInitInstanceLocal((::AliVEventHandler*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVEventHandler*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVCuts_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVCuts(void *p);
   static void deleteArray_AliVCuts(void *p);
   static void destruct_AliVCuts(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVCuts*)
   {
      ::AliVCuts *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVCuts >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVCuts", ::AliVCuts::Class_Version(), "./AliVCuts.h", 15,
                  typeid(::AliVCuts), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVCuts::Dictionary, isa_proxy, 4,
                  sizeof(::AliVCuts) );
      instance.SetDelete(&delete_AliVCuts);
      instance.SetDeleteArray(&deleteArray_AliVCuts);
      instance.SetDestructor(&destruct_AliVCuts);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVCuts*)
   {
      return GenerateInitInstanceLocal((::AliVCuts*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVCuts*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliRunTag_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliRunTag(void *p = 0);
   static void *newArray_AliRunTag(Long_t size, void *p);
   static void delete_AliRunTag(void *p);
   static void deleteArray_AliRunTag(void *p);
   static void destruct_AliRunTag(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliRunTag*)
   {
      ::AliRunTag *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliRunTag >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliRunTag", ::AliRunTag::Class_Version(), "./AliRunTag.h", 29,
                  typeid(::AliRunTag), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliRunTag::Dictionary, isa_proxy, 4,
                  sizeof(::AliRunTag) );
      instance.SetNew(&new_AliRunTag);
      instance.SetNewArray(&newArray_AliRunTag);
      instance.SetDelete(&delete_AliRunTag);
      instance.SetDeleteArray(&deleteArray_AliRunTag);
      instance.SetDestructor(&destruct_AliRunTag);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliRunTag*)
   {
      return GenerateInitInstanceLocal((::AliRunTag*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliRunTag*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliEventTag_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliEventTag(void *p = 0);
   static void *newArray_AliEventTag(Long_t size, void *p);
   static void delete_AliEventTag(void *p);
   static void deleteArray_AliEventTag(void *p);
   static void destruct_AliEventTag(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliEventTag*)
   {
      ::AliEventTag *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliEventTag >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliEventTag", ::AliEventTag::Class_Version(), "./AliEventTag.h", 20,
                  typeid(::AliEventTag), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliEventTag::Dictionary, isa_proxy, 4,
                  sizeof(::AliEventTag) );
      instance.SetNew(&new_AliEventTag);
      instance.SetNewArray(&newArray_AliEventTag);
      instance.SetDelete(&delete_AliEventTag);
      instance.SetDeleteArray(&deleteArray_AliEventTag);
      instance.SetDestructor(&destruct_AliEventTag);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliEventTag*)
   {
      return GenerateInitInstanceLocal((::AliEventTag*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliEventTag*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliInputEventHandler_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliInputEventHandler(void *p = 0);
   static void *newArray_AliInputEventHandler(Long_t size, void *p);
   static void delete_AliInputEventHandler(void *p);
   static void deleteArray_AliInputEventHandler(void *p);
   static void destruct_AliInputEventHandler(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliInputEventHandler*)
   {
      ::AliInputEventHandler *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliInputEventHandler >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliInputEventHandler", ::AliInputEventHandler::Class_Version(), "./AliInputEventHandler.h", 23,
                  typeid(::AliInputEventHandler), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliInputEventHandler::Dictionary, isa_proxy, 4,
                  sizeof(::AliInputEventHandler) );
      instance.SetNew(&new_AliInputEventHandler);
      instance.SetNewArray(&newArray_AliInputEventHandler);
      instance.SetDelete(&delete_AliInputEventHandler);
      instance.SetDeleteArray(&deleteArray_AliInputEventHandler);
      instance.SetDestructor(&destruct_AliInputEventHandler);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliInputEventHandler*)
   {
      return GenerateInitInstanceLocal((::AliInputEventHandler*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliInputEventHandler*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliDummyHandler_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliDummyHandler(void *p = 0);
   static void *newArray_AliDummyHandler(Long_t size, void *p);
   static void delete_AliDummyHandler(void *p);
   static void deleteArray_AliDummyHandler(void *p);
   static void destruct_AliDummyHandler(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliDummyHandler*)
   {
      ::AliDummyHandler *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliDummyHandler >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliDummyHandler", ::AliDummyHandler::Class_Version(), "./AliDummyHandler.h", 15,
                  typeid(::AliDummyHandler), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliDummyHandler::Dictionary, isa_proxy, 4,
                  sizeof(::AliDummyHandler) );
      instance.SetNew(&new_AliDummyHandler);
      instance.SetNewArray(&newArray_AliDummyHandler);
      instance.SetDelete(&delete_AliDummyHandler);
      instance.SetDeleteArray(&deleteArray_AliDummyHandler);
      instance.SetDestructor(&destruct_AliDummyHandler);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliDummyHandler*)
   {
      return GenerateInitInstanceLocal((::AliDummyHandler*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliDummyHandler*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliEventplane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliEventplane(void *p = 0);
   static void *newArray_AliEventplane(Long_t size, void *p);
   static void delete_AliEventplane(void *p);
   static void deleteArray_AliEventplane(void *p);
   static void destruct_AliEventplane(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliEventplane*)
   {
      ::AliEventplane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliEventplane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliEventplane", ::AliEventplane::Class_Version(), "./AliEventplane.h", 21,
                  typeid(::AliEventplane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliEventplane::Dictionary, isa_proxy, 4,
                  sizeof(::AliEventplane) );
      instance.SetNew(&new_AliEventplane);
      instance.SetNewArray(&newArray_AliEventplane);
      instance.SetDelete(&delete_AliEventplane);
      instance.SetDeleteArray(&deleteArray_AliEventplane);
      instance.SetDestructor(&destruct_AliEventplane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliEventplane*)
   {
      return GenerateInitInstanceLocal((::AliEventplane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliEventplane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliEventTagCuts_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliEventTagCuts(void *p = 0);
   static void *newArray_AliEventTagCuts(Long_t size, void *p);
   static void delete_AliEventTagCuts(void *p);
   static void deleteArray_AliEventTagCuts(void *p);
   static void destruct_AliEventTagCuts(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliEventTagCuts*)
   {
      ::AliEventTagCuts *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliEventTagCuts >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliEventTagCuts", ::AliEventTagCuts::Class_Version(), "./AliEventTagCuts.h", 20,
                  typeid(::AliEventTagCuts), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliEventTagCuts::Dictionary, isa_proxy, 4,
                  sizeof(::AliEventTagCuts) );
      instance.SetNew(&new_AliEventTagCuts);
      instance.SetNewArray(&newArray_AliEventTagCuts);
      instance.SetDelete(&delete_AliEventTagCuts);
      instance.SetDeleteArray(&deleteArray_AliEventTagCuts);
      instance.SetDestructor(&destruct_AliEventTagCuts);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliEventTagCuts*)
   {
      return GenerateInitInstanceLocal((::AliEventTagCuts*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliEventTagCuts*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliFileTag_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliFileTag(void *p = 0);
   static void *newArray_AliFileTag(Long_t size, void *p);
   static void delete_AliFileTag(void *p);
   static void deleteArray_AliFileTag(void *p);
   static void destruct_AliFileTag(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliFileTag*)
   {
      ::AliFileTag *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliFileTag >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliFileTag", ::AliFileTag::Class_Version(), "./AliFileTag.h", 22,
                  typeid(::AliFileTag), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliFileTag::Dictionary, isa_proxy, 4,
                  sizeof(::AliFileTag) );
      instance.SetNew(&new_AliFileTag);
      instance.SetNewArray(&newArray_AliFileTag);
      instance.SetDelete(&delete_AliFileTag);
      instance.SetDeleteArray(&deleteArray_AliFileTag);
      instance.SetDestructor(&destruct_AliFileTag);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliFileTag*)
   {
      return GenerateInitInstanceLocal((::AliFileTag*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliFileTag*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliGenEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliGenEventHeader(void *p = 0);
   static void *newArray_AliGenEventHeader(Long_t size, void *p);
   static void delete_AliGenEventHeader(void *p);
   static void deleteArray_AliGenEventHeader(void *p);
   static void destruct_AliGenEventHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliGenEventHeader*)
   {
      ::AliGenEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliGenEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliGenEventHeader", ::AliGenEventHeader::Class_Version(), "./AliGenEventHeader.h", 21,
                  typeid(::AliGenEventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliGenEventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliGenEventHeader) );
      instance.SetNew(&new_AliGenEventHeader);
      instance.SetNewArray(&newArray_AliGenEventHeader);
      instance.SetDelete(&delete_AliGenEventHeader);
      instance.SetDeleteArray(&deleteArray_AliGenEventHeader);
      instance.SetDestructor(&destruct_AliGenEventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliGenEventHeader*)
   {
      return GenerateInitInstanceLocal((::AliGenEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliGenEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliGenCocktailEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliGenCocktailEventHeader(void *p = 0);
   static void *newArray_AliGenCocktailEventHeader(Long_t size, void *p);
   static void delete_AliGenCocktailEventHeader(void *p);
   static void deleteArray_AliGenCocktailEventHeader(void *p);
   static void destruct_AliGenCocktailEventHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliGenCocktailEventHeader*)
   {
      ::AliGenCocktailEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliGenCocktailEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliGenCocktailEventHeader", ::AliGenCocktailEventHeader::Class_Version(), "./AliGenCocktailEventHeader.h", 13,
                  typeid(::AliGenCocktailEventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliGenCocktailEventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliGenCocktailEventHeader) );
      instance.SetNew(&new_AliGenCocktailEventHeader);
      instance.SetNewArray(&newArray_AliGenCocktailEventHeader);
      instance.SetDelete(&delete_AliGenCocktailEventHeader);
      instance.SetDeleteArray(&deleteArray_AliGenCocktailEventHeader);
      instance.SetDestructor(&destruct_AliGenCocktailEventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliGenCocktailEventHeader*)
   {
      return GenerateInitInstanceLocal((::AliGenCocktailEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliGenCocktailEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliGenDPMjetEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliGenDPMjetEventHeader(void *p = 0);
   static void *newArray_AliGenDPMjetEventHeader(Long_t size, void *p);
   static void delete_AliGenDPMjetEventHeader(void *p);
   static void deleteArray_AliGenDPMjetEventHeader(void *p);
   static void destruct_AliGenDPMjetEventHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliGenDPMjetEventHeader*)
   {
      ::AliGenDPMjetEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliGenDPMjetEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliGenDPMjetEventHeader", ::AliGenDPMjetEventHeader::Class_Version(), "./AliGenDPMjetEventHeader.h", 13,
                  typeid(::AliGenDPMjetEventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliGenDPMjetEventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliGenDPMjetEventHeader) );
      instance.SetNew(&new_AliGenDPMjetEventHeader);
      instance.SetNewArray(&newArray_AliGenDPMjetEventHeader);
      instance.SetDelete(&delete_AliGenDPMjetEventHeader);
      instance.SetDeleteArray(&deleteArray_AliGenDPMjetEventHeader);
      instance.SetDestructor(&destruct_AliGenDPMjetEventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliGenDPMjetEventHeader*)
   {
      return GenerateInitInstanceLocal((::AliGenDPMjetEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliGenDPMjetEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliGenEpos3EventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliGenEpos3EventHeader(void *p = 0);
   static void *newArray_AliGenEpos3EventHeader(Long_t size, void *p);
   static void delete_AliGenEpos3EventHeader(void *p);
   static void deleteArray_AliGenEpos3EventHeader(void *p);
   static void destruct_AliGenEpos3EventHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliGenEpos3EventHeader*)
   {
      ::AliGenEpos3EventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliGenEpos3EventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliGenEpos3EventHeader", ::AliGenEpos3EventHeader::Class_Version(), "./AliGenEpos3EventHeader.h", 18,
                  typeid(::AliGenEpos3EventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliGenEpos3EventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliGenEpos3EventHeader) );
      instance.SetNew(&new_AliGenEpos3EventHeader);
      instance.SetNewArray(&newArray_AliGenEpos3EventHeader);
      instance.SetDelete(&delete_AliGenEpos3EventHeader);
      instance.SetDeleteArray(&deleteArray_AliGenEpos3EventHeader);
      instance.SetDestructor(&destruct_AliGenEpos3EventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliGenEpos3EventHeader*)
   {
      return GenerateInitInstanceLocal((::AliGenEpos3EventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliGenEpos3EventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliGenEposEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliGenEposEventHeader(void *p = 0);
   static void *newArray_AliGenEposEventHeader(Long_t size, void *p);
   static void delete_AliGenEposEventHeader(void *p);
   static void deleteArray_AliGenEposEventHeader(void *p);
   static void destruct_AliGenEposEventHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliGenEposEventHeader*)
   {
      ::AliGenEposEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliGenEposEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliGenEposEventHeader", ::AliGenEposEventHeader::Class_Version(), "./AliGenEposEventHeader.h", 22,
                  typeid(::AliGenEposEventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliGenEposEventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliGenEposEventHeader) );
      instance.SetNew(&new_AliGenEposEventHeader);
      instance.SetNewArray(&newArray_AliGenEposEventHeader);
      instance.SetDelete(&delete_AliGenEposEventHeader);
      instance.SetDeleteArray(&deleteArray_AliGenEposEventHeader);
      instance.SetDestructor(&destruct_AliGenEposEventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliGenEposEventHeader*)
   {
      return GenerateInitInstanceLocal((::AliGenEposEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliGenEposEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliGenEventHeaderTunedPbPb_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliGenEventHeaderTunedPbPb(void *p = 0);
   static void *newArray_AliGenEventHeaderTunedPbPb(Long_t size, void *p);
   static void delete_AliGenEventHeaderTunedPbPb(void *p);
   static void deleteArray_AliGenEventHeaderTunedPbPb(void *p);
   static void destruct_AliGenEventHeaderTunedPbPb(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliGenEventHeaderTunedPbPb*)
   {
      ::AliGenEventHeaderTunedPbPb *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliGenEventHeaderTunedPbPb >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliGenEventHeaderTunedPbPb", ::AliGenEventHeaderTunedPbPb::Class_Version(), "./AliGenEventHeaderTunedPbPb.h", 18,
                  typeid(::AliGenEventHeaderTunedPbPb), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliGenEventHeaderTunedPbPb::Dictionary, isa_proxy, 4,
                  sizeof(::AliGenEventHeaderTunedPbPb) );
      instance.SetNew(&new_AliGenEventHeaderTunedPbPb);
      instance.SetNewArray(&newArray_AliGenEventHeaderTunedPbPb);
      instance.SetDelete(&delete_AliGenEventHeaderTunedPbPb);
      instance.SetDeleteArray(&deleteArray_AliGenEventHeaderTunedPbPb);
      instance.SetDestructor(&destruct_AliGenEventHeaderTunedPbPb);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliGenEventHeaderTunedPbPb*)
   {
      return GenerateInitInstanceLocal((::AliGenEventHeaderTunedPbPb*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliGenEventHeaderTunedPbPb*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliGenGeVSimEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliGenGeVSimEventHeader(void *p = 0);
   static void *newArray_AliGenGeVSimEventHeader(Long_t size, void *p);
   static void delete_AliGenGeVSimEventHeader(void *p);
   static void deleteArray_AliGenGeVSimEventHeader(void *p);
   static void destruct_AliGenGeVSimEventHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliGenGeVSimEventHeader*)
   {
      ::AliGenGeVSimEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliGenGeVSimEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliGenGeVSimEventHeader", ::AliGenGeVSimEventHeader::Class_Version(), "./AliGenGeVSimEventHeader.h", 18,
                  typeid(::AliGenGeVSimEventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliGenGeVSimEventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliGenGeVSimEventHeader) );
      instance.SetNew(&new_AliGenGeVSimEventHeader);
      instance.SetNewArray(&newArray_AliGenGeVSimEventHeader);
      instance.SetDelete(&delete_AliGenGeVSimEventHeader);
      instance.SetDeleteArray(&deleteArray_AliGenGeVSimEventHeader);
      instance.SetDestructor(&destruct_AliGenGeVSimEventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliGenGeVSimEventHeader*)
   {
      return GenerateInitInstanceLocal((::AliGenGeVSimEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliGenGeVSimEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliGenHepMCEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliGenHepMCEventHeader(void *p = 0);
   static void *newArray_AliGenHepMCEventHeader(Long_t size, void *p);
   static void delete_AliGenHepMCEventHeader(void *p);
   static void deleteArray_AliGenHepMCEventHeader(void *p);
   static void destruct_AliGenHepMCEventHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliGenHepMCEventHeader*)
   {
      ::AliGenHepMCEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliGenHepMCEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliGenHepMCEventHeader", ::AliGenHepMCEventHeader::Class_Version(), "./AliGenHepMCEventHeader.h", 13,
                  typeid(::AliGenHepMCEventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliGenHepMCEventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliGenHepMCEventHeader) );
      instance.SetNew(&new_AliGenHepMCEventHeader);
      instance.SetNewArray(&newArray_AliGenHepMCEventHeader);
      instance.SetDelete(&delete_AliGenHepMCEventHeader);
      instance.SetDeleteArray(&deleteArray_AliGenHepMCEventHeader);
      instance.SetDestructor(&destruct_AliGenHepMCEventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliGenHepMCEventHeader*)
   {
      return GenerateInitInstanceLocal((::AliGenHepMCEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliGenHepMCEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliGenHerwigEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliGenHerwigEventHeader(void *p = 0);
   static void *newArray_AliGenHerwigEventHeader(Long_t size, void *p);
   static void delete_AliGenHerwigEventHeader(void *p);
   static void deleteArray_AliGenHerwigEventHeader(void *p);
   static void destruct_AliGenHerwigEventHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliGenHerwigEventHeader*)
   {
      ::AliGenHerwigEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliGenHerwigEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliGenHerwigEventHeader", ::AliGenHerwigEventHeader::Class_Version(), "./AliGenHerwigEventHeader.h", 13,
                  typeid(::AliGenHerwigEventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliGenHerwigEventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliGenHerwigEventHeader) );
      instance.SetNew(&new_AliGenHerwigEventHeader);
      instance.SetNewArray(&newArray_AliGenHerwigEventHeader);
      instance.SetDelete(&delete_AliGenHerwigEventHeader);
      instance.SetDeleteArray(&deleteArray_AliGenHerwigEventHeader);
      instance.SetDestructor(&destruct_AliGenHerwigEventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliGenHerwigEventHeader*)
   {
      return GenerateInitInstanceLocal((::AliGenHerwigEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliGenHerwigEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliGenHijingEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliGenHijingEventHeader(void *p = 0);
   static void *newArray_AliGenHijingEventHeader(Long_t size, void *p);
   static void delete_AliGenHijingEventHeader(void *p);
   static void deleteArray_AliGenHijingEventHeader(void *p);
   static void destruct_AliGenHijingEventHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliGenHijingEventHeader*)
   {
      ::AliGenHijingEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliGenHijingEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliGenHijingEventHeader", ::AliGenHijingEventHeader::Class_Version(), "./AliGenHijingEventHeader.h", 15,
                  typeid(::AliGenHijingEventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliGenHijingEventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliGenHijingEventHeader) );
      instance.SetNew(&new_AliGenHijingEventHeader);
      instance.SetNewArray(&newArray_AliGenHijingEventHeader);
      instance.SetDelete(&delete_AliGenHijingEventHeader);
      instance.SetDeleteArray(&deleteArray_AliGenHijingEventHeader);
      instance.SetDestructor(&destruct_AliGenHijingEventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliGenHijingEventHeader*)
   {
      return GenerateInitInstanceLocal((::AliGenHijingEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliGenHijingEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliGenPythiaEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliGenPythiaEventHeader(void *p = 0);
   static void *newArray_AliGenPythiaEventHeader(Long_t size, void *p);
   static void delete_AliGenPythiaEventHeader(void *p);
   static void deleteArray_AliGenPythiaEventHeader(void *p);
   static void destruct_AliGenPythiaEventHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliGenPythiaEventHeader*)
   {
      ::AliGenPythiaEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliGenPythiaEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliGenPythiaEventHeader", ::AliGenPythiaEventHeader::Class_Version(), "./AliGenPythiaEventHeader.h", 13,
                  typeid(::AliGenPythiaEventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliGenPythiaEventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliGenPythiaEventHeader) );
      instance.SetNew(&new_AliGenPythiaEventHeader);
      instance.SetNewArray(&newArray_AliGenPythiaEventHeader);
      instance.SetDelete(&delete_AliGenPythiaEventHeader);
      instance.SetDeleteArray(&deleteArray_AliGenPythiaEventHeader);
      instance.SetDestructor(&destruct_AliGenPythiaEventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliGenPythiaEventHeader*)
   {
      return GenerateInitInstanceLocal((::AliGenPythiaEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliGenPythiaEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliGenToyEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliGenToyEventHeader(void *p = 0);
   static void *newArray_AliGenToyEventHeader(Long_t size, void *p);
   static void delete_AliGenToyEventHeader(void *p);
   static void deleteArray_AliGenToyEventHeader(void *p);
   static void destruct_AliGenToyEventHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliGenToyEventHeader*)
   {
      ::AliGenToyEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliGenToyEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliGenToyEventHeader", ::AliGenToyEventHeader::Class_Version(), "./AliGenToyEventHeader.h", 10,
                  typeid(::AliGenToyEventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliGenToyEventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliGenToyEventHeader) );
      instance.SetNew(&new_AliGenToyEventHeader);
      instance.SetNewArray(&newArray_AliGenToyEventHeader);
      instance.SetDelete(&delete_AliGenToyEventHeader);
      instance.SetDeleteArray(&deleteArray_AliGenToyEventHeader);
      instance.SetDestructor(&destruct_AliGenToyEventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliGenToyEventHeader*)
   {
      return GenerateInitInstanceLocal((::AliGenToyEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliGenToyEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliStack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliStack(void *p = 0);
   static void *newArray_AliStack(Long_t size, void *p);
   static void delete_AliStack(void *p);
   static void deleteArray_AliStack(void *p);
   static void destruct_AliStack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliStack*)
   {
      ::AliStack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliStack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliStack", ::AliStack::Class_Version(), "./AliStack.h", 27,
                  typeid(::AliStack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliStack::Dictionary, isa_proxy, 4,
                  sizeof(::AliStack) );
      instance.SetNew(&new_AliStack);
      instance.SetNewArray(&newArray_AliStack);
      instance.SetDelete(&delete_AliStack);
      instance.SetDeleteArray(&deleteArray_AliStack);
      instance.SetDestructor(&destruct_AliStack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliStack*)
   {
      return GenerateInitInstanceLocal((::AliStack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliStack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliHeader(void *p = 0);
   static void *newArray_AliHeader(Long_t size, void *p);
   static void delete_AliHeader(void *p);
   static void deleteArray_AliHeader(void *p);
   static void destruct_AliHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliHeader*)
   {
      ::AliHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliHeader", ::AliHeader::Class_Version(), "./AliHeader.h", 22,
                  typeid(::AliHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliHeader) );
      instance.SetNew(&new_AliHeader);
      instance.SetNewArray(&newArray_AliHeader);
      instance.SetDelete(&delete_AliHeader);
      instance.SetDeleteArray(&deleteArray_AliHeader);
      instance.SetDestructor(&destruct_AliHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliHeader*)
   {
      return GenerateInitInstanceLocal((::AliHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliLHCTag_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliLHCTag(void *p = 0);
   static void *newArray_AliLHCTag(Long_t size, void *p);
   static void delete_AliLHCTag(void *p);
   static void deleteArray_AliLHCTag(void *p);
   static void destruct_AliLHCTag(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliLHCTag*)
   {
      ::AliLHCTag *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliLHCTag >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliLHCTag", ::AliLHCTag::Class_Version(), "./AliLHCTag.h", 20,
                  typeid(::AliLHCTag), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliLHCTag::Dictionary, isa_proxy, 4,
                  sizeof(::AliLHCTag) );
      instance.SetNew(&new_AliLHCTag);
      instance.SetNewArray(&newArray_AliLHCTag);
      instance.SetDelete(&delete_AliLHCTag);
      instance.SetDeleteArray(&deleteArray_AliLHCTag);
      instance.SetDestructor(&destruct_AliLHCTag);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliLHCTag*)
   {
      return GenerateInitInstanceLocal((::AliLHCTag*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliLHCTag*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliLHCTagCuts_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliLHCTagCuts(void *p = 0);
   static void *newArray_AliLHCTagCuts(Long_t size, void *p);
   static void delete_AliLHCTagCuts(void *p);
   static void deleteArray_AliLHCTagCuts(void *p);
   static void destruct_AliLHCTagCuts(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliLHCTagCuts*)
   {
      ::AliLHCTagCuts *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliLHCTagCuts >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliLHCTagCuts", ::AliLHCTagCuts::Class_Version(), "./AliLHCTagCuts.h", 20,
                  typeid(::AliLHCTagCuts), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliLHCTagCuts::Dictionary, isa_proxy, 4,
                  sizeof(::AliLHCTagCuts) );
      instance.SetNew(&new_AliLHCTagCuts);
      instance.SetNewArray(&newArray_AliLHCTagCuts);
      instance.SetDelete(&delete_AliLHCTagCuts);
      instance.SetDeleteArray(&deleteArray_AliLHCTagCuts);
      instance.SetDestructor(&destruct_AliLHCTagCuts);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliLHCTagCuts*)
   {
      return GenerateInitInstanceLocal((::AliLHCTagCuts*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliLHCTagCuts*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliMagWrapCheb_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliMagWrapCheb(void *p = 0);
   static void *newArray_AliMagWrapCheb(Long_t size, void *p);
   static void delete_AliMagWrapCheb(void *p);
   static void deleteArray_AliMagWrapCheb(void *p);
   static void destruct_AliMagWrapCheb(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliMagWrapCheb*)
   {
      ::AliMagWrapCheb *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliMagWrapCheb >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliMagWrapCheb", ::AliMagWrapCheb::Class_Version(), "./AliMagWrapCheb.h", 55,
                  typeid(::AliMagWrapCheb), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliMagWrapCheb::Dictionary, isa_proxy, 4,
                  sizeof(::AliMagWrapCheb) );
      instance.SetNew(&new_AliMagWrapCheb);
      instance.SetNewArray(&newArray_AliMagWrapCheb);
      instance.SetDelete(&delete_AliMagWrapCheb);
      instance.SetDeleteArray(&deleteArray_AliMagWrapCheb);
      instance.SetDestructor(&destruct_AliMagWrapCheb);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliMagWrapCheb*)
   {
      return GenerateInitInstanceLocal((::AliMagWrapCheb*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliMagWrapCheb*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliMagF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliMagF(void *p = 0);
   static void *newArray_AliMagF(Long_t size, void *p);
   static void delete_AliMagF(void *p);
   static void deleteArray_AliMagF(void *p);
   static void destruct_AliMagF(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliMagF*)
   {
      ::AliMagF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliMagF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliMagF", ::AliMagF::Class_Version(), "./AliMagF.h", 19,
                  typeid(::AliMagF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliMagF::Dictionary, isa_proxy, 4,
                  sizeof(::AliMagF) );
      instance.SetNew(&new_AliMagF);
      instance.SetNewArray(&newArray_AliMagF);
      instance.SetDelete(&delete_AliMagF);
      instance.SetDeleteArray(&deleteArray_AliMagF);
      instance.SetDestructor(&destruct_AliMagF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliMagF*)
   {
      return GenerateInitInstanceLocal((::AliMagF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliMagF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliMathBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliMathBase(void *p = 0);
   static void *newArray_AliMathBase(Long_t size, void *p);
   static void delete_AliMathBase(void *p);
   static void deleteArray_AliMathBase(void *p);
   static void destruct_AliMathBase(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliMathBase*)
   {
      ::AliMathBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliMathBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliMathBase", ::AliMathBase::Class_Version(), "./AliMathBase.h", 19,
                  typeid(::AliMathBase), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliMathBase::Dictionary, isa_proxy, 4,
                  sizeof(::AliMathBase) );
      instance.SetNew(&new_AliMathBase);
      instance.SetNewArray(&newArray_AliMathBase);
      instance.SetDelete(&delete_AliMathBase);
      instance.SetDeleteArray(&deleteArray_AliMathBase);
      instance.SetDestructor(&destruct_AliMathBase);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliMathBase*)
   {
      return GenerateInitInstanceLocal((::AliMathBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliMathBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVHeader(void *p);
   static void deleteArray_AliVHeader(void *p);
   static void destruct_AliVHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVHeader*)
   {
      ::AliVHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVHeader", ::AliVHeader::Class_Version(), "./AliVHeader.h", 16,
                  typeid(::AliVHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliVHeader) );
      instance.SetDelete(&delete_AliVHeader);
      instance.SetDeleteArray(&deleteArray_AliVHeader);
      instance.SetDestructor(&destruct_AliVHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVHeader*)
   {
      return GenerateInitInstanceLocal((::AliVHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliVCluster(void *p = 0);
   static void *newArray_AliVCluster(Long_t size, void *p);
   static void delete_AliVCluster(void *p);
   static void deleteArray_AliVCluster(void *p);
   static void destruct_AliVCluster(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVCluster*)
   {
      ::AliVCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVCluster", ::AliVCluster::Class_Version(), "./AliVCluster.h", 21,
                  typeid(::AliVCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVCluster::Dictionary, isa_proxy, 4,
                  sizeof(::AliVCluster) );
      instance.SetNew(&new_AliVCluster);
      instance.SetNewArray(&newArray_AliVCluster);
      instance.SetDelete(&delete_AliVCluster);
      instance.SetDeleteArray(&deleteArray_AliVCluster);
      instance.SetDestructor(&destruct_AliVCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVCluster*)
   {
      return GenerateInitInstanceLocal((::AliVCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVCaloCells_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVCaloCells(void *p);
   static void deleteArray_AliVCaloCells(void *p);
   static void destruct_AliVCaloCells(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVCaloCells*)
   {
      ::AliVCaloCells *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVCaloCells >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVCaloCells", ::AliVCaloCells::Class_Version(), "./AliVCaloCells.h", 20,
                  typeid(::AliVCaloCells), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVCaloCells::Dictionary, isa_proxy, 4,
                  sizeof(::AliVCaloCells) );
      instance.SetDelete(&delete_AliVCaloCells);
      instance.SetDeleteArray(&deleteArray_AliVCaloCells);
      instance.SetDestructor(&destruct_AliVCaloCells);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVCaloCells*)
   {
      return GenerateInitInstanceLocal((::AliVCaloCells*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVCaloCells*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVCaloTrigger_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVCaloTrigger(void *p);
   static void deleteArray_AliVCaloTrigger(void *p);
   static void destruct_AliVCaloTrigger(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVCaloTrigger*)
   {
      ::AliVCaloTrigger *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVCaloTrigger >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVCaloTrigger", ::AliVCaloTrigger::Class_Version(), "./AliVCaloTrigger.h", 17,
                  typeid(::AliVCaloTrigger), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVCaloTrigger::Dictionary, isa_proxy, 4,
                  sizeof(::AliVCaloTrigger) );
      instance.SetDelete(&delete_AliVCaloTrigger);
      instance.SetDeleteArray(&deleteArray_AliVCaloTrigger);
      instance.SetDestructor(&destruct_AliVCaloTrigger);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVCaloTrigger*)
   {
      return GenerateInitInstanceLocal((::AliVCaloTrigger*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVCaloTrigger*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTOFTriggerMask_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTOFTriggerMask(void *p = 0);
   static void *newArray_AliTOFTriggerMask(Long_t size, void *p);
   static void delete_AliTOFTriggerMask(void *p);
   static void deleteArray_AliTOFTriggerMask(void *p);
   static void destruct_AliTOFTriggerMask(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTOFTriggerMask*)
   {
      ::AliTOFTriggerMask *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTOFTriggerMask >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTOFTriggerMask", ::AliTOFTriggerMask::Class_Version(), "./AliTOFTriggerMask.h", 26,
                  typeid(::AliTOFTriggerMask), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTOFTriggerMask::Dictionary, isa_proxy, 4,
                  sizeof(::AliTOFTriggerMask) );
      instance.SetNew(&new_AliTOFTriggerMask);
      instance.SetNewArray(&newArray_AliTOFTriggerMask);
      instance.SetDelete(&delete_AliTOFTriggerMask);
      instance.SetDeleteArray(&deleteArray_AliTOFTriggerMask);
      instance.SetDestructor(&destruct_AliTOFTriggerMask);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTOFTriggerMask*)
   {
      return GenerateInitInstanceLocal((::AliTOFTriggerMask*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTOFTriggerMask*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVTrdTracklet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVTrdTracklet(void *p);
   static void deleteArray_AliVTrdTracklet(void *p);
   static void destruct_AliVTrdTracklet(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVTrdTracklet*)
   {
      ::AliVTrdTracklet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVTrdTracklet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVTrdTracklet", ::AliVTrdTracklet::Class_Version(), "./AliVTrdTracklet.h", 10,
                  typeid(::AliVTrdTracklet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVTrdTracklet::Dictionary, isa_proxy, 4,
                  sizeof(::AliVTrdTracklet) );
      instance.SetDelete(&delete_AliVTrdTracklet);
      instance.SetDeleteArray(&deleteArray_AliVTrdTracklet);
      instance.SetDestructor(&destruct_AliVTrdTracklet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVTrdTracklet*)
   {
      return GenerateInitInstanceLocal((::AliVTrdTracklet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVTrdTracklet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVTrdTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVTrdTrack(void *p);
   static void deleteArray_AliVTrdTrack(void *p);
   static void destruct_AliVTrdTrack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVTrdTrack*)
   {
      ::AliVTrdTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVTrdTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVTrdTrack", ::AliVTrdTrack::Class_Version(), "./AliVTrdTrack.h", 14,
                  typeid(::AliVTrdTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVTrdTrack::Dictionary, isa_proxy, 4,
                  sizeof(::AliVTrdTrack) );
      instance.SetDelete(&delete_AliVTrdTrack);
      instance.SetDeleteArray(&deleteArray_AliVTrdTrack);
      instance.SetDestructor(&destruct_AliVTrdTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVTrdTrack*)
   {
      return GenerateInitInstanceLocal((::AliVTrdTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVTrdTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVMultiplicity_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVMultiplicity(void *p);
   static void deleteArray_AliVMultiplicity(void *p);
   static void destruct_AliVMultiplicity(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVMultiplicity*)
   {
      ::AliVMultiplicity *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVMultiplicity >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVMultiplicity", ::AliVMultiplicity::Class_Version(), "./AliVMultiplicity.h", 14,
                  typeid(::AliVMultiplicity), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVMultiplicity::Dictionary, isa_proxy, 4,
                  sizeof(::AliVMultiplicity) );
      instance.SetDelete(&delete_AliVMultiplicity);
      instance.SetDeleteArray(&deleteArray_AliVMultiplicity);
      instance.SetDestructor(&destruct_AliVMultiplicity);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVMultiplicity*)
   {
      return GenerateInitInstanceLocal((::AliVMultiplicity*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVMultiplicity*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVVZERO_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVVZERO(void *p);
   static void deleteArray_AliVVZERO(void *p);
   static void destruct_AliVVZERO(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVVZERO*)
   {
      ::AliVVZERO *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVVZERO >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVVZERO", ::AliVVZERO::Class_Version(), "./AliVVZERO.h", 14,
                  typeid(::AliVVZERO), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVVZERO::Dictionary, isa_proxy, 4,
                  sizeof(::AliVVZERO) );
      instance.SetDelete(&delete_AliVVZERO);
      instance.SetDeleteArray(&deleteArray_AliVVZERO);
      instance.SetDestructor(&destruct_AliVVZERO);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVVZERO*)
   {
      return GenerateInitInstanceLocal((::AliVVZERO*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVVZERO*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVZDC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVZDC(void *p);
   static void deleteArray_AliVZDC(void *p);
   static void destruct_AliVZDC(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVZDC*)
   {
      ::AliVZDC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVZDC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVZDC", ::AliVZDC::Class_Version(), "./AliVZDC.h", 13,
                  typeid(::AliVZDC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVZDC::Dictionary, isa_proxy, 4,
                  sizeof(::AliVZDC) );
      instance.SetDelete(&delete_AliVZDC);
      instance.SetDeleteArray(&deleteArray_AliVZDC);
      instance.SetDestructor(&destruct_AliVZDC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVZDC*)
   {
      return GenerateInitInstanceLocal((::AliVZDC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVZDC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVMFT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliVMFT(void *p = 0);
   static void *newArray_AliVMFT(Long_t size, void *p);
   static void delete_AliVMFT(void *p);
   static void deleteArray_AliVMFT(void *p);
   static void destruct_AliVMFT(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVMFT*)
   {
      ::AliVMFT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVMFT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVMFT", ::AliVMFT::Class_Version(), "./AliVMFT.h", 13,
                  typeid(::AliVMFT), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVMFT::Dictionary, isa_proxy, 4,
                  sizeof(::AliVMFT) );
      instance.SetNew(&new_AliVMFT);
      instance.SetNewArray(&newArray_AliVMFT);
      instance.SetDelete(&delete_AliVMFT);
      instance.SetDeleteArray(&deleteArray_AliVMFT);
      instance.SetDestructor(&destruct_AliVMFT);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVMFT*)
   {
      return GenerateInitInstanceLocal((::AliVMFT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVMFT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVAD_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVAD(void *p);
   static void deleteArray_AliVAD(void *p);
   static void destruct_AliVAD(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVAD*)
   {
      ::AliVAD *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVAD >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVAD", ::AliVAD::Class_Version(), "./AliVAD.h", 14,
                  typeid(::AliVAD), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVAD::Dictionary, isa_proxy, 4,
                  sizeof(::AliVAD) );
      instance.SetDelete(&delete_AliVAD);
      instance.SetDeleteArray(&deleteArray_AliVAD);
      instance.SetDestructor(&destruct_AliVAD);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVAD*)
   {
      return GenerateInitInstanceLocal((::AliVAD*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVAD*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTrackReference_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTrackReference(void *p = 0);
   static void *newArray_AliTrackReference(Long_t size, void *p);
   static void delete_AliTrackReference(void *p);
   static void deleteArray_AliTrackReference(void *p);
   static void destruct_AliTrackReference(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTrackReference*)
   {
      ::AliTrackReference *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTrackReference >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTrackReference", ::AliTrackReference::Class_Version(), "./AliTrackReference.h", 17,
                  typeid(::AliTrackReference), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTrackReference::Dictionary, isa_proxy, 4,
                  sizeof(::AliTrackReference) );
      instance.SetNew(&new_AliTrackReference);
      instance.SetNewArray(&newArray_AliTrackReference);
      instance.SetDelete(&delete_AliTrackReference);
      instance.SetDeleteArray(&deleteArray_AliTrackReference);
      instance.SetDestructor(&destruct_AliTrackReference);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTrackReference*)
   {
      return GenerateInitInstanceLocal((::AliTrackReference*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTrackReference*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliMCParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliMCParticle(void *p = 0);
   static void *newArray_AliMCParticle(Long_t size, void *p);
   static void delete_AliMCParticle(void *p);
   static void deleteArray_AliMCParticle(void *p);
   static void destruct_AliMCParticle(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliMCParticle*)
   {
      ::AliMCParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliMCParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliMCParticle", ::AliMCParticle::Class_Version(), "./AliMCParticle.h", 21,
                  typeid(::AliMCParticle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliMCParticle::Dictionary, isa_proxy, 4,
                  sizeof(::AliMCParticle) );
      instance.SetNew(&new_AliMCParticle);
      instance.SetNewArray(&newArray_AliMCParticle);
      instance.SetDelete(&delete_AliMCParticle);
      instance.SetDeleteArray(&deleteArray_AliMCParticle);
      instance.SetDestructor(&destruct_AliMCParticle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliMCParticle*)
   {
      return GenerateInitInstanceLocal((::AliMCParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliMCParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliMCEventHandler_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliMCEventHandler(void *p = 0);
   static void *newArray_AliMCEventHandler(Long_t size, void *p);
   static void delete_AliMCEventHandler(void *p);
   static void deleteArray_AliMCEventHandler(void *p);
   static void destruct_AliMCEventHandler(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliMCEventHandler*)
   {
      ::AliMCEventHandler *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliMCEventHandler >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliMCEventHandler", ::AliMCEventHandler::Class_Version(), "./AliMCEventHandler.h", 37,
                  typeid(::AliMCEventHandler), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliMCEventHandler::Dictionary, isa_proxy, 4,
                  sizeof(::AliMCEventHandler) );
      instance.SetNew(&new_AliMCEventHandler);
      instance.SetNewArray(&newArray_AliMCEventHandler);
      instance.SetDelete(&delete_AliMCEventHandler);
      instance.SetDeleteArray(&deleteArray_AliMCEventHandler);
      instance.SetDestructor(&destruct_AliMCEventHandler);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliMCEventHandler*)
   {
      return GenerateInitInstanceLocal((::AliMCEventHandler*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliMCEventHandler*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliMCVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliMCVertex(void *p = 0);
   static void *newArray_AliMCVertex(Long_t size, void *p);
   static void delete_AliMCVertex(void *p);
   static void deleteArray_AliMCVertex(void *p);
   static void destruct_AliMCVertex(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliMCVertex*)
   {
      ::AliMCVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliMCVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliMCVertex", ::AliMCVertex::Class_Version(), "./AliMCVertex.h", 16,
                  typeid(::AliMCVertex), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliMCVertex::Dictionary, isa_proxy, 4,
                  sizeof(::AliMCVertex) );
      instance.SetNew(&new_AliMCVertex);
      instance.SetNewArray(&newArray_AliMCVertex);
      instance.SetDelete(&delete_AliMCVertex);
      instance.SetDeleteArray(&deleteArray_AliMCVertex);
      instance.SetDestructor(&destruct_AliMCVertex);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliMCVertex*)
   {
      return GenerateInitInstanceLocal((::AliMCVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliMCVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliMergeableCollectionIterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliMergeableCollectionIterator(void *p);
   static void deleteArray_AliMergeableCollectionIterator(void *p);
   static void destruct_AliMergeableCollectionIterator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliMergeableCollectionIterator*)
   {
      ::AliMergeableCollectionIterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliMergeableCollectionIterator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliMergeableCollectionIterator", ::AliMergeableCollectionIterator::Class_Version(), "./AliMergeableCollection.h", 160,
                  typeid(::AliMergeableCollectionIterator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliMergeableCollectionIterator::Dictionary, isa_proxy, 4,
                  sizeof(::AliMergeableCollectionIterator) );
      instance.SetDelete(&delete_AliMergeableCollectionIterator);
      instance.SetDeleteArray(&deleteArray_AliMergeableCollectionIterator);
      instance.SetDestructor(&destruct_AliMergeableCollectionIterator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliMergeableCollectionIterator*)
   {
      return GenerateInitInstanceLocal((::AliMergeableCollectionIterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliMergeableCollectionIterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliMergeableCollectionProxy_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliMergeableCollectionProxy(void *p);
   static void deleteArray_AliMergeableCollectionProxy(void *p);
   static void destruct_AliMergeableCollectionProxy(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliMergeableCollectionProxy*)
   {
      ::AliMergeableCollectionProxy *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliMergeableCollectionProxy >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliMergeableCollectionProxy", ::AliMergeableCollectionProxy::Class_Version(), "./AliMergeableCollection.h", 190,
                  typeid(::AliMergeableCollectionProxy), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliMergeableCollectionProxy::Dictionary, isa_proxy, 4,
                  sizeof(::AliMergeableCollectionProxy) );
      instance.SetDelete(&delete_AliMergeableCollectionProxy);
      instance.SetDeleteArray(&deleteArray_AliMergeableCollectionProxy);
      instance.SetDestructor(&destruct_AliMergeableCollectionProxy);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliMergeableCollectionProxy*)
   {
      return GenerateInitInstanceLocal((::AliMergeableCollectionProxy*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliMergeableCollectionProxy*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliMergeableCollection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliMergeableCollection(void *p = 0);
   static void *newArray_AliMergeableCollection(Long_t size, void *p);
   static void delete_AliMergeableCollection(void *p);
   static void deleteArray_AliMergeableCollection(void *p);
   static void destruct_AliMergeableCollection(void *p);
   static Long64_t merge_AliMergeableCollection(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliMergeableCollection*)
   {
      ::AliMergeableCollection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliMergeableCollection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliMergeableCollection", ::AliMergeableCollection::Class_Version(), "./AliMergeableCollection.h", 38,
                  typeid(::AliMergeableCollection), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliMergeableCollection::Dictionary, isa_proxy, 4,
                  sizeof(::AliMergeableCollection) );
      instance.SetNew(&new_AliMergeableCollection);
      instance.SetNewArray(&newArray_AliMergeableCollection);
      instance.SetDelete(&delete_AliMergeableCollection);
      instance.SetDeleteArray(&deleteArray_AliMergeableCollection);
      instance.SetDestructor(&destruct_AliMergeableCollection);
      instance.SetMerge(&merge_AliMergeableCollection);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliMergeableCollection*)
   {
      return GenerateInitInstanceLocal((::AliMergeableCollection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliMergeableCollection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliMixedEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliMixedEvent(void *p = 0);
   static void *newArray_AliMixedEvent(Long_t size, void *p);
   static void delete_AliMixedEvent(void *p);
   static void deleteArray_AliMixedEvent(void *p);
   static void destruct_AliMixedEvent(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliMixedEvent*)
   {
      ::AliMixedEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliMixedEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliMixedEvent", ::AliMixedEvent::Class_Version(), "./AliMixedEvent.h", 24,
                  typeid(::AliMixedEvent), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliMixedEvent::Dictionary, isa_proxy, 4,
                  sizeof(::AliMixedEvent) );
      instance.SetNew(&new_AliMixedEvent);
      instance.SetNewArray(&newArray_AliMixedEvent);
      instance.SetDelete(&delete_AliMixedEvent);
      instance.SetDeleteArray(&deleteArray_AliMixedEvent);
      instance.SetDestructor(&destruct_AliMixedEvent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliMixedEvent*)
   {
      return GenerateInitInstanceLocal((::AliMixedEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliMixedEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliMultSelectionBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliMultSelectionBase(void *p = 0);
   static void *newArray_AliMultSelectionBase(Long_t size, void *p);
   static void delete_AliMultSelectionBase(void *p);
   static void deleteArray_AliMultSelectionBase(void *p);
   static void destruct_AliMultSelectionBase(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliMultSelectionBase*)
   {
      ::AliMultSelectionBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliMultSelectionBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliMultSelectionBase", ::AliMultSelectionBase::Class_Version(), "./AliMultSelectionBase.h", 7,
                  typeid(::AliMultSelectionBase), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliMultSelectionBase::Dictionary, isa_proxy, 4,
                  sizeof(::AliMultSelectionBase) );
      instance.SetNew(&new_AliMultSelectionBase);
      instance.SetNewArray(&newArray_AliMultSelectionBase);
      instance.SetDelete(&delete_AliMultSelectionBase);
      instance.SetDeleteArray(&deleteArray_AliMultSelectionBase);
      instance.SetDestructor(&destruct_AliMultSelectionBase);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliMultSelectionBase*)
   {
      return GenerateInitInstanceLocal((::AliMultSelectionBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliMultSelectionBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliNeutralTrackParam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliNeutralTrackParam(void *p = 0);
   static void *newArray_AliNeutralTrackParam(Long_t size, void *p);
   static void delete_AliNeutralTrackParam(void *p);
   static void deleteArray_AliNeutralTrackParam(void *p);
   static void destruct_AliNeutralTrackParam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliNeutralTrackParam*)
   {
      ::AliNeutralTrackParam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliNeutralTrackParam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliNeutralTrackParam", ::AliNeutralTrackParam::Class_Version(), "./AliNeutralTrackParam.h", 15,
                  typeid(::AliNeutralTrackParam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliNeutralTrackParam::Dictionary, isa_proxy, 4,
                  sizeof(::AliNeutralTrackParam) );
      instance.SetNew(&new_AliNeutralTrackParam);
      instance.SetNewArray(&newArray_AliNeutralTrackParam);
      instance.SetDelete(&delete_AliNeutralTrackParam);
      instance.SetDeleteArray(&deleteArray_AliNeutralTrackParam);
      instance.SetDestructor(&destruct_AliNeutralTrackParam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliNeutralTrackParam*)
   {
      return GenerateInitInstanceLocal((::AliNeutralTrackParam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliNeutralTrackParam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliPDG_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliPDG(void *p = 0);
   static void *newArray_AliPDG(Long_t size, void *p);
   static void delete_AliPDG(void *p);
   static void deleteArray_AliPDG(void *p);
   static void destruct_AliPDG(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliPDG*)
   {
      ::AliPDG *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliPDG >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliPDG", ::AliPDG::Class_Version(), "./AliPDG.h", 14,
                  typeid(::AliPDG), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliPDG::Dictionary, isa_proxy, 4,
                  sizeof(::AliPDG) );
      instance.SetNew(&new_AliPDG);
      instance.SetNewArray(&newArray_AliPDG);
      instance.SetDelete(&delete_AliPDG);
      instance.SetDeleteArray(&deleteArray_AliPDG);
      instance.SetDestructor(&destruct_AliPDG);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliPDG*)
   {
      return GenerateInitInstanceLocal((::AliPDG*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliPDG*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliPIDCombined_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliPIDCombined(void *p = 0);
   static void *newArray_AliPIDCombined(Long_t size, void *p);
   static void delete_AliPIDCombined(void *p);
   static void deleteArray_AliPIDCombined(void *p);
   static void destruct_AliPIDCombined(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliPIDCombined*)
   {
      ::AliPIDCombined *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliPIDCombined >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliPIDCombined", ::AliPIDCombined::Class_Version(), "./AliPIDCombined.h", 26,
                  typeid(::AliPIDCombined), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliPIDCombined::Dictionary, isa_proxy, 4,
                  sizeof(::AliPIDCombined) );
      instance.SetNew(&new_AliPIDCombined);
      instance.SetNewArray(&newArray_AliPIDCombined);
      instance.SetDelete(&delete_AliPIDCombined);
      instance.SetDeleteArray(&deleteArray_AliPIDCombined);
      instance.SetDestructor(&destruct_AliPIDCombined);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliPIDCombined*)
   {
      return GenerateInitInstanceLocal((::AliPIDCombined*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliPIDCombined*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliPIDValues_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliPIDValues(void *p = 0);
   static void *newArray_AliPIDValues(Long_t size, void *p);
   static void delete_AliPIDValues(void *p);
   static void deleteArray_AliPIDValues(void *p);
   static void destruct_AliPIDValues(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliPIDValues*)
   {
      ::AliPIDValues *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliPIDValues >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliPIDValues", ::AliPIDValues::Class_Version(), "./AliPIDValues.h", 19,
                  typeid(::AliPIDValues), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliPIDValues::Dictionary, isa_proxy, 4,
                  sizeof(::AliPIDValues) );
      instance.SetNew(&new_AliPIDValues);
      instance.SetNewArray(&newArray_AliPIDValues);
      instance.SetDelete(&delete_AliPIDValues);
      instance.SetDeleteArray(&deleteArray_AliPIDValues);
      instance.SetDestructor(&destruct_AliPIDValues);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliPIDValues*)
   {
      return GenerateInitInstanceLocal((::AliPIDValues*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliPIDValues*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliProdInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliProdInfo(void *p = 0);
   static void *newArray_AliProdInfo(Long_t size, void *p);
   static void delete_AliProdInfo(void *p);
   static void deleteArray_AliProdInfo(void *p);
   static void destruct_AliProdInfo(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliProdInfo*)
   {
      ::AliProdInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliProdInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliProdInfo", ::AliProdInfo::Class_Version(), "./AliProdInfo.h", 20,
                  typeid(::AliProdInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliProdInfo::Dictionary, isa_proxy, 4,
                  sizeof(::AliProdInfo) );
      instance.SetNew(&new_AliProdInfo);
      instance.SetNewArray(&newArray_AliProdInfo);
      instance.SetDelete(&delete_AliProdInfo);
      instance.SetDeleteArray(&deleteArray_AliProdInfo);
      instance.SetDestructor(&destruct_AliProdInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliProdInfo*)
   {
      return GenerateInitInstanceLocal((::AliProdInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliProdInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliQA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliQA(void *p = 0);
   static void *newArray_AliQA(Long_t size, void *p);
   static void delete_AliQA(void *p);
   static void deleteArray_AliQA(void *p);
   static void destruct_AliQA(void *p);
   static Long64_t merge_AliQA(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliQA*)
   {
      ::AliQA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliQA >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliQA", ::AliQA::Class_Version(), "./AliQA.h", 17,
                  typeid(::AliQA), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliQA::Dictionary, isa_proxy, 4,
                  sizeof(::AliQA) );
      instance.SetNew(&new_AliQA);
      instance.SetNewArray(&newArray_AliQA);
      instance.SetDelete(&delete_AliQA);
      instance.SetDeleteArray(&deleteArray_AliQA);
      instance.SetDestructor(&destruct_AliQA);
      instance.SetMerge(&merge_AliQA);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliQA*)
   {
      return GenerateInitInstanceLocal((::AliQA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliQA*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliRefArray_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliRefArray(void *p = 0);
   static void *newArray_AliRefArray(Long_t size, void *p);
   static void delete_AliRefArray(void *p);
   static void deleteArray_AliRefArray(void *p);
   static void destruct_AliRefArray(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliRefArray*)
   {
      ::AliRefArray *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliRefArray >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliRefArray", ::AliRefArray::Class_Version(), "./AliRefArray.h", 16,
                  typeid(::AliRefArray), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliRefArray::Dictionary, isa_proxy, 4,
                  sizeof(::AliRefArray) );
      instance.SetNew(&new_AliRefArray);
      instance.SetNewArray(&newArray_AliRefArray);
      instance.SetDelete(&delete_AliRefArray);
      instance.SetDeleteArray(&deleteArray_AliRefArray);
      instance.SetDestructor(&destruct_AliRefArray);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliRefArray*)
   {
      return GenerateInitInstanceLocal((::AliRefArray*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliRefArray*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliRunTagCuts_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliRunTagCuts(void *p = 0);
   static void *newArray_AliRunTagCuts(Long_t size, void *p);
   static void delete_AliRunTagCuts(void *p);
   static void deleteArray_AliRunTagCuts(void *p);
   static void destruct_AliRunTagCuts(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliRunTagCuts*)
   {
      ::AliRunTagCuts *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliRunTagCuts >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliRunTagCuts", ::AliRunTagCuts::Class_Version(), "./AliRunTagCuts.h", 20,
                  typeid(::AliRunTagCuts), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliRunTagCuts::Dictionary, isa_proxy, 4,
                  sizeof(::AliRunTagCuts) );
      instance.SetNew(&new_AliRunTagCuts);
      instance.SetNewArray(&newArray_AliRunTagCuts);
      instance.SetDelete(&delete_AliRunTagCuts);
      instance.SetDeleteArray(&deleteArray_AliRunTagCuts);
      instance.SetDestructor(&destruct_AliRunTagCuts);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliRunTagCuts*)
   {
      return GenerateInitInstanceLocal((::AliRunTagCuts*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliRunTagCuts*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliSysInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliSysInfo(void *p = 0);
   static void *newArray_AliSysInfo(Long_t size, void *p);
   static void delete_AliSysInfo(void *p);
   static void deleteArray_AliSysInfo(void *p);
   static void destruct_AliSysInfo(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliSysInfo*)
   {
      ::AliSysInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliSysInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliSysInfo", ::AliSysInfo::Class_Version(), "./AliSysInfo.h", 13,
                  typeid(::AliSysInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliSysInfo::Dictionary, isa_proxy, 4,
                  sizeof(::AliSysInfo) );
      instance.SetNew(&new_AliSysInfo);
      instance.SetNewArray(&newArray_AliSysInfo);
      instance.SetDelete(&delete_AliSysInfo);
      instance.SetDeleteArray(&deleteArray_AliSysInfo);
      instance.SetDestructor(&destruct_AliSysInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliSysInfo*)
   {
      return GenerateInitInstanceLocal((::AliSysInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliSysInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTagCreator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTagCreator(void *p = 0);
   static void *newArray_AliTagCreator(Long_t size, void *p);
   static void delete_AliTagCreator(void *p);
   static void deleteArray_AliTagCreator(void *p);
   static void destruct_AliTagCreator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTagCreator*)
   {
      ::AliTagCreator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTagCreator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTagCreator", ::AliTagCreator::Class_Version(), "./AliTagCreator.h", 33,
                  typeid(::AliTagCreator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTagCreator::Dictionary, isa_proxy, 4,
                  sizeof(::AliTagCreator) );
      instance.SetNew(&new_AliTagCreator);
      instance.SetNewArray(&newArray_AliTagCreator);
      instance.SetDelete(&delete_AliTagCreator);
      instance.SetDeleteArray(&deleteArray_AliTagCreator);
      instance.SetDestructor(&destruct_AliTagCreator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTagCreator*)
   {
      return GenerateInitInstanceLocal((::AliTagCreator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTagCreator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTimeStamp_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTimeStamp(void *p = 0);
   static void *newArray_AliTimeStamp(Long_t size, void *p);
   static void delete_AliTimeStamp(void *p);
   static void deleteArray_AliTimeStamp(void *p);
   static void destruct_AliTimeStamp(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTimeStamp*)
   {
      ::AliTimeStamp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTimeStamp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTimeStamp", ::AliTimeStamp::Class_Version(), "./AliTimeStamp.h", 24,
                  typeid(::AliTimeStamp), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTimeStamp::Dictionary, isa_proxy, 4,
                  sizeof(::AliTimeStamp) );
      instance.SetNew(&new_AliTimeStamp);
      instance.SetNewArray(&newArray_AliTimeStamp);
      instance.SetDelete(&delete_AliTimeStamp);
      instance.SetDeleteArray(&deleteArray_AliTimeStamp);
      instance.SetDestructor(&destruct_AliTimeStamp);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTimeStamp*)
   {
      return GenerateInitInstanceLocal((::AliTimeStamp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTimeStamp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTRDNDFast_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTRDNDFast(void *p = 0);
   static void *newArray_AliTRDNDFast(Long_t size, void *p);
   static void delete_AliTRDNDFast(void *p);
   static void deleteArray_AliTRDNDFast(void *p);
   static void destruct_AliTRDNDFast(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTRDNDFast*)
   {
      ::AliTRDNDFast *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTRDNDFast >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTRDNDFast", ::AliTRDNDFast::Class_Version(), "./AliTRDNDFast.h", 26,
                  typeid(::AliTRDNDFast), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTRDNDFast::Dictionary, isa_proxy, 4,
                  sizeof(::AliTRDNDFast) );
      instance.SetNew(&new_AliTRDNDFast);
      instance.SetNewArray(&newArray_AliTRDNDFast);
      instance.SetDelete(&delete_AliTRDNDFast);
      instance.SetDeleteArray(&deleteArray_AliTRDNDFast);
      instance.SetDestructor(&destruct_AliTRDNDFast);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTRDNDFast*)
   {
      return GenerateInitInstanceLocal((::AliTRDNDFast*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTRDNDFast*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTRDPIDParams_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTRDPIDParams(void *p = 0);
   static void *newArray_AliTRDPIDParams(Long_t size, void *p);
   static void delete_AliTRDPIDParams(void *p);
   static void deleteArray_AliTRDPIDParams(void *p);
   static void destruct_AliTRDPIDParams(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTRDPIDParams*)
   {
      ::AliTRDPIDParams *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTRDPIDParams >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTRDPIDParams", ::AliTRDPIDParams::Class_Version(), "./AliTRDPIDParams.h", 28,
                  typeid(::AliTRDPIDParams), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTRDPIDParams::Dictionary, isa_proxy, 4,
                  sizeof(::AliTRDPIDParams) );
      instance.SetNew(&new_AliTRDPIDParams);
      instance.SetNewArray(&newArray_AliTRDPIDParams);
      instance.SetDelete(&delete_AliTRDPIDParams);
      instance.SetDeleteArray(&deleteArray_AliTRDPIDParams);
      instance.SetDestructor(&destruct_AliTRDPIDParams);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTRDPIDParams*)
   {
      return GenerateInitInstanceLocal((::AliTRDPIDParams*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTRDPIDParams*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTRDPIDParamscLcLAliTRDPIDThresholds_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTRDPIDParamscLcLAliTRDPIDThresholds(void *p = 0);
   static void *newArray_AliTRDPIDParamscLcLAliTRDPIDThresholds(Long_t size, void *p);
   static void delete_AliTRDPIDParamscLcLAliTRDPIDThresholds(void *p);
   static void deleteArray_AliTRDPIDParamscLcLAliTRDPIDThresholds(void *p);
   static void destruct_AliTRDPIDParamscLcLAliTRDPIDThresholds(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTRDPIDParams::AliTRDPIDThresholds*)
   {
      ::AliTRDPIDParams::AliTRDPIDThresholds *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTRDPIDParams::AliTRDPIDThresholds >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTRDPIDParams::AliTRDPIDThresholds", ::AliTRDPIDParams::AliTRDPIDThresholds::Class_Version(), "./AliTRDPIDParams.h", 41,
                  typeid(::AliTRDPIDParams::AliTRDPIDThresholds), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTRDPIDParams::AliTRDPIDThresholds::Dictionary, isa_proxy, 4,
                  sizeof(::AliTRDPIDParams::AliTRDPIDThresholds) );
      instance.SetNew(&new_AliTRDPIDParamscLcLAliTRDPIDThresholds);
      instance.SetNewArray(&newArray_AliTRDPIDParamscLcLAliTRDPIDThresholds);
      instance.SetDelete(&delete_AliTRDPIDParamscLcLAliTRDPIDThresholds);
      instance.SetDeleteArray(&deleteArray_AliTRDPIDParamscLcLAliTRDPIDThresholds);
      instance.SetDestructor(&destruct_AliTRDPIDParamscLcLAliTRDPIDThresholds);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTRDPIDParams::AliTRDPIDThresholds*)
   {
      return GenerateInitInstanceLocal((::AliTRDPIDParams::AliTRDPIDThresholds*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTRDPIDParams::AliTRDPIDThresholds*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTRDPIDParamscLcLAliTRDPIDCentrality_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTRDPIDParamscLcLAliTRDPIDCentrality(void *p = 0);
   static void *newArray_AliTRDPIDParamscLcLAliTRDPIDCentrality(Long_t size, void *p);
   static void delete_AliTRDPIDParamscLcLAliTRDPIDCentrality(void *p);
   static void deleteArray_AliTRDPIDParamscLcLAliTRDPIDCentrality(void *p);
   static void destruct_AliTRDPIDParamscLcLAliTRDPIDCentrality(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTRDPIDParams::AliTRDPIDCentrality*)
   {
      ::AliTRDPIDParams::AliTRDPIDCentrality *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTRDPIDParams::AliTRDPIDCentrality >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTRDPIDParams::AliTRDPIDCentrality", ::AliTRDPIDParams::AliTRDPIDCentrality::Class_Version(), "./AliTRDPIDParams.h", 69,
                  typeid(::AliTRDPIDParams::AliTRDPIDCentrality), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTRDPIDParams::AliTRDPIDCentrality::Dictionary, isa_proxy, 4,
                  sizeof(::AliTRDPIDParams::AliTRDPIDCentrality) );
      instance.SetNew(&new_AliTRDPIDParamscLcLAliTRDPIDCentrality);
      instance.SetNewArray(&newArray_AliTRDPIDParamscLcLAliTRDPIDCentrality);
      instance.SetDelete(&delete_AliTRDPIDParamscLcLAliTRDPIDCentrality);
      instance.SetDeleteArray(&deleteArray_AliTRDPIDParamscLcLAliTRDPIDCentrality);
      instance.SetDestructor(&destruct_AliTRDPIDParamscLcLAliTRDPIDCentrality);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTRDPIDParams::AliTRDPIDCentrality*)
   {
      return GenerateInitInstanceLocal((::AliTRDPIDParams::AliTRDPIDCentrality*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTRDPIDParams::AliTRDPIDCentrality*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTRDPIDReference_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTRDPIDReference(void *p = 0);
   static void *newArray_AliTRDPIDReference(Long_t size, void *p);
   static void delete_AliTRDPIDReference(void *p);
   static void deleteArray_AliTRDPIDReference(void *p);
   static void destruct_AliTRDPIDReference(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTRDPIDReference*)
   {
      ::AliTRDPIDReference *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTRDPIDReference >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTRDPIDReference", ::AliTRDPIDReference::Class_Version(), "./AliTRDPIDReference.h", 30,
                  typeid(::AliTRDPIDReference), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTRDPIDReference::Dictionary, isa_proxy, 4,
                  sizeof(::AliTRDPIDReference) );
      instance.SetNew(&new_AliTRDPIDReference);
      instance.SetNewArray(&newArray_AliTRDPIDReference);
      instance.SetDelete(&delete_AliTRDPIDReference);
      instance.SetDeleteArray(&deleteArray_AliTRDPIDReference);
      instance.SetDestructor(&destruct_AliTRDPIDReference);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTRDPIDReference*)
   {
      return GenerateInitInstanceLocal((::AliTRDPIDReference*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTRDPIDReference*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTRDTKDInterpolator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTRDTKDInterpolator(void *p = 0);
   static void *newArray_AliTRDTKDInterpolator(Long_t size, void *p);
   static void delete_AliTRDTKDInterpolator(void *p);
   static void deleteArray_AliTRDTKDInterpolator(void *p);
   static void destruct_AliTRDTKDInterpolator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTRDTKDInterpolator*)
   {
      ::AliTRDTKDInterpolator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTRDTKDInterpolator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTRDTKDInterpolator", ::AliTRDTKDInterpolator::Class_Version(), "./AliTRDTKDInterpolator.h", 18,
                  typeid(::AliTRDTKDInterpolator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTRDTKDInterpolator::Dictionary, isa_proxy, 4,
                  sizeof(::AliTRDTKDInterpolator) );
      instance.SetNew(&new_AliTRDTKDInterpolator);
      instance.SetNewArray(&newArray_AliTRDTKDInterpolator);
      instance.SetDelete(&delete_AliTRDTKDInterpolator);
      instance.SetDeleteArray(&deleteArray_AliTRDTKDInterpolator);
      instance.SetDestructor(&destruct_AliTRDTKDInterpolator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTRDTKDInterpolator*)
   {
      return GenerateInitInstanceLocal((::AliTRDTKDInterpolator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTRDTKDInterpolator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo(void *p = 0);
   static void *newArray_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo(Long_t size, void *p);
   static void delete_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo(void *p);
   static void deleteArray_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo(void *p);
   static void destruct_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo*)
   {
      ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTRDTKDInterpolator::AliTRDTKDNodeInfo", ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Class_Version(), "./AliTRDTKDInterpolator.h", 29,
                  typeid(::AliTRDTKDInterpolator::AliTRDTKDNodeInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Dictionary, isa_proxy, 4,
                  sizeof(::AliTRDTKDInterpolator::AliTRDTKDNodeInfo) );
      instance.SetNew(&new_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo);
      instance.SetNewArray(&newArray_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo);
      instance.SetDelete(&delete_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo);
      instance.SetDeleteArray(&deleteArray_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo);
      instance.SetDestructor(&destruct_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo*)
   {
      return GenerateInitInstanceLocal((::AliTRDTKDInterpolator::AliTRDTKDNodeInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTriggerScalers_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTriggerScalers(void *p = 0);
   static void *newArray_AliTriggerScalers(Long_t size, void *p);
   static void delete_AliTriggerScalers(void *p);
   static void deleteArray_AliTriggerScalers(void *p);
   static void destruct_AliTriggerScalers(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTriggerScalers*)
   {
      ::AliTriggerScalers *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTriggerScalers >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTriggerScalers", ::AliTriggerScalers::Class_Version(), "./AliTriggerScalers.h", 26,
                  typeid(::AliTriggerScalers), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTriggerScalers::Dictionary, isa_proxy, 4,
                  sizeof(::AliTriggerScalers) );
      instance.SetNew(&new_AliTriggerScalers);
      instance.SetNewArray(&newArray_AliTriggerScalers);
      instance.SetDelete(&delete_AliTriggerScalers);
      instance.SetDeleteArray(&deleteArray_AliTriggerScalers);
      instance.SetDestructor(&destruct_AliTriggerScalers);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTriggerScalers*)
   {
      return GenerateInitInstanceLocal((::AliTriggerScalers*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTriggerScalers*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTriggerScalersRecord_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTriggerScalersRecord(void *p = 0);
   static void *newArray_AliTriggerScalersRecord(Long_t size, void *p);
   static void delete_AliTriggerScalersRecord(void *p);
   static void deleteArray_AliTriggerScalersRecord(void *p);
   static void destruct_AliTriggerScalersRecord(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTriggerScalersRecord*)
   {
      ::AliTriggerScalersRecord *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTriggerScalersRecord >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTriggerScalersRecord", ::AliTriggerScalersRecord::Class_Version(), "./AliTriggerScalersRecord.h", 23,
                  typeid(::AliTriggerScalersRecord), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTriggerScalersRecord::Dictionary, isa_proxy, 4,
                  sizeof(::AliTriggerScalersRecord) );
      instance.SetNew(&new_AliTriggerScalersRecord);
      instance.SetNewArray(&newArray_AliTriggerScalersRecord);
      instance.SetDelete(&delete_AliTriggerScalersRecord);
      instance.SetDeleteArray(&deleteArray_AliTriggerScalersRecord);
      instance.SetDestructor(&destruct_AliTriggerScalersRecord);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTriggerScalersRecord*)
   {
      return GenerateInitInstanceLocal((::AliTriggerScalersRecord*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTriggerScalersRecord*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVAODHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void AliVAODHeader_Dictionary();
   static void delete_AliVAODHeader(void *p);
   static void deleteArray_AliVAODHeader(void *p);
   static void destruct_AliVAODHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVAODHeader*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::AliVAODHeader) == sizeof( ::ROOTShadow::Shadow::AliVAODHeader));
      ::AliVAODHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::AliVAODHeader),0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVAODHeader", "./AliVAODHeader.h", 27,
                  typeid(::AliVAODHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &AliVAODHeader_ShowMembers, &AliVAODHeader_Dictionary, isa_proxy, 4,
                  sizeof(::AliVAODHeader) );
      instance.SetDelete(&delete_AliVAODHeader);
      instance.SetDeleteArray(&deleteArray_AliVAODHeader);
      instance.SetDestructor(&destruct_AliVAODHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVAODHeader*)
   {
      return GenerateInitInstanceLocal((::AliVAODHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVAODHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void AliVAODHeader_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::AliVAODHeader*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVersion_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliVersion(void *p = 0);
   static void *newArray_AliVersion(Long_t size, void *p);
   static void delete_AliVersion(void *p);
   static void deleteArray_AliVersion(void *p);
   static void destruct_AliVersion(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVersion*)
   {
      ::AliVersion *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVersion >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVersion", ::AliVersion::Class_Version(), "./AliVersion.h", 4,
                  typeid(::AliVersion), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVersion::Dictionary, isa_proxy, 4,
                  sizeof(::AliVersion) );
      instance.SetNew(&new_AliVersion);
      instance.SetNewArray(&newArray_AliVersion);
      instance.SetDelete(&delete_AliVersion);
      instance.SetDeleteArray(&deleteArray_AliVersion);
      instance.SetDestructor(&destruct_AliVersion);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVersion*)
   {
      return GenerateInitInstanceLocal((::AliVersion*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVersion*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVEventPool_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVEventPool(void *p);
   static void deleteArray_AliVEventPool(void *p);
   static void destruct_AliVEventPool(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVEventPool*)
   {
      ::AliVEventPool *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVEventPool >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVEventPool", ::AliVEventPool::Class_Version(), "./AliVEventPool.h", 18,
                  typeid(::AliVEventPool), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVEventPool::Dictionary, isa_proxy, 4,
                  sizeof(::AliVEventPool) );
      instance.SetDelete(&delete_AliVEventPool);
      instance.SetDeleteArray(&deleteArray_AliVEventPool);
      instance.SetDestructor(&destruct_AliVEventPool);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVEventPool*)
   {
      return GenerateInitInstanceLocal((::AliVEventPool*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVEventPool*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVfriendTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVfriendTrack(void *p);
   static void deleteArray_AliVfriendTrack(void *p);
   static void destruct_AliVfriendTrack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVfriendTrack*)
   {
      ::AliVfriendTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVfriendTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVfriendTrack", ::AliVfriendTrack::Class_Version(), "./AliVfriendTrack.h", 16,
                  typeid(::AliVfriendTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVfriendTrack::Dictionary, isa_proxy, 4,
                  sizeof(::AliVfriendTrack) );
      instance.SetDelete(&delete_AliVfriendTrack);
      instance.SetDeleteArray(&deleteArray_AliVfriendTrack);
      instance.SetDestructor(&destruct_AliVfriendTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVfriendTrack*)
   {
      return GenerateInitInstanceLocal((::AliVfriendTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVfriendTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVVZEROfriend_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliVVZEROfriend(void *p = 0);
   static void *newArray_AliVVZEROfriend(Long_t size, void *p);
   static void delete_AliVVZEROfriend(void *p);
   static void deleteArray_AliVVZEROfriend(void *p);
   static void destruct_AliVVZEROfriend(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVVZEROfriend*)
   {
      ::AliVVZEROfriend *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVVZEROfriend >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVVZEROfriend", ::AliVVZEROfriend::Class_Version(), "./AliVVZEROfriend.h", 14,
                  typeid(::AliVVZEROfriend), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVVZEROfriend::Dictionary, isa_proxy, 4,
                  sizeof(::AliVVZEROfriend) );
      instance.SetNew(&new_AliVVZEROfriend);
      instance.SetNewArray(&newArray_AliVVZEROfriend);
      instance.SetDelete(&delete_AliVVZEROfriend);
      instance.SetDeleteArray(&deleteArray_AliVVZEROfriend);
      instance.SetDestructor(&destruct_AliVVZEROfriend);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVVZEROfriend*)
   {
      return GenerateInitInstanceLocal((::AliVVZEROfriend*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVVZEROfriend*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVTOFcluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliVTOFcluster(void *p = 0);
   static void *newArray_AliVTOFcluster(Long_t size, void *p);
   static void delete_AliVTOFcluster(void *p);
   static void deleteArray_AliVTOFcluster(void *p);
   static void destruct_AliVTOFcluster(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVTOFcluster*)
   {
      ::AliVTOFcluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVTOFcluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVTOFcluster", ::AliVTOFcluster::Class_Version(), "./AliVTOFcluster.h", 22,
                  typeid(::AliVTOFcluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVTOFcluster::Dictionary, isa_proxy, 4,
                  sizeof(::AliVTOFcluster) );
      instance.SetNew(&new_AliVTOFcluster);
      instance.SetNewArray(&newArray_AliVTOFcluster);
      instance.SetDelete(&delete_AliVTOFcluster);
      instance.SetDeleteArray(&deleteArray_AliVTOFcluster);
      instance.SetDestructor(&destruct_AliVTOFcluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVTOFcluster*)
   {
      return GenerateInitInstanceLocal((::AliVTOFcluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVTOFcluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVTOFHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliVTOFHit(void *p = 0);
   static void *newArray_AliVTOFHit(Long_t size, void *p);
   static void delete_AliVTOFHit(void *p);
   static void deleteArray_AliVTOFHit(void *p);
   static void destruct_AliVTOFHit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVTOFHit*)
   {
      ::AliVTOFHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVTOFHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVTOFHit", ::AliVTOFHit::Class_Version(), "./AliVTOFHit.h", 18,
                  typeid(::AliVTOFHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVTOFHit::Dictionary, isa_proxy, 4,
                  sizeof(::AliVTOFHit) );
      instance.SetNew(&new_AliVTOFHit);
      instance.SetNewArray(&newArray_AliVTOFHit);
      instance.SetDelete(&delete_AliVTOFHit);
      instance.SetDeleteArray(&deleteArray_AliVTOFHit);
      instance.SetDestructor(&destruct_AliVTOFHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVTOFHit*)
   {
      return GenerateInitInstanceLocal((::AliVTOFHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVTOFHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVTOFMatch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliVTOFMatch(void *p = 0);
   static void *newArray_AliVTOFMatch(Long_t size, void *p);
   static void delete_AliVTOFMatch(void *p);
   static void deleteArray_AliVTOFMatch(void *p);
   static void destruct_AliVTOFMatch(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVTOFMatch*)
   {
      ::AliVTOFMatch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVTOFMatch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVTOFMatch", ::AliVTOFMatch::Class_Version(), "./AliVTOFMatch.h", 19,
                  typeid(::AliVTOFMatch), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVTOFMatch::Dictionary, isa_proxy, 4,
                  sizeof(::AliVTOFMatch) );
      instance.SetNew(&new_AliVTOFMatch);
      instance.SetNewArray(&newArray_AliVTOFMatch);
      instance.SetDelete(&delete_AliVTOFMatch);
      instance.SetDeleteArray(&deleteArray_AliVTOFMatch);
      instance.SetDestructor(&destruct_AliVTOFMatch);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVTOFMatch*)
   {
      return GenerateInitInstanceLocal((::AliVTOFMatch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVTOFMatch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVTPCseed_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void AliVTPCseed_Dictionary();
   static void delete_AliVTPCseed(void *p);
   static void deleteArray_AliVTPCseed(void *p);
   static void destruct_AliVTPCseed(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVTPCseed*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::AliVTPCseed) == sizeof( ::ROOTShadow::Shadow::AliVTPCseed));
      ::AliVTPCseed *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::AliVTPCseed),0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVTPCseed", "./AliVTPCseed.h", 10,
                  typeid(::AliVTPCseed), ::ROOT::DefineBehavior(ptr, ptr),
                  &AliVTPCseed_ShowMembers, &AliVTPCseed_Dictionary, isa_proxy, 4,
                  sizeof(::AliVTPCseed) );
      instance.SetDelete(&delete_AliVTPCseed);
      instance.SetDeleteArray(&deleteArray_AliVTPCseed);
      instance.SetDestructor(&destruct_AliVTPCseed);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVTPCseed*)
   {
      return GenerateInitInstanceLocal((::AliVTPCseed*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVTPCseed*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void AliVTPCseed_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTPCseed*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void TTreeDataElement_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TTreeDataElement(void *p);
   static void deleteArray_TTreeDataElement(void *p);
   static void destruct_TTreeDataElement(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TTreeDataElement*)
   {
      ::TTreeDataElement *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TTreeDataElement >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TTreeDataElement", ::TTreeDataElement::Class_Version(), "./TTreeStream.h", 16,
                  typeid(::TTreeDataElement), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TTreeDataElement::Dictionary, isa_proxy, 4,
                  sizeof(::TTreeDataElement) );
      instance.SetDelete(&delete_TTreeDataElement);
      instance.SetDeleteArray(&deleteArray_TTreeDataElement);
      instance.SetDestructor(&destruct_TTreeDataElement);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TTreeDataElement*)
   {
      return GenerateInitInstanceLocal((::TTreeDataElement*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TTreeDataElement*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TTreeStream_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TTreeStream(void *p);
   static void deleteArray_TTreeStream(void *p);
   static void destruct_TTreeStream(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TTreeStream*)
   {
      ::TTreeStream *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TTreeStream >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TTreeStream", ::TTreeStream::Class_Version(), "./TTreeStream.h", 36,
                  typeid(::TTreeStream), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TTreeStream::Dictionary, isa_proxy, 4,
                  sizeof(::TTreeStream) );
      instance.SetDelete(&delete_TTreeStream);
      instance.SetDeleteArray(&deleteArray_TTreeStream);
      instance.SetDestructor(&destruct_TTreeStream);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TTreeStream*)
   {
      return GenerateInitInstanceLocal((::TTreeStream*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TTreeStream*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TTreeSRedirector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TTreeSRedirector(void *p = 0);
   static void *newArray_TTreeSRedirector(Long_t size, void *p);
   static void delete_TTreeSRedirector(void *p);
   static void deleteArray_TTreeSRedirector(void *p);
   static void destruct_TTreeSRedirector(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TTreeSRedirector*)
   {
      ::TTreeSRedirector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TTreeSRedirector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TTreeSRedirector", ::TTreeSRedirector::Class_Version(), "./TTreeStream.h", 85,
                  typeid(::TTreeSRedirector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TTreeSRedirector::Dictionary, isa_proxy, 4,
                  sizeof(::TTreeSRedirector) );
      instance.SetNew(&new_TTreeSRedirector);
      instance.SetNewArray(&newArray_TTreeSRedirector);
      instance.SetDelete(&delete_TTreeSRedirector);
      instance.SetDeleteArray(&deleteArray_TTreeSRedirector);
      instance.SetDestructor(&destruct_TTreeSRedirector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TTreeSRedirector*)
   {
      return GenerateInitInstanceLocal((::TTreeSRedirector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TTreeSRedirector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr AliCentrality::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliCentrality::Class_Name()
{
   return "AliCentrality";
}

//______________________________________________________________________________
const char *AliCentrality::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCentrality*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliCentrality::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCentrality*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliCentrality::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCentrality*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliCentrality::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCentrality*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliCheb2DStack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliCheb2DStack::Class_Name()
{
   return "AliCheb2DStack";
}

//______________________________________________________________________________
const char *AliCheb2DStack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb2DStack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliCheb2DStack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb2DStack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliCheb2DStack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb2DStack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliCheb2DStack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb2DStack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliCheb2DStackF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliCheb2DStackF::Class_Name()
{
   return "AliCheb2DStackF";
}

//______________________________________________________________________________
const char *AliCheb2DStackF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb2DStackF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliCheb2DStackF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb2DStackF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliCheb2DStackF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb2DStackF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliCheb2DStackF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb2DStackF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliCheb2DStackS::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliCheb2DStackS::Class_Name()
{
   return "AliCheb2DStackS";
}

//______________________________________________________________________________
const char *AliCheb2DStackS::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb2DStackS*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliCheb2DStackS::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb2DStackS*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliCheb2DStackS::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb2DStackS*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliCheb2DStackS::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb2DStackS*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliCheb3DCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliCheb3DCalc::Class_Name()
{
   return "AliCheb3DCalc";
}

//______________________________________________________________________________
const char *AliCheb3DCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb3DCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliCheb3DCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb3DCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliCheb3DCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb3DCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliCheb3DCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb3DCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliCheb3D::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliCheb3D::Class_Name()
{
   return "AliCheb3D";
}

//______________________________________________________________________________
const char *AliCheb3D::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb3D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliCheb3D::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb3D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliCheb3D::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb3D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliCheb3D::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCheb3D*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliLog::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliLog::Class_Name()
{
   return "AliLog";
}

//______________________________________________________________________________
const char *AliLog::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliLog*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliLog::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliLog*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliLog::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliLog*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliLog::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliLog*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliCodeTimer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliCodeTimer::Class_Name()
{
   return "AliCodeTimer";
}

//______________________________________________________________________________
const char *AliCodeTimer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCodeTimer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliCodeTimer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCodeTimer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliCodeTimer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCodeTimer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliCodeTimer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCodeTimer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliCodeTimer::AliPair::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliCodeTimer::AliPair::Class_Name()
{
   return "AliCodeTimer::AliPair";
}

//______________________________________________________________________________
const char *AliCodeTimer::AliPair::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCodeTimer::AliPair*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliCodeTimer::AliPair::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCodeTimer::AliPair*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliCodeTimer::AliPair::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCodeTimer::AliPair*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliCodeTimer::AliPair::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCodeTimer::AliPair*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliCollisionGeometry::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliCollisionGeometry::Class_Name()
{
   return "AliCollisionGeometry";
}

//______________________________________________________________________________
const char *AliCollisionGeometry::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCollisionGeometry*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliCollisionGeometry::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCollisionGeometry*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliCollisionGeometry::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCollisionGeometry*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliCollisionGeometry::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCollisionGeometry*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliCounterCollection::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliCounterCollection::Class_Name()
{
   return "AliCounterCollection";
}

//______________________________________________________________________________
const char *AliCounterCollection::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCounterCollection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliCounterCollection::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCounterCollection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliCounterCollection::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCounterCollection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliCounterCollection::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCounterCollection*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliDAQ::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliDAQ::Class_Name()
{
   return "AliDAQ";
}

//______________________________________________________________________________
const char *AliDAQ::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliDAQ*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliDAQ::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliDAQ*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliDAQ::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliDAQ*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliDAQ::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliDAQ*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliDataFile::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliDataFile::Class_Name()
{
   return "AliDataFile";
}

//______________________________________________________________________________
const char *AliDataFile::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliDataFile*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliDataFile::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliDataFile*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliDataFile::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliDataFile*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliDataFile::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliDataFile*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliDetectorEventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliDetectorEventHeader::Class_Name()
{
   return "AliDetectorEventHeader";
}

//______________________________________________________________________________
const char *AliDetectorEventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliDetectorEventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliDetectorEventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliDetectorEventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorEventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliPID::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliPID::Class_Name()
{
   return "AliPID";
}

//______________________________________________________________________________
const char *AliPID::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliPID*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliPID::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliPID*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliPID::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliPID*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliPID::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliPID*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVParticle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVParticle::Class_Name()
{
   return "AliVParticle";
}

//______________________________________________________________________________
const char *AliVParticle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVParticle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVParticle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVParticle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVParticle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVEvent::Class_Name()
{
   return "AliVEvent";
}

//______________________________________________________________________________
const char *AliVEvent::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVEvent::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVEvent::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVEvent*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVVertex::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVVertex::Class_Name()
{
   return "AliVVertex";
}

//______________________________________________________________________________
const char *AliVVertex::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVVertex::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVVertex::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVVertex::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVVertex*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliExternalTrackParam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliExternalTrackParam::Class_Name()
{
   return "AliExternalTrackParam";
}

//______________________________________________________________________________
const char *AliExternalTrackParam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliExternalTrackParam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliExternalTrackParam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliExternalTrackParam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliExternalTrackParam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliExternalTrackParam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliExternalTrackParam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliExternalTrackParam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTPCdEdxInfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTPCdEdxInfo::Class_Name()
{
   return "AliTPCdEdxInfo";
}

//______________________________________________________________________________
const char *AliTPCdEdxInfo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTPCdEdxInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTPCdEdxInfo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTPCdEdxInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTPCdEdxInfo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTPCdEdxInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTPCdEdxInfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTPCdEdxInfo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliDetectorPID::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliDetectorPID::Class_Name()
{
   return "AliDetectorPID";
}

//______________________________________________________________________________
const char *AliDetectorPID::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorPID*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliDetectorPID::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorPID*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliDetectorPID::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorPID*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliDetectorPID::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorPID*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTOFHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTOFHeader::Class_Name()
{
   return "AliTOFHeader";
}

//______________________________________________________________________________
const char *AliTOFHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTOFHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTOFHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTOFHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVTrack::Class_Name()
{
   return "AliVTrack";
}

//______________________________________________________________________________
const char *AliVTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliITSPidParams::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliITSPidParams::Class_Name()
{
   return "AliITSPidParams";
}

//______________________________________________________________________________
const char *AliITSPidParams::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliITSPidParams*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliITSPidParams::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliITSPidParams*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliITSPidParams::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliITSPidParams*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliITSPidParams::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliITSPidParams*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliITSPIDResponse::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliITSPIDResponse::Class_Name()
{
   return "AliITSPIDResponse";
}

//______________________________________________________________________________
const char *AliITSPIDResponse::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliITSPIDResponse*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliITSPIDResponse::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliITSPIDResponse*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliITSPIDResponse::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliITSPIDResponse*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliITSPIDResponse::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliITSPIDResponse*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliOADBContainer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliOADBContainer::Class_Name()
{
   return "AliOADBContainer";
}

//______________________________________________________________________________
const char *AliOADBContainer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliOADBContainer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliOADBContainer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliOADBContainer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliOADBContainer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliOADBContainer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliOADBContainer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliOADBContainer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTPCPIDResponse::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTPCPIDResponse::Class_Name()
{
   return "AliTPCPIDResponse";
}

//______________________________________________________________________________
const char *AliTPCPIDResponse::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTPCPIDResponse*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTPCPIDResponse::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTPCPIDResponse*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTPCPIDResponse::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTPCPIDResponse*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTPCPIDResponse::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTPCPIDResponse*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTRDPIDResponseObject::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTRDPIDResponseObject::Class_Name()
{
   return "AliTRDPIDResponseObject";
}

//______________________________________________________________________________
const char *AliTRDPIDResponseObject::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDResponseObject*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTRDPIDResponseObject::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDResponseObject*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTRDPIDResponseObject::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDResponseObject*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTRDPIDResponseObject::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDResponseObject*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTRDdEdxParams::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTRDdEdxParams::Class_Name()
{
   return "AliTRDdEdxParams";
}

//______________________________________________________________________________
const char *AliTRDdEdxParams::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDdEdxParams*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTRDdEdxParams::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDdEdxParams*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTRDdEdxParams::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDdEdxParams*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTRDdEdxParams::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDdEdxParams*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTRDPIDResponse::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTRDPIDResponse::Class_Name()
{
   return "AliTRDPIDResponse";
}

//______________________________________________________________________________
const char *AliTRDPIDResponse::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDResponse*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTRDPIDResponse::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDResponse*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTRDPIDResponse::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDResponse*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTRDPIDResponse::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDResponse*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTOFPIDParams::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTOFPIDParams::Class_Name()
{
   return "AliTOFPIDParams";
}

//______________________________________________________________________________
const char *AliTOFPIDParams::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFPIDParams*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTOFPIDParams::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFPIDParams*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTOFPIDParams::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFPIDParams*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTOFPIDParams::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFPIDParams*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTOFPIDResponse::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTOFPIDResponse::Class_Name()
{
   return "AliTOFPIDResponse";
}

//______________________________________________________________________________
const char *AliTOFPIDResponse::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFPIDResponse*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTOFPIDResponse::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFPIDResponse*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTOFPIDResponse::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFPIDResponse*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTOFPIDResponse::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFPIDResponse*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliHMPIDPIDResponse::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliHMPIDPIDResponse::Class_Name()
{
   return "AliHMPIDPIDResponse";
}

//______________________________________________________________________________
const char *AliHMPIDPIDResponse::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliHMPIDPIDResponse*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliHMPIDPIDResponse::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliHMPIDPIDResponse*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliHMPIDPIDResponse::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliHMPIDPIDResponse*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliHMPIDPIDResponse::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliHMPIDPIDResponse*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliEMCALPIDResponse::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliEMCALPIDResponse::Class_Name()
{
   return "AliEMCALPIDResponse";
}

//______________________________________________________________________________
const char *AliEMCALPIDResponse::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliEMCALPIDResponse*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliEMCALPIDResponse::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliEMCALPIDResponse*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliEMCALPIDResponse::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliEMCALPIDResponse*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliEMCALPIDResponse::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliEMCALPIDResponse*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliMCEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliMCEvent::Class_Name()
{
   return "AliMCEvent";
}

//______________________________________________________________________________
const char *AliMCEvent::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliMCEvent::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliMCEvent::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliMCEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCEvent*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliHMPIDPIDParams::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliHMPIDPIDParams::Class_Name()
{
   return "AliHMPIDPIDParams";
}

//______________________________________________________________________________
const char *AliHMPIDPIDParams::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliHMPIDPIDParams*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliHMPIDPIDParams::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliHMPIDPIDParams*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliHMPIDPIDParams::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliHMPIDPIDParams*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliHMPIDPIDParams::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliHMPIDPIDParams*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliPIDResponse::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliPIDResponse::Class_Name()
{
   return "AliPIDResponse";
}

//______________________________________________________________________________
const char *AliPIDResponse::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliPIDResponse*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliPIDResponse::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliPIDResponse*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliPIDResponse::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliPIDResponse*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliPIDResponse::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliPIDResponse*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliDetectorTag::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliDetectorTag::Class_Name()
{
   return "AliDetectorTag";
}

//______________________________________________________________________________
const char *AliDetectorTag::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorTag*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliDetectorTag::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorTag*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliDetectorTag::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorTag*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliDetectorTag::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorTag*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliDetectorTagCuts::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliDetectorTagCuts::Class_Name()
{
   return "AliDetectorTagCuts";
}

//______________________________________________________________________________
const char *AliDetectorTagCuts::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorTagCuts*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliDetectorTagCuts::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorTagCuts*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliDetectorTagCuts::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorTagCuts*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliDetectorTagCuts::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliDetectorTagCuts*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVfriendEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVfriendEvent::Class_Name()
{
   return "AliVfriendEvent";
}

//______________________________________________________________________________
const char *AliVfriendEvent::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVfriendEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVfriendEvent::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVfriendEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVfriendEvent::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVfriendEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVfriendEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVfriendEvent*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVEventHandler::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVEventHandler::Class_Name()
{
   return "AliVEventHandler";
}

//______________________________________________________________________________
const char *AliVEventHandler::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVEventHandler*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVEventHandler::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVEventHandler*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVEventHandler::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVEventHandler*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVEventHandler::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVEventHandler*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVCuts::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVCuts::Class_Name()
{
   return "AliVCuts";
}

//______________________________________________________________________________
const char *AliVCuts::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCuts*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVCuts::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCuts*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVCuts::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCuts*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVCuts::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCuts*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliRunTag::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliRunTag::Class_Name()
{
   return "AliRunTag";
}

//______________________________________________________________________________
const char *AliRunTag::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliRunTag*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliRunTag::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliRunTag*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliRunTag::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliRunTag*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliRunTag::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliRunTag*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliEventTag::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliEventTag::Class_Name()
{
   return "AliEventTag";
}

//______________________________________________________________________________
const char *AliEventTag::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliEventTag*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliEventTag::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliEventTag*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliEventTag::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliEventTag*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliEventTag::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliEventTag*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliInputEventHandler::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliInputEventHandler::Class_Name()
{
   return "AliInputEventHandler";
}

//______________________________________________________________________________
const char *AliInputEventHandler::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliInputEventHandler*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliInputEventHandler::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliInputEventHandler*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliInputEventHandler::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliInputEventHandler*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliInputEventHandler::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliInputEventHandler*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliDummyHandler::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliDummyHandler::Class_Name()
{
   return "AliDummyHandler";
}

//______________________________________________________________________________
const char *AliDummyHandler::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliDummyHandler*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliDummyHandler::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliDummyHandler*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliDummyHandler::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliDummyHandler*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliDummyHandler::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliDummyHandler*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliEventplane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliEventplane::Class_Name()
{
   return "AliEventplane";
}

//______________________________________________________________________________
const char *AliEventplane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliEventplane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliEventplane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliEventplane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliEventplane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliEventplane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliEventplane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliEventplane*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliEventTagCuts::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliEventTagCuts::Class_Name()
{
   return "AliEventTagCuts";
}

//______________________________________________________________________________
const char *AliEventTagCuts::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliEventTagCuts*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliEventTagCuts::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliEventTagCuts*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliEventTagCuts::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliEventTagCuts*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliEventTagCuts::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliEventTagCuts*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliFileTag::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliFileTag::Class_Name()
{
   return "AliFileTag";
}

//______________________________________________________________________________
const char *AliFileTag::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliFileTag*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliFileTag::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliFileTag*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliFileTag::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliFileTag*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliFileTag::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliFileTag*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliGenEventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliGenEventHeader::Class_Name()
{
   return "AliGenEventHeader";
}

//______________________________________________________________________________
const char *AliGenEventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliGenEventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliGenEventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliGenEventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliGenCocktailEventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliGenCocktailEventHeader::Class_Name()
{
   return "AliGenCocktailEventHeader";
}

//______________________________________________________________________________
const char *AliGenCocktailEventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenCocktailEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliGenCocktailEventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenCocktailEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliGenCocktailEventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenCocktailEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliGenCocktailEventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenCocktailEventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliGenDPMjetEventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliGenDPMjetEventHeader::Class_Name()
{
   return "AliGenDPMjetEventHeader";
}

//______________________________________________________________________________
const char *AliGenDPMjetEventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenDPMjetEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliGenDPMjetEventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenDPMjetEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliGenDPMjetEventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenDPMjetEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliGenDPMjetEventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenDPMjetEventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliGenEpos3EventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliGenEpos3EventHeader::Class_Name()
{
   return "AliGenEpos3EventHeader";
}

//______________________________________________________________________________
const char *AliGenEpos3EventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEpos3EventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliGenEpos3EventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEpos3EventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliGenEpos3EventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEpos3EventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliGenEpos3EventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEpos3EventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliGenEposEventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliGenEposEventHeader::Class_Name()
{
   return "AliGenEposEventHeader";
}

//______________________________________________________________________________
const char *AliGenEposEventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEposEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliGenEposEventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEposEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliGenEposEventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEposEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliGenEposEventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEposEventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliGenEventHeaderTunedPbPb::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliGenEventHeaderTunedPbPb::Class_Name()
{
   return "AliGenEventHeaderTunedPbPb";
}

//______________________________________________________________________________
const char *AliGenEventHeaderTunedPbPb::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEventHeaderTunedPbPb*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliGenEventHeaderTunedPbPb::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEventHeaderTunedPbPb*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliGenEventHeaderTunedPbPb::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEventHeaderTunedPbPb*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliGenEventHeaderTunedPbPb::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenEventHeaderTunedPbPb*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliGenGeVSimEventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliGenGeVSimEventHeader::Class_Name()
{
   return "AliGenGeVSimEventHeader";
}

//______________________________________________________________________________
const char *AliGenGeVSimEventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenGeVSimEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliGenGeVSimEventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenGeVSimEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliGenGeVSimEventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenGeVSimEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliGenGeVSimEventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenGeVSimEventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliGenHepMCEventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliGenHepMCEventHeader::Class_Name()
{
   return "AliGenHepMCEventHeader";
}

//______________________________________________________________________________
const char *AliGenHepMCEventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenHepMCEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliGenHepMCEventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenHepMCEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliGenHepMCEventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenHepMCEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliGenHepMCEventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenHepMCEventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliGenHerwigEventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliGenHerwigEventHeader::Class_Name()
{
   return "AliGenHerwigEventHeader";
}

//______________________________________________________________________________
const char *AliGenHerwigEventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenHerwigEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliGenHerwigEventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenHerwigEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliGenHerwigEventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenHerwigEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliGenHerwigEventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenHerwigEventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliGenHijingEventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliGenHijingEventHeader::Class_Name()
{
   return "AliGenHijingEventHeader";
}

//______________________________________________________________________________
const char *AliGenHijingEventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenHijingEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliGenHijingEventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenHijingEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliGenHijingEventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenHijingEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliGenHijingEventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenHijingEventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliGenPythiaEventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliGenPythiaEventHeader::Class_Name()
{
   return "AliGenPythiaEventHeader";
}

//______________________________________________________________________________
const char *AliGenPythiaEventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenPythiaEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliGenPythiaEventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenPythiaEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliGenPythiaEventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenPythiaEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliGenPythiaEventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenPythiaEventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliGenToyEventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliGenToyEventHeader::Class_Name()
{
   return "AliGenToyEventHeader";
}

//______________________________________________________________________________
const char *AliGenToyEventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenToyEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliGenToyEventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenToyEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliGenToyEventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenToyEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliGenToyEventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliGenToyEventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliStack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliStack::Class_Name()
{
   return "AliStack";
}

//______________________________________________________________________________
const char *AliStack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliStack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliStack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliStack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliStack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliStack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliStack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliStack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliHeader::Class_Name()
{
   return "AliHeader";
}

//______________________________________________________________________________
const char *AliHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliLHCTag::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliLHCTag::Class_Name()
{
   return "AliLHCTag";
}

//______________________________________________________________________________
const char *AliLHCTag::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliLHCTag*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliLHCTag::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliLHCTag*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliLHCTag::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliLHCTag*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliLHCTag::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliLHCTag*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliLHCTagCuts::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliLHCTagCuts::Class_Name()
{
   return "AliLHCTagCuts";
}

//______________________________________________________________________________
const char *AliLHCTagCuts::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliLHCTagCuts*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliLHCTagCuts::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliLHCTagCuts*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliLHCTagCuts::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliLHCTagCuts*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliLHCTagCuts::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliLHCTagCuts*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliMagWrapCheb::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliMagWrapCheb::Class_Name()
{
   return "AliMagWrapCheb";
}

//______________________________________________________________________________
const char *AliMagWrapCheb::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMagWrapCheb*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliMagWrapCheb::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMagWrapCheb*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliMagWrapCheb::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMagWrapCheb*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliMagWrapCheb::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMagWrapCheb*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliMagF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliMagF::Class_Name()
{
   return "AliMagF";
}

//______________________________________________________________________________
const char *AliMagF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMagF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliMagF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMagF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliMagF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMagF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliMagF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMagF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliMathBase::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliMathBase::Class_Name()
{
   return "AliMathBase";
}

//______________________________________________________________________________
const char *AliMathBase::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMathBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliMathBase::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMathBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliMathBase::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMathBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliMathBase::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMathBase*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVHeader::Class_Name()
{
   return "AliVHeader";
}

//______________________________________________________________________________
const char *AliVHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVCluster::Class_Name()
{
   return "AliVCluster";
}

//______________________________________________________________________________
const char *AliVCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVCaloCells::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVCaloCells::Class_Name()
{
   return "AliVCaloCells";
}

//______________________________________________________________________________
const char *AliVCaloCells::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCaloCells*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVCaloCells::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCaloCells*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVCaloCells::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCaloCells*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVCaloCells::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCaloCells*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVCaloTrigger::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVCaloTrigger::Class_Name()
{
   return "AliVCaloTrigger";
}

//______________________________________________________________________________
const char *AliVCaloTrigger::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCaloTrigger*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVCaloTrigger::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCaloTrigger*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVCaloTrigger::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCaloTrigger*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVCaloTrigger::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVCaloTrigger*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTOFTriggerMask::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTOFTriggerMask::Class_Name()
{
   return "AliTOFTriggerMask";
}

//______________________________________________________________________________
const char *AliTOFTriggerMask::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFTriggerMask*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTOFTriggerMask::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFTriggerMask*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTOFTriggerMask::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFTriggerMask*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTOFTriggerMask::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTOFTriggerMask*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVTrdTracklet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVTrdTracklet::Class_Name()
{
   return "AliVTrdTracklet";
}

//______________________________________________________________________________
const char *AliVTrdTracklet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTrdTracklet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVTrdTracklet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTrdTracklet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVTrdTracklet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTrdTracklet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVTrdTracklet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTrdTracklet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVTrdTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVTrdTrack::Class_Name()
{
   return "AliVTrdTrack";
}

//______________________________________________________________________________
const char *AliVTrdTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTrdTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVTrdTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTrdTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVTrdTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTrdTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVTrdTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTrdTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVMultiplicity::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVMultiplicity::Class_Name()
{
   return "AliVMultiplicity";
}

//______________________________________________________________________________
const char *AliVMultiplicity::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVMultiplicity*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVMultiplicity::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVMultiplicity*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVMultiplicity::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVMultiplicity*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVMultiplicity::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVMultiplicity*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVVZERO::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVVZERO::Class_Name()
{
   return "AliVVZERO";
}

//______________________________________________________________________________
const char *AliVVZERO::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVVZERO*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVVZERO::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVVZERO*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVVZERO::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVVZERO*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVVZERO::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVVZERO*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVZDC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVZDC::Class_Name()
{
   return "AliVZDC";
}

//______________________________________________________________________________
const char *AliVZDC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVZDC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVZDC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVZDC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVZDC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVZDC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVZDC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVZDC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVMFT::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVMFT::Class_Name()
{
   return "AliVMFT";
}

//______________________________________________________________________________
const char *AliVMFT::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVMFT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVMFT::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVMFT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVMFT::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVMFT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVMFT::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVMFT*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVAD::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVAD::Class_Name()
{
   return "AliVAD";
}

//______________________________________________________________________________
const char *AliVAD::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVAD*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVAD::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVAD*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVAD::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVAD*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVAD::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVAD*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTrackReference::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTrackReference::Class_Name()
{
   return "AliTrackReference";
}

//______________________________________________________________________________
const char *AliTrackReference::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackReference*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTrackReference::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackReference*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTrackReference::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackReference*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTrackReference::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackReference*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliMCParticle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliMCParticle::Class_Name()
{
   return "AliMCParticle";
}

//______________________________________________________________________________
const char *AliMCParticle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliMCParticle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliMCParticle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliMCParticle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCParticle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliMCEventHandler::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliMCEventHandler::Class_Name()
{
   return "AliMCEventHandler";
}

//______________________________________________________________________________
const char *AliMCEventHandler::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCEventHandler*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliMCEventHandler::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCEventHandler*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliMCEventHandler::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCEventHandler*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliMCEventHandler::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCEventHandler*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliMCVertex::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliMCVertex::Class_Name()
{
   return "AliMCVertex";
}

//______________________________________________________________________________
const char *AliMCVertex::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliMCVertex::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliMCVertex::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliMCVertex::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMCVertex*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliMergeableCollectionIterator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliMergeableCollectionIterator::Class_Name()
{
   return "AliMergeableCollectionIterator";
}

//______________________________________________________________________________
const char *AliMergeableCollectionIterator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMergeableCollectionIterator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliMergeableCollectionIterator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMergeableCollectionIterator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliMergeableCollectionIterator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMergeableCollectionIterator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliMergeableCollectionIterator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMergeableCollectionIterator*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliMergeableCollectionProxy::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliMergeableCollectionProxy::Class_Name()
{
   return "AliMergeableCollectionProxy";
}

//______________________________________________________________________________
const char *AliMergeableCollectionProxy::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMergeableCollectionProxy*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliMergeableCollectionProxy::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMergeableCollectionProxy*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliMergeableCollectionProxy::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMergeableCollectionProxy*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliMergeableCollectionProxy::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMergeableCollectionProxy*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliMergeableCollection::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliMergeableCollection::Class_Name()
{
   return "AliMergeableCollection";
}

//______________________________________________________________________________
const char *AliMergeableCollection::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMergeableCollection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliMergeableCollection::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMergeableCollection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliMergeableCollection::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMergeableCollection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliMergeableCollection::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMergeableCollection*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliMixedEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliMixedEvent::Class_Name()
{
   return "AliMixedEvent";
}

//______________________________________________________________________________
const char *AliMixedEvent::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMixedEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliMixedEvent::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMixedEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliMixedEvent::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMixedEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliMixedEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMixedEvent*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliMultSelectionBase::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliMultSelectionBase::Class_Name()
{
   return "AliMultSelectionBase";
}

//______________________________________________________________________________
const char *AliMultSelectionBase::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMultSelectionBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliMultSelectionBase::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMultSelectionBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliMultSelectionBase::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMultSelectionBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliMultSelectionBase::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMultSelectionBase*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliNeutralTrackParam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliNeutralTrackParam::Class_Name()
{
   return "AliNeutralTrackParam";
}

//______________________________________________________________________________
const char *AliNeutralTrackParam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliNeutralTrackParam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliNeutralTrackParam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliNeutralTrackParam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliNeutralTrackParam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliNeutralTrackParam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliNeutralTrackParam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliNeutralTrackParam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliPDG::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliPDG::Class_Name()
{
   return "AliPDG";
}

//______________________________________________________________________________
const char *AliPDG::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliPDG*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliPDG::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliPDG*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliPDG::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliPDG*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliPDG::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliPDG*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliPIDCombined::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliPIDCombined::Class_Name()
{
   return "AliPIDCombined";
}

//______________________________________________________________________________
const char *AliPIDCombined::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliPIDCombined*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliPIDCombined::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliPIDCombined*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliPIDCombined::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliPIDCombined*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliPIDCombined::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliPIDCombined*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliPIDValues::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliPIDValues::Class_Name()
{
   return "AliPIDValues";
}

//______________________________________________________________________________
const char *AliPIDValues::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliPIDValues*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliPIDValues::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliPIDValues*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliPIDValues::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliPIDValues*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliPIDValues::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliPIDValues*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliProdInfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliProdInfo::Class_Name()
{
   return "AliProdInfo";
}

//______________________________________________________________________________
const char *AliProdInfo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliProdInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliProdInfo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliProdInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliProdInfo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliProdInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliProdInfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliProdInfo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliQA::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliQA::Class_Name()
{
   return "AliQA";
}

//______________________________________________________________________________
const char *AliQA::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliQA*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliQA::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliQA*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliQA::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliQA*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliQA::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliQA*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliRefArray::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliRefArray::Class_Name()
{
   return "AliRefArray";
}

//______________________________________________________________________________
const char *AliRefArray::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliRefArray*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliRefArray::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliRefArray*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliRefArray::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliRefArray*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliRefArray::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliRefArray*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliRunTagCuts::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliRunTagCuts::Class_Name()
{
   return "AliRunTagCuts";
}

//______________________________________________________________________________
const char *AliRunTagCuts::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliRunTagCuts*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliRunTagCuts::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliRunTagCuts*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliRunTagCuts::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliRunTagCuts*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliRunTagCuts::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliRunTagCuts*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliSysInfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliSysInfo::Class_Name()
{
   return "AliSysInfo";
}

//______________________________________________________________________________
const char *AliSysInfo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliSysInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliSysInfo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliSysInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliSysInfo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliSysInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliSysInfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliSysInfo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTagCreator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTagCreator::Class_Name()
{
   return "AliTagCreator";
}

//______________________________________________________________________________
const char *AliTagCreator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTagCreator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTagCreator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTagCreator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTagCreator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTagCreator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTagCreator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTagCreator*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTimeStamp::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTimeStamp::Class_Name()
{
   return "AliTimeStamp";
}

//______________________________________________________________________________
const char *AliTimeStamp::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTimeStamp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTimeStamp::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTimeStamp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTimeStamp::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTimeStamp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTimeStamp::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTimeStamp*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTRDNDFast::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTRDNDFast::Class_Name()
{
   return "AliTRDNDFast";
}

//______________________________________________________________________________
const char *AliTRDNDFast::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDNDFast*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTRDNDFast::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDNDFast*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTRDNDFast::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDNDFast*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTRDNDFast::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDNDFast*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTRDPIDParams::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTRDPIDParams::Class_Name()
{
   return "AliTRDPIDParams";
}

//______________________________________________________________________________
const char *AliTRDPIDParams::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDParams*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTRDPIDParams::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDParams*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTRDPIDParams::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDParams*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTRDPIDParams::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDParams*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTRDPIDParams::AliTRDPIDThresholds::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTRDPIDParams::AliTRDPIDThresholds::Class_Name()
{
   return "AliTRDPIDParams::AliTRDPIDThresholds";
}

//______________________________________________________________________________
const char *AliTRDPIDParams::AliTRDPIDThresholds::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDParams::AliTRDPIDThresholds*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTRDPIDParams::AliTRDPIDThresholds::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDParams::AliTRDPIDThresholds*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTRDPIDParams::AliTRDPIDThresholds::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDParams::AliTRDPIDThresholds*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTRDPIDParams::AliTRDPIDThresholds::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDParams::AliTRDPIDThresholds*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTRDPIDParams::AliTRDPIDCentrality::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTRDPIDParams::AliTRDPIDCentrality::Class_Name()
{
   return "AliTRDPIDParams::AliTRDPIDCentrality";
}

//______________________________________________________________________________
const char *AliTRDPIDParams::AliTRDPIDCentrality::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDParams::AliTRDPIDCentrality*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTRDPIDParams::AliTRDPIDCentrality::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDParams::AliTRDPIDCentrality*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTRDPIDParams::AliTRDPIDCentrality::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDParams::AliTRDPIDCentrality*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTRDPIDParams::AliTRDPIDCentrality::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDParams::AliTRDPIDCentrality*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTRDPIDReference::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTRDPIDReference::Class_Name()
{
   return "AliTRDPIDReference";
}

//______________________________________________________________________________
const char *AliTRDPIDReference::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDReference*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTRDPIDReference::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDReference*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTRDPIDReference::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDReference*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTRDPIDReference::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDPIDReference*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTRDTKDInterpolator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTRDTKDInterpolator::Class_Name()
{
   return "AliTRDTKDInterpolator";
}

//______________________________________________________________________________
const char *AliTRDTKDInterpolator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDTKDInterpolator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTRDTKDInterpolator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDTKDInterpolator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTRDTKDInterpolator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDTKDInterpolator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTRDTKDInterpolator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDTKDInterpolator*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTRDTKDInterpolator::AliTRDTKDNodeInfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Class_Name()
{
   return "AliTRDTKDInterpolator::AliTRDTKDNodeInfo";
}

//______________________________________________________________________________
const char *AliTRDTKDInterpolator::AliTRDTKDNodeInfo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTRDTKDInterpolator::AliTRDTKDNodeInfo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTriggerScalers::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTriggerScalers::Class_Name()
{
   return "AliTriggerScalers";
}

//______________________________________________________________________________
const char *AliTriggerScalers::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalers*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTriggerScalers::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalers*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTriggerScalers::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalers*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTriggerScalers::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalers*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTriggerScalersRecord::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTriggerScalersRecord::Class_Name()
{
   return "AliTriggerScalersRecord";
}

//______________________________________________________________________________
const char *AliTriggerScalersRecord::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalersRecord*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTriggerScalersRecord::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalersRecord*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTriggerScalersRecord::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalersRecord*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTriggerScalersRecord::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalersRecord*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVersion::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVersion::Class_Name()
{
   return "AliVersion";
}

//______________________________________________________________________________
const char *AliVersion::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVersion*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVersion::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVersion*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVersion::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVersion*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVersion::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVersion*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVEventPool::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVEventPool::Class_Name()
{
   return "AliVEventPool";
}

//______________________________________________________________________________
const char *AliVEventPool::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVEventPool*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVEventPool::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVEventPool*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVEventPool::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVEventPool*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVEventPool::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVEventPool*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVfriendTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVfriendTrack::Class_Name()
{
   return "AliVfriendTrack";
}

//______________________________________________________________________________
const char *AliVfriendTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVfriendTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVfriendTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVfriendTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVfriendTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVfriendTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVfriendTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVfriendTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVVZEROfriend::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVVZEROfriend::Class_Name()
{
   return "AliVVZEROfriend";
}

//______________________________________________________________________________
const char *AliVVZEROfriend::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVVZEROfriend*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVVZEROfriend::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVVZEROfriend*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVVZEROfriend::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVVZEROfriend*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVVZEROfriend::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVVZEROfriend*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVTOFcluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVTOFcluster::Class_Name()
{
   return "AliVTOFcluster";
}

//______________________________________________________________________________
const char *AliVTOFcluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTOFcluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVTOFcluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTOFcluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVTOFcluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTOFcluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVTOFcluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTOFcluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVTOFHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVTOFHit::Class_Name()
{
   return "AliVTOFHit";
}

//______________________________________________________________________________
const char *AliVTOFHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTOFHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVTOFHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTOFHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVTOFHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTOFHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVTOFHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTOFHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVTOFMatch::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVTOFMatch::Class_Name()
{
   return "AliVTOFMatch";
}

//______________________________________________________________________________
const char *AliVTOFMatch::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTOFMatch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVTOFMatch::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTOFMatch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVTOFMatch::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTOFMatch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVTOFMatch::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTOFMatch*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TTreeDataElement::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TTreeDataElement::Class_Name()
{
   return "TTreeDataElement";
}

//______________________________________________________________________________
const char *TTreeDataElement::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TTreeDataElement*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TTreeDataElement::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TTreeDataElement*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TTreeDataElement::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TTreeDataElement*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TTreeDataElement::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TTreeDataElement*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TTreeStream::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TTreeStream::Class_Name()
{
   return "TTreeStream";
}

//______________________________________________________________________________
const char *TTreeStream::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TTreeStream*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TTreeStream::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TTreeStream*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TTreeStream::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TTreeStream*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TTreeStream::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TTreeStream*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TTreeSRedirector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TTreeSRedirector::Class_Name()
{
   return "TTreeSRedirector";
}

//______________________________________________________________________________
const char *TTreeSRedirector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TTreeSRedirector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TTreeSRedirector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TTreeSRedirector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TTreeSRedirector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TTreeSRedirector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TTreeSRedirector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TTreeSRedirector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void AliVParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVParticle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVParticle::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVParticle::Class(),this);
   }
}

//______________________________________________________________________________
void AliVParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVParticle.
      TClass *R__cl = ::AliVParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVParticle(void *p) {
      delete ((::AliVParticle*)p);
   }
   static void deleteArray_AliVParticle(void *p) {
      delete [] ((::AliVParticle*)p);
   }
   static void destruct_AliVParticle(void *p) {
      typedef ::AliVParticle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVParticle

//______________________________________________________________________________
namespace ROOTDict {
   void AliVTPCseed_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class AliVTPCseed.
      typedef ::ROOTShadow::Shadow::AliVTPCseed ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVTPCseed*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
   }

}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVTPCseed(void *p) {
      delete ((::AliVTPCseed*)p);
   }
   static void deleteArray_AliVTPCseed(void *p) {
      delete [] ((::AliVTPCseed*)p);
   }
   static void destruct_AliVTPCseed(void *p) {
      typedef ::AliVTPCseed current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVTPCseed

//______________________________________________________________________________
void AliVTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVTrack::Class(),this);
   }
}

//______________________________________________________________________________
void AliVTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVTrack.
      TClass *R__cl = ::AliVTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      AliVParticle::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVTrack(void *p) {
      delete ((::AliVTrack*)p);
   }
   static void deleteArray_AliVTrack(void *p) {
      delete [] ((::AliVTrack*)p);
   }
   static void destruct_AliVTrack(void *p) {
      typedef ::AliVTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVTrack

//______________________________________________________________________________
void AliVCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVCluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVCluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVCluster::Class(),this);
   }
}

//______________________________________________________________________________
void AliVCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVCluster.
      TClass *R__cl = ::AliVCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliVCluster(void *p) {
      return  p ? new(p) ::AliVCluster : new ::AliVCluster;
   }
   static void *newArray_AliVCluster(Long_t nElements, void *p) {
      return p ? new(p) ::AliVCluster[nElements] : new ::AliVCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliVCluster(void *p) {
      delete ((::AliVCluster*)p);
   }
   static void deleteArray_AliVCluster(void *p) {
      delete [] ((::AliVCluster*)p);
   }
   static void destruct_AliVCluster(void *p) {
      typedef ::AliVCluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVCluster

//______________________________________________________________________________
void AliVCaloCells::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVCaloCells.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVCaloCells::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVCaloCells::Class(),this);
   }
}

//______________________________________________________________________________
void AliVCaloCells::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVCaloCells.
      TClass *R__cl = ::AliVCaloCells::IsA();
      if (R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVCaloCells(void *p) {
      delete ((::AliVCaloCells*)p);
   }
   static void deleteArray_AliVCaloCells(void *p) {
      delete [] ((::AliVCaloCells*)p);
   }
   static void destruct_AliVCaloCells(void *p) {
      typedef ::AliVCaloCells current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVCaloCells

//______________________________________________________________________________
void AliVVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVVertex::Class(),this);
   }
}

//______________________________________________________________________________
void AliVVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVVertex.
      TClass *R__cl = ::AliVVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVVertex(void *p) {
      delete ((::AliVVertex*)p);
   }
   static void deleteArray_AliVVertex(void *p) {
      delete [] ((::AliVVertex*)p);
   }
   static void destruct_AliVVertex(void *p) {
      typedef ::AliVVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVVertex

//______________________________________________________________________________
void AliVEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVEvent::Class(),this);
   }
}

//______________________________________________________________________________
void AliVEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVEvent.
      TClass *R__cl = ::AliVEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVEvent(void *p) {
      delete ((::AliVEvent*)p);
   }
   static void deleteArray_AliVEvent(void *p) {
      delete [] ((::AliVEvent*)p);
   }
   static void destruct_AliVEvent(void *p) {
      typedef ::AliVEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVEvent

//______________________________________________________________________________
void AliVfriendEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVfriendEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVfriendEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVfriendEvent::Class(),this);
   }
}

//______________________________________________________________________________
void AliVfriendEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVfriendEvent.
      TClass *R__cl = ::AliVfriendEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVfriendEvent(void *p) {
      delete ((::AliVfriendEvent*)p);
   }
   static void deleteArray_AliVfriendEvent(void *p) {
      delete [] ((::AliVfriendEvent*)p);
   }
   static void destruct_AliVfriendEvent(void *p) {
      typedef ::AliVfriendEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVfriendEvent

//______________________________________________________________________________
void AliVfriendTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVfriendTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVfriendTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVfriendTrack::Class(),this);
   }
}

//______________________________________________________________________________
void AliVfriendTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVfriendTrack.
      TClass *R__cl = ::AliVfriendTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVfriendTrack(void *p) {
      delete ((::AliVfriendTrack*)p);
   }
   static void deleteArray_AliVfriendTrack(void *p) {
      delete [] ((::AliVfriendTrack*)p);
   }
   static void destruct_AliVfriendTrack(void *p) {
      typedef ::AliVfriendTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVfriendTrack

//______________________________________________________________________________
void AliVHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliVHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVHeader.
      TClass *R__cl = ::AliVHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVHeader(void *p) {
      delete ((::AliVHeader*)p);
   }
   static void deleteArray_AliVHeader(void *p) {
      delete [] ((::AliVHeader*)p);
   }
   static void destruct_AliVHeader(void *p) {
      typedef ::AliVHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVHeader

//______________________________________________________________________________
namespace ROOTDict {
   void AliVAODHeader_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class AliVAODHeader.
      typedef ::ROOTShadow::Shadow::AliVAODHeader ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVAODHeader*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      sobj->AliVHeader::ShowMembers(R__insp);
   }

}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVAODHeader(void *p) {
      delete ((::AliVAODHeader*)p);
   }
   static void deleteArray_AliVAODHeader(void *p) {
      delete [] ((::AliVAODHeader*)p);
   }
   static void destruct_AliVAODHeader(void *p) {
      typedef ::AliVAODHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVAODHeader

//______________________________________________________________________________
void AliVEventHandler::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVEventHandler.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVEventHandler::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVEventHandler::Class(),this);
   }
}

//______________________________________________________________________________
void AliVEventHandler::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVEventHandler.
      TClass *R__cl = ::AliVEventHandler::IsA();
      if (R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVEventHandler(void *p) {
      delete ((::AliVEventHandler*)p);
   }
   static void deleteArray_AliVEventHandler(void *p) {
      delete [] ((::AliVEventHandler*)p);
   }
   static void destruct_AliVEventHandler(void *p) {
      typedef ::AliVEventHandler current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVEventHandler

//______________________________________________________________________________
void AliVEventPool::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVEventPool.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVEventPool::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVEventPool::Class(),this);
   }
}

//______________________________________________________________________________
void AliVEventPool::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVEventPool.
      TClass *R__cl = ::AliVEventPool::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChain", &fChain);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVEventPool(void *p) {
      delete ((::AliVEventPool*)p);
   }
   static void deleteArray_AliVEventPool(void *p) {
      delete [] ((::AliVEventPool*)p);
   }
   static void destruct_AliVEventPool(void *p) {
      typedef ::AliVEventPool current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVEventPool

//______________________________________________________________________________
void AliVCuts::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVCuts.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVCuts::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVCuts::Class(),this);
   }
}

//______________________________________________________________________________
void AliVCuts::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVCuts.
      TClass *R__cl = ::AliVCuts::IsA();
      if (R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVCuts(void *p) {
      delete ((::AliVCuts*)p);
   }
   static void deleteArray_AliVCuts(void *p) {
      delete [] ((::AliVCuts*)p);
   }
   static void destruct_AliVCuts(void *p) {
      typedef ::AliVCuts current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVCuts

//______________________________________________________________________________
void AliVVZERO::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVVZERO.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVVZERO::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVVZERO::Class(),this);
   }
}

//______________________________________________________________________________
void AliVVZERO::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVVZERO.
      TClass *R__cl = ::AliVVZERO::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVVZERO(void *p) {
      delete ((::AliVVZERO*)p);
   }
   static void deleteArray_AliVVZERO(void *p) {
      delete [] ((::AliVVZERO*)p);
   }
   static void destruct_AliVVZERO(void *p) {
      typedef ::AliVVZERO current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVVZERO

//______________________________________________________________________________
void AliVVZEROfriend::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVVZEROfriend.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVVZEROfriend::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVVZEROfriend::Class(),this);
   }
}

//______________________________________________________________________________
void AliVVZEROfriend::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVVZEROfriend.
      TClass *R__cl = ::AliVVZEROfriend::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliVVZEROfriend(void *p) {
      return  p ? new(p) ::AliVVZEROfriend : new ::AliVVZEROfriend;
   }
   static void *newArray_AliVVZEROfriend(Long_t nElements, void *p) {
      return p ? new(p) ::AliVVZEROfriend[nElements] : new ::AliVVZEROfriend[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliVVZEROfriend(void *p) {
      delete ((::AliVVZEROfriend*)p);
   }
   static void deleteArray_AliVVZEROfriend(void *p) {
      delete [] ((::AliVVZEROfriend*)p);
   }
   static void destruct_AliVVZEROfriend(void *p) {
      typedef ::AliVVZEROfriend current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVVZEROfriend

//______________________________________________________________________________
void AliVZDC::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVZDC.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVZDC::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVZDC::Class(),this);
   }
}

//______________________________________________________________________________
void AliVZDC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVZDC.
      TClass *R__cl = ::AliVZDC::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVZDC(void *p) {
      delete ((::AliVZDC*)p);
   }
   static void deleteArray_AliVZDC(void *p) {
      delete [] ((::AliVZDC*)p);
   }
   static void destruct_AliVZDC(void *p) {
      typedef ::AliVZDC current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVZDC

//______________________________________________________________________________
void AliVAD::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVAD.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVAD::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVAD::Class(),this);
   }
}

//______________________________________________________________________________
void AliVAD::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVAD.
      TClass *R__cl = ::AliVAD::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVAD(void *p) {
      delete ((::AliVAD*)p);
   }
   static void deleteArray_AliVAD(void *p) {
      delete [] ((::AliVAD*)p);
   }
   static void destruct_AliVAD(void *p) {
      typedef ::AliVAD current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVAD

//______________________________________________________________________________
void AliCentrality::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliCentrality.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliCentrality::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliCentrality::Class(),this);
   }
}

//______________________________________________________________________________
void AliCentrality::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliCentrality.
      TClass *R__cl = ::AliCentrality::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQuality", &fQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0M", &fCentralityV0M);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0A", &fCentralityV0A);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0A0", &fCentralityV0A0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0A123", &fCentralityV0A123);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0C", &fCentralityV0C);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0A23", &fCentralityV0A23);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0C01", &fCentralityV0C01);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0S", &fCentralityV0S);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0MEq", &fCentralityV0MEq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0AEq", &fCentralityV0AEq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0CEq", &fCentralityV0CEq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityFMD", &fCentralityFMD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityTRK", &fCentralityTRK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityTKL", &fCentralityTKL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityCL0", &fCentralityCL0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityCL1", &fCentralityCL1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityCND", &fCentralityCND);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityZNA", &fCentralityZNA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityZNC", &fCentralityZNC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityZPA", &fCentralityZPA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityZPC", &fCentralityZPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityNPA", &fCentralityNPA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0MvsFMD", &fCentralityV0MvsFMD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityTKLvsV0M", &fCentralityTKLvsV0M);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityZEMvsZDC", &fCentralityZEMvsZDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0Mtrue", &fCentralityV0Mtrue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0Atrue", &fCentralityV0Atrue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0Ctrue", &fCentralityV0Ctrue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0MEqtrue", &fCentralityV0MEqtrue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0AEqtrue", &fCentralityV0AEqtrue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityV0CEqtrue", &fCentralityV0CEqtrue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityFMDtrue", &fCentralityFMDtrue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityTRKtrue", &fCentralityTRKtrue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityTKLtrue", &fCentralityTKLtrue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityCL0true", &fCentralityCL0true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityCL1true", &fCentralityCL1true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityCNDtrue", &fCentralityCNDtrue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityZNAtrue", &fCentralityZNAtrue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityZNCtrue", &fCentralityZNCtrue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityZPAtrue", &fCentralityZPAtrue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityZPCtrue", &fCentralityZPCtrue);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliCentrality(void *p) {
      return  p ? new(p) ::AliCentrality : new ::AliCentrality;
   }
   static void *newArray_AliCentrality(Long_t nElements, void *p) {
      return p ? new(p) ::AliCentrality[nElements] : new ::AliCentrality[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliCentrality(void *p) {
      delete ((::AliCentrality*)p);
   }
   static void deleteArray_AliCentrality(void *p) {
      delete [] ((::AliCentrality*)p);
   }
   static void destruct_AliCentrality(void *p) {
      typedef ::AliCentrality current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliCentrality

//______________________________________________________________________________
void AliEventplane::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliEventplane.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliEventplane::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliEventplane::Class(),this);
   }
}

//______________________________________________________________________________
void AliEventplane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliEventplane.
      TClass *R__cl = ::AliEventplane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQVector", &fQVector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQContributionX", &fQContributionX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQContributionY", &fQContributionY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQContributionXsub1", &fQContributionXsub1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQContributionYsub1", &fQContributionYsub1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQContributionXsub2", &fQContributionXsub2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQContributionYsub2", &fQContributionYsub2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventplaneQ", &fEventplaneQ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQsub1", &fQsub1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQsub2", &fQsub2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQsubRes", &fQsubRes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanX2[11]", fMeanX2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanY2[11]", fMeanY2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAPlus[11]", fAPlus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAMinus[11]", fAMinus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLambdaPlus[11]", fLambdaPlus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLambdaMinus[11]", fLambdaMinus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCos8Psi[11]", fCos8Psi);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliEventplane(void *p) {
      return  p ? new(p) ::AliEventplane : new ::AliEventplane;
   }
   static void *newArray_AliEventplane(Long_t nElements, void *p) {
      return p ? new(p) ::AliEventplane[nElements] : new ::AliEventplane[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliEventplane(void *p) {
      delete ((::AliEventplane*)p);
   }
   static void deleteArray_AliEventplane(void *p) {
      delete [] ((::AliEventplane*)p);
   }
   static void destruct_AliEventplane(void *p) {
      typedef ::AliEventplane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliEventplane

//______________________________________________________________________________
void AliMixedEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliMixedEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliMixedEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliMixedEvent::Class(),this);
   }
}

//______________________________________________________________________________
void AliMixedEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliMixedEvent.
      TClass *R__cl = ::AliMixedEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventList", &fEventList);
      R__insp.InspectMember(fEventList, "fEventList.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNEvents", &fNEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfTracks", &fNumberOfTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfCaloClusters", &fNumberOfCaloClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfPHOSCells", &fNumberOfPHOSCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfEMCALCells", &fNumberOfEMCALCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNTracksCumul", &fNTracksCumul);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNCaloClustersCumul", &fNCaloClustersCumul);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNPHOSCellsCumul", &fNPHOSCellsCumul);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNEMCALCellsCumul", &fNEMCALCellsCumul);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPHOSCells", &fPHOSCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEMCALCells", &fEMCALCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMeanVertex", &fMeanVertex);
      AliVEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliMixedEvent(void *p) {
      return  p ? new(p) ::AliMixedEvent : new ::AliMixedEvent;
   }
   static void *newArray_AliMixedEvent(Long_t nElements, void *p) {
      return p ? new(p) ::AliMixedEvent[nElements] : new ::AliMixedEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliMixedEvent(void *p) {
      delete ((::AliMixedEvent*)p);
   }
   static void deleteArray_AliMixedEvent(void *p) {
      delete [] ((::AliMixedEvent*)p);
   }
   static void destruct_AliMixedEvent(void *p) {
      typedef ::AliMixedEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliMixedEvent

//______________________________________________________________________________
void AliPID::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliPID.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliPID::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliPID::Class(),this);
   }
}

//______________________________________________________________________________
void AliPID::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliPID.
      TClass *R__cl = ::AliPID::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCharged", &fCharged);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProbDensity[14]", fProbDensity);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliPID(void *p) {
      return  p ? new(p) ::AliPID : new ::AliPID;
   }
   static void *newArray_AliPID(Long_t nElements, void *p) {
      return p ? new(p) ::AliPID[nElements] : new ::AliPID[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliPID(void *p) {
      delete ((::AliPID*)p);
   }
   static void deleteArray_AliPID(void *p) {
      delete [] ((::AliPID*)p);
   }
   static void destruct_AliPID(void *p) {
      typedef ::AliPID current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliPID

//______________________________________________________________________________
void AliLog::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliLog.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliLog::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliLog::Class(),this);
   }
}

//______________________________________________________________________________
void AliLog::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliLog.
      TClass *R__cl = ::AliLog::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGlobalLogLevel", &fGlobalLogLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModuleDebugLevels", &fModuleDebugLevels);
      R__insp.InspectMember(fModuleDebugLevels, "fModuleDebugLevels.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClassDebugLevels", &fClassDebugLevels);
      R__insp.InspectMember(fClassDebugLevels, "fClassDebugLevels.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputTypes[5]", fOutputTypes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileNames[5]", fFileNames);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputFiles[5]", &fOutputFiles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputStreams[5]", &fOutputStreams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrintType[5]", fPrintType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrintModule[5]", fPrintModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrintScope[5]", fPrintScope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrintLocation[5]", fPrintLocation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrintRepetitions", &fPrintRepetitions);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRepetitions", &fRepetitions);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastType", &fLastType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastMessage", &fLastMessage);
      R__insp.InspectMember(fLastMessage, "fLastMessage.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastModule", &fLastModule);
      R__insp.InspectMember(fLastModule, "fLastModule.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastClassName", &fLastClassName);
      R__insp.InspectMember(fLastClassName, "fLastClassName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastFunction", &fLastFunction);
      R__insp.InspectMember(fLastFunction, "fLastFunction.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastFile", &fLastFile);
      R__insp.InspectMember(fLastFile, "fLastFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastLine", &fLastLine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCallBacks[5]", &fCallBacks);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
} // end of namespace ROOTDict for class ::AliLog

//______________________________________________________________________________
void AliRunTag::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliRunTag.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliRunTag::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliRunTag::Class(),this);
   }
}

//______________________________________________________________________________
void AliRunTag::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliRunTag.
      TClass *R__cl = ::AliRunTag::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunId", &fAliceRunId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceMagneticField", &fAliceMagneticField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceDipoleField", &fAliceDipoleField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunStartTime", &fAliceRunStartTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunStopTime", &fAliceRunStopTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAlirootVersion", &fAlirootVersion);
      R__insp.InspectMember(fAlirootVersion, "fAlirootVersion.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRootVersion", &fRootVersion);
      R__insp.InspectMember(fRootVersion, "fRootVersion.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeant3Version", &fGeant3Version);
      R__insp.InspectMember(fGeant3Version, "fGeant3Version.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLHCPeriod", &fLHCPeriod);
      R__insp.InspectMember(fLHCPeriod, "fLHCPeriod.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecPass", &fRecPass);
      R__insp.InspectMember(fRecPass, "fRecPass.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProductionName", &fProductionName);
      R__insp.InspectMember(fProductionName, "fProductionName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunValidated", &fAliceRunValidated);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunGlobalQuality", &fAliceRunGlobalQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceBeamEnergy", &fAliceBeamEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceBeamType", &fAliceBeamType);
      R__insp.InspectMember(fAliceBeamType, "fAliceBeamType.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceCalibrationVersion", &fAliceCalibrationVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceDataType", &fAliceDataType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumFiles", &fNumFiles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamTriggers", &fBeamTriggers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCollisionTriggers", &fCollisionTriggers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEmptyTriggers", &fEmptyTriggers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fASideTriggers", &fASideTriggers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCSideTriggers", &fCSideTriggers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHMTriggers", &fHMTriggers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMuonTriggers", &fMuonTriggers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCollisionRate", &fCollisionRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanVertex", &fMeanVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVertexQuality", &fVertexQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumDetectors", &fNumDetectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileTags", &fFileTags);
      R__insp.InspectMember(fFileTags, "fFileTags.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorTag", &fDetectorTag);
      R__insp.InspectMember(fDetectorTag, "fDetectorTag.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLHCTag", &fLHCTag);
      R__insp.InspectMember(fLHCTag, "fLHCTag.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fActiveTriggerClasses", &fActiveTriggerClasses);
      R__insp.InspectMember(fActiveTriggerClasses, "fActiveTriggerClasses.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQA", &fQA);
      R__insp.InspectMember(fQA, "fQA.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQALength", &fQALength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQAArray", &fQAArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fESLength", &fESLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEventSpecies", &fEventSpecies);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliRunTag(void *p) {
      return  p ? new(p) ::AliRunTag : new ::AliRunTag;
   }
   static void *newArray_AliRunTag(Long_t nElements, void *p) {
      return p ? new(p) ::AliRunTag[nElements] : new ::AliRunTag[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliRunTag(void *p) {
      delete ((::AliRunTag*)p);
   }
   static void deleteArray_AliRunTag(void *p) {
      delete [] ((::AliRunTag*)p);
   }
   static void destruct_AliRunTag(void *p) {
      typedef ::AliRunTag current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliRunTag

//______________________________________________________________________________
void AliLHCTag::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliLHCTag.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliLHCTag::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliLHCTag::Class(),this);
   }
}

//______________________________________________________________________________
void AliLHCTag::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliLHCTag.
      TClass *R__cl = ::AliLHCTag::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLHCState", &fLHCState);
      R__insp.InspectMember(fLHCState, "fLHCState.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLHCLuminosity", &fLHCLuminosity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNBunches", &fNBunches);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFillingScheme", &fFillingScheme);
      R__insp.InspectMember(fFillingScheme, "fFillingScheme.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFillNo", &fFillNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamEnergy", &fBeamEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBunchIntensity", &fBunchIntensity);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliLHCTag(void *p) {
      return  p ? new(p) ::AliLHCTag : new ::AliLHCTag;
   }
   static void *newArray_AliLHCTag(Long_t nElements, void *p) {
      return p ? new(p) ::AliLHCTag[nElements] : new ::AliLHCTag[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliLHCTag(void *p) {
      delete ((::AliLHCTag*)p);
   }
   static void deleteArray_AliLHCTag(void *p) {
      delete [] ((::AliLHCTag*)p);
   }
   static void destruct_AliLHCTag(void *p) {
      typedef ::AliLHCTag current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliLHCTag

//______________________________________________________________________________
void AliDetectorTag::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliDetectorTag.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliDetectorTag::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliDetectorTag::Class(),this);
   }
}

//______________________________________________________________________________
void AliDetectorTag::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliDetectorTag.
      TClass *R__cl = ::AliDetectorTag::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaskDAQ", &fMaskDAQ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaskReco", &fMaskReco);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorValidityRange[30]", fDetectorValidityRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorStatus[30]", fDetectorStatus);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliDetectorTag(void *p) {
      return  p ? new(p) ::AliDetectorTag : new ::AliDetectorTag;
   }
   static void *newArray_AliDetectorTag(Long_t nElements, void *p) {
      return p ? new(p) ::AliDetectorTag[nElements] : new ::AliDetectorTag[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliDetectorTag(void *p) {
      delete ((::AliDetectorTag*)p);
   }
   static void deleteArray_AliDetectorTag(void *p) {
      delete [] ((::AliDetectorTag*)p);
   }
   static void destruct_AliDetectorTag(void *p) {
      typedef ::AliDetectorTag current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliDetectorTag

//______________________________________________________________________________
void AliEventTag::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliEventTag.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliEventTag::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliEventTag::Class(),this);
   }
}

//______________________________________________________________________________
void AliEventTag::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliEventTag.
      TClass *R__cl = ::AliEventTag::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPeriodNumber", &fPeriodNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOrbitNumber", &fOrbitNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBunchCrossNumber", &fBunchCrossNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventType", &fEventType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhysicsFlag", &fPhysicsFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBackgroundFlag", &fBackgroundFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfParticipants", &fNumberOfParticipants);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfParticipants2", &fNumberOfParticipants2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImpactParameter", &fImpactParameter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrimaryVertexFlag", &fPrimaryVertexFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrimaryVertexX", &fPrimaryVertexX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrimaryVertexY", &fPrimaryVertexY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrimaryVertexZ", &fPrimaryVertexZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrimaryVertexZError", &fPrimaryVertexZError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerMask", &fTriggerMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerMaskNext50", &fTriggerMaskNext50);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerCluster", &fTriggerCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCNeutron1Energy", &fZDCNeutron1Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCProton1Energy", &fZDCProton1Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCNeutron2Energy", &fZDCNeutron2Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCProton2Energy", &fZDCProton2Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCEMEnergy[2]", fZDCEMEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0VertexZ", &fT0VertexZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfTracks", &fNumberOfTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfPositiveTracks", &fNumberOfPositiveTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfNegativeTracks", &fNumberOfNegativeTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfNeutralTracks", &fNumberOfNeutralTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfV0s", &fNumberOfV0s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfCascades", &fNumberOfCascades);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfKinks", &fNumberOfKinks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfPMDTracks", &fNumberOfPMDTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfFMDTracks", &fNumberOfFMDTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfPHOSClusters", &fNumberOfPHOSClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfEMCALClusters", &fNumberOfEMCALClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfJetCandidates", &fNumberOfJetCandidates);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxJetEnergy", &fMaxJetEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfHardPhotonsCandidates", &fNumberOfHardPhotonsCandidates);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxNeutralEnergy", &fMaxNeutralEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfChargedAbove1GeV", &fNumberOfChargedAbove1GeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfChargedAbove3GeV", &fNumberOfChargedAbove3GeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfChargedAbove10GeV", &fNumberOfChargedAbove10GeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfMuonsAbove1GeV", &fNumberOfMuonsAbove1GeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfMuonsAbove3GeV", &fNumberOfMuonsAbove3GeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfMuonsAbove10GeV", &fNumberOfMuonsAbove10GeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfElectronsAbove1GeV", &fNumberOfElectronsAbove1GeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfElectronsAbove3GeV", &fNumberOfElectronsAbove3GeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfElectronsAbove10GeV", &fNumberOfElectronsAbove10GeV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfElectrons", &fNumberOfElectrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfFWMuons", &fNumberOfFWMuons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfFWMatchedMuons", &fNumberOfFWMatchedMuons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfMuons", &fNumberOfMuons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfPions", &fNumberOfPions);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfKaons", &fNumberOfKaons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfProtons", &fNumberOfProtons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfLambdas", &fNumberOfLambdas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfPhotons", &fNumberOfPhotons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfPi0s", &fNumberOfPi0s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfNeutrons", &fNumberOfNeutrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfKaon0s", &fNumberOfKaon0s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotalP", &fTotalP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanPt", &fMeanPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxPt", &fMaxPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEtaMaxPt", &fEtaMaxPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiMaxPt", &fPhiMaxPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotalNeutralP", &fTotalNeutralP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanNeutralPt", &fMeanNeutralPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxNeutralPt", &fMaxNeutralPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventPlaneAngle", &fEventPlaneAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHBTRadii", &fHBTRadii);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfFiredChipsLayer1", &fNumberOfFiredChipsLayer1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfFiredChipsLayer2", &fNumberOfFiredChipsLayer2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfSPDTracklets", &fNumberOfSPDTracklets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMTotV0A", &fMTotV0A);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMTotV0C", &fMTotV0C);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNbPMV0A", &fNbPMV0A);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNbPMV0C", &fNbPMV0C);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliEventTag(void *p) {
      return  p ? new(p) ::AliEventTag : new ::AliEventTag;
   }
   static void *newArray_AliEventTag(Long_t nElements, void *p) {
      return p ? new(p) ::AliEventTag[nElements] : new ::AliEventTag[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliEventTag(void *p) {
      delete ((::AliEventTag*)p);
   }
   static void deleteArray_AliEventTag(void *p) {
      delete [] ((::AliEventTag*)p);
   }
   static void destruct_AliEventTag(void *p) {
      typedef ::AliEventTag current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliEventTag

//______________________________________________________________________________
void AliFileTag::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliFileTag.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliFileTag::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliFileTag::Class(),this);
   }
}

//______________________________________________________________________________
void AliFileTag::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliFileTag.
      TClass *R__cl = ::AliFileTag::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGUID", &fGUID);
      R__insp.InspectMember(fGUID, "fGUID.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPath", &fPath);
      R__insp.InspectMember(fPath, "fPath.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fsize", &fsize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmd5", &fmd5);
      R__insp.InspectMember(fmd5, "fmd5.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fturl", &fturl);
      R__insp.InspectMember(fturl, "fturl.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventTags", &fEventTags);
      R__insp.InspectMember(fEventTags, "fEventTags.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliFileTag(void *p) {
      return  p ? new(p) ::AliFileTag : new ::AliFileTag;
   }
   static void *newArray_AliFileTag(Long_t nElements, void *p) {
      return p ? new(p) ::AliFileTag[nElements] : new ::AliFileTag[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliFileTag(void *p) {
      delete ((::AliFileTag*)p);
   }
   static void deleteArray_AliFileTag(void *p) {
      delete [] ((::AliFileTag*)p);
   }
   static void destruct_AliFileTag(void *p) {
      typedef ::AliFileTag current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliFileTag

//______________________________________________________________________________
void AliRunTagCuts::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliRunTagCuts.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliRunTagCuts::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliRunTagCuts::Class(),this);
   }
}

//______________________________________________________________________________
void AliRunTagCuts::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliRunTagCuts.
      TClass *R__cl = ::AliRunTagCuts::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunId", &fAliceRunId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunIdFlag", &fAliceRunIdFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceMagneticField", &fAliceMagneticField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceMagneticFieldFlag", &fAliceMagneticFieldFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceDipoleField", &fAliceDipoleField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceDipoleFieldFlag", &fAliceDipoleFieldFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunStartTimeMin", &fAliceRunStartTimeMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunStartTimeMax", &fAliceRunStartTimeMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunStartTimeFlag", &fAliceRunStartTimeFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunStopTimeMin", &fAliceRunStopTimeMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunStopTimeMax", &fAliceRunStopTimeMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunStopTimeFlag", &fAliceRunStopTimeFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAlirootVersion", &fAlirootVersion);
      R__insp.InspectMember(fAlirootVersion, "fAlirootVersion.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAlirootVersionFlag", &fAlirootVersionFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRootVersion", &fRootVersion);
      R__insp.InspectMember(fRootVersion, "fRootVersion.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRootVersionFlag", &fRootVersionFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeant3Version", &fGeant3Version);
      R__insp.InspectMember(fGeant3Version, "fGeant3Version.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeant3VersionFlag", &fGeant3VersionFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLHCPeriod", &fLHCPeriod);
      R__insp.InspectMember(fLHCPeriod, "fLHCPeriod.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLHCPeriodFlag", &fLHCPeriodFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecPass", &fRecPass);
      R__insp.InspectMember(fRecPass, "fRecPass.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecPassFlag", &fRecPassFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProdName", &fProdName);
      R__insp.InspectMember(fProdName, "fProdName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProdNameFlag", &fProdNameFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunValidation", &fAliceRunValidation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunValidationFlag", &fAliceRunValidationFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunQualities", &fAliceRunQualities);
      R__insp.InspectMember(fAliceRunQualities, "fAliceRunQualities.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceRunQualitiesFlag", &fAliceRunQualitiesFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceBeamEnergy", &fAliceBeamEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceBeamEnergyFlag", &fAliceBeamEnergyFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceBeamType", &fAliceBeamType);
      R__insp.InspectMember(fAliceBeamType, "fAliceBeamType.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceBeamTypeFlag", &fAliceBeamTypeFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceCalibrationVersion", &fAliceCalibrationVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceCalibrationVersionFlag", &fAliceCalibrationVersionFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceDataType", &fAliceDataType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAliceDataTypeFlag", &fAliceDataTypeFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamTriggerRange[2]", fBeamTriggerRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamTriggerFlag", &fBeamTriggerFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCollisionTriggerRange[2]", fCollisionTriggerRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCollisionTriggerFlag", &fCollisionTriggerFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEmptyTriggerRange[2]", fEmptyTriggerRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEmptyTriggerFlag", &fEmptyTriggerFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fASideTriggerRange[2]", fASideTriggerRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fASideTriggerFlag", &fASideTriggerFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCSideTriggerRange[2]", fCSideTriggerRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCSideTriggerFlag", &fCSideTriggerFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHMTriggerRange[2]", fHMTriggerRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHMTriggerFlag", &fHMTriggerFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMuonTriggerRange[2]", fMuonTriggerRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMuonTriggerFlag", &fMuonTriggerFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCollisionRateRange[2]", fCollisionRateRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCollisionRateFlag", &fCollisionRateFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanVertexRange[2]", fMeanVertexRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanVertexFlag", &fMeanVertexFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVertexQualityRange[2]", fVertexQualityRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVertexQualityFlag", &fVertexQualityFlag);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliRunTagCuts(void *p) {
      return  p ? new(p) ::AliRunTagCuts : new ::AliRunTagCuts;
   }
   static void *newArray_AliRunTagCuts(Long_t nElements, void *p) {
      return p ? new(p) ::AliRunTagCuts[nElements] : new ::AliRunTagCuts[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliRunTagCuts(void *p) {
      delete ((::AliRunTagCuts*)p);
   }
   static void deleteArray_AliRunTagCuts(void *p) {
      delete [] ((::AliRunTagCuts*)p);
   }
   static void destruct_AliRunTagCuts(void *p) {
      typedef ::AliRunTagCuts current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliRunTagCuts

//______________________________________________________________________________
void AliLHCTagCuts::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliLHCTagCuts.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliLHCTagCuts::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliLHCTagCuts::Class(),this);
   }
}

//______________________________________________________________________________
void AliLHCTagCuts::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliLHCTagCuts.
      TClass *R__cl = ::AliLHCTagCuts::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLHCState", &fLHCState);
      R__insp.InspectMember(fLHCState, "fLHCState.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLHCStateFlag", &fLHCStateFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLHCLuminosityMin", &fLHCLuminosityMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLHCLuminosityMax", &fLHCLuminosityMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLHCLuminosityFlag", &fLHCLuminosityFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNBunchesRange[2]", fNBunchesRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNBunchesFlag", &fNBunchesFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFillingScheme", &fFillingScheme);
      R__insp.InspectMember(fFillingScheme, "fFillingScheme.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFillingSchemeFlag", &fFillingSchemeFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFillNoRange[2]", fFillNoRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFillNoFlag", &fFillNoFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamEnergyRange[2]", fBeamEnergyRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamEnergyFlag", &fBeamEnergyFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBunchIntensityRange[2]", fBunchIntensityRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBunchIntensityFlag", &fBunchIntensityFlag);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliLHCTagCuts(void *p) {
      return  p ? new(p) ::AliLHCTagCuts : new ::AliLHCTagCuts;
   }
   static void *newArray_AliLHCTagCuts(Long_t nElements, void *p) {
      return p ? new(p) ::AliLHCTagCuts[nElements] : new ::AliLHCTagCuts[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliLHCTagCuts(void *p) {
      delete ((::AliLHCTagCuts*)p);
   }
   static void deleteArray_AliLHCTagCuts(void *p) {
      delete [] ((::AliLHCTagCuts*)p);
   }
   static void destruct_AliLHCTagCuts(void *p) {
      typedef ::AliLHCTagCuts current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliLHCTagCuts

//______________________________________________________________________________
void AliDetectorTagCuts::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliDetectorTagCuts.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliDetectorTagCuts::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliDetectorTagCuts::Class(),this);
   }
}

//______________________________________________________________________________
void AliDetectorTagCuts::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliDetectorTagCuts.
      TClass *R__cl = ::AliDetectorTagCuts::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorsReco", &fDetectorsReco);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorsDAQ", &fDetectorsDAQ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorsFlag", &fDetectorsFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorValidityMatch[30]", fDetectorValidityMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorValidityFlag[30]", fDetectorValidityFlag);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliDetectorTagCuts(void *p) {
      return  p ? new(p) ::AliDetectorTagCuts : new ::AliDetectorTagCuts;
   }
   static void *newArray_AliDetectorTagCuts(Long_t nElements, void *p) {
      return p ? new(p) ::AliDetectorTagCuts[nElements] : new ::AliDetectorTagCuts[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliDetectorTagCuts(void *p) {
      delete ((::AliDetectorTagCuts*)p);
   }
   static void deleteArray_AliDetectorTagCuts(void *p) {
      delete [] ((::AliDetectorTagCuts*)p);
   }
   static void destruct_AliDetectorTagCuts(void *p) {
      typedef ::AliDetectorTagCuts current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliDetectorTagCuts

//______________________________________________________________________________
void AliEventTagCuts::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliEventTagCuts.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliEventTagCuts::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliEventTagCuts::Class(),this);
   }
}

//______________________________________________________________________________
void AliEventTagCuts::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliEventTagCuts.
      TClass *R__cl = ::AliEventTagCuts::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPeriodNumberMin", &fPeriodNumberMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPeriodNumberMax", &fPeriodNumberMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPeriodNumberFlag", &fPeriodNumberFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOrbitNumberMin", &fOrbitNumberMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOrbitNumberMax", &fOrbitNumberMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOrbitNumberFlag", &fOrbitNumberFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBunchCrossNumberMin", &fBunchCrossNumberMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBunchCrossNumberMax", &fBunchCrossNumberMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBunchCrossNumberFlag", &fBunchCrossNumberFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventType", &fEventType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventTypeFlag", &fEventTypeFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNParticipantsMin", &fNParticipantsMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNParticipantsMax", &fNParticipantsMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNParticipantsFlag", &fNParticipantsFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImpactParamMin", &fImpactParamMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImpactParamMax", &fImpactParamMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImpactParamFlag", &fImpactParamFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEtaMin", &fEtaMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEtaMax", &fEtaMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEtaFlag", &fEtaFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiMin", &fPhiMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiMax", &fPhiMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiFlag", &fPhiFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVxMin", &fVxMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVxMax", &fVxMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVxFlag", &fVxFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVyMin", &fVyMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVyMax", &fVyMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVyFlag", &fVyFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVzMin", &fVzMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVzMax", &fVzMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVzFlag", &fVzFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrimaryVertexFlag", &fPrimaryVertexFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPVFlag", &fPVFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrimaryVertexZErrorMin", &fPrimaryVertexZErrorMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrimaryVertexZErrorMax", &fPrimaryVertexZErrorMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPVzErrorFlag", &fPVzErrorFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerMask", &fTriggerMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerMaskFlag", &fTriggerMaskFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerCluster", &fTriggerCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerClusterFlag", &fTriggerClusterFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCNeutron1EnergyMin", &fZDCNeutron1EnergyMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCNeutron1EnergyMax", &fZDCNeutron1EnergyMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCNeutron1EnergyFlag", &fZDCNeutron1EnergyFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCProton1EnergyMin", &fZDCProton1EnergyMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCProton1EnergyMax", &fZDCProton1EnergyMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCProton1EnergyFlag", &fZDCProton1EnergyFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCNeutron2EnergyMin", &fZDCNeutron2EnergyMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCNeutron2EnergyMax", &fZDCNeutron2EnergyMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCNeutron2EnergyFlag", &fZDCNeutron2EnergyFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCProton2EnergyMin", &fZDCProton2EnergyMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCProton2EnergyMax", &fZDCProton2EnergyMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCProton2EnergyFlag", &fZDCProton2EnergyFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCEMEnergyMin", &fZDCEMEnergyMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCEMEnergyMax", &fZDCEMEnergyMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCEMEnergyFlag", &fZDCEMEnergyFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0VertexZMin", &fT0VertexZMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0VertexZMax", &fT0VertexZMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0VertexZFlag", &fT0VertexZFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMultMin", &fMultMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMultMax", &fMultMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMultFlag", &fMultFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosMultMin", &fPosMultMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosMultMax", &fPosMultMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosMultFlag", &fPosMultFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNegMultMin", &fNegMultMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNegMultMax", &fNegMultMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNegMultFlag", &fNegMultFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNeutrMultMin", &fNeutrMultMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNeutrMultMax", &fNeutrMultMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNeutrMultFlag", &fNeutrMultFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNV0sMin", &fNV0sMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNV0sMax", &fNV0sMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNV0sFlag", &fNV0sFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNCascadesMin", &fNCascadesMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNCascadesMax", &fNCascadesMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNCascadesFlag", &fNCascadesFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNKinksMin", &fNKinksMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNKinksMax", &fNKinksMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNKinksFlag", &fNKinksFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPMDTracksMin", &fNPMDTracksMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPMDTracksMax", &fNPMDTracksMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPMDTracksFlag", &fNPMDTracksFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNFMDTracksMin", &fNFMDTracksMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNFMDTracksMax", &fNFMDTracksMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNFMDTracksFlag", &fNFMDTracksFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPHOSClustersMin", &fNPHOSClustersMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPHOSClustersMax", &fNPHOSClustersMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPHOSClustersFlag", &fNPHOSClustersFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNEMCALClustersMin", &fNEMCALClustersMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNEMCALClustersMax", &fNEMCALClustersMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNEMCALClustersFlag", &fNEMCALClustersFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNJetCandidatesMin", &fNJetCandidatesMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNJetCandidatesMax", &fNJetCandidatesMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNJetCandidatesFlag", &fNJetCandidatesFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTopJetEnergyMin", &fTopJetEnergyMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTopJetEnergyMinFlag", &fTopJetEnergyMinFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTopNeutralEnergyMin", &fTopNeutralEnergyMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTopNeutralEnergyMinFlag", &fTopNeutralEnergyMinFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNHardPhotonCandidatesMin", &fNHardPhotonCandidatesMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNHardPhotonCandidatesMax", &fNHardPhotonCandidatesMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNHardPhotonCandidatesFlag", &fNHardPhotonCandidatesFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNChargedAbove1GeVMin", &fNChargedAbove1GeVMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNChargedAbove1GeVMax", &fNChargedAbove1GeVMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNChargedAbove1GeVFlag", &fNChargedAbove1GeVFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNChargedAbove3GeVMin", &fNChargedAbove3GeVMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNChargedAbove3GeVMax", &fNChargedAbove3GeVMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNChargedAbove3GeVFlag", &fNChargedAbove3GeVFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNChargedAbove10GeVMin", &fNChargedAbove10GeVMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNChargedAbove10GeVMax", &fNChargedAbove10GeVMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNChargedAbove10GeVFlag", &fNChargedAbove10GeVFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMuonsAbove1GeVMin", &fNMuonsAbove1GeVMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMuonsAbove1GeVMax", &fNMuonsAbove1GeVMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMuonsAbove1GeVFlag", &fNMuonsAbove1GeVFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMuonsAbove3GeVMin", &fNMuonsAbove3GeVMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMuonsAbove3GeVMax", &fNMuonsAbove3GeVMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMuonsAbove3GeVFlag", &fNMuonsAbove3GeVFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMuonsAbove10GeVMin", &fNMuonsAbove10GeVMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMuonsAbove10GeVMax", &fNMuonsAbove10GeVMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMuonsAbove10GeVFlag", &fNMuonsAbove10GeVFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNElectronsAbove1GeVMin", &fNElectronsAbove1GeVMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNElectronsAbove1GeVMax", &fNElectronsAbove1GeVMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNElectronsAbove1GeVFlag", &fNElectronsAbove1GeVFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNElectronsAbove3GeVMin", &fNElectronsAbove3GeVMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNElectronsAbove3GeVMax", &fNElectronsAbove3GeVMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNElectronsAbove3GeVFlag", &fNElectronsAbove3GeVFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNElectronsAbove10GeVMin", &fNElectronsAbove10GeVMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNElectronsAbove10GeVMax", &fNElectronsAbove10GeVMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNElectronsAbove10GeVFlag", &fNElectronsAbove10GeVFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNElectronsMin", &fNElectronsMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNElectronsMax", &fNElectronsMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNElectronsFlag", &fNElectronsFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNFWMuonsMin", &fNFWMuonsMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNFWMuonsMax", &fNFWMuonsMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNFWMuonsFlag", &fNFWMuonsFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNFWMatchedMuonsMin", &fNFWMatchedMuonsMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNFWMatchedMuonsMax", &fNFWMatchedMuonsMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNFWMatchedMuonsFlag", &fNFWMatchedMuonsFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMuonsMin", &fNMuonsMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMuonsMax", &fNMuonsMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMuonsFlag", &fNMuonsFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPionsMin", &fNPionsMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPionsMax", &fNPionsMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPionsFlag", &fNPionsFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNKaonsMin", &fNKaonsMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNKaonsMax", &fNKaonsMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNKaonsFlag", &fNKaonsFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNProtonsMin", &fNProtonsMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNProtonsMax", &fNProtonsMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNProtonsFlag", &fNProtonsFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNLambdasMin", &fNLambdasMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNLambdasMax", &fNLambdasMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNLambdasFlag", &fNLambdasFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPhotonsMin", &fNPhotonsMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPhotonsMax", &fNPhotonsMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPhotonFlag", &fNPhotonFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPi0sMin", &fNPi0sMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPi0sMax", &fNPi0sMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPi0sFlag", &fNPi0sFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNNeutronsMin", &fNNeutronsMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNNeutronsMax", &fNNeutronsMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNNeutronsFlag", &fNNeutronsFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNKaon0sMin", &fNKaon0sMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNKaon0sMax", &fNKaon0sMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNKaon0sFlag", &fNKaon0sFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotalPMin", &fTotalPMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotalPMax", &fTotalPMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotalPFlag", &fTotalPFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanPtMin", &fMeanPtMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanPtMax", &fMeanPtMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanPtFlag", &fMeanPtFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTopPtMin", &fTopPtMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTopPtMinFlag", &fTopPtMinFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotalNeutralPMin", &fTotalNeutralPMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotalNeutralPMax", &fTotalNeutralPMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotalNeutralPFlag", &fTotalNeutralPFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanNeutralPtMin", &fMeanNeutralPtMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanNeutralPtMax", &fMeanNeutralPtMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanNeutralPtFlag", &fMeanNeutralPtFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTopNeutralPtMin", &fTopNeutralPtMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTopNeutralPtMinFlag", &fTopNeutralPtMinFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventPlaneAngleMin", &fEventPlaneAngleMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventPlaneAngleMax", &fEventPlaneAngleMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventPlaneAngleFlag", &fEventPlaneAngleFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHBTRadiiMin", &fHBTRadiiMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHBTRadiiMax", &fHBTRadiiMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHBTRadiiFlag", &fHBTRadiiFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfFiredChipsLayer1Min", &fNumberOfFiredChipsLayer1Min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfFiredChipsLayer1Max", &fNumberOfFiredChipsLayer1Max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfFiredChipsLayer1Flag", &fNumberOfFiredChipsLayer1Flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfFiredChipsLayer2Min", &fNumberOfFiredChipsLayer2Min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfFiredChipsLayer2Max", &fNumberOfFiredChipsLayer2Max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfFiredChipsLayer2Flag", &fNumberOfFiredChipsLayer2Flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfSPDTrackletsMin", &fNumberOfSPDTrackletsMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfSPDTrackletsMax", &fNumberOfSPDTrackletsMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfSPDTrackletsFlag", &fNumberOfSPDTrackletsFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFiredTriggerClassFlag", &fFiredTriggerClassFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFiredTriggerClass", &fFiredTriggerClass);
      R__insp.InspectMember(fFiredTriggerClass, "fFiredTriggerClass.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fActiveTriggerClasses", &fActiveTriggerClasses);
      R__insp.InspectMember(fActiveTriggerClasses, "fActiveTriggerClasses.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliEventTagCuts(void *p) {
      return  p ? new(p) ::AliEventTagCuts : new ::AliEventTagCuts;
   }
   static void *newArray_AliEventTagCuts(Long_t nElements, void *p) {
      return p ? new(p) ::AliEventTagCuts[nElements] : new ::AliEventTagCuts[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliEventTagCuts(void *p) {
      delete ((::AliEventTagCuts*)p);
   }
   static void deleteArray_AliEventTagCuts(void *p) {
      delete [] ((::AliEventTagCuts*)p);
   }
   static void destruct_AliEventTagCuts(void *p) {
      typedef ::AliEventTagCuts current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliEventTagCuts

//______________________________________________________________________________
void AliTagCreator::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTagCreator.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTagCreator::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTagCreator::Class(),this);
   }
}

//______________________________________________________________________________
void AliTagCreator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTagCreator.
      TClass *R__cl = ::AliTagCreator::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSE", &fSE);
      R__insp.InspectMember(fSE, "fSE.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fgridpath", &fgridpath);
      R__insp.InspectMember(fgridpath, "fgridpath.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStorage", &fStorage);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTagCreator(void *p) {
      return  p ? new(p) ::AliTagCreator : new ::AliTagCreator;
   }
   static void *newArray_AliTagCreator(Long_t nElements, void *p) {
      return p ? new(p) ::AliTagCreator[nElements] : new ::AliTagCreator[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTagCreator(void *p) {
      delete ((::AliTagCreator*)p);
   }
   static void deleteArray_AliTagCreator(void *p) {
      delete [] ((::AliTagCreator*)p);
   }
   static void destruct_AliTagCreator(void *p) {
      typedef ::AliTagCreator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTagCreator

//______________________________________________________________________________
void AliHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliHeader.
      TClass *R__cl = ::AliHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRun", &fRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNvertex", &fNvertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNprimary", &fNprimary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNtrack", &fNtrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEvent", &fEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNrInRun", &fEventNrInRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStamp", &fTimeStamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStack", &fStack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGenHeader", &fGenHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDetHeaders", &fDetHeaders);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliHeader(void *p) {
      return  p ? new(p) ::AliHeader : new ::AliHeader;
   }
   static void *newArray_AliHeader(Long_t nElements, void *p) {
      return p ? new(p) ::AliHeader[nElements] : new ::AliHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliHeader(void *p) {
      delete ((::AliHeader*)p);
   }
   static void deleteArray_AliHeader(void *p) {
      delete [] ((::AliHeader*)p);
   }
   static void destruct_AliHeader(void *p) {
      typedef ::AliHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliHeader

//______________________________________________________________________________
void AliGenEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliGenEventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliGenEventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliGenEventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliGenEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliGenEventHeader.
      TClass *R__cl = ::AliGenEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNProduced", &fNProduced);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVertex", &fVertex);
      R__insp.InspectMember(fVertex, "fVertex.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInteractionTime", &fInteractionTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventWeight", &fEventWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventWeights", (void*)&fEventWeights);
      R__insp.InspectMember("map<std::string,Float_t>", (void*)&fEventWeights, "fEventWeights.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventWeightNameGenerator", &fEventWeightNameGenerator);
      R__insp.InspectMember(const_cast<  TString &>( fEventWeightNameGenerator ), "fEventWeightNameGenerator.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliGenEventHeader(void *p) {
      return  p ? new(p) ::AliGenEventHeader : new ::AliGenEventHeader;
   }
   static void *newArray_AliGenEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::AliGenEventHeader[nElements] : new ::AliGenEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliGenEventHeader(void *p) {
      delete ((::AliGenEventHeader*)p);
   }
   static void deleteArray_AliGenEventHeader(void *p) {
      delete [] ((::AliGenEventHeader*)p);
   }
   static void destruct_AliGenEventHeader(void *p) {
      typedef ::AliGenEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliGenEventHeader

//______________________________________________________________________________
void AliDetectorEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliDetectorEventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliDetectorEventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliDetectorEventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliDetectorEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliDetectorEventHeader.
      TClass *R__cl = ::AliDetectorEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliDetectorEventHeader(void *p) {
      return  p ? new(p) ::AliDetectorEventHeader : new ::AliDetectorEventHeader;
   }
   static void *newArray_AliDetectorEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::AliDetectorEventHeader[nElements] : new ::AliDetectorEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliDetectorEventHeader(void *p) {
      delete ((::AliDetectorEventHeader*)p);
   }
   static void deleteArray_AliDetectorEventHeader(void *p) {
      delete [] ((::AliDetectorEventHeader*)p);
   }
   static void destruct_AliDetectorEventHeader(void *p) {
      typedef ::AliDetectorEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliDetectorEventHeader

//______________________________________________________________________________
void AliGenCocktailEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliGenCocktailEventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliGenCocktailEventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliGenCocktailEventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliGenCocktailEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliGenCocktailEventHeader.
      TClass *R__cl = ::AliGenCocktailEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHeaders", &fHeaders);
      AliGenEventHeader::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliGenCocktailEventHeader(void *p) {
      return  p ? new(p) ::AliGenCocktailEventHeader : new ::AliGenCocktailEventHeader;
   }
   static void *newArray_AliGenCocktailEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::AliGenCocktailEventHeader[nElements] : new ::AliGenCocktailEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliGenCocktailEventHeader(void *p) {
      delete ((::AliGenCocktailEventHeader*)p);
   }
   static void deleteArray_AliGenCocktailEventHeader(void *p) {
      delete [] ((::AliGenCocktailEventHeader*)p);
   }
   static void destruct_AliGenCocktailEventHeader(void *p) {
      typedef ::AliGenCocktailEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliGenCocktailEventHeader

//______________________________________________________________________________
void AliGenPythiaEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliGenPythiaEventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliGenPythiaEventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliGenPythiaEventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliGenPythiaEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliGenPythiaEventHeader.
      TClass *R__cl = ::AliGenPythiaEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProcessType", &fProcessType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrials", &fTrials);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNJets", &fNJets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNUQJets", &fNUQJets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMPI", &fNMPI);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNSuperpositions", &fNSuperpositions);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXJet", &fXJet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYJet", &fYJet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInMediumLength", &fInMediumLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImpactParameter", &fImpactParameter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJets[4][10]", fJets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUQJets[4][10]", fUQJets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZquench[4]", fZquench);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPtHard", &fPtHard);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXsection", &fXsection);
      AliGenEventHeader::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliGenPythiaEventHeader(void *p) {
      return  p ? new(p) ::AliGenPythiaEventHeader : new ::AliGenPythiaEventHeader;
   }
   static void *newArray_AliGenPythiaEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::AliGenPythiaEventHeader[nElements] : new ::AliGenPythiaEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliGenPythiaEventHeader(void *p) {
      delete ((::AliGenPythiaEventHeader*)p);
   }
   static void deleteArray_AliGenPythiaEventHeader(void *p) {
      delete [] ((::AliGenPythiaEventHeader*)p);
   }
   static void destruct_AliGenPythiaEventHeader(void *p) {
      typedef ::AliGenPythiaEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliGenPythiaEventHeader

//______________________________________________________________________________
void AliGenHijingEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliGenHijingEventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliGenHijingEventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliGenHijingEventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliGenHijingEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliGenHijingEventHeader.
      TClass *R__cl = ::AliGenHijingEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotalEnergy", &fTotalEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrials", &fTrials);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPart", &fNPart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJet1", &fJet1);
      R__insp.InspectMember(fJet1, "fJet1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJet2", &fJet2);
      R__insp.InspectMember(fJet2, "fJet2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJetFsr1", &fJetFsr1);
      R__insp.InspectMember(fJetFsr1, "fJetFsr1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJetFsr2", &fJetFsr2);
      R__insp.InspectMember(fJetFsr2, "fJetFsr2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAreSpectatorsInTheStack", &fAreSpectatorsInTheStack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsDataFragmentationSet", &fIsDataFragmentationSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFreeProjSpecn", &fFreeProjSpecn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFreeProjSpecp", &fFreeProjSpecp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFreeTargSpecn", &fFreeTargSpecn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFreeTargSpecp", &fFreeTargSpecp);
      AliGenEventHeader::ShowMembers(R__insp);
      AliCollisionGeometry::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliGenHijingEventHeader(void *p) {
      return  p ? new(p) ::AliGenHijingEventHeader : new ::AliGenHijingEventHeader;
   }
   static void *newArray_AliGenHijingEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::AliGenHijingEventHeader[nElements] : new ::AliGenHijingEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliGenHijingEventHeader(void *p) {
      delete ((::AliGenHijingEventHeader*)p);
   }
   static void deleteArray_AliGenHijingEventHeader(void *p) {
      delete [] ((::AliGenHijingEventHeader*)p);
   }
   static void destruct_AliGenHijingEventHeader(void *p) {
      typedef ::AliGenHijingEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliGenHijingEventHeader

//______________________________________________________________________________
void AliCollisionGeometry::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliCollisionGeometry.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliCollisionGeometry::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliCollisionGeometry::Class(),this);
   }
}

//______________________________________________________________________________
void AliCollisionGeometry::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliCollisionGeometry.
      TClass *R__cl = ::AliCollisionGeometry::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNHardScatters", &fNHardScatters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNProjectileParticipants", &fNProjectileParticipants);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTargetParticipants", &fNTargetParticipants);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNNColl", &fNNColl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNNwColl", &fNNwColl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNwNColl", &fNwNColl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNwNwColl", &fNwNwColl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProjectileSpecn", &fProjectileSpecn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProjectileSpecp", &fProjectileSpecp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTargetSpecn", &fTargetSpecn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTargetSpecp", &fTargetSpecp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImpactParameter", &fImpactParameter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReactionPlaneAngle", &fReactionPlaneAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNSD1", &fNSD1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNSD2", &fNSD2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNDD", &fNDD);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliCollisionGeometry(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::AliCollisionGeometry : new ::AliCollisionGeometry;
   }
   static void *newArray_AliCollisionGeometry(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::AliCollisionGeometry[nElements] : new ::AliCollisionGeometry[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliCollisionGeometry(void *p) {
      delete ((::AliCollisionGeometry*)p);
   }
   static void deleteArray_AliCollisionGeometry(void *p) {
      delete [] ((::AliCollisionGeometry*)p);
   }
   static void destruct_AliCollisionGeometry(void *p) {
      typedef ::AliCollisionGeometry current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliCollisionGeometry

//______________________________________________________________________________
void AliGenDPMjetEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliGenDPMjetEventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliGenDPMjetEventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliGenDPMjetEventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliGenDPMjetEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliGenDPMjetEventHeader.
      TClass *R__cl = ::AliGenDPMjetEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotalEnergy", &fTotalEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrials", &fTrials);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProcessType", &fProcessType);
      AliGenEventHeader::ShowMembers(R__insp);
      AliCollisionGeometry::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliGenDPMjetEventHeader(void *p) {
      return  p ? new(p) ::AliGenDPMjetEventHeader : new ::AliGenDPMjetEventHeader;
   }
   static void *newArray_AliGenDPMjetEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::AliGenDPMjetEventHeader[nElements] : new ::AliGenDPMjetEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliGenDPMjetEventHeader(void *p) {
      delete ((::AliGenDPMjetEventHeader*)p);
   }
   static void deleteArray_AliGenDPMjetEventHeader(void *p) {
      delete [] ((::AliGenDPMjetEventHeader*)p);
   }
   static void destruct_AliGenDPMjetEventHeader(void *p) {
      typedef ::AliGenDPMjetEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliGenDPMjetEventHeader

//______________________________________________________________________________
void AliGenHerwigEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliGenHerwigEventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliGenHerwigEventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliGenHerwigEventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliGenHerwigEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliGenHerwigEventHeader.
      TClass *R__cl = ::AliGenHerwigEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProcessType", &fProcessType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrials", &fTrials);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWeight", &fWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPtHard", &fPtHard);
      AliGenEventHeader::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliGenHerwigEventHeader(void *p) {
      return  p ? new(p) ::AliGenHerwigEventHeader : new ::AliGenHerwigEventHeader;
   }
   static void *newArray_AliGenHerwigEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::AliGenHerwigEventHeader[nElements] : new ::AliGenHerwigEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliGenHerwigEventHeader(void *p) {
      delete ((::AliGenHerwigEventHeader*)p);
   }
   static void deleteArray_AliGenHerwigEventHeader(void *p) {
      delete [] ((::AliGenHerwigEventHeader*)p);
   }
   static void destruct_AliGenHerwigEventHeader(void *p) {
      typedef ::AliGenHerwigEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliGenHerwigEventHeader

//______________________________________________________________________________
void AliGenGeVSimEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliGenGeVSimEventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliGenGeVSimEventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliGenGeVSimEventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliGenGeVSimEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliGenGeVSimEventHeader.
      TClass *R__cl = ::AliGenGeVSimEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventPlane", &fEventPlane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEllipticFlow", &fEllipticFlow);
      AliGenEventHeader::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliGenGeVSimEventHeader(void *p) {
      return  p ? new(p) ::AliGenGeVSimEventHeader : new ::AliGenGeVSimEventHeader;
   }
   static void *newArray_AliGenGeVSimEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::AliGenGeVSimEventHeader[nElements] : new ::AliGenGeVSimEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliGenGeVSimEventHeader(void *p) {
      delete ((::AliGenGeVSimEventHeader*)p);
   }
   static void deleteArray_AliGenGeVSimEventHeader(void *p) {
      delete [] ((::AliGenGeVSimEventHeader*)p);
   }
   static void destruct_AliGenGeVSimEventHeader(void *p) {
      typedef ::AliGenGeVSimEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliGenGeVSimEventHeader

//______________________________________________________________________________
void AliGenEpos3EventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliGenEpos3EventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliGenEpos3EventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliGenEpos3EventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliGenEpos3EventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliGenEpos3EventHeader.
      TClass *R__cl = ::AliGenEpos3EventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIversn", &fIversn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLaproj", &fLaproj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaproj", &fMaproj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLatarg", &fLatarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMatarg", &fMatarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEngy", &fEngy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNfull", &fNfull);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNfreeze", &fNfreeze);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBim", &fBim);
      AliGenEventHeader::ShowMembers(R__insp);
      AliCollisionGeometry::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliGenEpos3EventHeader(void *p) {
      return  p ? new(p) ::AliGenEpos3EventHeader : new ::AliGenEpos3EventHeader;
   }
   static void *newArray_AliGenEpos3EventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::AliGenEpos3EventHeader[nElements] : new ::AliGenEpos3EventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliGenEpos3EventHeader(void *p) {
      delete ((::AliGenEpos3EventHeader*)p);
   }
   static void deleteArray_AliGenEpos3EventHeader(void *p) {
      delete [] ((::AliGenEpos3EventHeader*)p);
   }
   static void destruct_AliGenEpos3EventHeader(void *p) {
      typedef ::AliGenEpos3EventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliGenEpos3EventHeader

//______________________________________________________________________________
void AliGenEposEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliGenEposEventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliGenEposEventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliGenEposEventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliGenEposEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliGenEposEventHeader.
      TClass *R__cl = ::AliGenEposEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBimevt", &fBimevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhievt", &fPhievt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKolevt", &fKolevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKoievt", &fKoievt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPmxevt", &fPmxevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEgyevt", &fEgyevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNpjevt", &fNpjevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNtgevt", &fNtgevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNpnevt", &fNpnevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNppevt", &fNppevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNtnevt", &fNtnevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNtpevt", &fNtpevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJpnevt", &fJpnevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJppevt", &fJppevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJtnevt", &fJtnevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJtpevt", &fJtpevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXbjevt", &fXbjevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQsqevt", &fQsqevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNglevt", &fNglevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZppevt", &fZppevt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZptevt", &fZptevt);
      AliGenEventHeader::ShowMembers(R__insp);
      AliCollisionGeometry::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliGenEposEventHeader(void *p) {
      return  p ? new(p) ::AliGenEposEventHeader : new ::AliGenEposEventHeader;
   }
   static void *newArray_AliGenEposEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::AliGenEposEventHeader[nElements] : new ::AliGenEposEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliGenEposEventHeader(void *p) {
      delete ((::AliGenEposEventHeader*)p);
   }
   static void deleteArray_AliGenEposEventHeader(void *p) {
      delete [] ((::AliGenEposEventHeader*)p);
   }
   static void destruct_AliGenEposEventHeader(void *p) {
      typedef ::AliGenEposEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliGenEposEventHeader

//______________________________________________________________________________
void AliGenToyEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliGenToyEventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliGenToyEventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliGenToyEventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliGenToyEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliGenToyEventHeader.
      TClass *R__cl = ::AliGenToyEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentrality", &fCentrality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParameters", (void*)&fParameters);
      R__insp.InspectMember("map<std::string,Float_t>", (void*)&fParameters, "fParameters.", false);
      AliGenEventHeader::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliGenToyEventHeader(void *p) {
      return  p ? new(p) ::AliGenToyEventHeader : new ::AliGenToyEventHeader;
   }
   static void *newArray_AliGenToyEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::AliGenToyEventHeader[nElements] : new ::AliGenToyEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliGenToyEventHeader(void *p) {
      delete ((::AliGenToyEventHeader*)p);
   }
   static void deleteArray_AliGenToyEventHeader(void *p) {
      delete [] ((::AliGenToyEventHeader*)p);
   }
   static void destruct_AliGenToyEventHeader(void *p) {
      typedef ::AliGenToyEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliGenToyEventHeader

//______________________________________________________________________________
void AliStack::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliStack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliStack::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliStack::Class(),this);
   }
}

//______________________________________________________________________________
void AliStack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliStack.
      TClass *R__cl = ::AliStack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParticles", &fParticles);
      R__insp.InspectMember(fParticles, "fParticles.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParticleMap", &fParticleMap);
      R__insp.InspectMember(fParticleMap, "fParticleMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParticleFileMap", &fParticleFileMap);
      R__insp.InspectMember(fParticleFileMap, "fParticleFileMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParticleBuffer", &fParticleBuffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCurrentTrack", &fCurrentTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTreeK", &fTreeK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNtrack", &fNtrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNprimary", &fNprimary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNtransported", &fNtransported);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrent", &fCurrent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentPrimary", &fCurrentPrimary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHgwmk", &fHgwmk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoadPoint", &fLoadPoint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackLabelMap", &fTrackLabelMap);
      R__insp.InspectMember(fTrackLabelMap, "fTrackLabelMap.");
      TVirtualMCStack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliStack(void *p) {
      return  p ? new(p) ::AliStack : new ::AliStack;
   }
   static void *newArray_AliStack(Long_t nElements, void *p) {
      return p ? new(p) ::AliStack[nElements] : new ::AliStack[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliStack(void *p) {
      delete ((::AliStack*)p);
   }
   static void deleteArray_AliStack(void *p) {
      delete [] ((::AliStack*)p);
   }
   static void destruct_AliStack(void *p) {
      typedef ::AliStack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliStack

//______________________________________________________________________________
void AliMCEventHandler::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliMCEventHandler.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliMCEventHandler::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliMCEventHandler::Class(),this);
   }
}

//______________________________________________________________________________
void AliMCEventHandler::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliMCEventHandler.
      TClass *R__cl = ::AliMCEventHandler::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMCEvent", &fMCEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFileE", &fFileE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFileK", &fFileK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFileTR", &fFileTR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTreeE", &fTreeE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTreeK", &fTreeK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTreeTR", &fTreeTR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDirK", &fDirK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDirTR", &fDirTR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParticleSelected", &fParticleSelected);
      R__insp.InspectMember(fParticleSelected, "fParticleSelected.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabelMap", &fLabelMap);
      R__insp.InspectMember(fLabelMap, "fLabelMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNEvent", &fNEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEvent", &fEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPathName", &fPathName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fkExtension", &fkExtension);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileNumber", &fFileNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventsPerFile", &fEventsPerFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReadTR", &fReadTR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInitOk", &fInitOk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSubsidiaryHandlers", &fSubsidiaryHandlers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventsInContainer", &fEventsInContainer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPreReadMode", &fPreReadMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCacheSize", &fCacheSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCacheTK", &fCacheTK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCacheTR", &fCacheTR);
      AliInputEventHandler::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliMCEventHandler(void *p) {
      return  p ? new(p) ::AliMCEventHandler : new ::AliMCEventHandler;
   }
   static void *newArray_AliMCEventHandler(Long_t nElements, void *p) {
      return p ? new(p) ::AliMCEventHandler[nElements] : new ::AliMCEventHandler[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliMCEventHandler(void *p) {
      delete ((::AliMCEventHandler*)p);
   }
   static void deleteArray_AliMCEventHandler(void *p) {
      delete [] ((::AliMCEventHandler*)p);
   }
   static void destruct_AliMCEventHandler(void *p) {
      typedef ::AliMCEventHandler current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliMCEventHandler

//______________________________________________________________________________
void AliInputEventHandler::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliInputEventHandler.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliInputEventHandler::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliInputEventHandler::Class(),this);
   }
}

//______________________________________________________________________________
void AliInputEventHandler::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliInputEventHandler.
      TClass *R__cl = ::AliInputEventHandler::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBranches", &fBranches);
      R__insp.InspectMember(fBranches, "fBranches.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBranchesOn", &fBranchesOn);
      R__insp.InspectMember(fBranchesOn, "fBranchesOn.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputFileName", &fInputFileName);
      R__insp.InspectMember(fInputFileName, "fInputFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNewEvent", &fNewEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEventCuts", &fEventCuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsSelectedResult", &fIsSelectedResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMixingHandler", &fMixingHandler);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParentHandler", &fParentHandler);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fUserInfo", &fUserInfo);
      AliVEventHandler::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliInputEventHandler(void *p) {
      return  p ? new(p) ::AliInputEventHandler : new ::AliInputEventHandler;
   }
   static void *newArray_AliInputEventHandler(Long_t nElements, void *p) {
      return p ? new(p) ::AliInputEventHandler[nElements] : new ::AliInputEventHandler[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliInputEventHandler(void *p) {
      delete ((::AliInputEventHandler*)p);
   }
   static void deleteArray_AliInputEventHandler(void *p) {
      delete [] ((::AliInputEventHandler*)p);
   }
   static void destruct_AliInputEventHandler(void *p) {
      typedef ::AliInputEventHandler current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliInputEventHandler

//______________________________________________________________________________
void AliDummyHandler::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliDummyHandler.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliDummyHandler::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliDummyHandler::Class(),this);
   }
}

//______________________________________________________________________________
void AliDummyHandler::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliDummyHandler.
      TClass *R__cl = ::AliDummyHandler::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvent", &fEvent);
      AliInputEventHandler::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliDummyHandler(void *p) {
      return  p ? new(p) ::AliDummyHandler : new ::AliDummyHandler;
   }
   static void *newArray_AliDummyHandler(Long_t nElements, void *p) {
      return p ? new(p) ::AliDummyHandler[nElements] : new ::AliDummyHandler[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliDummyHandler(void *p) {
      delete ((::AliDummyHandler*)p);
   }
   static void deleteArray_AliDummyHandler(void *p) {
      delete [] ((::AliDummyHandler*)p);
   }
   static void destruct_AliDummyHandler(void *p) {
      typedef ::AliDummyHandler current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliDummyHandler

//______________________________________________________________________________
void AliTrackReference::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTrackReference.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTrackReference::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTrackReference::Class(),this);
   }
}

//______________________________________________________________________________
void AliTrackReference::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTrackReference.
      TClass *R__cl = ::AliTrackReference::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrack", &fTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPx", &fPx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPy", &fPy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPz", &fPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLength", &fLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUserId", &fUserId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorId", &fDetectorId);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTrackReference(void *p) {
      return  p ? new(p) ::AliTrackReference : new ::AliTrackReference;
   }
   static void *newArray_AliTrackReference(Long_t nElements, void *p) {
      return p ? new(p) ::AliTrackReference[nElements] : new ::AliTrackReference[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTrackReference(void *p) {
      delete ((::AliTrackReference*)p);
   }
   static void deleteArray_AliTrackReference(void *p) {
      delete [] ((::AliTrackReference*)p);
   }
   static void destruct_AliTrackReference(void *p) {
      typedef ::AliTrackReference current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTrackReference

//______________________________________________________________________________
void AliSysInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliSysInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliSysInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliSysInfo::Class(),this);
   }
}

//______________________________________________________________________________
void AliSysInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliSysInfo.
      TClass *R__cl = ::AliSysInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSysWatch", &fSysWatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTimer", &fTimer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMemStat", &fMemStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCallBackFunc", &fCallBackFunc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNCallBack", &fNCallBack);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliSysInfo(void *p) {
      return  p ? new(p) ::AliSysInfo : new ::AliSysInfo;
   }
   static void *newArray_AliSysInfo(Long_t nElements, void *p) {
      return p ? new(p) ::AliSysInfo[nElements] : new ::AliSysInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliSysInfo(void *p) {
      delete ((::AliSysInfo*)p);
   }
   static void deleteArray_AliSysInfo(void *p) {
      delete [] ((::AliSysInfo*)p);
   }
   static void destruct_AliSysInfo(void *p) {
      typedef ::AliSysInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliSysInfo

//______________________________________________________________________________
void AliMCEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliMCEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliMCEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliMCEvent::Class(),this);
   }
}

//______________________________________________________________________________
void AliMCEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliMCEvent.
      TClass *R__cl = ::AliMCEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStack", &fStack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMCParticles", &fMCParticles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMCParticleMap", &fMCParticleMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHeader", &fHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAODMCHeader", &fAODMCHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTRBuffer", &fTRBuffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackReferences", &fTrackReferences);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTreeTR", &fTreeTR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTmpTreeTR", &fTmpTreeTR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTmpFileTR", &fTmpFileTR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNprimaries", &fNprimaries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNparticles", &fNparticles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSubsidiaryEvents", &fSubsidiaryEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrimaryOffset", &fPrimaryOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSecondaryOffset", &fSecondaryOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExternal", &fExternal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fVertex", &fVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNBG", &fNBG);
      AliVEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliMCEvent(void *p) {
      return  p ? new(p) ::AliMCEvent : new ::AliMCEvent;
   }
   static void *newArray_AliMCEvent(Long_t nElements, void *p) {
      return p ? new(p) ::AliMCEvent[nElements] : new ::AliMCEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliMCEvent(void *p) {
      delete ((::AliMCEvent*)p);
   }
   static void deleteArray_AliMCEvent(void *p) {
      delete [] ((::AliMCEvent*)p);
   }
   static void destruct_AliMCEvent(void *p) {
      typedef ::AliMCEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliMCEvent

//______________________________________________________________________________
void AliMCParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliMCParticle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliMCParticle::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliMCParticle::Class(),this);
   }
}

//______________________________________________________________________________
void AliMCParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliMCParticle.
      TClass *R__cl = ::AliMCParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParticle", &fParticle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackReferences", &fTrackReferences);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTrackRef", &fNTrackRef);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabel", &fLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMother", &fMother);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstDaughter", &fFirstDaughter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastDaughter", &fLastDaughter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeneratorIndex", &fGeneratorIndex);
      AliVParticle::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliMCParticle(void *p) {
      return  p ? new(p) ::AliMCParticle : new ::AliMCParticle;
   }
   static void *newArray_AliMCParticle(Long_t nElements, void *p) {
      return p ? new(p) ::AliMCParticle[nElements] : new ::AliMCParticle[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliMCParticle(void *p) {
      delete ((::AliMCParticle*)p);
   }
   static void deleteArray_AliMCParticle(void *p) {
      delete [] ((::AliMCParticle*)p);
   }
   static void destruct_AliMCParticle(void *p) {
      typedef ::AliMCParticle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliMCParticle

//______________________________________________________________________________
void AliMCVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliMCVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliMCVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliMCVertex::Class(),this);
   }
}

//______________________________________________________________________________
void AliMCVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliMCVertex.
      TClass *R__cl = ::AliMCVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosition[3]", fPosition);
      AliVVertex::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliMCVertex(void *p) {
      return  p ? new(p) ::AliMCVertex : new ::AliMCVertex;
   }
   static void *newArray_AliMCVertex(Long_t nElements, void *p) {
      return p ? new(p) ::AliMCVertex[nElements] : new ::AliMCVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliMCVertex(void *p) {
      delete ((::AliMCVertex*)p);
   }
   static void deleteArray_AliMCVertex(void *p) {
      delete [] ((::AliMCVertex*)p);
   }
   static void destruct_AliMCVertex(void *p) {
      typedef ::AliMCVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliMCVertex

//______________________________________________________________________________
void AliMagF::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliMagF.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliMagF::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliMagF::Class(),this);
   }
}

//______________________________________________________________________________
void AliMagF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliMagF.
      TClass *R__cl = ::AliMagF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMeasuredMap", &fMeasuredMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMapType", &fMapType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSolenoid", &fSolenoid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamType", &fBeamType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamEnergy", &fBeamEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInteg", &fInteg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrecInteg", &fPrecInteg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFactorSol", &fFactorSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFactorDip", &fFactorDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMax", &fMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDipoleOFF", &fDipoleOFF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQuadGradient", &fQuadGradient);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDipoleField", &fDipoleField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCCorrField", &fCCorrField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fACorr1Field", &fACorr1Field);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fACorr2Field", &fACorr2Field);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParNames", &fParNames);
      R__insp.InspectMember(fParNames, "fParNames.");
      TVirtualMagField::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliMagF(void *p) {
      return  p ? new(p) ::AliMagF : new ::AliMagF;
   }
   static void *newArray_AliMagF(Long_t nElements, void *p) {
      return p ? new(p) ::AliMagF[nElements] : new ::AliMagF[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliMagF(void *p) {
      delete ((::AliMagF*)p);
   }
   static void deleteArray_AliMagF(void *p) {
      delete [] ((::AliMagF*)p);
   }
   static void destruct_AliMagF(void *p) {
      typedef ::AliMagF current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliMagF

//______________________________________________________________________________
void AliMagWrapCheb::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliMagWrapCheb.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliMagWrapCheb::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliMagWrapCheb::Class(),this);
   }
}

//______________________________________________________________________________
void AliMagWrapCheb::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliMagWrapCheb.
      TClass *R__cl = ::AliMagWrapCheb::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNParamsSol", &fNParamsSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNZSegSol", &fNZSegSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPSegSol", &fNPSegSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRSegSol", &fNRSegSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegZSol", &fSegZSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegPSol", &fSegPSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegRSol", &fSegRSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBegSegPSol", &fBegSegPSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNSegPSol", &fNSegPSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBegSegRSol", &fBegSegRSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNSegRSol", &fNSegRSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegIDSol", &fSegIDSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinZSol", &fMinZSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxZSol", &fMaxZSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParamsSol", &fParamsSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxRSol", &fMaxRSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNParamsTPC", &fNParamsTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNZSegTPC", &fNZSegTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPSegTPC", &fNPSegTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRSegTPC", &fNRSegTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegZTPC", &fSegZTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegPTPC", &fSegPTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegRTPC", &fSegRTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBegSegPTPC", &fBegSegPTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNSegPTPC", &fNSegPTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBegSegRTPC", &fBegSegRTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNSegRTPC", &fNSegRTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegIDTPC", &fSegIDTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinZTPC", &fMinZTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxZTPC", &fMaxZTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParamsTPC", &fParamsTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxRTPC", &fMaxRTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNParamsTPCRat", &fNParamsTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNZSegTPCRat", &fNZSegTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPSegTPCRat", &fNPSegTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRSegTPCRat", &fNRSegTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegZTPCRat", &fSegZTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegPTPCRat", &fSegPTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegRTPCRat", &fSegRTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBegSegPTPCRat", &fBegSegPTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNSegPTPCRat", &fNSegPTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBegSegRTPCRat", &fBegSegRTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNSegRTPCRat", &fNSegRTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegIDTPCRat", &fSegIDTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinZTPCRat", &fMinZTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxZTPCRat", &fMaxZTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParamsTPCRat", &fParamsTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxRTPCRat", &fMaxRTPCRat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNParamsDip", &fNParamsDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNZSegDip", &fNZSegDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNYSegDip", &fNYSegDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNXSegDip", &fNXSegDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegZDip", &fSegZDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegYDip", &fSegYDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegXDip", &fSegXDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBegSegYDip", &fBegSegYDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNSegYDip", &fNSegYDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBegSegXDip", &fBegSegXDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNSegXDip", &fNSegXDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegIDDip", &fSegIDDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinZDip", &fMinZDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxZDip", &fMaxZDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParamsDip", &fParamsDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCacheSol", &fCacheSol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCacheDip", &fCacheDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCacheTPCInt", &fCacheTPCInt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCacheTPCRat", &fCacheTPCRat);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliMagWrapCheb(void *p) {
      return  p ? new(p) ::AliMagWrapCheb : new ::AliMagWrapCheb;
   }
   static void *newArray_AliMagWrapCheb(Long_t nElements, void *p) {
      return p ? new(p) ::AliMagWrapCheb[nElements] : new ::AliMagWrapCheb[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliMagWrapCheb(void *p) {
      delete ((::AliMagWrapCheb*)p);
   }
   static void deleteArray_AliMagWrapCheb(void *p) {
      delete [] ((::AliMagWrapCheb*)p);
   }
   static void destruct_AliMagWrapCheb(void *p) {
      typedef ::AliMagWrapCheb current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliMagWrapCheb

//______________________________________________________________________________
void AliCheb3DCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliCheb3DCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliCheb3DCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliCheb3DCalc::Class(),this);
   }
}

//______________________________________________________________________________
void AliCheb3DCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliCheb3DCalc.
      TClass *R__cl = ::AliCheb3DCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNCoefs", &fNCoefs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRows", &fNRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNCols", &fNCols);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNElemBound2D", &fNElemBound2D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNColsAtRow", &fNColsAtRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fColAtRowBg", &fColAtRowBg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCoefBound2D0", &fCoefBound2D0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCoefBound2D1", &fCoefBound2D1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCoefs", &fCoefs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTmpCf1", &fTmpCf1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTmpCf0", &fTmpCf0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrec", &fPrec);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliCheb3DCalc(void *p) {
      return  p ? new(p) ::AliCheb3DCalc : new ::AliCheb3DCalc;
   }
   static void *newArray_AliCheb3DCalc(Long_t nElements, void *p) {
      return p ? new(p) ::AliCheb3DCalc[nElements] : new ::AliCheb3DCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliCheb3DCalc(void *p) {
      delete ((::AliCheb3DCalc*)p);
   }
   static void deleteArray_AliCheb3DCalc(void *p) {
      delete [] ((::AliCheb3DCalc*)p);
   }
   static void destruct_AliCheb3DCalc(void *p) {
      typedef ::AliCheb3DCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliCheb3DCalc

//______________________________________________________________________________
void AliCheb3D::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliCheb3D.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliCheb3D::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliCheb3D::Class(),this);
   }
}

//______________________________________________________________________________
void AliCheb3D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliCheb3D.
      TClass *R__cl = ::AliCheb3D::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDimOut", &fDimOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrec", &fPrec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBMin[3]", fBMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBMax[3]", fBMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBScale[3]", fBScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBOffset[3]", fBOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChebCalc", &fChebCalc);
      R__insp.InspectMember(fChebCalc, "fChebCalc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxCoefs", &fMaxCoefs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPoints[3]", fNPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArgsTmp[3]", fArgsTmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResTmp", &fResTmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGrid", &fGrid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGridOffs[3]", fGridOffs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsrFunName", &fUsrFunName);
      R__insp.InspectMember(fUsrFunName, "fUsrFunName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fUsrMacro", &fUsrMacro);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliCheb3D(void *p) {
      return  p ? new(p) ::AliCheb3D : new ::AliCheb3D;
   }
   static void *newArray_AliCheb3D(Long_t nElements, void *p) {
      return p ? new(p) ::AliCheb3D[nElements] : new ::AliCheb3D[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliCheb3D(void *p) {
      delete ((::AliCheb3D*)p);
   }
   static void deleteArray_AliCheb3D(void *p) {
      delete [] ((::AliCheb3D*)p);
   }
   static void destruct_AliCheb3D(void *p) {
      typedef ::AliCheb3D current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliCheb3D

//______________________________________________________________________________
void AliCheb2DStack::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliCheb2DStack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliCheb2DStack::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliCheb2DStack::Class(),this);
   }
}

//______________________________________________________________________________
void AliCheb2DStack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliCheb2DStack.
      TClass *R__cl = ::AliCheb2DStack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDimOut", &fDimOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNSlices", &fNSlices);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNParams", &fNParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNCoefsTot", &fNCoefsTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRowsTot", &fNRowsTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBMin[2]", fBMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBMax[2]", fBMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBScaleZ", &fBScaleZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBOffsetZ", &fBOffsetZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDead[2]", fDead);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRowXI", &fRowXI);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNRows", &fNRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNCols", &fNCols);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCoeffsEntry", &fCoeffsEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fColEntry", &fColEntry);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliCheb2DStack(void *p) {
      delete ((::AliCheb2DStack*)p);
   }
   static void deleteArray_AliCheb2DStack(void *p) {
      delete [] ((::AliCheb2DStack*)p);
   }
   static void destruct_AliCheb2DStack(void *p) {
      typedef ::AliCheb2DStack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliCheb2DStack

//______________________________________________________________________________
void AliCheb2DStackF::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliCheb2DStackF.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliCheb2DStackF::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliCheb2DStackF::Class(),this);
   }
}

//______________________________________________________________________________
void AliCheb2DStackF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliCheb2DStackF.
      TClass *R__cl = ::AliCheb2DStackF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCoeffs", &fCoeffs);
      AliCheb2DStack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliCheb2DStackF(void *p) {
      return  p ? new(p) ::AliCheb2DStackF : new ::AliCheb2DStackF;
   }
   static void *newArray_AliCheb2DStackF(Long_t nElements, void *p) {
      return p ? new(p) ::AliCheb2DStackF[nElements] : new ::AliCheb2DStackF[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliCheb2DStackF(void *p) {
      delete ((::AliCheb2DStackF*)p);
   }
   static void deleteArray_AliCheb2DStackF(void *p) {
      delete [] ((::AliCheb2DStackF*)p);
   }
   static void destruct_AliCheb2DStackF(void *p) {
      typedef ::AliCheb2DStackF current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliCheb2DStackF

//______________________________________________________________________________
void AliCheb2DStackS::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliCheb2DStackS.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliCheb2DStackS::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliCheb2DStackS::Class(),this);
   }
}

//______________________________________________________________________________
void AliCheb2DStackS::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliCheb2DStackS.
      TClass *R__cl = ::AliCheb2DStackS::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParScale", &fParScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParHVar", &fParHVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCoeffs", &fCoeffs);
      AliCheb2DStack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliCheb2DStackS(void *p) {
      return  p ? new(p) ::AliCheb2DStackS : new ::AliCheb2DStackS;
   }
   static void *newArray_AliCheb2DStackS(Long_t nElements, void *p) {
      return p ? new(p) ::AliCheb2DStackS[nElements] : new ::AliCheb2DStackS[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliCheb2DStackS(void *p) {
      delete ((::AliCheb2DStackS*)p);
   }
   static void deleteArray_AliCheb2DStackS(void *p) {
      delete [] ((::AliCheb2DStackS*)p);
   }
   static void destruct_AliCheb2DStackS(void *p) {
      typedef ::AliCheb2DStackS current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliCheb2DStackS

//______________________________________________________________________________
void AliNeutralTrackParam::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliNeutralTrackParam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliNeutralTrackParam::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliNeutralTrackParam::Class(),this);
   }
}

//______________________________________________________________________________
void AliNeutralTrackParam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliNeutralTrackParam.
      TClass *R__cl = ::AliNeutralTrackParam::IsA();
      if (R__cl || R__insp.IsA()) { }
      AliExternalTrackParam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliNeutralTrackParam(void *p) {
      return  p ? new(p) ::AliNeutralTrackParam : new ::AliNeutralTrackParam;
   }
   static void *newArray_AliNeutralTrackParam(Long_t nElements, void *p) {
      return p ? new(p) ::AliNeutralTrackParam[nElements] : new ::AliNeutralTrackParam[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliNeutralTrackParam(void *p) {
      delete ((::AliNeutralTrackParam*)p);
   }
   static void deleteArray_AliNeutralTrackParam(void *p) {
      delete [] ((::AliNeutralTrackParam*)p);
   }
   static void destruct_AliNeutralTrackParam(void *p) {
      typedef ::AliNeutralTrackParam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliNeutralTrackParam

//______________________________________________________________________________
void AliCodeTimer::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliCodeTimer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliCodeTimer::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliCodeTimer::Class(),this);
   }
}

//______________________________________________________________________________
void AliCodeTimer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliCodeTimer.
      TClass *R__cl = ::AliCodeTimer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTimers", &fTimers);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliCodeTimer(void *p) {
      return  p ? new(p) ::AliCodeTimer : new ::AliCodeTimer;
   }
   static void *newArray_AliCodeTimer(Long_t nElements, void *p) {
      return p ? new(p) ::AliCodeTimer[nElements] : new ::AliCodeTimer[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliCodeTimer(void *p) {
      delete ((::AliCodeTimer*)p);
   }
   static void deleteArray_AliCodeTimer(void *p) {
      delete [] ((::AliCodeTimer*)p);
   }
   static void destruct_AliCodeTimer(void *p) {
      typedef ::AliCodeTimer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliCodeTimer

//______________________________________________________________________________
void AliCodeTimer::AliPair::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliCodeTimer::AliPair.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliCodeTimer::AliPair::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliCodeTimer::AliPair::Class(),this);
   }
}

//______________________________________________________________________________
void AliCodeTimer::AliPair::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliCodeTimer::AliPair.
      TClass *R__cl = ::AliCodeTimer::AliPair::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fName", &fName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTimer", &fTimer);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliCodeTimercLcLAliPair(void *p) {
      return  p ? new(p) ::AliCodeTimer::AliPair : new ::AliCodeTimer::AliPair;
   }
   static void *newArray_AliCodeTimercLcLAliPair(Long_t nElements, void *p) {
      return p ? new(p) ::AliCodeTimer::AliPair[nElements] : new ::AliCodeTimer::AliPair[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliCodeTimercLcLAliPair(void *p) {
      delete ((::AliCodeTimer::AliPair*)p);
   }
   static void deleteArray_AliCodeTimercLcLAliPair(void *p) {
      delete [] ((::AliCodeTimer::AliPair*)p);
   }
   static void destruct_AliCodeTimercLcLAliPair(void *p) {
      typedef ::AliCodeTimer::AliPair current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliCodeTimer::AliPair

//______________________________________________________________________________
void AliPDG::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliPDG.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliPDG::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliPDG::Class(),this);
   }
}

//______________________________________________________________________________
void AliPDG::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliPDG.
      TClass *R__cl = ::AliPDG::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliPDG(void *p) {
      return  p ? new(p) ::AliPDG : new ::AliPDG;
   }
   static void *newArray_AliPDG(Long_t nElements, void *p) {
      return p ? new(p) ::AliPDG[nElements] : new ::AliPDG[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliPDG(void *p) {
      delete ((::AliPDG*)p);
   }
   static void deleteArray_AliPDG(void *p) {
      delete [] ((::AliPDG*)p);
   }
   static void destruct_AliPDG(void *p) {
      typedef ::AliPDG current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliPDG

//______________________________________________________________________________
void AliTimeStamp::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTimeStamp.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTimeStamp::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTimeStamp::Class(),this);
   }
}

//______________________________________________________________________________
void AliTimeStamp::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTimeStamp.
      TClass *R__cl = ::AliTimeStamp::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOrbit", &fOrbit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPeriod", &fPeriod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBunchCross", &fBunchCross);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTimeStamp(void *p) {
      return  p ? new(p) ::AliTimeStamp : new ::AliTimeStamp;
   }
   static void *newArray_AliTimeStamp(Long_t nElements, void *p) {
      return p ? new(p) ::AliTimeStamp[nElements] : new ::AliTimeStamp[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTimeStamp(void *p) {
      delete ((::AliTimeStamp*)p);
   }
   static void deleteArray_AliTimeStamp(void *p) {
      delete [] ((::AliTimeStamp*)p);
   }
   static void destruct_AliTimeStamp(void *p) {
      typedef ::AliTimeStamp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTimeStamp

//______________________________________________________________________________
void AliTriggerScalers::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTriggerScalers.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTriggerScalers::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTriggerScalers::Class(),this);
   }
}

//______________________________________________________________________________
void AliTriggerScalers::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTriggerScalers.
      TClass *R__cl = ::AliTriggerScalers::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClassIndex", &fClassIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLOCB", &fLOCB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLOCA", &fLOCA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL1CB", &fL1CB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL1CA", &fL1CA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL2CB", &fL2CB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL2CA", &fL2CA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLMCB", &fLMCB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLMCA", &fLMCA);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTriggerScalers(void *p) {
      return  p ? new(p) ::AliTriggerScalers : new ::AliTriggerScalers;
   }
   static void *newArray_AliTriggerScalers(Long_t nElements, void *p) {
      return p ? new(p) ::AliTriggerScalers[nElements] : new ::AliTriggerScalers[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTriggerScalers(void *p) {
      delete ((::AliTriggerScalers*)p);
   }
   static void deleteArray_AliTriggerScalers(void *p) {
      delete [] ((::AliTriggerScalers*)p);
   }
   static void destruct_AliTriggerScalers(void *p) {
      typedef ::AliTriggerScalers current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTriggerScalers

//______________________________________________________________________________
void AliTriggerScalersRecord::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTriggerScalersRecord.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTriggerScalersRecord::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTriggerScalersRecord::Class(),this);
   }
}

//______________________________________________________________________________
void AliTriggerScalersRecord::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTriggerScalersRecord.
      TClass *R__cl = ::AliTriggerScalersRecord::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimestamp", &fTimestamp);
      R__insp.InspectMember(fTimestamp, "fTimestamp.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScalers", &fScalers);
      R__insp.InspectMember(fScalers, "fScalers.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeGroup", &fTimeGroup);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTriggerScalersRecord(void *p) {
      return  p ? new(p) ::AliTriggerScalersRecord : new ::AliTriggerScalersRecord;
   }
   static void *newArray_AliTriggerScalersRecord(Long_t nElements, void *p) {
      return p ? new(p) ::AliTriggerScalersRecord[nElements] : new ::AliTriggerScalersRecord[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTriggerScalersRecord(void *p) {
      delete ((::AliTriggerScalersRecord*)p);
   }
   static void deleteArray_AliTriggerScalersRecord(void *p) {
      delete [] ((::AliTriggerScalersRecord*)p);
   }
   static void destruct_AliTriggerScalersRecord(void *p) {
      typedef ::AliTriggerScalersRecord current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTriggerScalersRecord

//______________________________________________________________________________
void AliExternalTrackParam::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliExternalTrackParam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliExternalTrackParam::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliExternalTrackParam::Class(),this);
   }
}

//______________________________________________________________________________
void AliExternalTrackParam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliExternalTrackParam.
      TClass *R__cl = ::AliExternalTrackParam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAlpha", &fAlpha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fP[5]", fP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fC[15]", fC);
      AliVTrack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliExternalTrackParam(void *p) {
      return  p ? new(p) ::AliExternalTrackParam : new ::AliExternalTrackParam;
   }
   static void *newArray_AliExternalTrackParam(Long_t nElements, void *p) {
      return p ? new(p) ::AliExternalTrackParam[nElements] : new ::AliExternalTrackParam[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliExternalTrackParam(void *p) {
      delete ((::AliExternalTrackParam*)p);
   }
   static void deleteArray_AliExternalTrackParam(void *p) {
      delete [] ((::AliExternalTrackParam*)p);
   }
   static void destruct_AliExternalTrackParam(void *p) {
      typedef ::AliExternalTrackParam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliExternalTrackParam

//______________________________________________________________________________
void AliQA::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliQA.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliQA::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliQA::Class(),this);
   }
}

//______________________________________________________________________________
void AliQA::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliQA.
      TClass *R__cl = ::AliQA::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNdet", &fNdet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQA", &fQA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDet", &fDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTask", &fTask);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliQA(void *p) {
      return  p ? new(p) ::AliQA : new ::AliQA;
   }
   static void *newArray_AliQA(Long_t nElements, void *p) {
      return p ? new(p) ::AliQA[nElements] : new ::AliQA[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliQA(void *p) {
      delete ((::AliQA*)p);
   }
   static void deleteArray_AliQA(void *p) {
      delete [] ((::AliQA*)p);
   }
   static void destruct_AliQA(void *p) {
      typedef ::AliQA current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_AliQA(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::AliQA*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::AliQA

//______________________________________________________________________________
void AliTRDPIDReference::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTRDPIDReference.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTRDPIDReference::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTRDPIDReference::Class(),this);
   }
}

//______________________________________________________________________________
void AliTRDPIDReference::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTRDPIDReference.
      TClass *R__cl = ::AliTRDPIDReference::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRefContainer", &fRefContainer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomentumBins", &fMomentumBins);
      R__insp.InspectMember(fMomentumBins, "fMomentumBins.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTRDPIDReference(void *p) {
      return  p ? new(p) ::AliTRDPIDReference : new ::AliTRDPIDReference;
   }
   static void *newArray_AliTRDPIDReference(Long_t nElements, void *p) {
      return p ? new(p) ::AliTRDPIDReference[nElements] : new ::AliTRDPIDReference[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTRDPIDReference(void *p) {
      delete ((::AliTRDPIDReference*)p);
   }
   static void deleteArray_AliTRDPIDReference(void *p) {
      delete [] ((::AliTRDPIDReference*)p);
   }
   static void destruct_AliTRDPIDReference(void *p) {
      typedef ::AliTRDPIDReference current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTRDPIDReference

//______________________________________________________________________________
void AliTRDPIDParams::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTRDPIDParams.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTRDPIDParams::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTRDPIDParams::Class(),this);
   }
}

//______________________________________________________________________________
void AliTRDPIDParams::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTRDPIDParams.
      TClass *R__cl = ::AliTRDPIDParams::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEntries", &fEntries);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTRDPIDParams(void *p) {
      return  p ? new(p) ::AliTRDPIDParams : new ::AliTRDPIDParams;
   }
   static void *newArray_AliTRDPIDParams(Long_t nElements, void *p) {
      return p ? new(p) ::AliTRDPIDParams[nElements] : new ::AliTRDPIDParams[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTRDPIDParams(void *p) {
      delete ((::AliTRDPIDParams*)p);
   }
   static void deleteArray_AliTRDPIDParams(void *p) {
      delete [] ((::AliTRDPIDParams*)p);
   }
   static void destruct_AliTRDPIDParams(void *p) {
      typedef ::AliTRDPIDParams current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTRDPIDParams

//______________________________________________________________________________
void AliTRDPIDParams::AliTRDPIDThresholds::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTRDPIDParams::AliTRDPIDThresholds.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTRDPIDParams::AliTRDPIDThresholds::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTRDPIDParams::AliTRDPIDThresholds::Class(),this);
   }
}

//______________________________________________________________________________
void AliTRDPIDParams::AliTRDPIDThresholds::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTRDPIDParams::AliTRDPIDThresholds.
      TClass *R__cl = ::AliTRDPIDParams::AliTRDPIDThresholds::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTracklets", &fNTracklets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEfficiency[2]", fEfficiency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParams[4]", fParams);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTRDPIDParamscLcLAliTRDPIDThresholds(void *p) {
      return  p ? new(p) ::AliTRDPIDParams::AliTRDPIDThresholds : new ::AliTRDPIDParams::AliTRDPIDThresholds;
   }
   static void *newArray_AliTRDPIDParamscLcLAliTRDPIDThresholds(Long_t nElements, void *p) {
      return p ? new(p) ::AliTRDPIDParams::AliTRDPIDThresholds[nElements] : new ::AliTRDPIDParams::AliTRDPIDThresholds[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTRDPIDParamscLcLAliTRDPIDThresholds(void *p) {
      delete ((::AliTRDPIDParams::AliTRDPIDThresholds*)p);
   }
   static void deleteArray_AliTRDPIDParamscLcLAliTRDPIDThresholds(void *p) {
      delete [] ((::AliTRDPIDParams::AliTRDPIDThresholds*)p);
   }
   static void destruct_AliTRDPIDParamscLcLAliTRDPIDThresholds(void *p) {
      typedef ::AliTRDPIDParams::AliTRDPIDThresholds current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTRDPIDParams::AliTRDPIDThresholds

//______________________________________________________________________________
void AliTRDPIDParams::AliTRDPIDCentrality::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTRDPIDParams::AliTRDPIDCentrality.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTRDPIDParams::AliTRDPIDCentrality::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTRDPIDParams::AliTRDPIDCentrality::Class(),this);
   }
}

//______________________________________________________________________________
void AliTRDPIDParams::AliTRDPIDCentrality::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTRDPIDParams::AliTRDPIDCentrality.
      TClass *R__cl = ::AliTRDPIDParams::AliTRDPIDCentrality::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEntries", &fEntries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinCentrality", &fMinCentrality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxCentrality", &fMaxCentrality);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTRDPIDParamscLcLAliTRDPIDCentrality(void *p) {
      return  p ? new(p) ::AliTRDPIDParams::AliTRDPIDCentrality : new ::AliTRDPIDParams::AliTRDPIDCentrality;
   }
   static void *newArray_AliTRDPIDParamscLcLAliTRDPIDCentrality(Long_t nElements, void *p) {
      return p ? new(p) ::AliTRDPIDParams::AliTRDPIDCentrality[nElements] : new ::AliTRDPIDParams::AliTRDPIDCentrality[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTRDPIDParamscLcLAliTRDPIDCentrality(void *p) {
      delete ((::AliTRDPIDParams::AliTRDPIDCentrality*)p);
   }
   static void deleteArray_AliTRDPIDParamscLcLAliTRDPIDCentrality(void *p) {
      delete [] ((::AliTRDPIDParams::AliTRDPIDCentrality*)p);
   }
   static void destruct_AliTRDPIDParamscLcLAliTRDPIDCentrality(void *p) {
      typedef ::AliTRDPIDParams::AliTRDPIDCentrality current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTRDPIDParams::AliTRDPIDCentrality

//______________________________________________________________________________
void AliTRDdEdxParams::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTRDdEdxParams.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTRDdEdxParams::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTRDdEdxParams::Class(),this);
   }
}

//______________________________________________________________________________
void AliTRDdEdxParams::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTRDdEdxParams.
      TClass *R__cl = ::AliTRDdEdxParams::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanPar[160]", fMeanPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaPar[160]", fSigmaPar);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTRDdEdxParams(void *p) {
      return  p ? new(p) ::AliTRDdEdxParams : new ::AliTRDdEdxParams;
   }
   static void *newArray_AliTRDdEdxParams(Long_t nElements, void *p) {
      return p ? new(p) ::AliTRDdEdxParams[nElements] : new ::AliTRDdEdxParams[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTRDdEdxParams(void *p) {
      delete ((::AliTRDdEdxParams*)p);
   }
   static void deleteArray_AliTRDdEdxParams(void *p) {
      delete [] ((::AliTRDdEdxParams*)p);
   }
   static void destruct_AliTRDdEdxParams(void *p) {
      typedef ::AliTRDdEdxParams current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTRDdEdxParams

//______________________________________________________________________________
void AliTRDPIDResponseObject::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTRDPIDResponseObject.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTRDPIDResponseObject::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTRDPIDResponseObject::Class(),this);
   }
}

//______________________________________________________________________________
void AliTRDPIDResponseObject::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTRDPIDResponseObject.
      TClass *R__cl = ::AliTRDPIDResponseObject::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPIDParams[5]", &fPIDParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPIDReference[5]", &fPIDReference);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNSlicesQ0", &fNSlicesQ0);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTRDPIDResponseObject(void *p) {
      return  p ? new(p) ::AliTRDPIDResponseObject : new ::AliTRDPIDResponseObject;
   }
   static void *newArray_AliTRDPIDResponseObject(Long_t nElements, void *p) {
      return p ? new(p) ::AliTRDPIDResponseObject[nElements] : new ::AliTRDPIDResponseObject[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTRDPIDResponseObject(void *p) {
      delete ((::AliTRDPIDResponseObject*)p);
   }
   static void deleteArray_AliTRDPIDResponseObject(void *p) {
      delete [] ((::AliTRDPIDResponseObject*)p);
   }
   static void destruct_AliTRDPIDResponseObject(void *p) {
      typedef ::AliTRDPIDResponseObject current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTRDPIDResponseObject

//______________________________________________________________________________
void AliTRDNDFast::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTRDNDFast.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTRDNDFast::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTRDNDFast::Class(),this);
   }
}

//______________________________________________________________________________
void AliTRDNDFast::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTRDNDFast.
      TClass *R__cl = ::AliTRDNDFast::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNDim", &fNDim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTitle", &fTitle);
      R__insp.InspectMember(fTitle, "fTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFunc", &fFunc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHistos", &fHistos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPars[5]", fPars);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTRDNDFast(void *p) {
      return  p ? new(p) ::AliTRDNDFast : new ::AliTRDNDFast;
   }
   static void *newArray_AliTRDNDFast(Long_t nElements, void *p) {
      return p ? new(p) ::AliTRDNDFast[nElements] : new ::AliTRDNDFast[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTRDNDFast(void *p) {
      delete ((::AliTRDNDFast*)p);
   }
   static void deleteArray_AliTRDNDFast(void *p) {
      delete [] ((::AliTRDNDFast*)p);
   }
   static void destruct_AliTRDNDFast(void *p) {
      typedef ::AliTRDNDFast current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTRDNDFast

//______________________________________________________________________________
void AliTRDTKDInterpolator::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTRDTKDInterpolator.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTRDTKDInterpolator::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTRDTKDInterpolator::Class(),this);
   }
}

//______________________________________________________________________________
void AliTRDTKDInterpolator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTRDTKDInterpolator.
      TClass *R__cl = ::AliTRDTKDInterpolator::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNDataNodes", &fNDataNodes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNodes", &fNodes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLambda", &fLambda);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPointsI", &fNPointsI);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseHelperNodes", &fUseHelperNodes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseWeights", &fUseWeights);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPDFMode", &fPDFMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStoreCov", &fStoreCov);
      TKDTree<int,float>::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTRDTKDInterpolator(void *p) {
      return  p ? new(p) ::AliTRDTKDInterpolator : new ::AliTRDTKDInterpolator;
   }
   static void *newArray_AliTRDTKDInterpolator(Long_t nElements, void *p) {
      return p ? new(p) ::AliTRDTKDInterpolator[nElements] : new ::AliTRDTKDInterpolator[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTRDTKDInterpolator(void *p) {
      delete ((::AliTRDTKDInterpolator*)p);
   }
   static void deleteArray_AliTRDTKDInterpolator(void *p) {
      delete [] ((::AliTRDTKDInterpolator*)p);
   }
   static void destruct_AliTRDTKDInterpolator(void *p) {
      typedef ::AliTRDTKDInterpolator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTRDTKDInterpolator

//______________________________________________________________________________
void AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTRDTKDInterpolator::AliTRDTKDNodeInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Class(),this);
   }
}

//______________________________________________________________________________
void AliTRDTKDInterpolator::AliTRDTKDNodeInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTRDTKDInterpolator::AliTRDTKDNodeInfo.
      TClass *R__cl = ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNDim", &fNDim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNBounds", &fNBounds);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPar", &fNPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNCov", &fNCov);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBounds", &fBounds);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVal[2]", fVal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPar", &fPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCov", &fCov);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo(void *p) {
      return  p ? new(p) ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo : new ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo;
   }
   static void *newArray_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo(Long_t nElements, void *p) {
      return p ? new(p) ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo[nElements] : new ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo(void *p) {
      delete ((::AliTRDTKDInterpolator::AliTRDTKDNodeInfo*)p);
   }
   static void deleteArray_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo(void *p) {
      delete [] ((::AliTRDTKDInterpolator::AliTRDTKDNodeInfo*)p);
   }
   static void destruct_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo(void *p) {
      typedef ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTRDTKDInterpolator::AliTRDTKDNodeInfo

//______________________________________________________________________________
void AliITSPidParams::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliITSPidParams.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliITSPidParams::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliITSPidParams::Class(),this);
   }
}

//______________________________________________________________________________
void AliITSPidParams::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliITSPidParams.
      TClass *R__cl = ::AliITSPidParams::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSDDElecMPV", &fSDDElecMPV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSDDElecLandauWidth", &fSDDElecLandauWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSDDElecGaussWidth", &fSDDElecGaussWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSSDElecMPV", &fSSDElecMPV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSSDElecLandauWidth", &fSSDElecLandauWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSSDElecGaussWidth", &fSSDElecGaussWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSDDPionMPV", &fSDDPionMPV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSDDPionLandauWidth", &fSDDPionLandauWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSDDPionGaussWidth", &fSDDPionGaussWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSSDPionMPV", &fSSDPionMPV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSSDPionLandauWidth", &fSSDPionLandauWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSSDPionGaussWidth", &fSSDPionGaussWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSDDKaonMPV", &fSDDKaonMPV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSDDKaonLandauWidth", &fSDDKaonLandauWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSDDKaonGaussWidth", &fSDDKaonGaussWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSSDKaonMPV", &fSSDKaonMPV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSSDKaonLandauWidth", &fSSDKaonLandauWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSSDKaonGaussWidth", &fSSDKaonGaussWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSDDProtMPV", &fSDDProtMPV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSDDProtLandauWidth", &fSDDProtLandauWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSDDProtGaussWidth", &fSDDProtGaussWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSSDProtMPV", &fSSDProtMPV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSSDProtLandauWidth", &fSSDProtLandauWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSSDProtGaussWidth", &fSSDProtGaussWidth);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliITSPidParams(void *p) {
      return  p ? new(p) ::AliITSPidParams : new ::AliITSPidParams;
   }
   static void *newArray_AliITSPidParams(Long_t nElements, void *p) {
      return p ? new(p) ::AliITSPidParams[nElements] : new ::AliITSPidParams[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliITSPidParams(void *p) {
      delete ((::AliITSPidParams*)p);
   }
   static void deleteArray_AliITSPidParams(void *p) {
      delete [] ((::AliITSPidParams*)p);
   }
   static void destruct_AliITSPidParams(void *p) {
      typedef ::AliITSPidParams current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliITSPidParams

//______________________________________________________________________________
void AliPIDResponse::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliPIDResponse.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliPIDResponse::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliPIDResponse::Class(),this);
   }
}

//______________________________________________________________________________
void AliPIDResponse::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliPIDResponse.
      TClass *R__cl = ::AliPIDResponse::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fITSResponse", &fITSResponse);
      R__insp.InspectMember(fITSResponse, "fITSResponse.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCResponse", &fTPCResponse);
      R__insp.InspectMember(fTPCResponse, "fTPCResponse.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRDResponse", &fTRDResponse);
      R__insp.InspectMember(fTRDResponse, "fTRDResponse.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFResponse", &fTOFResponse);
      R__insp.InspectMember(fTOFResponse, "fTOFResponse.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHMPIDResponse", &fHMPIDResponse);
      R__insp.InspectMember(fHMPIDResponse, "fHMPIDResponse.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEMCALResponse", &fEMCALResponse);
      R__insp.InspectMember(fEMCALResponse, "fEMCALResponse.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRange", &fRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fITSPIDmethod", &fITSPIDmethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTuneMConData", &fTuneMConData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTuneMConDataMask", &fTuneMConDataMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsMC", &fIsMC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCachePID", &fCachePID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOADBPath", &fOADBPath);
      R__insp.InspectMember(fOADBPath, "fOADBPath.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCustomTPCpidResponse", &fCustomTPCpidResponse);
      R__insp.InspectMember(fCustomTPCpidResponse, "fCustomTPCpidResponse.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCustomTPCpidResponseOADBFile", &fCustomTPCpidResponseOADBFile);
      R__insp.InspectMember(fCustomTPCpidResponseOADBFile, "fCustomTPCpidResponseOADBFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCustomTPCetaMaps", &fCustomTPCetaMaps);
      R__insp.InspectMember(fCustomTPCetaMaps, "fCustomTPCetaMaps.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamType", &fBeamType);
      R__insp.InspectMember(fBeamType, "fBeamType.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLHCperiod", &fLHCperiod);
      R__insp.InspectMember(fLHCperiod, "fLHCperiod.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCperiodTPC", &fMCperiodTPC);
      R__insp.InspectMember(fMCperiodTPC, "fMCperiodTPC.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCperiodUser", &fMCperiodUser);
      R__insp.InspectMember(fMCperiodUser, "fMCperiodUser.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentFile", &fCurrentFile);
      R__insp.InspectMember(fCurrentFile, "fCurrentFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecoPassName", &fRecoPassName);
      R__insp.InspectMember(fRecoPassName, "fRecoPassName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecoPassNameUser", &fRecoPassNameUser);
      R__insp.InspectMember(fRecoPassNameUser, "fRecoPassNameUser.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentAliRootRev", &fCurrentAliRootRev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecoPass", &fRecoPass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecoPassUser", &fRecoPassUser);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRun", &fRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOldRun", &fOldRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResT0A", &fResT0A);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResT0C", &fResT0C);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResT0AC", &fResT0AC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTPCPIDResponseArray", &fTPCPIDResponseArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArrPidResponseMaster", &fArrPidResponseMaster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResolutionCorrection", &fResolutionCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOADBvoltageMaps", &fOADBvoltageMaps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseTPCEtaCorrection", &fUseTPCEtaCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseTPCMultiplicityCorrection", &fUseTPCMultiplicityCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseTPCNewResponse", &fUseTPCNewResponse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTRDPIDResponseObject", &fTRDPIDResponseObject);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTRDdEdxParams", &fTRDdEdxParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseTRDEtaCorrection", &fUseTRDEtaCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseTRDClusterCorrection", &fUseTRDClusterCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseTRDCentralityCorrection", &fUseTRDCentralityCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFtail", &fTOFtail);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTOFPIDParams", &fTOFPIDParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHMPIDPIDParams", &fHMPIDPIDParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEMCALPIDParams", &fEMCALPIDParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCurrentEvent", &fCurrentEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCurrentMCEvent", &fCurrentMCEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrCentrality", &fCurrCentrality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamTypeNum", &fBeamTypeNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNoTOFmism", &fNoTOFmism);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliPIDResponse(void *p) {
      return  p ? new(p) ::AliPIDResponse : new ::AliPIDResponse;
   }
   static void *newArray_AliPIDResponse(Long_t nElements, void *p) {
      return p ? new(p) ::AliPIDResponse[nElements] : new ::AliPIDResponse[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliPIDResponse(void *p) {
      delete ((::AliPIDResponse*)p);
   }
   static void deleteArray_AliPIDResponse(void *p) {
      delete [] ((::AliPIDResponse*)p);
   }
   static void destruct_AliPIDResponse(void *p) {
      typedef ::AliPIDResponse current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliPIDResponse

//______________________________________________________________________________
void AliITSPIDResponse::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliITSPIDResponse.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliITSPIDResponse::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliITSPIDResponse::Class(),this);
   }
}

//______________________________________________________________________________
void AliITSPIDResponse::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliITSPIDResponse.
      TClass *R__cl = ::AliITSPIDResponse::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRes", &fRes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKp1", &fKp1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKp2", &fKp2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKp3", &fKp3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKp4", &fKp4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKp5", &fKp5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBBsa[5]", fBBsa);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBBsaHybrid[9]", fBBsaHybrid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBBsaElectron[5]", fBBsaElectron);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBBtpcits[5]", fBBtpcits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBBdeu[5]", fBBdeu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBBtri[5]", fBBtri);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResolSA[5]", fResolSA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResolTPCITS[5]", fResolTPCITS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResolTPCITSDeu3[3]", fResolTPCITSDeu3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResolTPCITSDeu4[3]", fResolTPCITSDeu4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResolTPCITSTri3[3]", fResolTPCITSTri3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResolTPCITSTri4[3]", fResolTPCITSTri4);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliITSPIDResponse(void *p) {
      return  p ? new(p) ::AliITSPIDResponse : new ::AliITSPIDResponse;
   }
   static void *newArray_AliITSPIDResponse(Long_t nElements, void *p) {
      return p ? new(p) ::AliITSPIDResponse[nElements] : new ::AliITSPIDResponse[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliITSPIDResponse(void *p) {
      delete ((::AliITSPIDResponse*)p);
   }
   static void deleteArray_AliITSPIDResponse(void *p) {
      delete [] ((::AliITSPIDResponse*)p);
   }
   static void destruct_AliITSPIDResponse(void *p) {
      typedef ::AliITSPIDResponse current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliITSPIDResponse

//______________________________________________________________________________
void AliTPCPIDResponse::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTPCPIDResponse.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTPCPIDResponse::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTPCPIDResponse::Class(),this);
   }
}

//______________________________________________________________________________
void AliTPCPIDResponse::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTPCPIDResponse.
      TClass *R__cl = ::AliTPCPIDResponse::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMIP", &fMIP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRes0[3]", fRes0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResN2[3]", fResN2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKp1", &fKp1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKp2", &fKp2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKp3", &fKp3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKp4", &fKp4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKp5", &fKp5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseDatabase", &fUseDatabase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResponseFunctions", &fResponseFunctions);
      R__insp.InspectMember(fResponseFunctions, "fResponseFunctions.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOADBContainer", &fOADBContainer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVoltageMap", &fVoltageMap);
      R__insp.InspectMember(fVoltageMap, "fVoltageMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLowGainIROCthreshold", &fLowGainIROCthreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBadIROCthreshhold", &fBadIROCthreshhold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLowGainOROCthreshold", &fLowGainOROCthreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBadOROCthreshhold", &fBadOROCthreshhold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxBadLengthFraction", &fMaxBadLengthFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMagField", &fMagField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fhEtaCorr", &fhEtaCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fhEtaSigmaPar1", &fhEtaSigmaPar1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaPar0", &fSigmaPar0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentEventMultiplicity", &fCurrentEventMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCorrFuncMultiplicity", &fCorrFuncMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCorrFuncMultiplicityTanTheta", &fCorrFuncMultiplicityTanTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCorrFuncSigmaMultiplicity", &fCorrFuncSigmaMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdEdxType", &fdEdxType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdEdxChargeType", &fdEdxChargeType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdEdxWeightType", &fdEdxWeightType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIROCweight", &fIROCweight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOROCmedWeight", &fOROCmedWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOROClongWeight", &fOROClongWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecoPassNameUsed", &fRecoPassNameUsed);
      R__insp.InspectMember(fRecoPassNameUsed, "fRecoPassNameUsed.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSplineArray", &fSplineArray);
      R__insp.InspectMember(fSplineArray, "fSplineArray.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTPCPIDResponse(void *p) {
      return  p ? new(p) ::AliTPCPIDResponse : new ::AliTPCPIDResponse;
   }
   static void *newArray_AliTPCPIDResponse(Long_t nElements, void *p) {
      return p ? new(p) ::AliTPCPIDResponse[nElements] : new ::AliTPCPIDResponse[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTPCPIDResponse(void *p) {
      delete ((::AliTPCPIDResponse*)p);
   }
   static void deleteArray_AliTPCPIDResponse(void *p) {
      delete [] ((::AliTPCPIDResponse*)p);
   }
   static void destruct_AliTPCPIDResponse(void *p) {
      typedef ::AliTPCPIDResponse current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTPCPIDResponse

//______________________________________________________________________________
void AliTPCdEdxInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTPCdEdxInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTPCdEdxInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTPCdEdxInfo::Class(),this);
   }
}

//______________________________________________________________________________
void AliTPCdEdxInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTPCdEdxInfo.
      TClass *R__cl = ::AliTPCdEdxInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCsignalRegion[4]", fTPCsignalRegion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCsignalRegionQmax[4]", fTPCsignalRegionQmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCsignalNRegion[3]", fTPCsignalNRegion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCsignalNRowRegion[3]", fTPCsignalNRowRegion);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTPCdEdxInfo(void *p) {
      return  p ? new(p) ::AliTPCdEdxInfo : new ::AliTPCdEdxInfo;
   }
   static void *newArray_AliTPCdEdxInfo(Long_t nElements, void *p) {
      return p ? new(p) ::AliTPCdEdxInfo[nElements] : new ::AliTPCdEdxInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTPCdEdxInfo(void *p) {
      delete ((::AliTPCdEdxInfo*)p);
   }
   static void deleteArray_AliTPCdEdxInfo(void *p) {
      delete [] ((::AliTPCdEdxInfo*)p);
   }
   static void destruct_AliTPCdEdxInfo(void *p) {
      typedef ::AliTPCdEdxInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTPCdEdxInfo

//______________________________________________________________________________
void AliTOFPIDResponse::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTOFPIDResponse.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTOFPIDResponse::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTOFPIDResponse::Class(),this);
   }
}

//______________________________________________________________________________
void AliTOFPIDResponse::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTOFPIDResponse.
      TClass *R__cl = ::AliTOFPIDResponse::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigma", &fSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPmax", &fPmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime0", &fTime0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0event[10]", fT0event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0resolution[10]", fT0resolution);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPCutMin[11]", fPCutMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaskT0[10]", fMaskT0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPar[4]", fPar);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTOFPIDResponse(void *p) {
      return  p ? new(p) ::AliTOFPIDResponse : new ::AliTOFPIDResponse;
   }
   static void *newArray_AliTOFPIDResponse(Long_t nElements, void *p) {
      return p ? new(p) ::AliTOFPIDResponse[nElements] : new ::AliTOFPIDResponse[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTOFPIDResponse(void *p) {
      delete ((::AliTOFPIDResponse*)p);
   }
   static void deleteArray_AliTOFPIDResponse(void *p) {
      delete [] ((::AliTOFPIDResponse*)p);
   }
   static void destruct_AliTOFPIDResponse(void *p) {
      typedef ::AliTOFPIDResponse current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTOFPIDResponse

//______________________________________________________________________________
void AliTRDPIDResponse::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTRDPIDResponse.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTRDPIDResponse::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTRDPIDResponse::Class(),this);
   }
}

//______________________________________________________________________________
void AliTRDPIDResponse::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTRDPIDResponse.
      TClass *R__cl = ::AliTRDPIDResponse::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fkPIDResponseObject", &fkPIDResponseObject);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fkTRDdEdxParams", &fkTRDdEdxParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGainNormalisationFactor", &fGainNormalisationFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCorrectEta", &fCorrectEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fhEtaCorr[1]", &fhEtaCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCorrectCluster", &fCorrectCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fhClusterCorr[3]", &fhClusterCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCorrectCentrality", &fCorrectCentrality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fhCentralityCorr[1]", &fhCentralityCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrCentrality", &fCurrCentrality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMagField", &fMagField);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTRDPIDResponse(void *p) {
      return  p ? new(p) ::AliTRDPIDResponse : new ::AliTRDPIDResponse;
   }
   static void *newArray_AliTRDPIDResponse(Long_t nElements, void *p) {
      return p ? new(p) ::AliTRDPIDResponse[nElements] : new ::AliTRDPIDResponse[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTRDPIDResponse(void *p) {
      delete ((::AliTRDPIDResponse*)p);
   }
   static void deleteArray_AliTRDPIDResponse(void *p) {
      delete [] ((::AliTRDPIDResponse*)p);
   }
   static void destruct_AliTRDPIDResponse(void *p) {
      typedef ::AliTRDPIDResponse current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTRDPIDResponse

//______________________________________________________________________________
void AliEMCALPIDResponse::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliEMCALPIDResponse.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliEMCALPIDResponse::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliEMCALPIDResponse::Class(),this);
   }
}

//______________________________________________________________________________
void AliEMCALPIDResponse::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliEMCALPIDResponse.
      TClass *R__cl = ::AliEMCALPIDResponse::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNorm", &fNorm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrCentrality", &fCurrCentrality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fkPIDParams", &fkPIDParams);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliEMCALPIDResponse(void *p) {
      return  p ? new(p) ::AliEMCALPIDResponse : new ::AliEMCALPIDResponse;
   }
   static void *newArray_AliEMCALPIDResponse(Long_t nElements, void *p) {
      return p ? new(p) ::AliEMCALPIDResponse[nElements] : new ::AliEMCALPIDResponse[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliEMCALPIDResponse(void *p) {
      delete ((::AliEMCALPIDResponse*)p);
   }
   static void deleteArray_AliEMCALPIDResponse(void *p) {
      delete [] ((::AliEMCALPIDResponse*)p);
   }
   static void destruct_AliEMCALPIDResponse(void *p) {
      typedef ::AliEMCALPIDResponse current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliEMCALPIDResponse

//______________________________________________________________________________
void AliHMPIDPIDResponse::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliHMPIDPIDResponse.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliHMPIDPIDResponse::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliHMPIDPIDResponse::Class(),this);
   }
}

//______________________________________________________________________________
void AliHMPIDPIDResponse::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliHMPIDPIDResponse.
      TClass *R__cl = ::AliHMPIDPIDResponse::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fM[7]", &fM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefIdx", &fRefIdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrkDir", &fTrkDir);
      R__insp.InspectMember(fTrkDir, "fTrkDir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrkPos", &fTrkPos);
      R__insp.InspectMember(fTrkPos, "fTrkPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRefIndexArray", &fRefIndexArray);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliHMPIDPIDResponse(void *p) {
      return  p ? new(p) ::AliHMPIDPIDResponse : new ::AliHMPIDPIDResponse;
   }
   static void *newArray_AliHMPIDPIDResponse(Long_t nElements, void *p) {
      return p ? new(p) ::AliHMPIDPIDResponse[nElements] : new ::AliHMPIDPIDResponse[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliHMPIDPIDResponse(void *p) {
      delete ((::AliHMPIDPIDResponse*)p);
   }
   static void deleteArray_AliHMPIDPIDResponse(void *p) {
      delete [] ((::AliHMPIDPIDResponse*)p);
   }
   static void destruct_AliHMPIDPIDResponse(void *p) {
      typedef ::AliHMPIDPIDResponse current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliHMPIDPIDResponse

//______________________________________________________________________________
void AliHMPIDPIDParams::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliHMPIDPIDParams.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliHMPIDPIDParams::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliHMPIDPIDParams::Class(),this);
   }
}

//______________________________________________________________________________
void AliHMPIDPIDParams::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliHMPIDPIDParams.
      TClass *R__cl = ::AliHMPIDPIDParams::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHMPIDRefIndexArray", &fHMPIDRefIndexArray);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliHMPIDPIDParams(void *p) {
      return  p ? new(p) ::AliHMPIDPIDParams : new ::AliHMPIDPIDParams;
   }
   static void *newArray_AliHMPIDPIDParams(Long_t nElements, void *p) {
      return p ? new(p) ::AliHMPIDPIDParams[nElements] : new ::AliHMPIDPIDParams[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliHMPIDPIDParams(void *p) {
      delete ((::AliHMPIDPIDParams*)p);
   }
   static void deleteArray_AliHMPIDPIDParams(void *p) {
      delete [] ((::AliHMPIDPIDParams*)p);
   }
   static void destruct_AliHMPIDPIDParams(void *p) {
      typedef ::AliHMPIDPIDParams current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliHMPIDPIDParams

//______________________________________________________________________________
void AliPIDCombined::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliPIDCombined.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliPIDCombined::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliPIDCombined::Class(),this);
   }
}

//______________________________________________________________________________
void AliPIDCombined::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliPIDCombined.
      TClass *R__cl = ::AliPIDCombined::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorMask", &fDetectorMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRejectMismatchMask", &fRejectMismatchMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnablePriors", &fEnablePriors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSelectedSpecies", &fSelectedSpecies);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPriorsDistributions[9]", &fPriorsDistributions);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseDefaultTPCPriors", &fUseDefaultTPCPriors);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliPIDCombined(void *p) {
      return  p ? new(p) ::AliPIDCombined : new ::AliPIDCombined;
   }
   static void *newArray_AliPIDCombined(Long_t nElements, void *p) {
      return p ? new(p) ::AliPIDCombined[nElements] : new ::AliPIDCombined[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliPIDCombined(void *p) {
      delete ((::AliPIDCombined*)p);
   }
   static void deleteArray_AliPIDCombined(void *p) {
      delete [] ((::AliPIDCombined*)p);
   }
   static void destruct_AliPIDCombined(void *p) {
      typedef ::AliPIDCombined current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliPIDCombined

//______________________________________________________________________________
void AliPIDValues::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliPIDValues.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliPIDValues::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliPIDValues::Class(),this);
   }
}

//______________________________________________________________________________
void AliPIDValues::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliPIDValues.
      TClass *R__cl = ::AliPIDValues::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fValues[14]", fValues);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPIDStatus", &fPIDStatus);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliPIDValues(void *p) {
      return  p ? new(p) ::AliPIDValues : new ::AliPIDValues;
   }
   static void *newArray_AliPIDValues(Long_t nElements, void *p) {
      return p ? new(p) ::AliPIDValues[nElements] : new ::AliPIDValues[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliPIDValues(void *p) {
      delete ((::AliPIDValues*)p);
   }
   static void deleteArray_AliPIDValues(void *p) {
      delete [] ((::AliPIDValues*)p);
   }
   static void destruct_AliPIDValues(void *p) {
      typedef ::AliPIDValues current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliPIDValues

//______________________________________________________________________________
void AliDetectorPID::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliDetectorPID.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliDetectorPID::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliDetectorPID::Class(),this);
   }
}

//______________________________________________________________________________
void AliDetectorPID::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliDetectorPID.
      TClass *R__cl = ::AliDetectorPID::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArrNsigmas", &fArrNsigmas);
      R__insp.InspectMember(fArrNsigmas, "fArrNsigmas.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArrRawProbabilities", &fArrRawProbabilities);
      R__insp.InspectMember(fArrRawProbabilities, "fArrRawProbabilities.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliDetectorPID(void *p) {
      return  p ? new(p) ::AliDetectorPID : new ::AliDetectorPID;
   }
   static void *newArray_AliDetectorPID(Long_t nElements, void *p) {
      return p ? new(p) ::AliDetectorPID[nElements] : new ::AliDetectorPID[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliDetectorPID(void *p) {
      delete ((::AliDetectorPID*)p);
   }
   static void deleteArray_AliDetectorPID(void *p) {
      delete [] ((::AliDetectorPID*)p);
   }
   static void destruct_AliDetectorPID(void *p) {
      typedef ::AliDetectorPID current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliDetectorPID

//______________________________________________________________________________
void AliTOFHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTOFHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTOFHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTOFHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliTOFHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTOFHeader.
      TClass *R__cl = ::AliTOFHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDefaultEventTimeValue", &fDefaultEventTimeValue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDefaultEventTimeRes", &fDefaultEventTimeRes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNbins", &fNbins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEventTimeValues", &fEventTimeValues);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEventTimeRes", &fEventTimeRes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNvalues", &fNvalues);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFtimeResolution", &fTOFtimeResolution);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0spread", &fT0spread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfTOFclusters", &fNumberOfTOFclusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfTOFtrgPads", &fNumberOfTOFtrgPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrigMask", &fTrigMask);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTOFHeader(void *p) {
      return  p ? new(p) ::AliTOFHeader : new ::AliTOFHeader;
   }
   static void *newArray_AliTOFHeader(Long_t nElements, void *p) {
      return p ? new(p) ::AliTOFHeader[nElements] : new ::AliTOFHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTOFHeader(void *p) {
      delete ((::AliTOFHeader*)p);
   }
   static void deleteArray_AliTOFHeader(void *p) {
      delete [] ((::AliTOFHeader*)p);
   }
   static void destruct_AliTOFHeader(void *p) {
      typedef ::AliTOFHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTOFHeader

//______________________________________________________________________________
void AliTOFTriggerMask::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTOFTriggerMask.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTOFTriggerMask::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTOFTriggerMask::Class(),this);
   }
}

//______________________________________________________________________________
void AliTOFTriggerMask::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTOFTriggerMask.
      TClass *R__cl = ::AliTOFTriggerMask::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerMask[72]", fTriggerMask);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTOFTriggerMask(void *p) {
      return  p ? new(p) ::AliTOFTriggerMask : new ::AliTOFTriggerMask;
   }
   static void *newArray_AliTOFTriggerMask(Long_t nElements, void *p) {
      return p ? new(p) ::AliTOFTriggerMask[nElements] : new ::AliTOFTriggerMask[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTOFTriggerMask(void *p) {
      delete ((::AliTOFTriggerMask*)p);
   }
   static void deleteArray_AliTOFTriggerMask(void *p) {
      delete [] ((::AliTOFTriggerMask*)p);
   }
   static void destruct_AliTOFTriggerMask(void *p) {
      typedef ::AliTOFTriggerMask current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTOFTriggerMask

//______________________________________________________________________________
void AliDAQ::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliDAQ.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliDAQ::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliDAQ::Class(),this);
   }
}

//______________________________________________________________________________
void AliDAQ::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliDAQ.
      TClass *R__cl = ::AliDAQ::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliDAQ(void *p) {
      return  p ? new(p) ::AliDAQ : new ::AliDAQ;
   }
   static void *newArray_AliDAQ(Long_t nElements, void *p) {
      return p ? new(p) ::AliDAQ[nElements] : new ::AliDAQ[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliDAQ(void *p) {
      delete ((::AliDAQ*)p);
   }
   static void deleteArray_AliDAQ(void *p) {
      delete [] ((::AliDAQ*)p);
   }
   static void destruct_AliDAQ(void *p) {
      typedef ::AliDAQ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliDAQ

//______________________________________________________________________________
void AliRefArray::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliRefArray.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliRefArray::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliRefArray::Class(),this);
   }
}

//______________________________________________________________________________
void AliRefArray::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliRefArray.
      TClass *R__cl = ::AliRefArray::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNElems", &fNElems);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefSize", &fRefSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fElems", &fElems);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRefInd", &fRefInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRefBuff", &fRefBuff);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliRefArray(void *p) {
      return  p ? new(p) ::AliRefArray : new ::AliRefArray;
   }
   static void *newArray_AliRefArray(Long_t nElements, void *p) {
      return p ? new(p) ::AliRefArray[nElements] : new ::AliRefArray[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliRefArray(void *p) {
      delete ((::AliRefArray*)p);
   }
   static void deleteArray_AliRefArray(void *p) {
      delete [] ((::AliRefArray*)p);
   }
   static void destruct_AliRefArray(void *p) {
      typedef ::AliRefArray current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliRefArray

//______________________________________________________________________________
void AliOADBContainer::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliOADBContainer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliOADBContainer::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliOADBContainer::Class(),this);
   }
}

//______________________________________________________________________________
void AliOADBContainer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliOADBContainer.
      TClass *R__cl = ::AliOADBContainer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArray", &fArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDefaultList", &fDefaultList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPassNames", &fPassNames);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLowerLimits", &fLowerLimits);
      R__insp.InspectMember(fLowerLimits, "fLowerLimits.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUpperLimits", &fUpperLimits);
      R__insp.InspectMember(fUpperLimits, "fUpperLimits.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEntries", &fEntries);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliOADBContainer(void *p) {
      return  p ? new(p) ::AliOADBContainer : new ::AliOADBContainer;
   }
   static void *newArray_AliOADBContainer(Long_t nElements, void *p) {
      return p ? new(p) ::AliOADBContainer[nElements] : new ::AliOADBContainer[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliOADBContainer(void *p) {
      delete ((::AliOADBContainer*)p);
   }
   static void deleteArray_AliOADBContainer(void *p) {
      delete [] ((::AliOADBContainer*)p);
   }
   static void destruct_AliOADBContainer(void *p) {
      typedef ::AliOADBContainer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliOADBContainer

//______________________________________________________________________________
void AliMathBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliMathBase.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliMathBase::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliMathBase::Class(),this);
   }
}

//______________________________________________________________________________
void AliMathBase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliMathBase.
      TClass *R__cl = ::AliMathBase::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliMathBase(void *p) {
      return  p ? new(p) ::AliMathBase : new ::AliMathBase;
   }
   static void *newArray_AliMathBase(Long_t nElements, void *p) {
      return p ? new(p) ::AliMathBase[nElements] : new ::AliMathBase[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliMathBase(void *p) {
      delete ((::AliMathBase*)p);
   }
   static void deleteArray_AliMathBase(void *p) {
      delete [] ((::AliMathBase*)p);
   }
   static void destruct_AliMathBase(void *p) {
      typedef ::AliMathBase current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliMathBase

//______________________________________________________________________________
void TTreeDataElement::Streamer(TBuffer &R__b)
{
   // Stream an object of class TTreeDataElement.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TTreeDataElement::Class(),this);
   } else {
      R__b.WriteClassBuffer(TTreeDataElement::Class(),this);
   }
}

//______________________________________________________________________________
void TTreeDataElement::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TTreeDataElement.
      TClass *R__cl = ::TTreeDataElement::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDType", &fDType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClass", &fClass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointer", &fPointer);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_TTreeDataElement(void *p) {
      delete ((::TTreeDataElement*)p);
   }
   static void deleteArray_TTreeDataElement(void *p) {
      delete [] ((::TTreeDataElement*)p);
   }
   static void destruct_TTreeDataElement(void *p) {
      typedef ::TTreeDataElement current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TTreeDataElement

//______________________________________________________________________________
void TTreeStream::Streamer(TBuffer &R__b)
{
   // Stream an object of class TTreeStream.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TTreeStream::Class(),this);
   } else {
      R__b.WriteClassBuffer(TTreeStream::Class(),this);
   }
}

//______________________________________________________________________________
void TTreeStream::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TTreeStream.
      TClass *R__cl = ::TTreeStream::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fElements", &fElements);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBranches", &fBranches);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentIndex", &fCurrentIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fId", &fId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNextName", &fNextName);
      R__insp.InspectMember(fNextName, "fNextName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNextNameCounter", &fNextNameCounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_TTreeStream(void *p) {
      delete ((::TTreeStream*)p);
   }
   static void deleteArray_TTreeStream(void *p) {
      delete [] ((::TTreeStream*)p);
   }
   static void destruct_TTreeStream(void *p) {
      typedef ::TTreeStream current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TTreeStream

//______________________________________________________________________________
void TTreeSRedirector::Streamer(TBuffer &R__b)
{
   // Stream an object of class TTreeSRedirector.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TTreeSRedirector::Class(),this);
   } else {
      R__b.WriteClassBuffer(TTreeSRedirector::Class(),this);
   }
}

//______________________________________________________________________________
void TTreeSRedirector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TTreeSRedirector.
      TClass *R__cl = ::TTreeSRedirector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDirectory", &fDirectory);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDirectoryOwner", &fDirectoryOwner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDataLayouts", &fDataLayouts);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TTreeSRedirector(void *p) {
      return  p ? new(p) ::TTreeSRedirector : new ::TTreeSRedirector;
   }
   static void *newArray_TTreeSRedirector(Long_t nElements, void *p) {
      return p ? new(p) ::TTreeSRedirector[nElements] : new ::TTreeSRedirector[nElements];
   }
   // Wrapper around operator delete
   static void delete_TTreeSRedirector(void *p) {
      delete ((::TTreeSRedirector*)p);
   }
   static void deleteArray_TTreeSRedirector(void *p) {
      delete [] ((::TTreeSRedirector*)p);
   }
   static void destruct_TTreeSRedirector(void *p) {
      typedef ::TTreeSRedirector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TTreeSRedirector

//______________________________________________________________________________
void AliVMFT::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVMFT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVMFT::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVMFT::Class(),this);
   }
}

//______________________________________________________________________________
void AliVMFT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVMFT.
      TClass *R__cl = ::AliVMFT::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliVMFT(void *p) {
      return  p ? new(p) ::AliVMFT : new ::AliVMFT;
   }
   static void *newArray_AliVMFT(Long_t nElements, void *p) {
      return p ? new(p) ::AliVMFT[nElements] : new ::AliVMFT[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliVMFT(void *p) {
      delete ((::AliVMFT*)p);
   }
   static void deleteArray_AliVMFT(void *p) {
      delete [] ((::AliVMFT*)p);
   }
   static void destruct_AliVMFT(void *p) {
      typedef ::AliVMFT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVMFT

//______________________________________________________________________________
void AliCounterCollection::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliCounterCollection.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliCounterCollection::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliCounterCollection::Class(),this);
   }
}

//______________________________________________________________________________
void AliCounterCollection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliCounterCollection.
      TClass *R__cl = ::AliCounterCollection::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRubrics", &fRubrics);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRubricsSize", &fRubricsSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCounters", &fCounters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWeightedCounters", &fWeightedCounters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLongCounters", &fLongCounters);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliCounterCollection(void *p) {
      return  p ? new(p) ::AliCounterCollection : new ::AliCounterCollection;
   }
   static void *newArray_AliCounterCollection(Long_t nElements, void *p) {
      return p ? new(p) ::AliCounterCollection[nElements] : new ::AliCounterCollection[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliCounterCollection(void *p) {
      delete ((::AliCounterCollection*)p);
   }
   static void deleteArray_AliCounterCollection(void *p) {
      delete [] ((::AliCounterCollection*)p);
   }
   static void destruct_AliCounterCollection(void *p) {
      typedef ::AliCounterCollection current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_AliCounterCollection(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::AliCounterCollection*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::AliCounterCollection

//______________________________________________________________________________
void AliVCaloTrigger::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVCaloTrigger.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVCaloTrigger::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVCaloTrigger::Class(),this);
   }
}

//______________________________________________________________________________
void AliVCaloTrigger::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVCaloTrigger.
      TClass *R__cl = ::AliVCaloTrigger::IsA();
      if (R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVCaloTrigger(void *p) {
      delete ((::AliVCaloTrigger*)p);
   }
   static void deleteArray_AliVCaloTrigger(void *p) {
      delete [] ((::AliVCaloTrigger*)p);
   }
   static void destruct_AliVCaloTrigger(void *p) {
      typedef ::AliVCaloTrigger current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVCaloTrigger

//______________________________________________________________________________
void AliTOFPIDParams::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTOFPIDParams.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTOFPIDParams::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTOFPIDParams::Class(),this);
   }
}

//______________________________________________________________________________
void AliTOFPIDParams::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTOFPIDParams.
      TClass *R__cl = ::AliTOFPIDParams::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStartTime", &fStartTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFresolution", &fTOFresolution);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigPparams[4]", fSigPparams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFtail", &fTOFtail);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFmatchingLossMC", &fTOFmatchingLossMC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFadditionalMismForMC", &fTOFadditionalMismForMC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFtimeOffset", &fTOFtimeOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOADBentryTag", &fOADBentryTag);
      R__insp.InspectMember(fOADBentryTag, "fOADBentryTag.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTOFPIDParams(void *p) {
      return  p ? new(p) ::AliTOFPIDParams : new ::AliTOFPIDParams;
   }
   static void *newArray_AliTOFPIDParams(Long_t nElements, void *p) {
      return p ? new(p) ::AliTOFPIDParams[nElements] : new ::AliTOFPIDParams[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTOFPIDParams(void *p) {
      delete ((::AliTOFPIDParams*)p);
   }
   static void deleteArray_AliTOFPIDParams(void *p) {
      delete [] ((::AliTOFPIDParams*)p);
   }
   static void destruct_AliTOFPIDParams(void *p) {
      typedef ::AliTOFPIDParams current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTOFPIDParams

//______________________________________________________________________________
void AliProdInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliProdInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliProdInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliProdInfo::Class(),this);
   }
}

//______________________________________________________________________________
void AliProdInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliProdInfo.
      TClass *R__cl = ::AliProdInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMcFlag", &fMcFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAlirootSvnVersion", &fAlirootSvnVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRootSvnVersion", &fRootSvnVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecoPass", &fRecoPass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTags[7]", fTags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPeriod", &fPeriod);
      R__insp.InspectMember(fPeriod, "fPeriod.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProductionTag", &fProductionTag);
      R__insp.InspectMember(fProductionTag, "fProductionTag.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAlirootVersion", &fAlirootVersion);
      R__insp.InspectMember(fAlirootVersion, "fAlirootVersion.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRootVersion", &fRootVersion);
      R__insp.InspectMember(fRootVersion, "fRootVersion.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecoPassName", &fRecoPassName);
      R__insp.InspectMember(fRecoPassName, "fRecoPassName.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliProdInfo(void *p) {
      return  p ? new(p) ::AliProdInfo : new ::AliProdInfo;
   }
   static void *newArray_AliProdInfo(Long_t nElements, void *p) {
      return p ? new(p) ::AliProdInfo[nElements] : new ::AliProdInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliProdInfo(void *p) {
      delete ((::AliProdInfo*)p);
   }
   static void deleteArray_AliProdInfo(void *p) {
      delete [] ((::AliProdInfo*)p);
   }
   static void destruct_AliProdInfo(void *p) {
      typedef ::AliProdInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliProdInfo

//______________________________________________________________________________
void AliVTrdTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVTrdTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVTrdTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVTrdTrack::Class(),this);
   }
}

//______________________________________________________________________________
void AliVTrdTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVTrdTrack.
      TClass *R__cl = ::AliVTrdTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVTrdTrack(void *p) {
      delete ((::AliVTrdTrack*)p);
   }
   static void deleteArray_AliVTrdTrack(void *p) {
      delete [] ((::AliVTrdTrack*)p);
   }
   static void destruct_AliVTrdTrack(void *p) {
      typedef ::AliVTrdTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVTrdTrack

//______________________________________________________________________________
void AliVTrdTracklet::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVTrdTracklet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVTrdTracklet::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVTrdTracklet::Class(),this);
   }
}

//______________________________________________________________________________
void AliVTrdTracklet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVTrdTracklet.
      TClass *R__cl = ::AliVTrdTracklet::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVTrdTracklet(void *p) {
      delete ((::AliVTrdTracklet*)p);
   }
   static void deleteArray_AliVTrdTracklet(void *p) {
      delete [] ((::AliVTrdTracklet*)p);
   }
   static void destruct_AliVTrdTracklet(void *p) {
      typedef ::AliVTrdTracklet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVTrdTracklet

//______________________________________________________________________________
void AliGenEventHeaderTunedPbPb::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliGenEventHeaderTunedPbPb.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliGenEventHeaderTunedPbPb::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliGenEventHeaderTunedPbPb::Class(),this);
   }
}

//______________________________________________________________________________
void AliGenEventHeaderTunedPbPb::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliGenEventHeaderTunedPbPb.
      TClass *R__cl = ::AliGenEventHeaderTunedPbPb::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentrality", &fCentrality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPsi2", &fPsi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPsi3", &fPsi3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPsi4", &fPsi4);
      AliGenEventHeader::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliGenEventHeaderTunedPbPb(void *p) {
      return  p ? new(p) ::AliGenEventHeaderTunedPbPb : new ::AliGenEventHeaderTunedPbPb;
   }
   static void *newArray_AliGenEventHeaderTunedPbPb(Long_t nElements, void *p) {
      return p ? new(p) ::AliGenEventHeaderTunedPbPb[nElements] : new ::AliGenEventHeaderTunedPbPb[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliGenEventHeaderTunedPbPb(void *p) {
      delete ((::AliGenEventHeaderTunedPbPb*)p);
   }
   static void deleteArray_AliGenEventHeaderTunedPbPb(void *p) {
      delete [] ((::AliGenEventHeaderTunedPbPb*)p);
   }
   static void destruct_AliGenEventHeaderTunedPbPb(void *p) {
      typedef ::AliGenEventHeaderTunedPbPb current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliGenEventHeaderTunedPbPb

//______________________________________________________________________________
void AliVTOFHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVTOFHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVTOFHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVTOFHit::Class(),this);
   }
}

//______________________________________________________________________________
void AliVTOFHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVTOFHit.
      TClass *R__cl = ::AliVTOFHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliVTOFHit(void *p) {
      return  p ? new(p) ::AliVTOFHit : new ::AliVTOFHit;
   }
   static void *newArray_AliVTOFHit(Long_t nElements, void *p) {
      return p ? new(p) ::AliVTOFHit[nElements] : new ::AliVTOFHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliVTOFHit(void *p) {
      delete ((::AliVTOFHit*)p);
   }
   static void deleteArray_AliVTOFHit(void *p) {
      delete [] ((::AliVTOFHit*)p);
   }
   static void destruct_AliVTOFHit(void *p) {
      typedef ::AliVTOFHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVTOFHit

//______________________________________________________________________________
void AliVTOFMatch::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVTOFMatch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVTOFMatch::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVTOFMatch::Class(),this);
   }
}

//______________________________________________________________________________
void AliVTOFMatch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVTOFMatch.
      TClass *R__cl = ::AliVTOFMatch::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliVTOFMatch(void *p) {
      return  p ? new(p) ::AliVTOFMatch : new ::AliVTOFMatch;
   }
   static void *newArray_AliVTOFMatch(Long_t nElements, void *p) {
      return p ? new(p) ::AliVTOFMatch[nElements] : new ::AliVTOFMatch[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliVTOFMatch(void *p) {
      delete ((::AliVTOFMatch*)p);
   }
   static void deleteArray_AliVTOFMatch(void *p) {
      delete [] ((::AliVTOFMatch*)p);
   }
   static void destruct_AliVTOFMatch(void *p) {
      typedef ::AliVTOFMatch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVTOFMatch

//______________________________________________________________________________
void AliVTOFcluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVTOFcluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVTOFcluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVTOFcluster::Class(),this);
   }
}

//______________________________________________________________________________
void AliVTOFcluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVTOFcluster.
      TClass *R__cl = ::AliVTOFcluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvent", &fEvent);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliVTOFcluster(void *p) {
      return  p ? new(p) ::AliVTOFcluster : new ::AliVTOFcluster;
   }
   static void *newArray_AliVTOFcluster(Long_t nElements, void *p) {
      return p ? new(p) ::AliVTOFcluster[nElements] : new ::AliVTOFcluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliVTOFcluster(void *p) {
      delete ((::AliVTOFcluster*)p);
   }
   static void deleteArray_AliVTOFcluster(void *p) {
      delete [] ((::AliVTOFcluster*)p);
   }
   static void destruct_AliVTOFcluster(void *p) {
      typedef ::AliVTOFcluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVTOFcluster

//______________________________________________________________________________
void AliVMultiplicity::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVMultiplicity.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVMultiplicity::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVMultiplicity::Class(),this);
   }
}

//______________________________________________________________________________
void AliVMultiplicity::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVMultiplicity.
      TClass *R__cl = ::AliVMultiplicity::IsA();
      if (R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVMultiplicity(void *p) {
      delete ((::AliVMultiplicity*)p);
   }
   static void deleteArray_AliVMultiplicity(void *p) {
      delete [] ((::AliVMultiplicity*)p);
   }
   static void destruct_AliVMultiplicity(void *p) {
      typedef ::AliVMultiplicity current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVMultiplicity

//______________________________________________________________________________
void AliGenHepMCEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliGenHepMCEventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliGenHepMCEventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliGenHepMCEventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliGenHepMCEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliGenHepMCEventHeader.
      TClass *R__cl = ::AliGenHepMCEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNcoll_hard", &fNcoll_hard);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNpart_proj", &fNpart_proj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNpart_targ", &fNpart_targ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNcoll", &fNcoll);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fspectator_neutrons", &fspectator_neutrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fspectator_protons", &fspectator_protons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fN_Nwounded_collisions", &fN_Nwounded_collisions);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNwounded_N_collisions", &fNwounded_N_collisions);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNwounded_Nwounded_collisions", &fNwounded_Nwounded_collisions);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fimpact_parameter", &fimpact_parameter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fevent_plane_angle", &fevent_plane_angle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "feccentricity", &feccentricity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fsigma_inel_NN", &fsigma_inel_NN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fid1", &fid1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fid2", &fid2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpdf_id1", &fpdf_id1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpdf_id2", &fpdf_id2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fx1", &fx1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fx2", &fx2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fscalePDF", &fscalePDF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpdf1", &fpdf1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpdf2", &fpdf2);
      AliGenEventHeader::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliGenHepMCEventHeader(void *p) {
      return  p ? new(p) ::AliGenHepMCEventHeader : new ::AliGenHepMCEventHeader;
   }
   static void *newArray_AliGenHepMCEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::AliGenHepMCEventHeader[nElements] : new ::AliGenHepMCEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliGenHepMCEventHeader(void *p) {
      delete ((::AliGenHepMCEventHeader*)p);
   }
   static void deleteArray_AliGenHepMCEventHeader(void *p) {
      delete [] ((::AliGenHepMCEventHeader*)p);
   }
   static void destruct_AliGenHepMCEventHeader(void *p) {
      typedef ::AliGenHepMCEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliGenHepMCEventHeader

//______________________________________________________________________________
void AliMergeableCollection::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliMergeableCollection.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliMergeableCollection::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliMergeableCollection::Class(),this);
   }
}

//______________________________________________________________________________
void AliMergeableCollection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliMergeableCollection.
      TClass *R__cl = ::AliMergeableCollection::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMap", &fMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMustShowEmptyObject", &fMustShowEmptyObject);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMapVersion", &fMapVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMessages", (void*)&fMessages);
      R__insp.InspectMember("map<std::string,int>", (void*)&fMessages, "fMessages.", true);
      TFolder::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliMergeableCollection(void *p) {
      return  p ? new(p) ::AliMergeableCollection : new ::AliMergeableCollection;
   }
   static void *newArray_AliMergeableCollection(Long_t nElements, void *p) {
      return p ? new(p) ::AliMergeableCollection[nElements] : new ::AliMergeableCollection[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliMergeableCollection(void *p) {
      delete ((::AliMergeableCollection*)p);
   }
   static void deleteArray_AliMergeableCollection(void *p) {
      delete [] ((::AliMergeableCollection*)p);
   }
   static void destruct_AliMergeableCollection(void *p) {
      typedef ::AliMergeableCollection current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_AliMergeableCollection(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::AliMergeableCollection*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::AliMergeableCollection

//______________________________________________________________________________
void AliMergeableCollectionIterator::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliMergeableCollectionIterator.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliMergeableCollectionIterator::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliMergeableCollectionIterator::Class(),this);
   }
}

//______________________________________________________________________________
void AliMergeableCollectionIterator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliMergeableCollectionIterator.
      TClass *R__cl = ::AliMergeableCollectionIterator::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fkMergeableCollection", &fkMergeableCollection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMapIterator", &fMapIterator);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHashListIterator", &fHashListIterator);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDirection", &fDirection);
      TIterator::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliMergeableCollectionIterator(void *p) {
      delete ((::AliMergeableCollectionIterator*)p);
   }
   static void deleteArray_AliMergeableCollectionIterator(void *p) {
      delete [] ((::AliMergeableCollectionIterator*)p);
   }
   static void destruct_AliMergeableCollectionIterator(void *p) {
      typedef ::AliMergeableCollectionIterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliMergeableCollectionIterator

//______________________________________________________________________________
void AliMergeableCollectionProxy::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliMergeableCollectionProxy.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliMergeableCollectionProxy::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliMergeableCollectionProxy::Class(),this);
   }
}

//______________________________________________________________________________
void AliMergeableCollectionProxy::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliMergeableCollectionProxy.
      TClass *R__cl = ::AliMergeableCollectionProxy::IsA();
      if (R__cl || R__insp.IsA()) { }
      TFolder::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliMergeableCollectionProxy(void *p) {
      delete ((::AliMergeableCollectionProxy*)p);
   }
   static void deleteArray_AliMergeableCollectionProxy(void *p) {
      delete [] ((::AliMergeableCollectionProxy*)p);
   }
   static void destruct_AliMergeableCollectionProxy(void *p) {
      typedef ::AliMergeableCollectionProxy current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliMergeableCollectionProxy

//______________________________________________________________________________
void AliMultSelectionBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliMultSelectionBase.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliMultSelectionBase::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliMultSelectionBase::Class(),this);
   }
}

//______________________________________________________________________________
void AliMultSelectionBase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliMultSelectionBase.
      TClass *R__cl = ::AliMultSelectionBase::IsA();
      if (R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliMultSelectionBase(void *p) {
      return  p ? new(p) ::AliMultSelectionBase : new ::AliMultSelectionBase;
   }
   static void *newArray_AliMultSelectionBase(Long_t nElements, void *p) {
      return p ? new(p) ::AliMultSelectionBase[nElements] : new ::AliMultSelectionBase[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliMultSelectionBase(void *p) {
      delete ((::AliMultSelectionBase*)p);
   }
   static void deleteArray_AliMultSelectionBase(void *p) {
      delete [] ((::AliMultSelectionBase*)p);
   }
   static void destruct_AliMultSelectionBase(void *p) {
      typedef ::AliMultSelectionBase current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliMultSelectionBase

//______________________________________________________________________________
void AliVersion::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVersion.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVersion::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVersion::Class(),this);
   }
}

//______________________________________________________________________________
void AliVersion::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVersion.
      TClass *R__cl = ::AliVersion::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHash", &fHash);
      R__insp.InspectMember(fHash, "fHash.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTag", &fTag);
      R__insp.InspectMember(fTag, "fTag.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliVersion(void *p) {
      return  p ? new(p) ::AliVersion : new ::AliVersion;
   }
   static void *newArray_AliVersion(Long_t nElements, void *p) {
      return p ? new(p) ::AliVersion[nElements] : new ::AliVersion[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliVersion(void *p) {
      delete ((::AliVersion*)p);
   }
   static void deleteArray_AliVersion(void *p) {
      delete [] ((::AliVersion*)p);
   }
   static void destruct_AliVersion(void *p) {
      typedef ::AliVersion current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVersion

//______________________________________________________________________________
void AliDataFile::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliDataFile.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliDataFile::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliDataFile::Class(),this);
   }
}

//______________________________________________________________________________
void AliDataFile::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliDataFile.
      TClass *R__cl = ::AliDataFile::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliDataFile(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::AliDataFile : new ::AliDataFile;
   }
   static void *newArray_AliDataFile(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::AliDataFile[nElements] : new ::AliDataFile[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliDataFile(void *p) {
      delete ((::AliDataFile*)p);
   }
   static void deleteArray_AliDataFile(void *p) {
      delete [] ((::AliDataFile*)p);
   }
   static void destruct_AliDataFile(void *p) {
      typedef ::AliDataFile current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliDataFile

namespace ROOTDict {
   void maplEstringcOfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOfloatgR_Dictionary();
   static void *new_maplEstringcOfloatgR(void *p = 0);
   static void *newArray_maplEstringcOfloatgR(Long_t size, void *p);
   static void delete_maplEstringcOfloatgR(void *p);
   static void deleteArray_maplEstringcOfloatgR(void *p);
   static void destruct_maplEstringcOfloatgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<string,float>*)
   {
      map<string,float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,float>", -2, "map.dll", 0,
                  typeid(map<string,float>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplEstringcOfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,float>) );
      instance.SetNew(&new_maplEstringcOfloatgR);
      instance.SetNewArray(&newArray_maplEstringcOfloatgR);
      instance.SetDelete(&delete_maplEstringcOfloatgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOfloatgR);
      instance.SetDestructor(&destruct_maplEstringcOfloatgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<string,float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOfloatgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<string,float>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplEstringcOfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,float> : new map<string,float>;
   }
   static void *newArray_maplEstringcOfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,float>[nElements] : new map<string,float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOfloatgR(void *p) {
      delete ((map<string,float>*)p);
   }
   static void deleteArray_maplEstringcOfloatgR(void *p) {
      delete [] ((map<string,float>*)p);
   }
   static void destruct_maplEstringcOfloatgR(void *p) {
      typedef map<string,float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<string,float>

/********************************************************
* G__STEERBase.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__STEERBase();

extern "C" void G__set_cpp_environmentG__STEERBase() {
  G__cpp_reset_tagtableG__STEERBase();
}
#include <new>
extern "C" int G__cpp_dllrevG__STEERBase() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* AliCentrality */
static int G__G__STEERBase_184_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCentrality* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCentrality[n];
     } else {
       p = new((void*) gvp) AliCentrality[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCentrality;
     } else {
       p = new((void*) gvp) AliCentrality;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCentrality));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCentrality* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliCentrality(*(AliCentrality*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliCentrality(*(AliCentrality*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCentrality));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliCentrality& obj = ((AliCentrality*) G__getstructoffset())->operator=(*(AliCentrality*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetQuality((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityV0M((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityV0A((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityV0A0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityV0A123((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityV0C((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityV0A23((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityV0C01((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityV0S((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityV0MEq((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityV0AEq((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityV0CEq((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityFMD((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityTRK((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityTKL((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityCL0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityCL1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityCND((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityZNA((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityZNC((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityZPA((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityZPC((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityNPA((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityV0MvsFMD((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityTKLvsV0M((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityZEMvsZDC((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityV0Mtrue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityV0Atrue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityV0Ctrue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityFMDtrue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityTRKtrue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityTKLtrue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityCL0true((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityCL1true((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityCNDtrue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityZNAtrue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityZNCtrue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityZPAtrue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->SetCentralityZPCtrue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliCentrality*) G__getstructoffset())->GetCentralityPercentile((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCentrality*) G__getstructoffset())->GetCentralityClass10((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCentrality*) G__getstructoffset())->GetCentralityClass5((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliCentrality*) G__getstructoffset())->IsEventInCentralityClass((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliCentrality*) G__getstructoffset())->GetCentralityPercentileUnchecked((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCentrality*) G__getstructoffset())->GetCentralityClass10Unchecked((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCentrality*) G__getstructoffset())->GetCentralityClass5Unchecked((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliCentrality*) G__getstructoffset())->IsEventInCentralityClassUnchecked((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCentrality*) G__getstructoffset())->GetQuality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliCentrality::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCentrality::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliCentrality::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliCentrality::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCentrality*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCentrality::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCentrality::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCentrality::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_184_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCentrality::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliCentrality G__TAliCentrality;
static int G__G__STEERBase_184_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliCentrality*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliCentrality*) (soff+(sizeof(AliCentrality)*i)))->~G__TAliCentrality();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliCentrality*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliCentrality*) (soff))->~G__TAliCentrality();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliCheb2DStack */
static int G__G__STEERBase_185_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCheb2DStack*) G__getstructoffset())->GetNSlices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCheb2DStack*) G__getstructoffset())->GetDimOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliCheb2DStack*) G__getstructoffset())->GetBoundMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliCheb2DStack*) G__getstructoffset())->GetBoundMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb2DStack*) G__getstructoffset())->SetXRowInv((float*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliCheb2DStack*) G__getstructoffset())->GetXRowInv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliCheb2DStack*) G__getstructoffset())->Eval((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliCheb2DStack*) G__getstructoffset())->Eval((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliCheb2DStack*) G__getstructoffset())->EvalDeriv((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (float*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliCheb2DStack*) G__getstructoffset())->IsInside((float*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliCheb2DStack*) G__getstructoffset())->PrintSlice((int) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliCheb2DStack::ChebEval1D((float) G__double(libp->para[0]), (float*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliCheb2DStack::ChebEval1D((float) G__double(libp->para[0]), (const Short_t*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliCheb2DStack::ChebEval1Deriv((float) G__double(libp->para[0]), (float*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliCheb2DStack::ChebEval1Deriv((float) G__double(libp->para[0]), (const Short_t*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      AliCheb2DStack::SetDefPrecision((float) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      AliCheb2DStack::SetDefPrecision();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliCheb2DStack::GetDefPrecision());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliCheb2DStack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCheb2DStack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliCheb2DStack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliCheb2DStack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb2DStack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCheb2DStack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCheb2DStack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCheb2DStack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_185_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCheb2DStack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliCheb2DStack G__TAliCheb2DStack;
static int G__G__STEERBase_185_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliCheb2DStack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliCheb2DStack*) (soff+(sizeof(AliCheb2DStack)*i)))->~G__TAliCheb2DStack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliCheb2DStack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliCheb2DStack*) (soff))->~G__TAliCheb2DStack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliCheb2DStackF */
static int G__G__STEERBase_187_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb2DStackF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackF[n];
     } else {
       p = new((void*) gvp) AliCheb2DStackF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackF;
     } else {
       p = new((void*) gvp) AliCheb2DStackF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_187_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb2DStackF* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5])
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7])
, (float*) G__int(libp->para[8]));
     } else {
       p = new((void*) gvp) AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5])
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7])
, (float*) G__int(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5])
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5])
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5])
, (float*) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5])
, (float*) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_187_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb2DStackF* p = NULL;
  struct G__aRyp5 { int a[1][2]; }* G__Ap5 = (struct G__aRyp5*) G__int(libp->para[5]);
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7])
, (float*) G__int(libp->para[8]));
     } else {
       p = new((void*) gvp) AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7])
, (float*) G__int(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a
, (float*) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a
, (float*) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a);
     } else {
       p = new((void*) gvp) AliCheb2DStackF(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_187_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliCheb2DStackF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_187_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCheb2DStackF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_187_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliCheb2DStackF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_187_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliCheb2DStackF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_187_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb2DStackF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_187_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCheb2DStackF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_187_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCheb2DStackF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_187_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCheb2DStackF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_187_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCheb2DStackF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliCheb2DStackF G__TAliCheb2DStackF;
static int G__G__STEERBase_187_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliCheb2DStackF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliCheb2DStackF*) (soff+(sizeof(AliCheb2DStackF)*i)))->~G__TAliCheb2DStackF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliCheb2DStackF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliCheb2DStackF*) (soff))->~G__TAliCheb2DStackF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliCheb2DStackS */
static int G__G__STEERBase_188_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb2DStackS* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackS[n];
     } else {
       p = new((void*) gvp) AliCheb2DStackS[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackS;
     } else {
       p = new((void*) gvp) AliCheb2DStackS;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_188_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb2DStackS* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5])
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7])
, (float*) G__int(libp->para[8]));
     } else {
       p = new((void*) gvp) AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5])
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7])
, (float*) G__int(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5])
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5])
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5])
, (float*) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5])
, (float*) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (const int*) G__int(libp->para[5]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_188_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb2DStackS* p = NULL;
  struct G__aRyp5 { int a[1][2]; }* G__Ap5 = (struct G__aRyp5*) G__int(libp->para[5]);
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7])
, (float*) G__int(libp->para[8]));
     } else {
       p = new((void*) gvp) AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7])
, (float*) G__int(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a
, (float*) G__int(libp->para[6]), (float*) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a
, (float*) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a
, (float*) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a);
     } else {
       p = new((void*) gvp) AliCheb2DStackS(
(stFun_t) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), G__Ap5->a);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_188_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliCheb2DStackS::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_188_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCheb2DStackS::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_188_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliCheb2DStackS::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_188_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliCheb2DStackS::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_188_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb2DStackS*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_188_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCheb2DStackS::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_188_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCheb2DStackS::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_188_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCheb2DStackS::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_188_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCheb2DStackS::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliCheb2DStackS G__TAliCheb2DStackS;
static int G__G__STEERBase_188_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliCheb2DStackS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliCheb2DStackS*) (soff+(sizeof(AliCheb2DStackS)*i)))->~G__TAliCheb2DStackS();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliCheb2DStackS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliCheb2DStackS*) (soff))->~G__TAliCheb2DStackS();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliCheb3DCalc */
static int G__G__STEERBase_190_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb3DCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3DCalc[n];
     } else {
       p = new((void*) gvp) AliCheb3DCalc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3DCalc;
     } else {
       p = new((void*) gvp) AliCheb3DCalc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3DCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb3DCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliCheb3DCalc(*(AliCheb3DCalc*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliCheb3DCalc(*(AliCheb3DCalc*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3DCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb3DCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliCheb3DCalc((FILE*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliCheb3DCalc((FILE*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3DCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliCheb3DCalc& obj = ((AliCheb3DCalc*) G__getstructoffset())->operator=(*(AliCheb3DCalc*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3DCalc*) G__getstructoffset())->LoadData((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliCheb3DCalc*) G__getstructoffset())->EvalDeriv((int) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliCheb3DCalc*) G__getstructoffset())->EvalDeriv2((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((const AliCheb3DCalc*) G__getstructoffset())->SaveData((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const AliCheb3DCalc*) G__getstructoffset())->SaveData((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const AliCheb3DCalc*) G__getstructoffset())->SaveData((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const AliCheb3DCalc*) G__getstructoffset())->SaveData();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3DCalc*) G__getstructoffset())->InitRows((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3DCalc*) G__getstructoffset())->InitCols((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliCheb3DCalc*) G__getstructoffset())->SetPrecision((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliCheb3DCalc*) G__getstructoffset())->SetPrecision();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliCheb3DCalc*) G__getstructoffset())->GetPrecision());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCheb3DCalc*) G__getstructoffset())->GetNCoefs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCheb3DCalc*) G__getstructoffset())->GetNCols());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCheb3DCalc*) G__getstructoffset())->GetNRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCheb3DCalc*) G__getstructoffset())->GetNElemBound2D());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCheb3DCalc*) G__getstructoffset())->GetMaxColsAtRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const AliCheb3DCalc*) G__getstructoffset())->GetNColsAtRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const AliCheb3DCalc*) G__getstructoffset())->GetColAtRowBg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3DCalc*) G__getstructoffset())->InitElemBound2D((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const AliCheb3DCalc*) G__getstructoffset())->GetCoefBound2D0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const AliCheb3DCalc*) G__getstructoffset())->GetCoefBound2D1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliCheb3DCalc::ChebEval1D((Float_t) G__double(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliCheb3DCalc::ChebEval1Deriv((Float_t) G__double(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliCheb3DCalc::ChebEval1Deriv2((Float_t) G__double(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3DCalc*) G__getstructoffset())->InitCoefs((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliCheb3DCalc*) G__getstructoffset())->GetCoefs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliCheb3DCalc::ReadLine(*(TString*) libp->para[0].ref, (FILE*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliCheb3DCalc*) G__getstructoffset())->Eval((Float_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliCheb3DCalc*) G__getstructoffset())->Eval((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliCheb3DCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCheb3DCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliCheb3DCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliCheb3DCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3DCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCheb3DCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCheb3DCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCheb3DCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_190_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCheb3DCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliCheb3DCalc G__TAliCheb3DCalc;
static int G__G__STEERBase_190_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliCheb3DCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliCheb3DCalc*) (soff+(sizeof(AliCheb3DCalc)*i)))->~G__TAliCheb3DCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliCheb3DCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliCheb3DCalc*) (soff))->~G__TAliCheb3DCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliCheb3D */
static int G__G__STEERBase_203_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3D[n];
     } else {
       p = new((void*) gvp) AliCheb3D[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3D;
     } else {
       p = new((void*) gvp) AliCheb3D;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliCheb3D(*(AliCheb3D*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliCheb3D(*(AliCheb3D*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliCheb3D((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliCheb3D((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliCheb3D((FILE*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliCheb3D((FILE*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3D(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t*) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) AliCheb3D(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t*) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3D(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Float_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) AliCheb3D(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Float_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3D(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) AliCheb3D(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t*) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t*) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Float_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Float_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Int_t*) G__int(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t*) G__int(libp->para[8]));
     } else {
       p = new((void*) gvp) AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Int_t*) G__int(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t*) G__int(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Int_t*) G__int(libp->para[6]), (Float_t) G__double(libp->para[7]));
     } else {
       p = new((void*) gvp) AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Int_t*) G__int(libp->para[6]), (Float_t) G__double(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Int_t*) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Int_t*) G__int(libp->para[6]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCheb3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Float_t*) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Float_t*) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) AliCheb3D(
(void (*)(float*,float*)) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliCheb3D& obj = ((AliCheb3D*) G__getstructoffset())->operator=(*(AliCheb3D*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3D*) G__getstructoffset())->Eval((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((AliCheb3D*) G__getstructoffset())->Eval((Float_t*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3D*) G__getstructoffset())->Eval((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliCheb3D*) G__getstructoffset())->Eval((Double_t*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3D*) G__getstructoffset())->EvalDeriv((int) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3D*) G__getstructoffset())->EvalDeriv2((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((AliCheb3D*) G__getstructoffset())->EvalDeriv((int) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((AliCheb3D*) G__getstructoffset())->EvalDeriv2((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp1 { Float_t a[1][3]; }* G__Ap1 = (struct G__aRyp1*) G__int(libp->para[1]);
      ((AliCheb3D*) G__getstructoffset())->EvalDeriv3D((Float_t*) G__int(libp->para[0]), G__Ap1->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp1 { Float_t a[1][3][3]; }* G__Ap1 = (struct G__aRyp1*) G__int(libp->para[1]);
      ((AliCheb3D*) G__getstructoffset())->EvalDeriv3D2((Float_t*) G__int(libp->para[0]), G__Ap1->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliCheb3D*) G__getstructoffset())->IsInside((Float_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliCheb3D*) G__getstructoffset())->IsInside((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliCheb3D*) G__getstructoffset())->GetChebCalc((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliCheb3D*) G__getstructoffset())->GetBoundMin((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliCheb3D*) G__getstructoffset())->GetBoundMax((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliCheb3D*) G__getstructoffset())->GetBoundMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliCheb3D*) G__getstructoffset())->GetBoundMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliCheb3D*) G__getstructoffset())->GetPrecision());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3D*) G__getstructoffset())->ShiftBound((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3D*) G__getstructoffset())->LoadData((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3D*) G__getstructoffset())->LoadData((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3D*) G__getstructoffset())->InvertSign();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 73, (long) ((AliCheb3D*) G__getstructoffset())->GetNCNeeded((float*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 73, (long) ((AliCheb3D*) G__getstructoffset())->GetNCNeeded((float*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp1 { int a[1][3]; }* G__Ap1 = (struct G__aRyp1*) G__int(libp->para[1]);
   switch (libp->paran) {
   case 5:
      ((AliCheb3D*) G__getstructoffset())->EstimateNPoints((float) G__double(libp->para[0]), G__Ap1->a
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((AliCheb3D*) G__getstructoffset())->EstimateNPoints((float) G__double(libp->para[0]), G__Ap1->a
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((AliCheb3D*) G__getstructoffset())->EstimateNPoints((float) G__double(libp->para[0]), G__Ap1->a
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliCheb3D*) G__getstructoffset())->EstimateNPoints((float) G__double(libp->para[0]), G__Ap1->a);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((const AliCheb3D*) G__getstructoffset())->SaveData((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const AliCheb3D*) G__getstructoffset())->SaveData((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const AliCheb3D*) G__getstructoffset())->SaveData((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const AliCheb3D*) G__getstructoffset())->SaveData();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3D*) G__getstructoffset())->SetUsrFunction((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3D*) G__getstructoffset())->SetUsrFunction((void (*)(float*,float*)) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3D*) G__getstructoffset())->EvalUsrFunction((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((AliCheb3D*) G__getstructoffset())->TestRMS((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (TH1*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((AliCheb3D*) G__getstructoffset())->TestRMS((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((AliCheb3D*) G__getstructoffset())->TestRMS((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) AliCheb3D::CalcChebCoefs((Float_t*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) AliCheb3D::CalcChebCoefs((Float_t*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliCheb3D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCheb3D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliCheb3D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliCheb3D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCheb3D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCheb3D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCheb3D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCheb3D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_203_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCheb3D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliCheb3D G__TAliCheb3D;
static int G__G__STEERBase_203_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliCheb3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliCheb3D*) (soff+(sizeof(AliCheb3D)*i)))->~G__TAliCheb3D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliCheb3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliCheb3D*) (soff))->~G__TAliCheb3D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliLog */
static int G__G__STEERBase_441_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliLog::GetRootLogger());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::DeleteRootLogger();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::EnableCoreDump((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::MakeCoreDump((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::EnableDebug((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetGlobalLogLevel((AliLog::EType_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliLog::GetGlobalLogLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetGlobalDebugLevel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliLog::GetGlobalDebugLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetModuleDebugLevel((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::ClearModuleDebugLevel((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetClassDebugLevel((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::ClearClassDebugLevel((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetStandardOutput();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetStandardOutput((AliLog::EType_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetErrorOutput();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetErrorOutput((AliLog::EType_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetFileOutput((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetFileOutput((AliLog::EType_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetStreamOutput((ostream*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetStreamOutput((AliLog::EType_t) G__int(libp->para[0]), (ostream*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetLogNotification((AliLog::AliLogNotification) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetLogNotification((AliLog::EType_t) G__int(libp->para[0]), (AliLog::AliLogNotification) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::Flush();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetHandleRootMessages((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetPrintType((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetPrintType((AliLog::EType_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetPrintModule((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetPrintModule((AliLog::EType_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetPrintScope((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetPrintScope((AliLog::EType_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetPrintLocation((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetPrintLocation((AliLog::EType_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::SetPrintRepetitions((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      AliLog::WriteToFile((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      AliLog::WriteToFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) AliLog::IsDebugEnabled());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliLog::GetDebugLevel((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::Message(
(UInt_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::Debug(
(UInt_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliLog::RedirectStdoutTo(
(AliLog::EType_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliLog::RedirectStderrTo(
(AliLog::EType_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::RestoreStdout((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::RestoreStderr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = AliLog::Stream(
(AliLog::EType_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      AliLog::TestException((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      AliLog::TestException();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliLog::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliLog::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliLog::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLog::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLog*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliLog::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliLog::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliLog::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_441_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliLog::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliCodeTimer */
static int G__G__STEERBase_446_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCodeTimer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCodeTimer[n];
     } else {
       p = new((void*) gvp) AliCodeTimer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCodeTimer;
     } else {
       p = new((void*) gvp) AliCodeTimer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliCodeTimer::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((AliCodeTimer*) G__getstructoffset())->Continue((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliCodeTimer*) G__getstructoffset())->Continue((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliCodeTimer*) G__getstructoffset())->CpuTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliCodeTimer*) G__getstructoffset())->CpuTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliCodeTimer*) G__getstructoffset())->RealTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliCodeTimer*) G__getstructoffset())->RealTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCodeTimer*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((AliCodeTimer*) G__getstructoffset())->Start((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliCodeTimer*) G__getstructoffset())->Start((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((AliCodeTimer*) G__getstructoffset())->Stop((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliCodeTimer*) G__getstructoffset())->Stop((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliCodeTimer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCodeTimer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliCodeTimer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliCodeTimer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCodeTimer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCodeTimer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCodeTimer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCodeTimer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_446_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCodeTimer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliCodeTimer G__TAliCodeTimer;
static int G__G__STEERBase_446_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliCodeTimer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliCodeTimer*) (soff+(sizeof(AliCodeTimer)*i)))->~G__TAliCodeTimer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliCodeTimer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliCodeTimer*) (soff))->~G__TAliCodeTimer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliCodeTimer::AliPair */
static int G__G__STEERBase_447_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCodeTimer::AliPair* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCodeTimer::AliPair[n];
     } else {
       p = new((void*) gvp) AliCodeTimer::AliPair[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCodeTimer::AliPair;
     } else {
       p = new((void*) gvp) AliCodeTimer::AliPair;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimercLcLAliPair));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_447_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCodeTimer::AliPair* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliCodeTimer::AliPair((TObjString*) G__int(libp->para[0]), (TStopwatch*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) AliCodeTimer::AliPair((TObjString*) G__int(libp->para[0]), (TStopwatch*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimercLcLAliPair));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_447_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliCodeTimer::AliPair*) G__getstructoffset())->Name();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_447_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliCodeTimer::AliPair*) G__getstructoffset())->Timer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_447_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliCodeTimer::AliPair::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_447_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCodeTimer::AliPair::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_447_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliCodeTimer::AliPair::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_447_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliCodeTimer::AliPair::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_447_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCodeTimer::AliPair*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_447_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCodeTimer::AliPair::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_447_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCodeTimer::AliPair::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_447_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCodeTimer::AliPair::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_447_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCodeTimer::AliPair::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliCodeTimer::AliPair G__TAliCodeTimercLcLAliPair;
static int G__G__STEERBase_447_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliCodeTimer::AliPair*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliCodeTimer::AliPair*) (soff+(sizeof(AliCodeTimer::AliPair)*i)))->~G__TAliCodeTimercLcLAliPair();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliCodeTimer::AliPair*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliCodeTimer::AliPair*) (soff))->~G__TAliCodeTimercLcLAliPair();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliCollisionGeometry */
static int G__G__STEERBase_449_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCollisionGeometry* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCollisionGeometry[n];
     } else {
       p = new((void*) gvp) AliCollisionGeometry[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCollisionGeometry;
     } else {
       p = new((void*) gvp) AliCollisionGeometry;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCollisionGeometry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCollisionGeometry* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliCollisionGeometry(*(AliCollisionGeometry*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliCollisionGeometry(*(AliCollisionGeometry*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCollisionGeometry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliCollisionGeometry*) G__getstructoffset())->ImpactParameter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliCollisionGeometry*) G__getstructoffset())->ReactionPlaneAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCollisionGeometry*) G__getstructoffset())->HardScatters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCollisionGeometry*) G__getstructoffset())->ProjectileParticipants());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCollisionGeometry*) G__getstructoffset())->TargetParticipants());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCollisionGeometry*) G__getstructoffset())->ProjSpectatorsn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCollisionGeometry*) G__getstructoffset())->ProjSpectatorsp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCollisionGeometry*) G__getstructoffset())->TargSpectatorsn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCollisionGeometry*) G__getstructoffset())->TargSpectatorsp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCollisionGeometry*) G__getstructoffset())->NN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCollisionGeometry*) G__getstructoffset())->NNw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCollisionGeometry*) G__getstructoffset())->NwN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliCollisionGeometry*) G__getstructoffset())->NwNw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCollisionGeometry*) G__getstructoffset())->SetNDiffractive((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCollisionGeometry*) G__getstructoffset())->SetImpactParameter((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCollisionGeometry*) G__getstructoffset())->SetReactionPlaneAngle((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCollisionGeometry*) G__getstructoffset())->SetHardScatters((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCollisionGeometry*) G__getstructoffset())->SetParticipants((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCollisionGeometry*) G__getstructoffset())->SetCollisions((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCollisionGeometry*) G__getstructoffset())->SetSpectators((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCollisionGeometry*) G__getstructoffset())->GetNDiffractive(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliCollisionGeometry::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCollisionGeometry::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliCollisionGeometry::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliCollisionGeometry::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliCollisionGeometry*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCollisionGeometry*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCollisionGeometry*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCollisionGeometry*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCollisionGeometry::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCollisionGeometry::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCollisionGeometry::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_449_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCollisionGeometry::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliCollisionGeometry G__TAliCollisionGeometry;
static int G__G__STEERBase_449_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliCollisionGeometry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliCollisionGeometry*) (soff+(sizeof(AliCollisionGeometry)*i)))->~G__TAliCollisionGeometry();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliCollisionGeometry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliCollisionGeometry*) (soff))->~G__TAliCollisionGeometry();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliCounterCollection */
static int G__G__STEERBase_455_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCounterCollection* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCounterCollection((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliCounterCollection((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliCounterCollection[n];
       } else {
         p = new((void*) gvp) AliCounterCollection[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliCounterCollection;
       } else {
         p = new((void*) gvp) AliCounterCollection;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCounterCollection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCounterCollection*) G__getstructoffset())->AddRubric(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCounterCollection*) G__getstructoffset())->AddRubric(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliCounterCollection*) G__getstructoffset())->Init((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliCounterCollection*) G__getstructoffset())->Init();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliCounterCollection*) G__getstructoffset())->GetKeyWords(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliCounterCollection*) G__getstructoffset())->Count(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliCounterCollection*) G__getstructoffset())->Count(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCounterCollection*) G__getstructoffset())->Count(*((TString*) G__int(libp->para[0])), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((AliCounterCollection*) G__getstructoffset())->GetSum(*((TString*) G__int(libp->para[0])), (Bool_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((AliCounterCollection*) G__getstructoffset())->GetSum(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((AliCounterCollection*) G__getstructoffset())->GetSum());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliCounterCollection*) G__getstructoffset())->Get(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliCounterCollection*) G__getstructoffset())->Get(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliCounterCollection*) G__getstructoffset())->PrintKeyWords();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCounterCollection*) G__getstructoffset())->PrintValue(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((AliCounterCollection*) G__getstructoffset())->Print(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliCounterCollection*) G__getstructoffset())->Print(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliCounterCollection*) G__getstructoffset())->PrintSum(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((AliCounterCollection*) G__getstructoffset())->PrintSum();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliCounterCollection*) G__getstructoffset())->Draw(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliCounterCollection*) G__getstructoffset())->Draw(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCounterCollection*) G__getstructoffset())->Add((AliCounterCollection*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((AliCounterCollection*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliCounterCollection*) G__getstructoffset())->Sort((Option_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliCounterCollection*) G__getstructoffset())->Sort((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliCounterCollection*) G__getstructoffset())->Sort();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliCounterCollection*) G__getstructoffset())->SortRubric(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliCounterCollection*) G__getstructoffset())->SortRubric(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliCounterCollection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCounterCollection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliCounterCollection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliCounterCollection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCounterCollection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCounterCollection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCounterCollection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCounterCollection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_455_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCounterCollection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliCounterCollection G__TAliCounterCollection;
static int G__G__STEERBase_455_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliCounterCollection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliCounterCollection*) (soff+(sizeof(AliCounterCollection)*i)))->~G__TAliCounterCollection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliCounterCollection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliCounterCollection*) (soff))->~G__TAliCounterCollection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliDAQ */
static int G__G__STEERBase_456_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliDAQ* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliDAQ[n];
     } else {
       p = new((void*) gvp) AliDAQ[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliDAQ;
     } else {
       p = new((void*) gvp) AliDAQ;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliDAQ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliDAQ(*(AliDAQ*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliDAQ(*(AliDAQ*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliDAQ& obj = ((AliDAQ*) G__getstructoffset())->operator=(*(AliDAQ*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDAQ::DetectorID((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDAQ::DetectorName((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDAQ::DdlIDOffset((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDAQ::DdlIDOffset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDAQ::DetectorNameFromDdlID((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDAQ::DetectorIDFromDdlID((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDAQ::DdlID((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDAQ::DdlID((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDAQ::DdlFileName((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDAQ::DdlFileName((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDAQ::NumberOfDdls((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDAQ::NumberOfDdls((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliDAQ::NumberOfLdcs((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliDAQ::NumberOfLdcs((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliDAQ::PrintConfig();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDAQ::ListOfTriggeredDetectors((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) AliDAQ::DetectorPattern((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) AliDAQ::DetectorPatternOffline((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDAQ::OfflineModuleName((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDAQ::OfflineModuleName((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDAQ::OnlineName((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDAQ::OnlineName((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliDAQ::SetRun1();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliDAQ::SetRun2();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDAQ::GetRunPeriod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDAQ::GetFirstSTUDDL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDAQ::GetLastSTUDDL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliDAQ::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDAQ::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliDAQ::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliDAQ::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDAQ*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDAQ::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDAQ::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDAQ::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_456_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDAQ::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliDAQ G__TAliDAQ;
static int G__G__STEERBase_456_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliDAQ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliDAQ*) (soff+(sizeof(AliDAQ)*i)))->~G__TAliDAQ();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliDAQ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliDAQ*) (soff))->~G__TAliDAQ();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliDataFile */
static int G__G__STEERBase_493_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = AliDataFile::GetFileName(*(string*) libp->para[0].ref);
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_493_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = AliDataFile::GetFileNameOADB(*(string*) libp->para[0].ref);
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_493_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) AliDataFile::Open(*(string*) libp->para[0].ref, (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) AliDataFile::Open(*(string*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_493_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) AliDataFile::OpenOADB(*(string*) libp->para[0].ref, (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) AliDataFile::OpenOADB(*(string*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_493_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliDataFile::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_493_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDataFile::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_493_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliDataFile::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_493_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliDataFile::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_493_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliDataFile*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_493_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDataFile*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_493_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDataFile*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_493_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDataFile*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_493_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDataFile::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_493_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDataFile::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_493_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDataFile::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_493_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDataFile::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__G__STEERBase_493_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliDataFile *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliDataFile[n];
     } else {
       p = new((void*) gvp) AliDataFile[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliDataFile;
     } else {
       p = new((void*) gvp) AliDataFile;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDataFile));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_493_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliDataFile* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliDataFile(*(AliDataFile*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDataFile));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliDataFile G__TAliDataFile;
static int G__G__STEERBase_493_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliDataFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliDataFile*) (soff+(sizeof(AliDataFile)*i)))->~G__TAliDataFile();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliDataFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliDataFile*) (soff))->~G__TAliDataFile();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_493_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliDataFile* dest = (AliDataFile*) G__getstructoffset();
   *dest = *(AliDataFile*) libp->para[0].ref;
   const AliDataFile& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliDetectorEventHeader */
static int G__G__STEERBase_494_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliDetectorEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliDetectorEventHeader((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliDetectorEventHeader((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_494_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliDetectorEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliDetectorEventHeader[n];
     } else {
       p = new((void*) gvp) AliDetectorEventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliDetectorEventHeader;
     } else {
       p = new((void*) gvp) AliDetectorEventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_494_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliDetectorEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_494_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDetectorEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_494_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliDetectorEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_494_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliDetectorEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_494_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_494_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDetectorEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_494_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDetectorEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_494_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDetectorEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_494_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDetectorEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_494_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliDetectorEventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliDetectorEventHeader(*(AliDetectorEventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliDetectorEventHeader G__TAliDetectorEventHeader;
static int G__G__STEERBase_494_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliDetectorEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliDetectorEventHeader*) (soff+(sizeof(AliDetectorEventHeader)*i)))->~G__TAliDetectorEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliDetectorEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliDetectorEventHeader*) (soff))->~G__TAliDetectorEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_494_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliDetectorEventHeader* dest = (AliDetectorEventHeader*) G__getstructoffset();
   *dest = *(AliDetectorEventHeader*) libp->para[0].ref;
   const AliDetectorEventHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliPID */
static int G__G__STEERBase_496_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliPID::ParticleCharge((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliPID::ParticleMass((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliPID::ParticleMassZ((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPID::ParticleName((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPID::ParticleShortName((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPID::ParticleLatexName((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliPID::ParticleCode((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliPID* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliPID[n];
     } else {
       p = new((void*) gvp) AliPID[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliPID;
     } else {
       p = new((void*) gvp) AliPID;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliPID* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliPID((Double_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliPID((Double_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliPID((Double_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliPID((Double_t*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliPID* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliPID((Float_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliPID((Float_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliPID((Float_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliPID((Float_t*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliPID* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliPID(*(AliPID*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliPID(*(AliPID*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliPID& obj = ((AliPID*) G__getstructoffset())->operator=(*(AliPID*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliPID*) G__getstructoffset())->GetProbability((AliPID::EParticleType) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliPID*) G__getstructoffset())->GetProbability((AliPID::EParticleType) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliPID*) G__getstructoffset())->GetProbabilities((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliPID*) G__getstructoffset())->GetProbabilities((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPID*) G__getstructoffset())->GetMostProbable((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPID*) G__getstructoffset())->GetMostProbable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliPID*) G__getstructoffset())->SetProbabilities((Double_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliPID*) G__getstructoffset())->SetProbabilities((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      AliPID::SetPriors((Double_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      AliPID::SetPriors((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliPID::SetPrior((AliPID::EParticleType) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliPID& obj = ((AliPID*) G__getstructoffset())->operator*=(*(AliPID*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliPID::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPID::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliPID::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliPID::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPID*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPID::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliPID::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPID::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_496_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliPID::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliPID G__TAliPID;
static int G__G__STEERBase_496_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliPID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliPID*) (soff+(sizeof(AliPID)*i)))->~G__TAliPID();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliPID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliPID*) (soff))->~G__TAliPID();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVParticle */
static int G__G__STEERBase_500_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVParticle& obj = ((AliVParticle*) G__getstructoffset())->operator=(*(AliVParticle*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVParticle*) G__getstructoffset())->Px());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVParticle*) G__getstructoffset())->Py());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVParticle*) G__getstructoffset())->Pz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVParticle*) G__getstructoffset())->Pt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVParticle*) G__getstructoffset())->P());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVParticle*) G__getstructoffset())->PxPyPz((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVParticle*) G__getstructoffset())->Xv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVParticle*) G__getstructoffset())->Yv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVParticle*) G__getstructoffset())->Zv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVParticle*) G__getstructoffset())->XvYvZv((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVParticle*) G__getstructoffset())->OneOverPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVParticle*) G__getstructoffset())->Phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVParticle*) G__getstructoffset())->Theta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVParticle*) G__getstructoffset())->E());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVParticle*) G__getstructoffset())->M());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVParticle*) G__getstructoffset())->Eta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVParticle*) G__getstructoffset())->Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliVParticle*) G__getstructoffset())->Charge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVParticle*) G__getstructoffset())->GetLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVParticle*) G__getstructoffset())->PdgCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliVParticle*) G__getstructoffset())->PID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVParticle*) G__getstructoffset())->IsPrimary());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVParticle*) G__getstructoffset())->SetFlag((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVParticle*) G__getstructoffset())->GetFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVParticle*) G__getstructoffset())->Local2GlobalMomentum((Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVParticle*) G__getstructoffset())->Local2GlobalPosition((Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVParticle*) G__getstructoffset())->Global2LocalMomentum((Double_t*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVParticle*) G__getstructoffset())->Global2LocalPosition((Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVParticle*) G__getstructoffset())->GetMother());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVParticle*) G__getstructoffset())->GetFirstDaughter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVParticle*) G__getstructoffset())->GetLastDaughter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVParticle*) G__getstructoffset())->SetGeneratorIndex((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliVParticle*) G__getstructoffset())->GetGeneratorIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_500_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVParticle G__TAliVParticle;
static int G__G__STEERBase_500_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVParticle*) (soff+(sizeof(AliVParticle)*i)))->~G__TAliVParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVParticle*) (soff))->~G__TAliVParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVEvent */
static int G__G__STEERBase_503_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVEvent& obj = ((AliVEvent*) G__getstructoffset())->operator=(*(AliVEvent*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->AddObject((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->FindListObject((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->CreateStdContent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->GetStdContent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->ReadFromTree((TTree*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVEvent*) G__getstructoffset())->WriteToTree((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->SetStdNames();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVEvent*) G__getstructoffset())->InitMagneticField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->SetRunNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->SetPeriodNumber((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->SetMagneticField((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetRunNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVEvent*) G__getstructoffset())->GetPeriodNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVEvent*) G__getstructoffset())->GetMagneticField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVEvent*) G__getstructoffset())->GetDiamondX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVEvent*) G__getstructoffset())->GetDiamondY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVEvent*) G__getstructoffset())->GetDiamondCovXY((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->SetOrbitNumber((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->SetBunchCrossNumber((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->SetEventType((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->SetTriggerMask((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->SetTriggerCluster((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVEvent*) G__getstructoffset())->GetOrbitNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliVEvent*) G__getstructoffset())->GetBunchCrossNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVEvent*) G__getstructoffset())->GetEventType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliVEvent*) G__getstructoffset())->GetTriggerMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliVEvent*) G__getstructoffset())->GetTriggerMaskNext50());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliVEvent*) G__getstructoffset())->GetTriggerCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliVEvent*) G__getstructoffset())->GetFiredTriggerClasses();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVEvent*) G__getstructoffset())->IsTriggerClassFired((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVEvent*) G__getstructoffset())->GetZDCN1Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVEvent*) G__getstructoffset())->GetZDCP1Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVEvent*) G__getstructoffset())->GetZDCN2Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVEvent*) G__getstructoffset())->GetZDCP2Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVEvent*) G__getstructoffset())->GetZDCEMEnergy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetVTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetNumberOfTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetNumberOfV0s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetNumberOfCascades());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetTOFHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVEvent*) G__getstructoffset())->GetEventTimeSpread());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVEvent*) G__getstructoffset())->GetTOFTimeResolution());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVEvent*) G__getstructoffset())->GetT0TOF((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliVEvent*) G__getstructoffset())->GetT0TOF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVEvent*) G__getstructoffset())->GetT0spread((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetCaloCluster((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetNumberOfCaloClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetEMCALClusters((TRefArray*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetPHOSClusters((TRefArray*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetEMCALCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetPHOSCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetPHOSMatrix((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetEMCALMatrix((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetCaloTrigger(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVEvent*) G__getstructoffset())->IsPileupFromSPD((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetMultiplicity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetNumberOfITSClusters((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVEvent*) G__getstructoffset())->IsPileupFromSPDInMultBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliVEvent*) G__getstructoffset())->GetCentrality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliVEvent*) G__getstructoffset())->GetEventplane());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->EventIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->EventIndexForCaloCluster((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->EventIndexForPHOSCell((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->EventIndexForEMCALCell((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetVZEROData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliVEvent*) G__getstructoffset())->GetVZEROEqFactors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVEvent*) G__getstructoffset())->GetVZEROEqMultiplicity((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVEvent*) G__getstructoffset())->SetVZEROEqFactors((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetZDCData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetADData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetNumberOfTrdTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetTrdTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetNumberOfESDTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetEventNumberInFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetV0(*(AliESDv0*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVEvent*) G__getstructoffset())->GetTimeStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->FindFriend());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->SetFriendEvent((AliVfriendEvent*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVEvent*) G__getstructoffset())->GetEventSpecie());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetKink((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetNumberOfKinks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetVZEROData(*(AliESDVZERO*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetMultiplicity(*(AliMultiplicity*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetPrimaryVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetPrimaryVertexSPD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetPrimaryVertexTPC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEvent*) G__getstructoffset())->GetPrimaryVertexTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetPrimaryVertex(*(AliESDVertex*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetPrimaryVertexTPC(*(AliESDVertex*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetPrimaryVertexSPD(*(AliESDVertex*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetPrimaryVertexTracks(*(AliESDVertex*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVEvent*) G__getstructoffset())->IsIncompleteDAQ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->ConnectTracks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEvent*) G__getstructoffset())->GetDataLayoutType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((AliVEvent*) G__getstructoffset())->Whoami());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliVEvent*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_503_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVEvent G__TAliVEvent;
static int G__G__STEERBase_503_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVEvent*) (soff+(sizeof(AliVEvent)*i)))->~G__TAliVEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVEvent*) (soff))->~G__TAliVEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVVertex */
static int G__G__STEERBase_504_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVVertex& obj = ((AliVVertex*) G__getstructoffset())->operator=(*(AliVVertex*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVVertex*) G__getstructoffset())->GetXYZ((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVVertex*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVVertex*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVVertex*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVVertex*) G__getstructoffset())->GetCovarianceMatrix((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVVertex*) G__getstructoffset())->GetChi2perNDF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVVertex*) G__getstructoffset())->GetChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVVertex*) G__getstructoffset())->GetNDF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVertex*) G__getstructoffset())->IsFromVertexer3D());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVertex*) G__getstructoffset())->IsFromVertexerZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVVertex*) G__getstructoffset())->GetNContributors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVertex*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVVertex*) G__getstructoffset())->PrintIndices();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVVertex*) G__getstructoffset())->SetBC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVVertex*) G__getstructoffset())->GetBC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_504_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVVertex G__TAliVVertex;
static int G__G__STEERBase_504_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVVertex*) (soff+(sizeof(AliVVertex)*i)))->~G__TAliVVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVVertex*) (soff))->~G__TAliVVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliExternalTrackParam */
static int G__G__STEERBase_506_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliExternalTrackParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliExternalTrackParam[n];
     } else {
       p = new((void*) gvp) AliExternalTrackParam[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliExternalTrackParam;
     } else {
       p = new((void*) gvp) AliExternalTrackParam;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliExternalTrackParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliExternalTrackParam(*(AliExternalTrackParam*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliExternalTrackParam(*(AliExternalTrackParam*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliExternalTrackParam& obj = ((AliExternalTrackParam*) G__getstructoffset())->operator=(*(AliExternalTrackParam*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliExternalTrackParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliExternalTrackParam(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) AliExternalTrackParam(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliExternalTrackParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliExternalTrackParam(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Short_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) AliExternalTrackParam(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Short_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliExternalTrackParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliExternalTrackParam((AliVConstructorReinitialisationFlag) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliExternalTrackParam((AliVConstructorReinitialisationFlag) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliExternalTrackParam*) G__getstructoffset())->Reinitialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliExternalTrackParam*) G__getstructoffset())->CopyFromVTrack((AliVTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliExternalTrackParam*) G__getstructoffset())->SetParamOnly((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliExternalTrackParam*) G__getstructoffset())->Set((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Short_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliExternalTrackParam::SetMostProbablePt((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliExternalTrackParam::GetMostProbablePt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliExternalTrackParam*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliExternalTrackParam*) G__getstructoffset())->ResetCovariance((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliExternalTrackParam*) G__getstructoffset())->AddCovariance((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliExternalTrackParam*) G__getstructoffset())->GetCovariance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliExternalTrackParam*) G__getstructoffset())->IsStartedTimeIntegral());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliExternalTrackParam*) G__getstructoffset())->AddTimeStep((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetSigmaY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetSigmaZY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetSigmaZ2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetSigmaSnpY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetSigmaSnpZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetSigmaTglY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetSigmaTglZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetSigmaTglSnp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetSigmaTgl2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetSigma1PtY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetSigma1PtZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetSigma1PtSnp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetSigma1PtTgl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetSigma1Pt2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->PhiPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->Get1P());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetC((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetD((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->CorrectForMeanMaterial((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t (*)(Double_t)) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->CorrectForMeanMaterial((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->CorrectForMeanMaterial((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->CorrectForMeanMaterialdEdx((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->CorrectForMeanMaterialdEdx((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->CorrectForMeanMaterialZA(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Bool_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->CorrectForMeanMaterialZA(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->CorrectForMeanMaterialZA(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->CorrectForMeanMaterialZA((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->CorrectForMeanMaterialZA((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->CorrectForMeanMaterialZA((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->CorrectForMeanMaterialZA((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 100, (double) AliExternalTrackParam::BetheBlochAleph((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) AliExternalTrackParam::BetheBlochAleph((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) AliExternalTrackParam::BetheBlochAleph((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) AliExternalTrackParam::BetheBlochAleph((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) AliExternalTrackParam::BetheBlochAleph((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) AliExternalTrackParam::BetheBlochAleph((Double_t) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 100, (double) AliExternalTrackParam::BetheBlochGeant((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) AliExternalTrackParam::BetheBlochGeant((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) AliExternalTrackParam::BetheBlochGeant((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) AliExternalTrackParam::BetheBlochGeant((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) AliExternalTrackParam::BetheBlochGeant((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) AliExternalTrackParam::BetheBlochGeant((Double_t) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliExternalTrackParam::BetheBlochSolid((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliExternalTrackParam::BetheBlochGas((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetPredictedChi2((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetPredictedChi2((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetPredictedChi2((AliExternalTrackParam*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->PropagateTo((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 68, (long) ((const AliExternalTrackParam*) G__getstructoffset())->GetResiduals((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 68, (long) ((const AliExternalTrackParam*) G__getstructoffset())->GetResiduals((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->Update((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->Rotate((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->RotateParamOnly((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->Invert());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->PropagateTo((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->PropagateParamOnlyTo((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->Propagate((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->PropagateBxByBz((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->PropagateParamOnlyBxByBzTo((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliExternalTrackParam*) G__getstructoffset())->Propagate((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliExternalTrackParam*) G__getstructoffset())->Intersect((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliExternalTrackParam::g3helx3((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->PropagateToBxByBz((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliExternalTrackParam*) G__getstructoffset())->GetHelixParameters((Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetDCA((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliExternalTrackParam*) G__getstructoffset())->PropagateToDCA((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->PropagateToDCA((AliVVertex*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->PropagateToDCA((AliVVertex*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->PropagateToDCA((AliVVertex*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->PropagateToDCABxByBz((AliVVertex*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->PropagateToDCABxByBz((AliVVertex*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->PropagateToDCABxByBz((AliVVertex*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->ConstrainToVertex((AliVVertex*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliExternalTrackParam*) G__getstructoffset())->GetPxPyPzAt((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetParameterAtRadius((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliExternalTrackParam*) G__getstructoffset())->GetYAt((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliExternalTrackParam*) G__getstructoffset())->GetZAt((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetYAtFast((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetZAtFast((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliExternalTrackParam*) G__getstructoffset())->GetYZAt((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliExternalTrackParam*) G__getstructoffset())->GetSnpAt((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((const AliExternalTrackParam*) G__getstructoffset())->GetXatLabR((Double_t) G__double(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((const AliExternalTrackParam*) G__getstructoffset())->GetXatLabR((Double_t) G__double(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((const AliExternalTrackParam*) G__getstructoffset())->GetXYZatR((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((const AliExternalTrackParam*) G__getstructoffset())->GetXYZatR((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((const AliExternalTrackParam*) G__getstructoffset())->GetXYZatR((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->CorrectForMaterial((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t (*)(Double_t)) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->CorrectForMaterial((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->GetDistance((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliExternalTrackParam::GetIndex((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliExternalTrackParam*) G__getstructoffset())->FillPolymarker((TPolyMarker3D*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliExternalTrackParam*) G__getstructoffset())->DrawTrack((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliExternalTrackParam*) G__getstructoffset())->Translate((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliExternalTrackParam*) G__getstructoffset())->CheckCovariance();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) AliExternalTrackParam::GetUseLogTermMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      AliExternalTrackParam::SetUseLogTermMS((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      AliExternalTrackParam::SetUseLogTermMS();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliExternalTrackParam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliExternalTrackParam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliExternalTrackParam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliExternalTrackParam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliExternalTrackParam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliExternalTrackParam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliExternalTrackParam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliExternalTrackParam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_506_0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliExternalTrackParam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliExternalTrackParam G__TAliExternalTrackParam;
static int G__G__STEERBase_506_0_154(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliExternalTrackParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliExternalTrackParam*) (soff+(sizeof(AliExternalTrackParam)*i)))->~G__TAliExternalTrackParam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliExternalTrackParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliExternalTrackParam*) (soff))->~G__TAliExternalTrackParam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTPCdEdxInfo */
static int G__G__STEERBase_507_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTPCdEdxInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTPCdEdxInfo[n];
     } else {
       p = new((void*) gvp) AliTPCdEdxInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTPCdEdxInfo;
     } else {
       p = new((void*) gvp) AliTPCdEdxInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCdEdxInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTPCdEdxInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTPCdEdxInfo(*(AliTPCdEdxInfo*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTPCdEdxInfo(*(AliTPCdEdxInfo*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCdEdxInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTPCdEdxInfo& obj = ((AliTPCdEdxInfo*) G__getstructoffset())->operator=(*(AliTPCdEdxInfo*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCdEdxInfo*) G__getstructoffset())->GetWeightedMean((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliTPCdEdxInfo*) G__getstructoffset())->GetFractionOfClusters((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliTPCdEdxInfo*) G__getstructoffset())->GetTPCSignalRegionInfo((Double_t*) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1])
, (Char_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliTPCdEdxInfo*) G__getstructoffset())->GetTPCSignals((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCdEdxInfo*) G__getstructoffset())->SetTPCSignalRegionInfo((Double_t*) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1])
, (Char_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCdEdxInfo*) G__getstructoffset())->SetTPCSignals((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliTPCdEdxInfo*) G__getstructoffset())->GetTPCSignalRegionInfoQmax((Double_t*) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1])
, (Char_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliTPCdEdxInfo*) G__getstructoffset())->GetTPCSignalsQmax((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCdEdxInfo*) G__getstructoffset())->SetTPCSignalRegionInfoQmax((Double_t*) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1])
, (Char_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCdEdxInfo*) G__getstructoffset())->SetTPCSignalsQmax((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliTPCdEdxInfo*) G__getstructoffset())->GetSignalTot((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliTPCdEdxInfo*) G__getstructoffset())->GetSignalMax((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliTPCdEdxInfo*) G__getstructoffset())->GetNumberOfClusters((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliTPCdEdxInfo*) G__getstructoffset())->GetNumberOfCrossedRows((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCdEdxInfo*) G__getstructoffset())->GetTPCsignalShortPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCdEdxInfo*) G__getstructoffset())->GetTPCsignalMediumPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCdEdxInfo*) G__getstructoffset())->GetTPCsignalLongPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCdEdxInfo*) G__getstructoffset())->GetTPCsignalOROC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCdEdxInfo*) G__getstructoffset())->GetTPCsignalShortPadQmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCdEdxInfo*) G__getstructoffset())->GetTPCsignalMediumPadQmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCdEdxInfo*) G__getstructoffset())->GetTPCsignalLongPadQmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCdEdxInfo*) G__getstructoffset())->GetTPCsignalOROCQmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTPCdEdxInfo::RegisterSectorCalibration((TGraphErrors*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliTPCdEdxInfo*) G__getstructoffset())->GetdEdxInfo((AliExternalTrackParam*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTPCdEdxInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTPCdEdxInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTPCdEdxInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTPCdEdxInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCdEdxInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTPCdEdxInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTPCdEdxInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTPCdEdxInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_507_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTPCdEdxInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTPCdEdxInfo G__TAliTPCdEdxInfo;
static int G__G__STEERBase_507_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTPCdEdxInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTPCdEdxInfo*) (soff+(sizeof(AliTPCdEdxInfo)*i)))->~G__TAliTPCdEdxInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTPCdEdxInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTPCdEdxInfo*) (soff))->~G__TAliTPCdEdxInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliDetectorPID */
static int G__G__STEERBase_508_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliDetectorPID* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliDetectorPID[n];
     } else {
       p = new((void*) gvp) AliDetectorPID[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliDetectorPID;
     } else {
       p = new((void*) gvp) AliDetectorPID;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorPID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliDetectorPID* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliDetectorPID(*(AliDetectorPID*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliDetectorPID(*(AliDetectorPID*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorPID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliDetectorPID& obj = ((AliDetectorPID*) G__getstructoffset())->operator=(*(AliDetectorPID*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorPID*) G__getstructoffset())->SetRawProbability((AliPIDResponse::EDetector) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (AliPIDResponse::EDetPidStatus) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((AliDetectorPID*) G__getstructoffset())->SetNumberOfSigmas((AliPIDResponse::EDetector) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (AliPIDResponse::EDetPidStatus) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((AliDetectorPID*) G__getstructoffset())->SetNumberOfSigmas((AliPIDResponse::EDetector) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliDetectorPID*) G__getstructoffset())->GetRawProbability((AliPIDResponse::EDetector) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliDetectorPID*) G__getstructoffset())->GetNumberOfSigmas((AliPIDResponse::EDetector) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliDetectorPID*) G__getstructoffset())->GetRawProbability((AliPIDResponse::EDetector) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliDetectorPID*) G__getstructoffset())->GetNumberOfSigmas((AliPIDResponse::EDetector) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliDetectorPID*) G__getstructoffset())->GetRawProbability((AliPIDResponse::EDetector) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliDetectorPID*) G__getstructoffset())->GetNumberOfSigmas((AliPIDResponse::EDetector) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorPID*) G__getstructoffset())->HasRawProbability((AliPIDResponse::EDetector) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorPID*) G__getstructoffset())->HasNumberOfSigmas((AliPIDResponse::EDetector) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliDetectorPID*) G__getstructoffset())->GetPIDStatus((AliPIDResponse::EDetector) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliDetectorPID::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDetectorPID::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliDetectorPID::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliDetectorPID::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorPID*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDetectorPID::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDetectorPID::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDetectorPID::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_508_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDetectorPID::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliDetectorPID G__TAliDetectorPID;
static int G__G__STEERBase_508_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliDetectorPID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliDetectorPID*) (soff+(sizeof(AliDetectorPID)*i)))->~G__TAliDetectorPID();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliDetectorPID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliDetectorPID*) (soff))->~G__TAliDetectorPID();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTOFHeader */
static int G__G__STEERBase_509_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTOFHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTOFHeader[n];
     } else {
       p = new((void*) gvp) AliTOFHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTOFHeader;
     } else {
       p = new((void*) gvp) AliTOFHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTOFHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 8
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTOFHeader(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
   } else {
     p = new((void*) gvp) AliTOFHeader(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTOFHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTOFHeader(*(AliTOFHeader*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTOFHeader(*(AliTOFHeader*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTOFHeader& obj = ((AliTOFHeader*) G__getstructoffset())->operator=(*(AliTOFHeader*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFHeader*) G__getstructoffset())->SetTOFResolution((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFHeader*) G__getstructoffset())->GetTOFResolution());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFHeader*) G__getstructoffset())->SetT0spread((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFHeader*) G__getstructoffset())->GetT0spread());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFHeader*) G__getstructoffset())->GetDefaultEventTimeVal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFHeader*) G__getstructoffset())->GetDefaultEventTimeRes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTOFHeader*) G__getstructoffset())->GetEventTimeValues());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTOFHeader*) G__getstructoffset())->GetEventTimeRes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTOFHeader*) G__getstructoffset())->GetNvalues());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTOFHeader*) G__getstructoffset())->GetNbins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTOFHeader*) G__getstructoffset())->GetNumberOfTOFclusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTOFHeader*) G__getstructoffset())->GetNumberOfTOFtrgPads());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTOFHeader*) G__getstructoffset())->GetNumberOfTOFmaxipad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTOFHeader*) G__getstructoffset())->GetTriggerMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFHeader*) G__getstructoffset())->SetDefaultEventTimeVal((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFHeader*) G__getstructoffset())->SetDefaultEventTimeRes((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFHeader*) G__getstructoffset())->SetEventTimeValues((TArrayF*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFHeader*) G__getstructoffset())->SetEventTimeRes((TArrayF*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFHeader*) G__getstructoffset())->SetNvalues((TArrayI*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFHeader*) G__getstructoffset())->SetNbins((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFHeader*) G__getstructoffset())->SetNumberOfTOFclusters((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFHeader*) G__getstructoffset())->SetNumberOfTOFtrgPads((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFHeader*) G__getstructoffset())->SetTriggerMask((AliTOFTriggerMask*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTOFHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTOFHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTOFHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTOFHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTOFHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTOFHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTOFHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_509_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTOFHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTOFHeader G__TAliTOFHeader;
static int G__G__STEERBase_509_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTOFHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTOFHeader*) (soff+(sizeof(AliTOFHeader)*i)))->~G__TAliTOFHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTOFHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTOFHeader*) (soff))->~G__TAliTOFHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVTrack */
static int G__G__STEERBase_510_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVTrack& obj = ((AliVTrack*) G__getstructoffset())->operator=(*(AliVTrack*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVTrack*) G__getstructoffset())->IsPureITSStandalone());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVTrack*) G__getstructoffset())->GetEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliVTrack*) G__getstructoffset())->GetITSClusterMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliVTrack*) G__getstructoffset())->GetITSSharedClusterMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVTrack*) G__getstructoffset())->HasPointOnITSLayer((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVTrack*) G__getstructoffset())->HasSharedPointOnITSLayer((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVTrack*) G__getstructoffset())->GetITSdEdxSamples((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVTrack*) G__getstructoffset())->GetTPCClusterMapPtr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVTrack*) G__getstructoffset())->GetTPCFitMapPtr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVTrack*) G__getstructoffset())->GetTPCSharedMapPtr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 102, (double) ((const AliVTrack*) G__getstructoffset())->GetTPCClusterInfo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 102, (double) ((const AliVTrack*) G__getstructoffset())->GetTPCClusterInfo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 102, (double) ((const AliVTrack*) G__getstructoffset())->GetTPCClusterInfo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((const AliVTrack*) G__getstructoffset())->GetTPCClusterInfo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVTrack*) G__getstructoffset())->GetTPCdEdxInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliVTrack*) G__getstructoffset())->GetTPCNcls());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliVTrack*) G__getstructoffset())->GetTPCNclsF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTPCchi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTRDslice((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetNumberOfTRDslices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliVTrack*) G__getstructoffset())->GetTRDncls());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliVTrack*) G__getstructoffset())->GetTRDntrackletsPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrack*) G__getstructoffset())->SetDetectorPID((AliDetectorPID*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVTrack*) G__getstructoffset())->GetDetectorPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTRDchi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetNumberOfClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetITSchi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTrack*) G__getstructoffset())->GetTPCCrossedRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVVertex((AliVVertex*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (AliExternalTrackParam*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVVertex((AliVVertex*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVVertexTPC((AliVVertex*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (AliExternalTrackParam*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVVertexTPC((AliVVertex*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVVertexBxByBz((AliVVertex*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (AliExternalTrackParam*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVVertexBxByBz((AliVVertex*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVVertexTPCBxByBz((AliVVertex*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (AliExternalTrackParam*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVVertexTPCBxByBz((AliVVertex*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVertex((AliESDVertex*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (AliExternalTrackParam*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVertex((AliESDVertex*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVertexTPC((AliESDVertex*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (AliExternalTrackParam*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVertexTPC((AliESDVertex*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVertexBxByBz((AliESDVertex*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (AliExternalTrackParam*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVertexBxByBz((AliESDVertex*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVertexTPCBxByBz((AliESDVertex*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (AliExternalTrackParam*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->RelateToVertexTPCBxByBz((AliESDVertex*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVTrack*) G__getstructoffset())->GetImpactParameters((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVTrack*) G__getstructoffset())->GetImpactParameters(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVTrack*) G__getstructoffset())->GetImpactParametersTPC(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVTrack*) G__getstructoffset())->GetImpactParametersTPC((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetEMCALcluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrack*) G__getstructoffset())->SetEMCALcluster((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVTrack*) G__getstructoffset())->IsEMCAL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTrackPhiOnEMCal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTrackEtaOnEMCal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTrackPtOnEMCal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTrackPOnEMCal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVTrack*) G__getstructoffset())->IsExtrapolatedToEMCAL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((AliVTrack*) G__getstructoffset())->SetTrackPhiEtaPtOnEMCal((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliVTrack*) G__getstructoffset())->SetTrackPhiEtaPtOnEMCal((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetPHOScluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrack*) G__getstructoffset())->SetPHOScluster((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVTrack*) G__getstructoffset())->IsPHOS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrack*) G__getstructoffset())->SetPIDForTracking((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetPIDForTracking());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrack*) G__getstructoffset())->SetStatus((ULong_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrack*) G__getstructoffset())->ResetStatus((ULong_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetITSsignal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetITSsignalTunedOnData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrack*) G__getstructoffset())->SetITSsignalTunedOnData((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTPCsignal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTPCsignalTunedOnData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrack*) G__getstructoffset())->SetTPCsignalTunedOnData((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliVTrack*) G__getstructoffset())->GetTPCsignalN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTPCmomentum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTPCTgl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetTPCLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTgl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTOFsignal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTOFsignalTunedOnData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrack*) G__getstructoffset())->SetTOFsignalTunedOnData((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetHMPIDsignal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTRDsignal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliVTrack*) G__getstructoffset())->GetTRDNchamberdEdx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliVTrack*) G__getstructoffset())->GetTRDNclusterdEdx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetHMPIDoccupancy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetHMPIDcluIdx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVTrack*) G__getstructoffset())->GetHMPIDtrk(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVTrack*) G__getstructoffset())->GetHMPIDmip(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVTrack*) G__getstructoffset())->GetOuterHmpPxPyPz((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVTrack*) G__getstructoffset())->GetInnerParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVTrack*) G__getstructoffset())->GetOuterParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVTrack*) G__getstructoffset())->GetTPCInnerParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVTrack*) G__getstructoffset())->GetConstrainedParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((const AliVTrack*) G__getstructoffset())->GetIntegratedTimes((Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const AliVTrack*) G__getstructoffset())->GetIntegratedTimes((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTRDmomentum((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTRDmomentum((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVTrack*) G__getstructoffset())->GetHMPIDpid((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetIntegratedLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const AliVTrack*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVTrack*) G__getstructoffset())->GetXYZ((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVTrack*) G__getstructoffset())->GetXYZAt((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetBz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVTrack*) G__getstructoffset())->GetBxByBz((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVTrack*) G__getstructoffset())->GetCovarianceXYZPxPyPz((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVTrack*) G__getstructoffset())->PropagateToDCA((AliVVertex*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetNcls((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVTrack*) G__getstructoffset())->GetPxPyPz((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrack*) G__getstructoffset())->SetID((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetTOFBunchCrossing((Double_t) G__double(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetTOFBunchCrossing((Double_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetTOFBunchCrossing());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTOFExpTDiff((Double_t) G__double(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTOFExpTDiff((Double_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTOFExpTDiff());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVTrack*) G__getstructoffset())->GetTOFHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetTrackParam(*(AliExternalTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetTrackParamRefitted(*(AliExternalTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetTrackParamIp(*(AliExternalTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetTrackParamTPCInner(*(AliExternalTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetTrackParamOp(*(AliExternalTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetTrackParamCp(*(AliExternalTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetTrackParamITSOut(*(AliExternalTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrack*) G__getstructoffset())->ResetTrackParamIp((AliExternalTrackParam*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrack*) G__getstructoffset())->ResetTrackParamOp((AliExternalTrackParam*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrack*) G__getstructoffset())->ResetTrackParamTPCInner((AliExternalTrackParam*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetNumberOfTPCClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetNumberOfITSClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetNumberOfTRDClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrack*) G__getstructoffset())->GetKinkIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetSigned1Pt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVTrack*) G__getstructoffset())->IsOn((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliVTrack*) G__getstructoffset())->GetParameter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetAlpha());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetSnp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetSigmaSnp2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 114, (long) ((const AliVTrack*) G__getstructoffset())->GetTPCncls((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 114, (long) ((const AliVTrack*) G__getstructoffset())->GetTPCncls((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 114, (long) ((const AliVTrack*) G__getstructoffset())->GetTPCncls());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetTOFsignalDz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetSignedPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetSign());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVTrack*) G__getstructoffset())->GetDirection((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrack*) G__getstructoffset())->GetLinearD((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_133(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVTrack*) G__getstructoffset())->GetDZ((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Float_t*) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const AliVTrack*) G__getstructoffset())->GetITSclusters((Int_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliVTrack*) G__getstructoffset())->GetTRDclusters((Int_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_146(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_510_0_147(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVTrack G__TAliVTrack;
static int G__G__STEERBase_510_0_148(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVTrack*) (soff+(sizeof(AliVTrack)*i)))->~G__TAliVTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVTrack*) (soff))->~G__TAliVTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliITSPidParams */
static int G__G__STEERBase_512_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliITSPidParams* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliITSPidParams((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliITSPidParams((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliITSPidParams[n];
       } else {
         p = new((void*) gvp) AliITSPidParams[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliITSPidParams;
       } else {
         p = new((void*) gvp) AliITSPidParams;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPidParams));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliITSPidParams* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliITSPidParams((Char_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliITSPidParams((Char_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliITSPidParams((Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliITSPidParams((Char_t*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPidParams));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->InitMC();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->InitData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetLandauGausNormPdgCode((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetLandauGausNorm((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSDDElecMPV((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSDDElecLandauWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSDDElecGaussWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSSDElecMPV((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSSDElecLandauWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSSDElecGaussWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSDDPionMPV((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSDDPionLandauWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSDDPionGaussWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSSDPionMPV((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSSDPionLandauWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSSDPionGaussWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSDDKaonMPV((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSDDKaonLandauWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSDDKaonGaussWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSSDKaonMPV((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSSDKaonLandauWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSSDKaonGaussWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSDDProtMPV((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSDDProtLandauWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSDDProtGaussWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSSDProtMPV((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSSDProtLandauWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->SetSSDProtGaussWidth((TFormula*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSDDElecMPV((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSDDElecLandauWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSDDElecGaussWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSSDElecMPV((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSSDElecLandauWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSSDElecGaussWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSDDPionMPV((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSDDPionLandauWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSDDPionGaussWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSSDPionMPV((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSSDPionLandauWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSSDPionGaussWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSDDKaonMPV((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSDDKaonLandauWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSDDKaonGaussWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSSDKaonMPV((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSSDKaonLandauWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSSDKaonGaussWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSDDProtMPV((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSDDProtLandauWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSDDProtGaussWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSSDProtMPV((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSSDProtLandauWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPidParams*) G__getstructoffset())->GetSSDProtGaussWidth((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliITSPidParams::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliITSPidParams::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliITSPidParams::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliITSPidParams::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPidParams*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliITSPidParams::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliITSPidParams::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliITSPidParams::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_512_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliITSPidParams::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliITSPidParams G__TAliITSPidParams;
static int G__G__STEERBase_512_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliITSPidParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliITSPidParams*) (soff+(sizeof(AliITSPidParams)*i)))->~G__TAliITSPidParams();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliITSPidParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliITSPidParams*) (soff))->~G__TAliITSPidParams();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliITSPIDResponse */
static int G__G__STEERBase_513_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliITSPIDResponse* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliITSPIDResponse((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliITSPIDResponse((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliITSPIDResponse[n];
       } else {
         p = new((void*) gvp) AliITSPIDResponse[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliITSPIDResponse;
       } else {
         p = new((void*) gvp) AliITSPIDResponse;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPIDResponse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPIDResponse*) G__getstructoffset())->SetBetheBlochParamsITSTPC((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPIDResponse*) G__getstructoffset())->SetBetheBlochParamsITSTPCDeuteron((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPIDResponse*) G__getstructoffset())->SetBetheBlochParamsITSTPCTriton((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPIDResponse*) G__getstructoffset())->SetBetheBlochParamsITSsa((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPIDResponse*) G__getstructoffset())->SetBetheBlochHybridParamsITSsa((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPIDResponse*) G__getstructoffset())->SetElectronBetheBlochParamsITSsa((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPIDResponse*) G__getstructoffset())->BetheAleph((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliITSPIDResponse*) G__getstructoffset())->Bethe((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliITSPIDResponse*) G__getstructoffset())->Bethe((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliITSPIDResponse*) G__getstructoffset())->Bethe((Double_t) G__double(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliITSPIDResponse*) G__getstructoffset())->Bethe((Double_t) G__double(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPIDResponse*) G__getstructoffset())->BetheITSsaHybrid((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) ((const AliITSPIDResponse*) G__getstructoffset())->GetResolution((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (AliPID::EParticleType) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((const AliITSPIDResponse*) G__getstructoffset())->GetResolution((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((const AliITSPIDResponse*) G__getstructoffset())->GetResolution((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliITSPIDResponse*) G__getstructoffset())->GetResolution((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const AliITSPIDResponse*) G__getstructoffset())->GetResolution((Double_t) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((const AliITSPIDResponse*) G__getstructoffset())->GetITSProbabilities((Float_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((const AliITSPIDResponse*) G__getstructoffset())->GetITSProbabilities((Float_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliITSPIDResponse*) G__getstructoffset())->GetITSProbabilities((Float_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (AliITSPidParams*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliITSPIDResponse*) G__getstructoffset())->GetNumberOfSigmas((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliITSPIDResponse*) G__getstructoffset())->GetSignalDelta((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliITSPIDResponse*) G__getstructoffset())->GetSignalDelta((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 102, (double) ((const AliITSPIDResponse*) G__getstructoffset())->GetNumberOfSigmas((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (AliPID::EParticleType) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 102, (double) ((const AliITSPIDResponse*) G__getstructoffset())->GetNumberOfSigmas((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (AliPID::EParticleType) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 102, (double) ((const AliITSPIDResponse*) G__getstructoffset())->GetNumberOfSigmas((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (AliPID::EParticleType) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((const AliITSPIDResponse*) G__getstructoffset())->GetParticleIdFromdEdxVsP((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const AliITSPIDResponse*) G__getstructoffset())->GetParticleIdFromdEdxVsP((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliITSPIDResponse::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliITSPIDResponse::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliITSPIDResponse::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliITSPIDResponse::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliITSPIDResponse*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliITSPIDResponse::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliITSPIDResponse::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliITSPIDResponse::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_513_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliITSPIDResponse::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_513_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliITSPIDResponse* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliITSPIDResponse(*(AliITSPIDResponse*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPIDResponse));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliITSPIDResponse G__TAliITSPIDResponse;
static int G__G__STEERBase_513_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliITSPIDResponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliITSPIDResponse*) (soff+(sizeof(AliITSPIDResponse)*i)))->~G__TAliITSPIDResponse();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliITSPIDResponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliITSPIDResponse*) (soff))->~G__TAliITSPIDResponse();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_513_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliITSPIDResponse* dest = (AliITSPIDResponse*) G__getstructoffset();
   *dest = *(AliITSPIDResponse*) libp->para[0].ref;
   const AliITSPIDResponse& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliOADBContainer */
static int G__G__STEERBase_598_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliOADBContainer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliOADBContainer[n];
     } else {
       p = new((void*) gvp) AliOADBContainer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliOADBContainer;
     } else {
       p = new((void*) gvp) AliOADBContainer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliOADBContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliOADBContainer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliOADBContainer((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliOADBContainer((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliOADBContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliOADBContainer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliOADBContainer(*(AliOADBContainer*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliOADBContainer(*(AliOADBContainer*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliOADBContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliOADBContainer& obj = ((AliOADBContainer*) G__getstructoffset())->operator=(*(AliOADBContainer*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((AliOADBContainer*) G__getstructoffset())->AppendObject((TObject*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3])));
      G__setnull(result7);
      break;
   case 3:
      ((AliOADBContainer*) G__getstructoffset())->AppendObject((TObject*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((AliOADBContainer*) G__getstructoffset())->UpdateObject((Int_t) G__int(libp->para[0]), (TObject*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, *((TString*) G__int(libp->para[4])));
      G__setnull(result7);
      break;
   case 4:
      ((AliOADBContainer*) G__getstructoffset())->UpdateObject((Int_t) G__int(libp->para[0]), (TObject*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliOADBContainer*) G__getstructoffset())->RemoveObject((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliOADBContainer*) G__getstructoffset())->AddDefaultObject((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliOADBContainer*) G__getstructoffset())->CleanDefaultList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliOADBContainer*) G__getstructoffset())->GetDefaultList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliOADBContainer*) G__getstructoffset())->WriteToFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliOADBContainer*) G__getstructoffset())->InitFromFile((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliOADBContainer*) G__getstructoffset())->GetNumberOfEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliOADBContainer*) G__getstructoffset())->LowerLimit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliOADBContainer*) G__getstructoffset())->UpperLimit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliOADBContainer*) G__getstructoffset())->GetObjArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliOADBContainer*) G__getstructoffset())->SetToZeroObjArray();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((const AliOADBContainer*) G__getstructoffset())->GetObject((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const AliOADBContainer*) G__getstructoffset())->GetObject((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((const AliOADBContainer*) G__getstructoffset())->GetObject((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((const AliOADBContainer*) G__getstructoffset())->GetObjectFromFile((TFile*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 85, (long) ((const AliOADBContainer*) G__getstructoffset())->GetObjectFromFile((TFile*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const AliOADBContainer*) G__getstructoffset())->GetObjectFromFile((TFile*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliOADBContainer*) G__getstructoffset())->GetObjectByIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliOADBContainer*) G__getstructoffset())->GetPassNameByIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliOADBContainer*) G__getstructoffset())->GetDefaultObject((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliOADBContainer*) G__getstructoffset())->List();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((const AliOADBContainer*) G__getstructoffset())->GetIndexForRun((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const AliOADBContainer*) G__getstructoffset())->GetIndexForRun((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliOADBContainer::GetOADBPath());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliOADBContainer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliOADBContainer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliOADBContainer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliOADBContainer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliOADBContainer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliOADBContainer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliOADBContainer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliOADBContainer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_598_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliOADBContainer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliOADBContainer G__TAliOADBContainer;
static int G__G__STEERBase_598_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliOADBContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliOADBContainer*) (soff+(sizeof(AliOADBContainer)*i)))->~G__TAliOADBContainer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliOADBContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliOADBContainer*) (soff))->~G__TAliOADBContainer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTPCPIDResponse */
static int G__G__STEERBase_599_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTPCPIDResponse* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTPCPIDResponse[n];
     } else {
       p = new((void*) gvp) AliTPCPIDResponse[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTPCPIDResponse;
     } else {
       p = new((void*) gvp) AliTPCPIDResponse;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTPCPIDResponse* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTPCPIDResponse(*(AliTPCPIDResponse*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTPCPIDResponse(*(AliTPCPIDResponse*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTPCPIDResponse& obj = ((AliTPCPIDResponse*) G__getstructoffset())->operator=(*(AliTPCPIDResponse*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetSigma((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetBetheBlochParameters((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetMip((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->Bethe((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetUseDatabase((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->GetUseDatabase());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetResponseFunction((AliPID::EParticleType) G__int(libp->para[0]), (TObject*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->GetResponseFunction((AliPID::EParticleType) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetVoltage((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetVoltageMap(*(TVectorF*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetVoltage((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetLowGainIROCthreshold((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetBadIROCthreshold((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetLowGainOROCthreshold((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetBadOROCthreshold((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetMaxBadLengthFraction((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetMagField((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->GetEtaCorrMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTPCPIDResponse*) G__getstructoffset())->SetEtaCorrMap((TH2D*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetTrackTanTheta((AliVTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetEtaCorrection((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetEtaCorrection((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetEtaCorrectedTrackdEdx((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetEtaCorrectedTrackdEdx((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->GetSigmaPar1Map());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetSigmaPar0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTPCPIDResponse*) G__getstructoffset())->SetSigmaParams((TH2D*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetSigmaPar1((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetSigmaPar1((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->GetMultiplicityCorrectionFunction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetParameterMultiplicityCorrection((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->GetMultiplicityCorrectionFunctionTanTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetParameterMultiplicityCorrectionTanTheta((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->GetMultiplicitySigmaCorrectionFunction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetParameterMultiplicitySigmaCorrection((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->ResetMultiplicityCorrectionFunctions();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetCurrentEventMultiplicity((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->GetCurrentEventMultiplicity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetMultiplicityCorrection((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetMultiplicityCorrection((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetMultiplicitySigmaCorrection((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetMultiplicitySigmaCorrection((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetMultiplicityCorrectedTrackdEdx((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetMultiplicityCorrectedTrackdEdx((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetEtaAndMultiplicityCorrectedTrackdEdx((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetEtaAndMultiplicityCorrectedTrackdEdx((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetEtaCorrectionFast((AliVTrack*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetMultiplicityCorrectionFast((AliVTrack*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetMultiplicitySigmaCorrectionFast((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetSigmaPar1Fast((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (TSpline3*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetSigma((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (AliTPCPIDResponse::ETPCgainScenario) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetExpectedSignal((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetExpectedSignal((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetExpectedSignal((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetExpectedSignal((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetExpectedSigma((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetExpectedSigma((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetExpectedSigma((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetExpectedSigma((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetNumberOfSigmas((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetNumberOfSigmas((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetNumberOfSigmas((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetNumberOfSigmas((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetSignalDelta((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetSignalDelta((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetSignalDelta((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetSignalDelta((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetSignalDelta((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->SetResponseFunction((TObject*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCgainScenario) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->GetResponseFunction((AliPID::EParticleType) G__int(libp->para[0]), (AliTPCPIDResponse::ETPCgainScenario) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->GetResponseFunction((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->GetResponseFunction((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->ResponseFunctiondEdxN(
(AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(AliTPCPIDResponse::ETPCgainScenario*) libp->para[5].ref
, (TSpline3**) G__int(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->sectorNumbersInOut((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->TrackStatus((AliVTrack*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->MaxClusterRadius((AliVTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->TrackApex((AliVTrack*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTPCPIDResponse::GainScenarioName((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->ResponseFunctionIndex((AliPID::EParticleType) G__int(libp->para[0]), (AliTPCPIDResponse::ETPCgainScenario) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->ResetSplines();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetExpectedSignal((Float_t) G__double(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetExpectedSignal((Float_t) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetExpectedSigma((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (AliPID::EParticleType) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetExpectedSigma((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetNumberOfSigmas((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (AliPID::EParticleType) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetNumberOfSigmas((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetMIP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetRes0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetResN2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetRes0((AliTPCPIDResponse::ETPCgainScenario) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetResN2((AliTPCPIDResponse::ETPCgainScenario) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTPCPIDResponse*) G__getstructoffset())->RegisterSpline((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliTPCPIDResponse*) G__getstructoffset())->EvaldEdxSpline((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliTPCPIDResponse::SEvaldEdx((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((AliTPCPIDResponse*) G__getstructoffset())->SetdEdxType((AliTPCPIDResponse::ETPCdEdxType) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((AliTPCPIDResponse*) G__getstructoffset())->SetdEdxType((AliTPCPIDResponse::ETPCdEdxType) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((AliTPCPIDResponse*) G__getstructoffset())->SetdEdxType((AliTPCPIDResponse::ETPCdEdxType) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((AliTPCPIDResponse*) G__getstructoffset())->SetdEdxType((AliTPCPIDResponse::ETPCdEdxType) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliTPCPIDResponse*) G__getstructoffset())->SetdEdxType((AliTPCPIDResponse::ETPCdEdxType) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliTPCPIDResponse*) G__getstructoffset())->SetdEdxType((AliTPCPIDResponse::ETPCdEdxType) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->GetdEdxType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->GetdEdxChargeType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTPCPIDResponse*) G__getstructoffset())->GetdEdxWeightType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetIROCweight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetOROCmedWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetOROClongWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTPCPIDResponse*) G__getstructoffset())->GetTrackdEdx((AliVTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((AliTPCPIDResponse*) G__getstructoffset())->InitFromOADB((const Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (const char*) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((AliTPCPIDResponse*) G__getstructoffset())->InitFromOADB((const Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((AliTPCPIDResponse*) G__getstructoffset())->InitFromOADB((const Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTPCPIDResponse*) G__getstructoffset())->SetSplinesFromArray((TObjArray*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTPCPIDResponse*) G__getstructoffset())->SetMultiplicityCorrectionFromString(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTPCPIDResponse*) G__getstructoffset())->SetdEdxTypeFromString(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTPCPIDResponse*) G__getstructoffset())->SetdEdxResolutionFromString(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((AliTPCPIDResponse*) G__getstructoffset())->GetRecoPassNameUsed();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = AliTPCPIDResponse::GetChecksum((TObject*) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTPCPIDResponse::GetMultiplicityCorrectionArrayFromString(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTPCPIDResponse::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTPCPIDResponse::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTPCPIDResponse::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTPCPIDResponse::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTPCPIDResponse*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTPCPIDResponse::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTPCPIDResponse::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTPCPIDResponse::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_599_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTPCPIDResponse::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTPCPIDResponse G__TAliTPCPIDResponse;
static int G__G__STEERBase_599_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTPCPIDResponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTPCPIDResponse*) (soff+(sizeof(AliTPCPIDResponse)*i)))->~G__TAliTPCPIDResponse();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTPCPIDResponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTPCPIDResponse*) (soff))->~G__TAliTPCPIDResponse();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTRDPIDResponseObject */
static int G__G__STEERBase_604_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDResponseObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDResponseObject[n];
     } else {
       p = new((void*) gvp) AliTRDPIDResponseObject[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDResponseObject;
     } else {
       p = new((void*) gvp) AliTRDPIDResponseObject;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponseObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDResponseObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTRDPIDResponseObject((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliTRDPIDResponseObject((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponseObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDResponseObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTRDPIDResponseObject(*(AliTRDPIDResponseObject*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTRDPIDResponseObject(*(AliTRDPIDResponseObject*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponseObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTRDPIDResponseObject& obj = ((AliTRDPIDResponseObject*) G__getstructoffset())->operator=(*(AliTRDPIDResponseObject*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliTRDPIDResponseObject*) G__getstructoffset())->SetPIDParams((AliTRDPIDParams*) G__int(libp->para[0]), (AliTRDPIDResponse::ETRDPIDMethod) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliTRDPIDResponseObject*) G__getstructoffset())->SetPIDParams((AliTRDPIDParams*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliTRDPIDResponseObject*) G__getstructoffset())->SetPIDReference((AliTRDPIDReference*) G__int(libp->para[0]), (AliTRDPIDResponse::ETRDPIDMethod) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliTRDPIDResponseObject*) G__getstructoffset())->SetPIDReference((AliTRDPIDReference*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((const AliTRDPIDResponseObject*) G__getstructoffset())->GetLowerReference((AliPID::EParticleType) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), (AliTRDPIDResponse::ETRDPIDMethod) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((const AliTRDPIDResponseObject*) G__getstructoffset())->GetLowerReference((AliPID::EParticleType) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((const AliTRDPIDResponseObject*) G__getstructoffset())->GetUpperReference((AliPID::EParticleType) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), (AliTRDPIDResponse::ETRDPIDMethod) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((const AliTRDPIDResponseObject*) G__getstructoffset())->GetUpperReference((AliPID::EParticleType) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const AliTRDPIDResponseObject*) G__getstructoffset())->GetNumberOfMomentumBins((AliTRDPIDResponse::ETRDPIDMethod) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const AliTRDPIDResponseObject*) G__getstructoffset())->GetNumberOfMomentumBins());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((const AliTRDPIDResponseObject*) G__getstructoffset())->GetThresholdParameters((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (AliTRDPIDResponse::ETRDPIDMethod) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((const AliTRDPIDResponseObject*) G__getstructoffset())->GetThresholdParameters((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((const AliTRDPIDResponseObject*) G__getstructoffset())->GetThresholdParameters((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTRDPIDResponseObject*) G__getstructoffset())->GetNSlicesQ0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDPIDResponseObject*) G__getstructoffset())->SetNSlicesQ0((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTRDPIDResponseObject::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDResponseObject::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTRDPIDResponseObject::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTRDPIDResponseObject::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDPIDResponseObject*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDResponseObject::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDPIDResponseObject::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDResponseObject::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_604_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDPIDResponseObject::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTRDPIDResponseObject G__TAliTRDPIDResponseObject;
static int G__G__STEERBase_604_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTRDPIDResponseObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTRDPIDResponseObject*) (soff+(sizeof(AliTRDPIDResponseObject)*i)))->~G__TAliTRDPIDResponseObject();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTRDPIDResponseObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTRDPIDResponseObject*) (soff))->~G__TAliTRDPIDResponseObject();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTRDdEdxParams */
static int G__G__STEERBase_605_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDdEdxParams* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDdEdxParams(*((const TString*) G__int(libp->para[0])), *((const TString*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) AliTRDdEdxParams(*((const TString*) G__int(libp->para[0])), *((const TString*) G__int(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDdEdxParams(*((const TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) AliTRDdEdxParams(*((const TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliTRDdEdxParams[n];
       } else {
         p = new((void*) gvp) AliTRDdEdxParams[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliTRDdEdxParams;
       } else {
         p = new((void*) gvp) AliTRDdEdxParams;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDdEdxParams));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_605_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVectorF& obj = ((const AliTRDdEdxParams*) G__getstructoffset())->GetMeanParameter((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const Bool_t) G__int(libp->para[3]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_605_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVectorF& obj = ((const AliTRDdEdxParams*) G__getstructoffset())->GetSigmaParameter((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const Bool_t) G__int(libp->para[3]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_605_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDdEdxParams*) G__getstructoffset())->SetMeanParameter((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (const Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_605_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDdEdxParams*) G__getstructoffset())->SetSigmaParameter((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (const Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_605_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTRDdEdxParams::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_605_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDdEdxParams::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_605_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTRDdEdxParams::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_605_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTRDdEdxParams::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_605_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDdEdxParams*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_605_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDdEdxParams::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_605_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDdEdxParams::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_605_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDdEdxParams::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_605_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDdEdxParams::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_605_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliTRDdEdxParams* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliTRDdEdxParams(*(AliTRDdEdxParams*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDdEdxParams));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTRDdEdxParams G__TAliTRDdEdxParams;
static int G__G__STEERBase_605_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTRDdEdxParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTRDdEdxParams*) (soff+(sizeof(AliTRDdEdxParams)*i)))->~G__TAliTRDdEdxParams();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTRDdEdxParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTRDdEdxParams*) (soff))->~G__TAliTRDdEdxParams();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_605_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDdEdxParams* dest = (AliTRDdEdxParams*) G__getstructoffset();
   *dest = *(AliTRDdEdxParams*) libp->para[0].ref;
   const AliTRDdEdxParams& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTRDPIDResponse */
static int G__G__STEERBase_607_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDResponse* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDResponse[n];
     } else {
       p = new((void*) gvp) AliTRDPIDResponse[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDResponse;
     } else {
       p = new((void*) gvp) AliTRDPIDResponse;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDResponse* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTRDPIDResponse(*(AliTRDPIDResponse*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTRDPIDResponse(*(AliTRDPIDResponse*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTRDPIDResponse& obj = ((AliTRDPIDResponse*) G__getstructoffset())->operator=(*(AliTRDPIDResponse*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTRDPIDResponse*) G__getstructoffset())->GetNumberOfSigmas((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letdouble(result7, 100, (double) ((const AliTRDPIDResponse*) G__getstructoffset())->GetSignalDelta(
(AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6])));
      break;
   case 6:
      G__letdouble(result7, 100, (double) ((const AliTRDPIDResponse*) G__getstructoffset())->GetSignalDelta((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) ((const AliTRDPIDResponse*) G__getstructoffset())->GetSignalDelta((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((const AliTRDPIDResponse*) G__getstructoffset())->GetSignalDelta((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((const AliTRDPIDResponse*) G__getstructoffset())->GetSignalDelta((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliTRDPIDResponse*) G__getstructoffset())->GetSignalDelta((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliTRDPIDResponse::MeandEdx((Double_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliTRDPIDResponse::MeanTR((Double_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliTRDPIDResponse::MeandEdxTR((Double_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliTRDPIDResponse::ResolutiondEdxTR((Double_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 105, (long) ((const AliTRDPIDResponse*) G__getstructoffset())->GetResponse((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (AliTRDPIDResponse::ETRDPIDMethod) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((const AliTRDPIDResponse*) G__getstructoffset())->GetResponse((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (AliTRDPIDResponse::ETRDPIDMethod) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((const AliTRDPIDResponse*) G__getstructoffset())->GetResponse((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const AliTRDPIDResponse*) G__getstructoffset())->GetNumberOfSlices((AliTRDPIDResponse::ETRDPIDMethod) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const AliTRDPIDResponse*) G__getstructoffset())->GetNumberOfSlices());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTRDPIDResponse*) G__getstructoffset())->IsOwner());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDPIDResponse*) G__getstructoffset())->SetOwner();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDPIDResponse*) G__getstructoffset())->SetGainNormalisationFactor((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTRDPIDResponse*) G__getstructoffset())->SetPIDResponseObject((AliTRDPIDResponseObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTRDPIDResponse*) G__getstructoffset())->SetdEdxParams((AliTRDdEdxParams*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTRDPIDResponse*) G__getstructoffset())->GetEtaCorrMap((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTRDPIDResponse*) G__getstructoffset())->SetEtaCorrMap((Int_t) G__int(libp->para[0]), (TH2D*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTRDPIDResponse*) G__getstructoffset())->GetClusterCorrMap((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTRDPIDResponse*) G__getstructoffset())->SetClusterCorrMap((Int_t) G__int(libp->para[0]), (TH2D*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTRDPIDResponse*) G__getstructoffset())->GetCentralityCorrMap((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTRDPIDResponse*) G__getstructoffset())->SetCentralityCorrMap((Int_t) G__int(libp->para[0]), (TH2D*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDPIDResponse*) G__getstructoffset())->SetCentrality((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((AliTRDPIDResponse*) G__getstructoffset())->Load((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((AliTRDPIDResponse*) G__getstructoffset())->Load());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((const AliTRDPIDResponse*) G__getstructoffset())->IdentifiedAsElectron((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (AliTRDPIDResponse::ETRDPIDMethod) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((const AliTRDPIDResponse*) G__getstructoffset())->IdentifiedAsElectron((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((const AliTRDPIDResponse*) G__getstructoffset())->IdentifiedAsElectron((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTRDPIDResponse*) G__getstructoffset())->GetEtaCorrection((AliVTrack*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTRDPIDResponse*) G__getstructoffset())->GetClusterCorrection((AliVTrack*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTRDPIDResponse*) G__getstructoffset())->GetCentralityCorrection((AliVTrack*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDPIDResponse*) G__getstructoffset())->SetMagField((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTRDPIDResponse::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDResponse::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTRDPIDResponse::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTRDPIDResponse::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDPIDResponse*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDResponse::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDPIDResponse::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDResponse::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_607_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDPIDResponse::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTRDPIDResponse G__TAliTRDPIDResponse;
static int G__G__STEERBase_607_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTRDPIDResponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTRDPIDResponse*) (soff+(sizeof(AliTRDPIDResponse)*i)))->~G__TAliTRDPIDResponse();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTRDPIDResponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTRDPIDResponse*) (soff))->~G__TAliTRDPIDResponse();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTOFPIDParams */
static int G__G__STEERBase_614_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTOFPIDParams* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTOFPIDParams[n];
     } else {
       p = new((void*) gvp) AliTOFPIDParams[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTOFPIDParams;
     } else {
       p = new((void*) gvp) AliTOFPIDParams;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDParams));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTOFPIDParams* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTOFPIDParams((Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliTOFPIDParams((Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDParams));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFPIDParams*) G__getstructoffset())->GetTOFresolution());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTOFPIDParams*) G__getstructoffset())->GetStartTimeMethod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFPIDParams*) G__getstructoffset())->GetSigParams((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFPIDParams*) G__getstructoffset())->GetTOFtail());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFPIDParams*) G__getstructoffset())->GetTOFmatchingLossMC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFPIDParams*) G__getstructoffset())->GetTOFadditionalMismForMC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFPIDParams*) G__getstructoffset())->GetTOFtimeOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliTOFPIDParams*) G__getstructoffset())->GetOADBentryTag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDParams*) G__getstructoffset())->SetOADBentryTag((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDParams*) G__getstructoffset())->SetTOFresolution((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDParams*) G__getstructoffset())->SetStartTimeMethod((AliPIDResponse::EStartTimeType_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDParams*) G__getstructoffset())->SetSigPparams((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDParams*) G__getstructoffset())->SetTOFtail((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDParams*) G__getstructoffset())->SetTOFmatchingLossMC((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDParams*) G__getstructoffset())->SetTOFadditionalMismForMC((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDParams*) G__getstructoffset())->SetTOFtimeOffset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTOFPIDParams::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTOFPIDParams::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTOFPIDParams::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTOFPIDParams::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDParams*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTOFPIDParams::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTOFPIDParams::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTOFPIDParams::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_614_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTOFPIDParams::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_614_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliTOFPIDParams* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliTOFPIDParams(*(AliTOFPIDParams*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDParams));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTOFPIDParams G__TAliTOFPIDParams;
static int G__G__STEERBase_614_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTOFPIDParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTOFPIDParams*) (soff+(sizeof(AliTOFPIDParams)*i)))->~G__TAliTOFPIDParams();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTOFPIDParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTOFPIDParams*) (soff))->~G__TAliTOFPIDParams();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_614_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTOFPIDParams* dest = (AliTOFPIDParams*) G__getstructoffset();
   *dest = *(AliTOFPIDParams*) libp->para[0].ref;
   const AliTOFPIDParams& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTOFPIDResponse */
static int G__G__STEERBase_616_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTOFPIDResponse* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTOFPIDResponse[n];
     } else {
       p = new((void*) gvp) AliTOFPIDResponse[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTOFPIDResponse;
     } else {
       p = new((void*) gvp) AliTOFPIDResponse;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDResponse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTOFPIDResponse* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTOFPIDResponse((Double_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliTOFPIDResponse((Double_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDResponse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDResponse*) G__getstructoffset())->SetTimeResolution((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDResponse*) G__getstructoffset())->SetTimeZero((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTOFPIDResponse*) G__getstructoffset())->GetTimeZero());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFPIDResponse*) G__getstructoffset())->GetTimeResolution());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDResponse*) G__getstructoffset())->SetMaxMismatchProbability((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTOFPIDResponse*) G__getstructoffset())->GetMaxMismatchProbability());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTOFPIDResponse*) G__getstructoffset())->GetExpectedSigma((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTOFPIDResponse*) G__getstructoffset())->GetExpectedSigma((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (AliPID::EParticleType) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTOFPIDResponse*) G__getstructoffset())->GetExpectedSignal((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTOFPIDResponse*) G__getstructoffset())->GetMismatchProbability((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) AliTOFPIDResponse::GetTailRandomValue((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) AliTOFPIDResponse::GetTailRandomValue((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) AliTOFPIDResponse::GetTailRandomValue((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) AliTOFPIDResponse::GetTailRandomValue((Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) AliTOFPIDResponse::GetTailRandomValue());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliTOFPIDResponse::GetMismatchRandomValue((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDResponse*) G__getstructoffset())->SetT0event((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDResponse*) G__getstructoffset())->SetT0resolution((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDResponse*) G__getstructoffset())->ResetT0info();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDResponse*) G__getstructoffset())->SetMomBoundary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTOFPIDResponse*) G__getstructoffset())->GetMomBin((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliTOFPIDResponse*) G__getstructoffset())->GetNmomBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFPIDResponse*) G__getstructoffset())->GetMinMom((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFPIDResponse*) G__getstructoffset())->GetMaxMom((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDResponse*) G__getstructoffset())->SetT0bin((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDResponse*) G__getstructoffset())->SetT0binRes((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDResponse*) G__getstructoffset())->SetT0binMask((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFPIDResponse*) G__getstructoffset())->GetT0bin((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFPIDResponse*) G__getstructoffset())->GetT0binRes((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTOFPIDResponse*) G__getstructoffset())->GetT0binMask((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFPIDResponse*) G__getstructoffset())->GetStartTime((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTOFPIDResponse*) G__getstructoffset())->GetStartTimeRes((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTOFPIDResponse*) G__getstructoffset())->GetStartTimeMask((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDResponse*) G__getstructoffset())->SetTrackParameter((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((AliTOFPIDResponse*) G__getstructoffset())->GetTrackParameter((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTOFPIDResponse*) G__getstructoffset())->GetTOFchannel((AliVParticle*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((AliTOFPIDResponse*) G__getstructoffset())->GetTOFtail());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDResponse*) G__getstructoffset())->SetTOFtail((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDResponse*) G__getstructoffset())->SetTOFtailAllPara((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTOFPIDResponse::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTOFPIDResponse::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTOFPIDResponse::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTOFPIDResponse::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFPIDResponse*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTOFPIDResponse::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTOFPIDResponse::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTOFPIDResponse::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_616_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTOFPIDResponse::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_616_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliTOFPIDResponse* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliTOFPIDResponse(*(AliTOFPIDResponse*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDResponse));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTOFPIDResponse G__TAliTOFPIDResponse;
static int G__G__STEERBase_616_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTOFPIDResponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTOFPIDResponse*) (soff+(sizeof(AliTOFPIDResponse)*i)))->~G__TAliTOFPIDResponse();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTOFPIDResponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTOFPIDResponse*) (soff))->~G__TAliTOFPIDResponse();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_616_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTOFPIDResponse* dest = (AliTOFPIDResponse*) G__getstructoffset();
   *dest = *(AliTOFPIDResponse*) libp->para[0].ref;
   const AliTOFPIDResponse& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliHMPIDPIDResponse */
static int G__G__STEERBase_630_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliHMPIDPIDResponse* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliHMPIDPIDResponse[n];
     } else {
       p = new((void*) gvp) AliHMPIDPIDResponse[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliHMPIDPIDResponse;
     } else {
       p = new((void*) gvp) AliHMPIDPIDResponse;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliHMPIDPIDResponse* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliHMPIDPIDResponse(*(AliHMPIDPIDResponse*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliHMPIDPIDResponse(*(AliHMPIDPIDResponse*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliHMPIDPIDResponse& obj = ((AliHMPIDPIDResponse*) G__getstructoffset())->operator=(*(AliHMPIDPIDResponse*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->GetExpectedSignal((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->GetExpectedSigma((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->GetNumberOfSigmas((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliHMPIDPIDResponse*) G__getstructoffset())->GetProbability((AliVTrack*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->GetSignalDelta((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->GetSignalDelta((AliVTrack*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliHMPIDPIDResponse*) G__getstructoffset())->Propagate(*((const TVector3*) G__int(libp->para[0])), *(TVector3*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliHMPIDPIDResponse*) G__getstructoffset())->Refract(*(TVector3*) libp->para[0].ref, (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const AliHMPIDPIDResponse*) G__getstructoffset())->TracePhot((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliHMPIDPIDResponse*) G__getstructoffset())->Trs2Lors((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const AliHMPIDPIDResponse*) G__getstructoffset())->TraceForward((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TVector3*) G__int(libp->para[2])));
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHMPIDPIDResponse*) G__getstructoffset())->SetTrack((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->RadThick());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->WinThick());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->GapThick());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->GetRefIdx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->WinIdx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->GapIdx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) AliHMPIDPIDResponse::IsInside((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) AliHMPIDPIDResponse::IsInside((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) AliHMPIDPIDResponse::IsInDead((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliHMPIDPIDResponse::SizeAllX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliHMPIDPIDResponse::SizeAllY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliHMPIDPIDResponse::IdealPosition((Int_t) G__int(libp->para[0]), (TGeoHMatrix*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->SigLoc((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->SigGeom((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->SigCrom((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->Sigma2((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliHMPIDPIDResponse*) G__getstructoffset())->GetNMean((AliVTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliHMPIDPIDResponse::SigmaCorrFact((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHMPIDPIDResponse*) G__getstructoffset())->SetRefIndexArray((TObjArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliHMPIDPIDResponse*) G__getstructoffset())->GetRefIndexArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliHMPIDPIDResponse::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliHMPIDPIDResponse::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliHMPIDPIDResponse::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliHMPIDPIDResponse::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHMPIDPIDResponse*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliHMPIDPIDResponse::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliHMPIDPIDResponse::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliHMPIDPIDResponse::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_630_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliHMPIDPIDResponse::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliHMPIDPIDResponse G__TAliHMPIDPIDResponse;
static int G__G__STEERBase_630_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliHMPIDPIDResponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliHMPIDPIDResponse*) (soff+(sizeof(AliHMPIDPIDResponse)*i)))->~G__TAliHMPIDPIDResponse();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliHMPIDPIDResponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliHMPIDPIDResponse*) (soff))->~G__TAliHMPIDPIDResponse();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliEMCALPIDResponse */
static int G__G__STEERBase_634_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliEMCALPIDResponse* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliEMCALPIDResponse[n];
     } else {
       p = new((void*) gvp) AliEMCALPIDResponse[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliEMCALPIDResponse;
     } else {
       p = new((void*) gvp) AliEMCALPIDResponse;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliEMCALPIDResponse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliEMCALPIDResponse* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliEMCALPIDResponse(*(AliEMCALPIDResponse*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliEMCALPIDResponse(*(AliEMCALPIDResponse*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliEMCALPIDResponse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliEMCALPIDResponse& obj = ((AliEMCALPIDResponse*) G__getstructoffset())->operator=(*(AliEMCALPIDResponse*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliEMCALPIDResponse*) G__getstructoffset())->GetNumberOfSigmas((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (AliPID::EParticleType) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliEMCALPIDResponse*) G__getstructoffset())->GetExpectedNorm((Float_t) G__double(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEMCALPIDResponse*) G__getstructoffset())->SetPIDParams((TObjArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEMCALPIDResponse*) G__getstructoffset())->SetCentrality((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliEMCALPIDResponse*) G__getstructoffset())->ComputeEMCALProbability((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliEMCALPIDResponse::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliEMCALPIDResponse::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliEMCALPIDResponse::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliEMCALPIDResponse::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEMCALPIDResponse*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliEMCALPIDResponse::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliEMCALPIDResponse::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliEMCALPIDResponse::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_634_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliEMCALPIDResponse::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliEMCALPIDResponse G__TAliEMCALPIDResponse;
static int G__G__STEERBase_634_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliEMCALPIDResponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliEMCALPIDResponse*) (soff+(sizeof(AliEMCALPIDResponse)*i)))->~G__TAliEMCALPIDResponse();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliEMCALPIDResponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliEMCALPIDResponse*) (soff))->~G__TAliEMCALPIDResponse();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliMCEvent */
static int G__G__STEERBase_636_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMCEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMCEvent[n];
     } else {
       p = new((void*) gvp) AliMCEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMCEvent;
     } else {
       p = new((void*) gvp) AliMCEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMCEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliMCEvent(*(AliMCEvent*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliMCEvent(*(AliMCEvent*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliMCEvent& obj = ((AliMCEvent*) G__getstructoffset())->operator=(*(AliMCEvent*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEvent*) G__getstructoffset())->PreReadAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliMCEvent*) G__getstructoffset())->Stack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliMCEvent*) G__getstructoffset())->Header());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMCEvent*) G__getstructoffset())->GenEventHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEvent*) G__getstructoffset())->ConnectTreeE((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEvent*) G__getstructoffset())->ConnectTreeK((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEvent*) G__getstructoffset())->ConnectHeaderAndStack((AliHeader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEvent*) G__getstructoffset())->ConnectTreeTR((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEvent*) G__getstructoffset())->Clean();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEvent*) G__getstructoffset())->InitEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEvent*) G__getstructoffset())->FinishEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliMCEvent*) G__getstructoffset())->GetParticleAndTR((Int_t) G__int(libp->para[0]), libp->para[1].ref ? *(TParticle**) libp->para[1].ref : *(TParticle**) (void*) (&G__Mlong(libp->para[1]))
, libp->para[2].ref ? *(TClonesArray**) libp->para[2].ref : *(TClonesArray**) (void*) (&G__Mlong(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEvent*) G__getstructoffset())->DrawCheck((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEvent*) G__getstructoffset())->AddSubsidiaryEvent((AliMCEvent*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliMCEvent*) G__getstructoffset())->GetNumberOfPrimaries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMCEvent*) G__getstructoffset())->GetPrimaryOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMCEvent*) G__getstructoffset())->GetSecondaryOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEvent*) G__getstructoffset())->SetPrimaryOffset((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEvent*) G__getstructoffset())->SetSecondaryOffset((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliMCEvent*) G__getstructoffset())->IsPhysicalPrimary((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliMCEvent*) G__getstructoffset())->BgLabelToIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMCEvent::BgLabelOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliMCEvent*) G__getstructoffset())->IsFromBGEvent((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliMCEvent*) G__getstructoffset())->GetCocktailList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((AliMCEvent*) G__getstructoffset())->GetGenerator((Int_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliMCEvent*) G__getstructoffset())->GetCocktailGenerator((Int_t) G__int(libp->para[0]), *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliMCEvent*) G__getstructoffset())->IsSecondaryFromWeakDecay((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliMCEvent*) G__getstructoffset())->IsSecondaryFromMaterial((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEvent*) G__getstructoffset())->SetParticleArray((TClonesArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEvent*) G__getstructoffset())->SetExternalHeader((AliVHeader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliMCEvent*) G__getstructoffset())->FindHeader((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMCEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMCEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliMCEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMCEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMCEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMCEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMCEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_636_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMCEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliMCEvent G__TAliMCEvent;
static int G__G__STEERBase_636_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliMCEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliMCEvent*) (soff+(sizeof(AliMCEvent)*i)))->~G__TAliMCEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliMCEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliMCEvent*) (soff))->~G__TAliMCEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliHMPIDPIDParams */
static int G__G__STEERBase_637_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliHMPIDPIDParams* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliHMPIDPIDParams[n];
     } else {
       p = new((void*) gvp) AliHMPIDPIDParams[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliHMPIDPIDParams;
     } else {
       p = new((void*) gvp) AliHMPIDPIDParams;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDParams));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_637_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliHMPIDPIDParams* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliHMPIDPIDParams((Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliHMPIDPIDParams((Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDParams));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_637_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliHMPIDPIDParams& obj = ((AliHMPIDPIDParams*) G__getstructoffset())->operator=(*(AliHMPIDPIDParams*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_637_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliHMPIDPIDParams* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliHMPIDPIDParams(*(AliHMPIDPIDParams*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliHMPIDPIDParams(*(AliHMPIDPIDParams*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDParams));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_637_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliHMPIDPIDParams*) G__getstructoffset())->GetHMPIDrefIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_637_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHMPIDPIDParams*) G__getstructoffset())->SetHMPIDrefIndex((TObjArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_637_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliHMPIDPIDParams::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_637_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliHMPIDPIDParams::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_637_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliHMPIDPIDParams::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_637_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliHMPIDPIDParams::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_637_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHMPIDPIDParams*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_637_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliHMPIDPIDParams::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_637_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliHMPIDPIDParams::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_637_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliHMPIDPIDParams::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_637_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliHMPIDPIDParams::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliHMPIDPIDParams G__TAliHMPIDPIDParams;
static int G__G__STEERBase_637_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliHMPIDPIDParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliHMPIDPIDParams*) (soff+(sizeof(AliHMPIDPIDParams)*i)))->~G__TAliHMPIDPIDParams();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliHMPIDPIDParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliHMPIDPIDParams*) (soff))->~G__TAliHMPIDPIDParams();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliPIDResponse */
static int G__G__STEERBase_638_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliPIDResponse* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliPIDResponse((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliPIDResponse((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliPIDResponse[n];
       } else {
         p = new((void*) gvp) AliPIDResponse[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliPIDResponse;
       } else {
         p = new((void*) gvp) AliPIDResponse;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliITSPIDResponse& obj = ((AliPIDResponse*) G__getstructoffset())->GetITSResponse();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTPCPIDResponse& obj = ((AliPIDResponse*) G__getstructoffset())->GetTPCResponse();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTOFPIDResponse& obj = ((AliPIDResponse*) G__getstructoffset())->GetTOFResponse();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTRDPIDResponse& obj = ((AliPIDResponse*) G__getstructoffset())->GetTRDResponse();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliEMCALPIDResponse& obj = ((AliPIDResponse*) G__getstructoffset())->GetEMCALResponse();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->NumberOfSigmas((AliPIDResponse::EDetector) G__int(libp->para[0]), (AliVParticle*) G__int(libp->para[1])
, (AliPID::EParticleType) G__int(libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->NumberOfSigmas((AliPIDResponse::EDetector) G__int(libp->para[0]), (AliVParticle*) G__int(libp->para[1])
, (AliPID::EParticleType) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->NumberOfSigmasITS((AliVParticle*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->NumberOfSigmasTPC((AliVParticle*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->NumberOfSigmasTPC((AliVParticle*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (AliTPCPIDResponse::ETPCdEdxSource) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->NumberOfSigmasTRD((AliVParticle*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->NumberOfSigmasEMCAL((AliVParticle*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), (Double_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->NumberOfSigmasTOF((AliVParticle*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->NumberOfSigmasTOF((AliVParticle*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->NumberOfSigmasHMPID((AliVParticle*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->NumberOfSigmasEMCAL((AliVParticle*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((const AliPIDResponse*) G__getstructoffset())->IdentifiedAsElectronTRD((AliVTrack*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (AliTRDPIDResponse::ETRDPIDMethod) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((const AliPIDResponse*) G__getstructoffset())->IdentifiedAsElectronTRD((AliVTrack*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((const AliPIDResponse*) G__getstructoffset())->IdentifiedAsElectronTRD((AliVTrack*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((const AliPIDResponse*) G__getstructoffset())->IdentifiedAsElectronTRD((AliVTrack*) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (AliTRDPIDResponse::ETRDPIDMethod) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((const AliPIDResponse*) G__getstructoffset())->IdentifiedAsElectronTRD((AliVTrack*) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((const AliPIDResponse*) G__getstructoffset())->IdentifiedAsElectronTRD((AliVTrack*) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->GetSignalDelta((AliPIDResponse::EDetector) G__int(libp->para[0]), (AliVParticle*) G__int(libp->para[1])
, (AliPID::EParticleType) G__int(libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->GetSignalDelta((AliPIDResponse::EDetector) G__int(libp->para[0]), (AliVParticle*) G__int(libp->para[1])
, (AliPID::EParticleType) G__int(libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((const AliPIDResponse*) G__getstructoffset())->GetSignalDelta((AliPIDResponse::EDetector) G__int(libp->para[0]), (AliVParticle*) G__int(libp->para[1])
, (AliPID::EParticleType) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((const AliPIDResponse*) G__getstructoffset())->GetSignalDelta((AliPIDResponse::EDetector) G__int(libp->para[0]), (AliVParticle*) G__int(libp->para[1])
, (AliPID::EParticleType) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->ComputePIDProbability((AliPIDResponse::EDetCode) G__int(libp->para[0]), (AliVTrack*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->ComputePIDProbability((AliPIDResponse::EDetector) G__int(libp->para[0]), (AliVTrack*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->ComputeITSProbability((AliVTrack*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->ComputeTPCProbability((AliVTrack*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->ComputeTOFProbability((AliVTrack*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->ComputeTRDProbability((AliVTrack*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->ComputeEMCALProbability((AliVTrack*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->ComputePHOSProbability((AliVTrack*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->ComputeHMPIDProbability((AliVTrack*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->ComputeTRDProbability((AliVTrack*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (AliTRDPIDResponse::ETRDPIDMethod) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->CheckPIDStatus((AliPIDResponse::EDetector) G__int(libp->para[0]), (AliVTrack*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliPIDResponse*) G__getstructoffset())->GetTOFPIDParams());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->GetTOFMismatchProbability((AliVTrack*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->GetTOFMismatchProbability());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetITSPIDmethod((AliPIDResponse::ITSPIDmethod) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetOADBPath((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliPIDResponse*) G__getstructoffset())->GetOADBPath());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetCustomTPCpidResponse((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliPIDResponse*) G__getstructoffset())->GetCustomTPCpidResponse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetCustomTPCpidResponseOADBFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliPIDResponse*) G__getstructoffset())->GetCustomTPCpidResponseOADBFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetCustomTPCetaMaps((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliPIDResponse*) G__getstructoffset())->GetCustomTPCetaMaps());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((AliPIDResponse*) G__getstructoffset())->InitialiseEvent((AliVEvent*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((AliPIDResponse*) G__getstructoffset())->InitialiseEvent((AliVEvent*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   case 2:
      ((AliPIDResponse*) G__getstructoffset())->InitialiseEvent((AliVEvent*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetCurrentFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetCurrentAliRootRev((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->GetCurrentAliRootRev());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetCachePID((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliPIDResponse*) G__getstructoffset())->GetCachePID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliPIDResponse*) G__getstructoffset())->FillTrackDetectorPID((AliVTrack*) G__int(libp->para[0]), (AliPIDResponse::EDetector) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->FillTrackDetectorPID();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliPIDResponse*) G__getstructoffset())->GetCurrentEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliPIDResponse*) G__getstructoffset())->GetCurrentMCEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetCurrentMCEvent((AliMCEvent*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetMCperiod((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetRecoPass((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetRecoPassName((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->GetCurrentCentrality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetCurrentCentrality((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliPIDResponse*) G__getstructoffset())->SetUseTPCEtaCorrection((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliPIDResponse*) G__getstructoffset())->SetUseTPCEtaCorrection();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliPIDResponse*) G__getstructoffset())->UseTPCEtaCorrection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliPIDResponse*) G__getstructoffset())->SetUseTPCMultiplicityCorrection((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliPIDResponse*) G__getstructoffset())->SetUseTPCMultiplicityCorrection();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliPIDResponse*) G__getstructoffset())->UseTPCMultiplicityCorrection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliPIDResponse*) G__getstructoffset())->SetUseTRDEtaCorrection((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliPIDResponse*) G__getstructoffset())->SetUseTRDEtaCorrection();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliPIDResponse*) G__getstructoffset())->UseTRDEtaCorrection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliPIDResponse*) G__getstructoffset())->SetUseTRDClusterCorrection((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliPIDResponse*) G__getstructoffset())->SetUseTRDClusterCorrection();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliPIDResponse*) G__getstructoffset())->UseTRDClusterCorrection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliPIDResponse*) G__getstructoffset())->SetUseTRDCentralityCorrection((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliPIDResponse*) G__getstructoffset())->SetUseTRDCentralityCorrection();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliPIDResponse*) G__getstructoffset())->UseTRDCentralityCorrection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliPIDResponse*) G__getstructoffset())->SetTOFtail((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliPIDResponse*) G__getstructoffset())->SetTOFtail();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetTOFResponse((AliVEvent*) G__int(libp->para[0]), (AliPIDResponse::EStartTimeType_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->GetITSsignalTunedOnData((AliVTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->GetTPCsignalTunedOnData((AliVTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->GetTOFsignalTunedOnData((AliVTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliPIDResponse*) G__getstructoffset())->IsTunedOnData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((AliPIDResponse*) G__getstructoffset())->SetTunedOnData((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   case 2:
      ((AliPIDResponse*) G__getstructoffset())->SetTunedOnData((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliPIDResponse*) G__getstructoffset())->SetTunedOnData((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliPIDResponse*) G__getstructoffset())->SetTunedOnData();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->GetTunedOnDataMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetTunedOnDataMask((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliPIDResponse* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliPIDResponse(*(AliPIDResponse*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliPIDResponse(*(AliPIDResponse*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliPIDResponse& obj = ((AliPIDResponse*) G__getstructoffset())->operator=(*(AliPIDResponse*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDResponse*) G__getstructoffset())->GetBeamType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliPIDResponse*) G__getstructoffset())->SetNoTOFmism((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliPIDResponse*) G__getstructoffset())->SetNoTOFmism();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->SetProbabilityRangeNsigma((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliPIDResponse*) G__getstructoffset())->GetProbabilityRangeNsigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliPIDResponse::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPIDResponse::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliPIDResponse::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliPIDResponse::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_148(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDResponse*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPIDResponse::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliPIDResponse::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPIDResponse::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_638_0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliPIDResponse::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliPIDResponse G__TAliPIDResponse;
static int G__G__STEERBase_638_0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliPIDResponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliPIDResponse*) (soff+(sizeof(AliPIDResponse)*i)))->~G__TAliPIDResponse();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliPIDResponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliPIDResponse*) (soff))->~G__TAliPIDResponse();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliDetectorTag */
static int G__G__STEERBase_645_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliDetectorTag* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliDetectorTag[n];
     } else {
       p = new((void*) gvp) AliDetectorTag[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliDetectorTag;
     } else {
       p = new((void*) gvp) AliDetectorTag;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliDetectorTag* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliDetectorTag(*(AliDetectorTag*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliDetectorTag(*(AliDetectorTag*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliDetectorTag& obj = ((AliDetectorTag*) G__getstructoffset())->operator=(*(AliDetectorTag*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorTag*) G__getstructoffset())->UpdateFromRunTable(*(AliDetectorTag*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorTag*) G__getstructoffset())->SetDetectorMask((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorTag*) G__getstructoffset())->SetDetectorMaskDAQ((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorTag*) G__getstructoffset())->SetDetectorMaskReco((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorTag*) G__getstructoffset())->SetDetectorValidityRange((UChar_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorTag*) G__getstructoffset())->SetDetectorStatus((UChar_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliDetectorTag*) G__getstructoffset())->GetDetectorMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((AliDetectorTag*) G__getstructoffset())->GetIntDetectorMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((AliDetectorTag*) G__getstructoffset())->GetIntDetectorMaskDAQ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((AliDetectorTag*) G__getstructoffset())->GetIntDetectorMaskReco());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliDetectorTag*) G__getstructoffset())->GetDetectorValidityRange((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliDetectorTag*) G__getstructoffset())->GetDetectorStatus((UChar_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((AliDetectorTag*) G__getstructoffset())->GetDetectorMaskDAQ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((AliDetectorTag*) G__getstructoffset())->GetDetectorMaskReco());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorTag*) G__getstructoffset())->PrintDetectorMask();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTag*) G__getstructoffset())->GetITSSPD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTag*) G__getstructoffset())->GetITSSDD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTag*) G__getstructoffset())->GetITSSSD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTag*) G__getstructoffset())->GetTPC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTag*) G__getstructoffset())->GetTRD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTag*) G__getstructoffset())->GetTOF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTag*) G__getstructoffset())->GetHMPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTag*) G__getstructoffset())->GetPHOS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTag*) G__getstructoffset())->GetPMD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTag*) G__getstructoffset())->GetMUON());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTag*) G__getstructoffset())->GetFMD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTag*) G__getstructoffset())->GetTZERO());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTag*) G__getstructoffset())->GetVZERO());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTag*) G__getstructoffset())->GetZDC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTag*) G__getstructoffset())->GetEMCAL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliDetectorTag::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDetectorTag::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliDetectorTag::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliDetectorTag::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorTag*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDetectorTag::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDetectorTag::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDetectorTag::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_645_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDetectorTag::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliDetectorTag G__TAliDetectorTag;
static int G__G__STEERBase_645_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliDetectorTag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliDetectorTag*) (soff+(sizeof(AliDetectorTag)*i)))->~G__TAliDetectorTag();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliDetectorTag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliDetectorTag*) (soff))->~G__TAliDetectorTag();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliDetectorTagCuts */
static int G__G__STEERBase_646_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliDetectorTagCuts* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliDetectorTagCuts[n];
     } else {
       p = new((void*) gvp) AliDetectorTagCuts[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliDetectorTagCuts;
     } else {
       p = new((void*) gvp) AliDetectorTagCuts;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTagCuts));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_646_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorTagCuts*) G__getstructoffset())->SetListOfDetectors(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_646_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorTagCuts*) G__getstructoffset())->SetListOfDetectorsDAQ(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_646_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorTagCuts*) G__getstructoffset())->SetListOfDetectorsReco(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_646_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorTagCuts*) G__getstructoffset())->SetDetectorValidityValue(*((TString*) G__int(libp->para[0])), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_646_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliDetectorTagCuts*) G__getstructoffset())->IsAccepted((AliDetectorTag*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_646_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliDetectorTagCuts::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_646_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDetectorTagCuts::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_646_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliDetectorTagCuts::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_646_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliDetectorTagCuts::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_646_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDetectorTagCuts*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_646_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDetectorTagCuts::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_646_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDetectorTagCuts::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_646_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDetectorTagCuts::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_646_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDetectorTagCuts::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_646_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliDetectorTagCuts* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliDetectorTagCuts(*(AliDetectorTagCuts*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTagCuts));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliDetectorTagCuts G__TAliDetectorTagCuts;
static int G__G__STEERBase_646_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliDetectorTagCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliDetectorTagCuts*) (soff+(sizeof(AliDetectorTagCuts)*i)))->~G__TAliDetectorTagCuts();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliDetectorTagCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliDetectorTagCuts*) (soff))->~G__TAliDetectorTagCuts();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_646_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliDetectorTagCuts* dest = (AliDetectorTagCuts*) G__getstructoffset();
   *dest = *(AliDetectorTagCuts*) libp->para[0].ref;
   const AliDetectorTagCuts& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVfriendEvent */
static int G__G__STEERBase_648_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVfriendEvent*) G__getstructoffset())->Reinitialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVfriendEvent*) G__getstructoffset())->GetNumberOfTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVfriendEvent*) G__getstructoffset())->GetTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVfriendEvent*) G__getstructoffset())->GetEntriesInTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliVfriendEvent*) G__getstructoffset())->GetVVZEROfriend());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVfriendEvent*) G__getstructoffset())->GetESDVZEROfriend(*(AliESDVZEROfriend*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVfriendEvent*) G__getstructoffset())->Ls();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVfriendEvent*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVfriendEvent*) G__getstructoffset())->SetSkipBit((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVfriendEvent*) G__getstructoffset())->TestSkipBit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVfriendEvent*) G__getstructoffset())->GetNclustersTPC((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVfriendEvent*) G__getstructoffset())->GetNclustersTPCused((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliVfriendEvent*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVfriendEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVfriendEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVfriendEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVfriendEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVfriendEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVfriendEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVfriendEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVfriendEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_648_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVfriendEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVfriendEvent G__TAliVfriendEvent;
static int G__G__STEERBase_648_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVfriendEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVfriendEvent*) (soff+(sizeof(AliVfriendEvent)*i)))->~G__TAliVfriendEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVfriendEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVfriendEvent*) (soff))->~G__TAliVfriendEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVEventHandler */
static int G__G__STEERBase_649_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEventHandler*) G__getstructoffset())->GetTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliVEventHandler*) G__getstructoffset())->GetDataType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVEventHandler*) G__getstructoffset())->GetFillAOD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVEventHandler*) G__getstructoffset())->GetFillExtension());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEventHandler*) G__getstructoffset())->SetFillAOD((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEventHandler*) G__getstructoffset())->SetFillExtension((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEventHandler*) G__getstructoffset())->SetInputFileName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliVEventHandler*) G__getstructoffset())->GetInputFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEventHandler*) G__getstructoffset())->SetOutputFileName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliVEventHandler*) G__getstructoffset())->GetOutputFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 67, (long) ((const AliVEventHandler*) G__getstructoffset())->GetExtraOutputs((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((const AliVEventHandler*) G__getstructoffset())->GetExtraOutputs());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEventHandler*) G__getstructoffset())->SetInputTree((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVEventHandler*) G__getstructoffset())->Init((Option_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVEventHandler*) G__getstructoffset())->Init((TTree*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVEventHandler*) G__getstructoffset())->BeginEvent((Long64_t) G__Longlong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVEventHandler*) G__getstructoffset())->GetEntry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVEventHandler*) G__getstructoffset())->Notify((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVEventHandler*) G__getstructoffset())->FinishEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVEventHandler*) G__getstructoffset())->Terminate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVEventHandler*) G__getstructoffset())->TerminateIO());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVEventHandler*) G__getstructoffset())->IsLocked());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEventHandler*) G__getstructoffset())->Lock();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEventHandler*) G__getstructoffset())->UnLock();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEventHandler*) G__getstructoffset())->Changed();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEventHandler*) G__getstructoffset())->SetCacheSize((Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEventHandler*) G__getstructoffset())->GetUserInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVEventHandler*) G__getstructoffset())->InitTaskInputData((AliVEvent*) G__int(libp->para[0]), (AliVfriendEvent*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEventHandler*) G__getstructoffset())->GetEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVEventHandler*) G__getstructoffset())->GetVfriendEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVEventHandler::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVEventHandler::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVEventHandler::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVEventHandler::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEventHandler*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVEventHandler::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVEventHandler::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVEventHandler::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_649_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVEventHandler::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVEventHandler G__TAliVEventHandler;
static int G__G__STEERBase_649_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVEventHandler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVEventHandler*) (soff+(sizeof(AliVEventHandler)*i)))->~G__TAliVEventHandler();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVEventHandler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVEventHandler*) (soff))->~G__TAliVEventHandler();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_649_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVEventHandler* dest = (AliVEventHandler*) G__getstructoffset();
   *dest = *(AliVEventHandler*) libp->para[0].ref;
   const AliVEventHandler& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVCuts */
static int G__G__STEERBase_683_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVCuts& obj = ((AliVCuts*) G__getstructoffset())->operator=(*(AliVCuts*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_683_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVCuts*) G__getstructoffset())->IsSelected((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_683_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((AliVCuts*) G__getstructoffset())->GetSelectionMask((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_683_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVCuts*) G__getstructoffset())->GetStatistics((Option_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_683_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVCuts::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_683_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVCuts::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_683_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVCuts::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_683_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVCuts::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_683_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCuts*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_683_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVCuts::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_683_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVCuts::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_683_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVCuts::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_683_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVCuts::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVCuts G__TAliVCuts;
static int G__G__STEERBase_683_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVCuts*) (soff+(sizeof(AliVCuts)*i)))->~G__TAliVCuts();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVCuts*) (soff))->~G__TAliVCuts();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliRunTag */
static int G__G__STEERBase_684_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliRunTag* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliRunTag[n];
     } else {
       p = new((void*) gvp) AliRunTag[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliRunTag;
     } else {
       p = new((void*) gvp) AliRunTag;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliRunTag* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliRunTag(*(AliRunTag*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliRunTag(*(AliRunTag*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliRunTag& obj = ((AliRunTag*) G__getstructoffset())->operator=(*(AliRunTag*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliRunTag*) G__getstructoffset())->Add((AliRunTag*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetRunId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetMagneticField((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetDipoleField((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetRunStartTime((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetRunStopTime((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetAlirootVersion(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetRootVersion(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetGeant3Version(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetLHCPeriod(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetReconstructionPass(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetProductionName(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetRunValidation((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetRunQuality((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetBeamEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetBeamType(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetCalibVersion((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetDataType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetBeamTriggers((ULong_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetCollisionTriggers((ULong_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetEmptyTriggers((ULong_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetASideTriggers((ULong_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetCSideTriggers((ULong_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetHMTriggers((ULong_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetMuonTriggers((ULong_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetCollisionRate((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetMeanVertex((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetVertexQuality((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetLHCTag((Float_t) G__double(libp->para[0]), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliRunTag*) G__getstructoffset())->SetDetectorTag((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliRunTag*) G__getstructoffset())->SetDetectorTag((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetQA(*(AliQA*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetQAArray((ULong_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetEventSpecies((Bool_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->AddEventTag(*(AliEventTag*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->AddFileTag((AliFileTag*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->SetActiveTriggerClasses(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->CopyStandardContent((AliRunTag*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->UpdateFromRunTable((AliRunTag*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRunTag*) G__getstructoffset())->GetRunId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliRunTag*) G__getstructoffset())->GetMagneticField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliRunTag*) G__getstructoffset())->GetDipoleField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRunTag*) G__getstructoffset())->GetRunStartTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRunTag*) G__getstructoffset())->GetRunStopTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliRunTag*) G__getstructoffset())->GetAlirootVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliRunTag*) G__getstructoffset())->GetRootVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliRunTag*) G__getstructoffset())->GetGeant3Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliRunTag*) G__getstructoffset())->GetLHCPeriod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliRunTag*) G__getstructoffset())->GetReconstructionPass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliRunTag*) G__getstructoffset())->GetProductionName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliRunTag*) G__getstructoffset())->GetRunValidation());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRunTag*) G__getstructoffset())->GetRunQuality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliRunTag*) G__getstructoffset())->GetBeamEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliRunTag*) G__getstructoffset())->GetBeamType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRunTag*) G__getstructoffset())->GetCalibVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRunTag*) G__getstructoffset())->GetDataType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRunTag*) G__getstructoffset())->GetNEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const AliRunTag*) G__getstructoffset())->GetBeamTriggers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const AliRunTag*) G__getstructoffset())->GetCollisionTriggers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const AliRunTag*) G__getstructoffset())->GetEmptyTriggers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const AliRunTag*) G__getstructoffset())->GetASideTriggers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const AliRunTag*) G__getstructoffset())->GetCSideTriggers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const AliRunTag*) G__getstructoffset())->GetHMTriggers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const AliRunTag*) G__getstructoffset())->GetMuonTriggers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliRunTag*) G__getstructoffset())->GetCollisionRate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliRunTag*) G__getstructoffset())->GetMeanVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliRunTag*) G__getstructoffset())->GetVertexQuality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliRunTag*) G__getstructoffset())->GetLHCTag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliRunTag*) G__getstructoffset())->GetDetectorTags());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliRunTag*) G__getstructoffset())->GetEventTag((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliRunTag*) G__getstructoffset())->GetFileTagForEvent((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRunTag*) G__getstructoffset())->GetNFiles());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliRunTag*) G__getstructoffset())->GetFileTag((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliRunTag*) G__getstructoffset())->GetQA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 75, (long) ((const AliRunTag*) G__getstructoffset())->GetQAArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRunTag*) G__getstructoffset())->GetQALength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 71, (long) ((const AliRunTag*) G__getstructoffset())->GetEventSpecies());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRunTag*) G__getstructoffset())->GetESLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliRunTag*) G__getstructoffset())->GetFileId((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRunTag*) G__getstructoffset())->GetNumFiles());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliRunTag*) G__getstructoffset())->GetActiveTriggerClasses();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliRunTag::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliRunTag::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliRunTag::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliRunTag::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTag*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliRunTag::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliRunTag::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliRunTag::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_684_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliRunTag::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliRunTag G__TAliRunTag;
static int G__G__STEERBase_684_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliRunTag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliRunTag*) (soff+(sizeof(AliRunTag)*i)))->~G__TAliRunTag();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliRunTag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliRunTag*) (soff))->~G__TAliRunTag();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliEventTag */
static int G__G__STEERBase_685_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliEventTag* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliEventTag[n];
     } else {
       p = new((void*) gvp) AliEventTag[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliEventTag;
     } else {
       p = new((void*) gvp) AliEventTag;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliEventTag* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliEventTag(*(AliEventTag*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliEventTag(*(AliEventTag*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliEventTag& obj = ((AliEventTag*) G__getstructoffset())->operator=(*(AliEventTag*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetPeriodNumber((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetOrbitNumber((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetBunchCrossNumber((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetEventType((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetPhysicsFlag((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetBackgroungFlag((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfParticipants((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfParticipants2((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetImpactParameter((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetVertexX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetVertexY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetVertexZ((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetVertexFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetVertexZError((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetTriggerMask((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetTriggerMaskNext50((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetTriggerCluster((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetZDCNeutron1Energy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetZDCProton1Energy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetZDCNeutron2Energy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetZDCProton2Energy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetZDCEMEnergy((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetT0VertexZ((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfTracks((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfPosTracks((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfNegTracks((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfNeutrTracks((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfV0s((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfCascades((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfKinks((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfPMDTracks((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfFMDTracks((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfPHOSClusters((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfEMCALClusters((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfJetCandidates((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfHardPhotonsCandidates((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetMaxJetEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetMaxNeutralEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfChargedAbove1GeV((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfChargedAbove3GeV((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfChargedAbove10GeV((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfMuonsAbove1GeV((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfMuonsAbove3GeV((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfMuonsAbove10GeV((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfElectronsAbove1GeV((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfElectronsAbove3GeV((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfElectronsAbove10GeV((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfElectrons((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfFWMuons((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfFWMatchedMuons((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfMuons((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfPions((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfKaons((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfProtons((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfLambdas((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfPhotons((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfPi0s((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfNeutrons((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumOfKaon0s((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetTotalMomentum((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetMeanPt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetMaxPt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetEtaMaxPt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetPhiMaxPt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNeutralTotalMomentum((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNeutralMeanPt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNeutralMaxPt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetEventPlaneAngle((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetHBTRadii((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumberOfFiredChipsLayer1((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumberOfFiredChipsLayer2((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNumberOfSPDTracklets((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetMTotV0A((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetMTotV0C((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNbPMV0A((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetNbPMV0C((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->SetEventId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliEventTag*) G__getstructoffset())->GetPeriodNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliEventTag*) G__getstructoffset())->GetOrbitNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliEventTag*) G__getstructoffset())->GetBunchCrossNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliEventTag*) G__getstructoffset())->GetFiredTriggerClasses(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliEventTag*) G__getstructoffset())->GetEventType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliEventTag*) G__getstructoffset())->GetPhysicsFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliEventTag*) G__getstructoffset())->GetBackgroundFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfParticipants());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfParticipants2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetImpactParameter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetVertexX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetVertexY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetVertexZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetVertexFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetVertexZError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliEventTag*) G__getstructoffset())->GetTriggerMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliEventTag*) G__getstructoffset())->GetTriggerMaskNext50());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliEventTag*) G__getstructoffset())->GetTriggerCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetZDCNeutron1Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetZDCProton1Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetZDCNeutron2Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetZDCProton2Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetZDCEMEnergy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetT0VertexZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfPosTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfNegTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfNeutrTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfV0s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfCascades());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfKinks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfPMDTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfFMDTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfPHOSClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfEMCALClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfJetCandidates());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfHardPhotonsCandidates());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetMaxJetEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetMaxNeutralEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfChargedAbove1GeV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfChargedAbove3GeV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfChargedAbove10GeV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfMuonsAbove1GeV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfMuonsAbove3GeV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfMuonsAbove10GeV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfElectronsAbove1GeV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfElectronsAbove3GeV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfElectronsAbove10GeV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfElectrons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfFWMuons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfFWMatchedMuons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfMuons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_133(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfPions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfKaons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfProtons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfLambdas());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfPhotons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfPi0s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfNeutrons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumOfKaon0s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetTotalMomentum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetMeanPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetMaxPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetEtaMaxPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetPhiMaxPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_146(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetNeutralTotalMomentum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_147(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetNeutralMeanPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_148(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetNeutralMaxPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetEventPlaneAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetHBTRadii());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumberOfFiredChipsLayer1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumberOfFiredChipsLayer2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliEventTag*) G__getstructoffset())->GetNumberOfSPDTracklets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_154(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetMTotV0A());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_155(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliEventTag*) G__getstructoffset())->GetMTotV0C());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_156(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliEventTag*) G__getstructoffset())->GetNbPMV0A());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_157(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliEventTag*) G__getstructoffset())->GetNbPMV0C());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_158(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliEventTag::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_159(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliEventTag::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_160(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliEventTag::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_161(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliEventTag::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_165(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTag*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_166(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliEventTag::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_167(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliEventTag::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_168(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliEventTag::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_685_0_169(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliEventTag::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliEventTag G__TAliEventTag;
static int G__G__STEERBase_685_0_170(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliEventTag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliEventTag*) (soff+(sizeof(AliEventTag)*i)))->~G__TAliEventTag();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliEventTag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliEventTag*) (soff))->~G__TAliEventTag();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliInputEventHandler */
static int G__G__STEERBase_686_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliInputEventHandler* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliInputEventHandler[n];
     } else {
       p = new((void*) gvp) AliInputEventHandler[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliInputEventHandler;
     } else {
       p = new((void*) gvp) AliInputEventHandler;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliInputEventHandler* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliInputEventHandler((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) AliInputEventHandler((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliInputEventHandler*) G__getstructoffset())->NeedField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliInputEventHandler*) G__getstructoffset())->SetEventSelection((AliVCuts*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliInputEventHandler*) G__getstructoffset())->SetUserCallSelectionMask((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliInputEventHandler*) G__getstructoffset())->SetUserCallSelectionMask();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliInputEventHandler*) G__getstructoffset())->SetCheckStatistics((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliInputEventHandler*) G__getstructoffset())->SetCheckStatistics();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliInputEventHandler*) G__getstructoffset())->SetNeedField((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliInputEventHandler*) G__getstructoffset())->SetNeedField();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliInputEventHandler*) G__getstructoffset())->SetInactiveBranches((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliInputEventHandler*) G__getstructoffset())->SetActiveBranches((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliInputEventHandler*) G__getstructoffset())->GetEventTag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliInputEventHandler*) G__getstructoffset())->GetRunTag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const AliInputEventHandler*) G__getstructoffset())->GetStatistics((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const AliInputEventHandler*) G__getstructoffset())->GetStatistics());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliInputEventHandler*) G__getstructoffset())->GetAnalysisType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliInputEventHandler*) G__getstructoffset())->GetEventSelection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const AliInputEventHandler*) G__getstructoffset())->GetReadEntry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliInputEventHandler*) G__getstructoffset())->IsCheckStatistics());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliInputEventHandler*) G__getstructoffset())->IsUserCallSelectionMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliInputEventHandler*) G__getstructoffset())->NewEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((AliInputEventHandler*) G__getstructoffset())->IsEventSelected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliInputEventHandler*) G__getstructoffset())->MCEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliInputEventHandler*) G__getstructoffset())->SetMixingHandler((AliInputEventHandler*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliInputEventHandler*) G__getstructoffset())->MixingHandler());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliInputEventHandler*) G__getstructoffset())->SetParentHandler((AliInputEventHandler*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliInputEventHandler*) G__getstructoffset())->ParentHandler());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliInputEventHandler*) G__getstructoffset())->GetPIDResponse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliInputEventHandler*) G__getstructoffset())->CreatePIDResponse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliInputEventHandler*) G__getstructoffset())->CreatePIDResponse();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliInputEventHandler::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliInputEventHandler::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliInputEventHandler::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliInputEventHandler::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliInputEventHandler*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliInputEventHandler::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliInputEventHandler::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliInputEventHandler::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_686_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliInputEventHandler::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliInputEventHandler G__TAliInputEventHandler;
static int G__G__STEERBase_686_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliInputEventHandler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliInputEventHandler*) (soff+(sizeof(AliInputEventHandler)*i)))->~G__TAliInputEventHandler();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliInputEventHandler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliInputEventHandler*) (soff))->~G__TAliInputEventHandler();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliDummyHandler */
static int G__G__STEERBase_688_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliDummyHandler* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliDummyHandler[n];
     } else {
       p = new((void*) gvp) AliDummyHandler[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliDummyHandler;
     } else {
       p = new((void*) gvp) AliDummyHandler;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDummyHandler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_688_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliDummyHandler* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliDummyHandler((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) AliDummyHandler((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDummyHandler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_688_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDummyHandler*) G__getstructoffset())->SetEvent((AliVEvent*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_688_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliDummyHandler::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_688_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDummyHandler::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_688_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliDummyHandler::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_688_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliDummyHandler::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_688_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliDummyHandler*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_688_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDummyHandler::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_688_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDummyHandler::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_688_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliDummyHandler::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_688_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliDummyHandler::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliDummyHandler G__TAliDummyHandler;
static int G__G__STEERBase_688_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliDummyHandler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliDummyHandler*) (soff+(sizeof(AliDummyHandler)*i)))->~G__TAliDummyHandler();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliDummyHandler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliDummyHandler*) (soff))->~G__TAliDummyHandler();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliEventplane */
static int G__G__STEERBase_690_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliEventplane* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliEventplane[n];
     } else {
       p = new((void*) gvp) AliEventplane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliEventplane;
     } else {
       p = new((void*) gvp) AliEventplane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventplane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliEventplane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliEventplane(*(AliEventplane*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliEventplane(*(AliEventplane*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventplane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliEventplane& obj = ((AliEventplane*) G__getstructoffset())->operator=(*(AliEventplane*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliEventplane*) G__getstructoffset())->CopyEP(*(AliEventplane*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventplane*) G__getstructoffset())->SetQVector((TVector2*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventplane*) G__getstructoffset())->SetEventplaneQ((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventplane*) G__getstructoffset())->SetQsub((TVector2*) G__int(libp->para[0]), (TVector2*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventplane*) G__getstructoffset())->SetQsubRes((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliEventplane*) G__getstructoffset())->GetQVector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliEventplane*) G__getstructoffset())->GetQContributionX((AliVTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliEventplane*) G__getstructoffset())->GetQContributionY((AliVTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliEventplane*) G__getstructoffset())->GetQContributionXsub1((AliVTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliEventplane*) G__getstructoffset())->GetQContributionYsub1((AliVTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliEventplane*) G__getstructoffset())->GetQContributionXsub2((AliVTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliEventplane*) G__getstructoffset())->GetQContributionYsub2((AliVTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliEventplane*) G__getstructoffset())->GetQContributionXArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliEventplane*) G__getstructoffset())->GetQContributionYArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliEventplane*) G__getstructoffset())->GetQContributionXArraysub1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliEventplane*) G__getstructoffset())->GetQContributionYArraysub1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliEventplane*) G__getstructoffset())->GetQContributionXArraysub2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliEventplane*) G__getstructoffset())->GetQContributionYArraysub2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliEventplane*) G__getstructoffset())->GetEventplane((const char*) G__int(libp->para[0]), (AliVEvent*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliEventplane*) G__getstructoffset())->GetEventplane((const char*) G__int(libp->para[0]), (AliVEvent*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const AliEventplane*) G__getstructoffset())->GetEventplane((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliEventplane*) G__getstructoffset())->GetQsub1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliEventplane*) G__getstructoffset())->GetQsub2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliEventplane*) G__getstructoffset())->GetQsubRes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliEventplane*) G__getstructoffset())->IsEventInEventplaneClass((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliEventplane*) G__getstructoffset())->CalculateVZEROEventPlane((AliVEvent*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliEventplane*) G__getstructoffset())->CalculateVZEROEventPlane((AliVEvent*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventplane*) G__getstructoffset())->SetVZEROEPParams(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventplane*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliEventplane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliEventplane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliEventplane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliEventplane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventplane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliEventplane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliEventplane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliEventplane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_690_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliEventplane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliEventplane G__TAliEventplane;
static int G__G__STEERBase_690_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliEventplane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliEventplane*) (soff+(sizeof(AliEventplane)*i)))->~G__TAliEventplane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliEventplane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliEventplane*) (soff))->~G__TAliEventplane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliEventTagCuts */
static int G__G__STEERBase_691_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliEventTagCuts* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliEventTagCuts[n];
     } else {
       p = new((void*) gvp) AliEventTagCuts[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliEventTagCuts;
     } else {
       p = new((void*) gvp) AliEventTagCuts;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTagCuts));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetPeriodNumberRange((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetOrbitNumberRange((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetBunchCrossNumberRange((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetEventType((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNParticipantsRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetImpactParamRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetEtaLeadingParticleRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetPhiLeadingParticleRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetPrimaryVertexXRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetPrimaryVertexYRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetPrimaryVertexZRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetPrimaryVertexFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetPrimaryVertexZErrorRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetTriggerMask((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetTriggerCluster((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetZDCNeutron1Range((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetZDCProton1Range((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetZDCEMRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetZDCNeutron2Range((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetZDCProton2Range((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetT0VertexZRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetMultiplicityRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetPosMultiplicityRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNegMultiplicityRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNeutrMultiplicityRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNV0sRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNCascadesRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNKinksRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNPMDTracksRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNFMDTracksRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNPHOSClustersRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNEMCALClustersRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNJetCandidatesRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetTopJetEnergyMin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetTopNeutralEnergyMin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNHardPhotonsRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNChargedAbove1GeVRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNChargedAbove3GeVRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNChargedAbove10GeVRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNMuonsAbove1GeVRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNMuonsAbove3GeVRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNMuonsAbove10GeVRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNElectronsAbove1GeVRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNElectronsAbove3GeVRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNElectronsAbove10GeVRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNElectronRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNFWMuonRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNFWMatchedMuonRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNMuonRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNPionRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNKaonRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNProtonRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNLambdaRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNPhotonRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNPi0Range((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNNeutronRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNKaon0Range((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetTotalPRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetMeanPtRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetTopPtMin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetTotalNeutralPRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetMeanNeutralPtPRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetTopNeutralPtMin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetEventPlaneAngleRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetHBTRadiiRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNumberOfFiredChipsLayer1Range((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNumberOfFiredChipsLayer2Range((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->SetNumberOfSPDTrackletsRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->ResetTriggerClasses();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->AddRequiredFiredTriggerClass(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->InitializeTriggerClasses(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliEventTagCuts*) G__getstructoffset())->IsAccepted((AliEventTag*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliEventTagCuts*) G__getstructoffset())->IsAccepted((AliEventTag*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliEventTagCuts::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliEventTagCuts::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliEventTagCuts::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliEventTagCuts::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliEventTagCuts*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliEventTagCuts::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliEventTagCuts::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliEventTagCuts::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_691_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliEventTagCuts::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_691_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliEventTagCuts* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliEventTagCuts(*(AliEventTagCuts*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTagCuts));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliEventTagCuts G__TAliEventTagCuts;
static int G__G__STEERBase_691_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliEventTagCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliEventTagCuts*) (soff+(sizeof(AliEventTagCuts)*i)))->~G__TAliEventTagCuts();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliEventTagCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliEventTagCuts*) (soff))->~G__TAliEventTagCuts();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_691_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliEventTagCuts* dest = (AliEventTagCuts*) G__getstructoffset();
   *dest = *(AliEventTagCuts*) libp->para[0].ref;
   const AliEventTagCuts& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliFileTag */
static int G__G__STEERBase_693_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliFileTag* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliFileTag[n];
     } else {
       p = new((void*) gvp) AliFileTag[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliFileTag;
     } else {
       p = new((void*) gvp) AliFileTag;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliFileTag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliFileTag* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliFileTag(*(AliFileTag*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliFileTag(*(AliFileTag*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliFileTag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliFileTag& obj = ((AliFileTag*) G__getstructoffset())->operator=(*(AliFileTag*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliFileTag*) G__getstructoffset())->SetGUID(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliFileTag*) G__getstructoffset())->SetPath(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliFileTag*) G__getstructoffset())->SetMD5(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliFileTag*) G__getstructoffset())->SetTURL(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliFileTag*) G__getstructoffset())->SetSize((Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliFileTag*) G__getstructoffset())->AddEventTag(*(AliEventTag*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliFileTag*) G__getstructoffset())->CopyFileInfo(*(AliFileTag*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliFileTag*) G__getstructoffset())->GetGUID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliFileTag*) G__getstructoffset())->GetPath());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliFileTag*) G__getstructoffset())->GetMD5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliFileTag*) G__getstructoffset())->GetTURL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const AliFileTag*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliFileTag*) G__getstructoffset())->GetNEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliFileTag*) G__getstructoffset())->GetEventTag((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliFileTag::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliFileTag::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliFileTag::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliFileTag::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliFileTag*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliFileTag::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliFileTag::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliFileTag::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_693_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliFileTag::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliFileTag G__TAliFileTag;
static int G__G__STEERBase_693_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliFileTag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliFileTag*) (soff+(sizeof(AliFileTag)*i)))->~G__TAliFileTag();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliFileTag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliFileTag*) (soff))->~G__TAliFileTag();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliGenEventHeader */
static int G__G__STEERBase_699_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliGenEventHeader((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliGenEventHeader((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenEventHeader[n];
     } else {
       p = new((void*) gvp) AliGenEventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenEventHeader;
     } else {
       p = new((void*) gvp) AliGenEventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEventHeader*) G__getstructoffset())->NProduced());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEventHeader*) G__getstructoffset())->InteractionTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEventHeader*) G__getstructoffset())->EventWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliGenEventHeader*) G__getstructoffset())->PrimaryVertex(*(TArrayF*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEventHeader*) G__getstructoffset())->SetNProduced((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEventHeader*) G__getstructoffset())->SetPrimaryVertex(*(TArrayF*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEventHeader*) G__getstructoffset())->SetInteractionTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEventHeader*) G__getstructoffset())->SetEventWeight((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEventHeader*) G__getstructoffset())->AddEventWeight(*(TString*) libp->para[0].ref, (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((AliGenEventHeader*) G__getstructoffset())->GetEventWeight(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<std::string,Float_t>& obj = ((const AliGenEventHeader*) G__getstructoffset())->GetEventWeights();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliGenEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliGenEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliGenEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_699_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_699_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliGenEventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliGenEventHeader(*(AliGenEventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliGenEventHeader G__TAliGenEventHeader;
static int G__G__STEERBase_699_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliGenEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliGenEventHeader*) (soff+(sizeof(AliGenEventHeader)*i)))->~G__TAliGenEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliGenEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliGenEventHeader*) (soff))->~G__TAliGenEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliGenCocktailEventHeader */
static int G__G__STEERBase_700_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenCocktailEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenCocktailEventHeader[n];
     } else {
       p = new((void*) gvp) AliGenCocktailEventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenCocktailEventHeader;
     } else {
       p = new((void*) gvp) AliGenCocktailEventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenCocktailEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_700_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenCocktailEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliGenCocktailEventHeader((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliGenCocktailEventHeader((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenCocktailEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_700_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenCocktailEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliGenCocktailEventHeader(*(AliGenCocktailEventHeader*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliGenCocktailEventHeader(*(AliGenCocktailEventHeader*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenCocktailEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_700_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenCocktailEventHeader*) G__getstructoffset())->AddHeader((AliGenEventHeader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_700_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliGenCocktailEventHeader*) G__getstructoffset())->GetHeaders());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_700_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliGenCocktailEventHeader*) G__getstructoffset())->CalcNProduced());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_700_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliGenCocktailEventHeader& obj = ((AliGenCocktailEventHeader*) G__getstructoffset())->operator=(*(AliGenCocktailEventHeader*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_700_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliGenCocktailEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_700_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenCocktailEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_700_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliGenCocktailEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_700_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliGenCocktailEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_700_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenCocktailEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_700_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenCocktailEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_700_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenCocktailEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_700_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenCocktailEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_700_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenCocktailEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliGenCocktailEventHeader G__TAliGenCocktailEventHeader;
static int G__G__STEERBase_700_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliGenCocktailEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliGenCocktailEventHeader*) (soff+(sizeof(AliGenCocktailEventHeader)*i)))->~G__TAliGenCocktailEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliGenCocktailEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliGenCocktailEventHeader*) (soff))->~G__TAliGenCocktailEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliGenDPMjetEventHeader */
static int G__G__STEERBase_705_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenDPMjetEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliGenDPMjetEventHeader((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliGenDPMjetEventHeader((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenDPMjetEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenDPMjetEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenDPMjetEventHeader[n];
     } else {
       p = new((void*) gvp) AliGenDPMjetEventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenDPMjetEventHeader;
     } else {
       p = new((void*) gvp) AliGenDPMjetEventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenDPMjetEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenDPMjetEventHeader*) G__getstructoffset())->TotalEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenDPMjetEventHeader*) G__getstructoffset())->Trials());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenDPMjetEventHeader*) G__getstructoffset())->ProcessType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenDPMjetEventHeader*) G__getstructoffset())->SetTotalEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenDPMjetEventHeader*) G__getstructoffset())->SetTrials((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenDPMjetEventHeader*) G__getstructoffset())->SetProcessType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliGenDPMjetEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenDPMjetEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliGenDPMjetEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliGenDPMjetEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenDPMjetEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenDPMjetEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenDPMjetEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenDPMjetEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_705_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenDPMjetEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_705_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliGenDPMjetEventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliGenDPMjetEventHeader(*(AliGenDPMjetEventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenDPMjetEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliGenDPMjetEventHeader G__TAliGenDPMjetEventHeader;
static int G__G__STEERBase_705_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliGenDPMjetEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliGenDPMjetEventHeader*) (soff+(sizeof(AliGenDPMjetEventHeader)*i)))->~G__TAliGenDPMjetEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliGenDPMjetEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliGenDPMjetEventHeader*) (soff))->~G__TAliGenDPMjetEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliGenEpos3EventHeader */
static int G__G__STEERBase_707_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenEpos3EventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliGenEpos3EventHeader((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliGenEpos3EventHeader((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEpos3EventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenEpos3EventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenEpos3EventHeader[n];
     } else {
       p = new((void*) gvp) AliGenEpos3EventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenEpos3EventHeader;
     } else {
       p = new((void*) gvp) AliGenEpos3EventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEpos3EventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEpos3EventHeader*) G__getstructoffset())->GetIversn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEpos3EventHeader*) G__getstructoffset())->GetLaproj());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEpos3EventHeader*) G__getstructoffset())->GetMaproj());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEpos3EventHeader*) G__getstructoffset())->GetLatarg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEpos3EventHeader*) G__getstructoffset())->GetMatarg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEpos3EventHeader*) G__getstructoffset())->GetEngy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEpos3EventHeader*) G__getstructoffset())->GetNfull());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEpos3EventHeader*) G__getstructoffset())->GetNfreeze());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEpos3EventHeader*) G__getstructoffset())->GetBim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEpos3EventHeader*) G__getstructoffset())->SetIversn((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEpos3EventHeader*) G__getstructoffset())->SetLaproj((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEpos3EventHeader*) G__getstructoffset())->SetMaproj((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEpos3EventHeader*) G__getstructoffset())->SetLatarg((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEpos3EventHeader*) G__getstructoffset())->SetMatarg((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEpos3EventHeader*) G__getstructoffset())->SetEngy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEpos3EventHeader*) G__getstructoffset())->SetNfull((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEpos3EventHeader*) G__getstructoffset())->SetNfreeze((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEpos3EventHeader*) G__getstructoffset())->SetBim((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliGenEpos3EventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenEpos3EventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliGenEpos3EventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliGenEpos3EventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEpos3EventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenEpos3EventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenEpos3EventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenEpos3EventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_707_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenEpos3EventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_707_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliGenEpos3EventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliGenEpos3EventHeader(*(AliGenEpos3EventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEpos3EventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliGenEpos3EventHeader G__TAliGenEpos3EventHeader;
static int G__G__STEERBase_707_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliGenEpos3EventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliGenEpos3EventHeader*) (soff+(sizeof(AliGenEpos3EventHeader)*i)))->~G__TAliGenEpos3EventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliGenEpos3EventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliGenEpos3EventHeader*) (soff))->~G__TAliGenEpos3EventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliGenEposEventHeader */
static int G__G__STEERBase_708_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenEposEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliGenEposEventHeader((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliGenEposEventHeader((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEposEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenEposEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenEposEventHeader[n];
     } else {
       p = new((void*) gvp) AliGenEposEventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenEposEventHeader;
     } else {
       p = new((void*) gvp) AliGenEposEventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEposEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEposEventHeader*) G__getstructoffset())->GetBimevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEposEventHeader*) G__getstructoffset())->GetPhievt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEposEventHeader*) G__getstructoffset())->GetKolevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEposEventHeader*) G__getstructoffset())->GetKoievt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEposEventHeader*) G__getstructoffset())->GetPmxevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEposEventHeader*) G__getstructoffset())->GetEgyevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEposEventHeader*) G__getstructoffset())->GetNpjevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEposEventHeader*) G__getstructoffset())->GetNtgevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEposEventHeader*) G__getstructoffset())->GetNpnevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEposEventHeader*) G__getstructoffset())->GetNppevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEposEventHeader*) G__getstructoffset())->GetNtnevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEposEventHeader*) G__getstructoffset())->GetNtpevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEposEventHeader*) G__getstructoffset())->GetJpnevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEposEventHeader*) G__getstructoffset())->GetJppevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEposEventHeader*) G__getstructoffset())->GetJtnevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEposEventHeader*) G__getstructoffset())->GetJtpevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEposEventHeader*) G__getstructoffset())->GetXbjevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEposEventHeader*) G__getstructoffset())->GetQsqevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenEposEventHeader*) G__getstructoffset())->GetNglevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEposEventHeader*) G__getstructoffset())->GetZppevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEposEventHeader*) G__getstructoffset())->GetZptevt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetBimevt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetPhievt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetKolevt((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetKoievt((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetPmxevt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetEgyevt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetNpjevt((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetNtgevt((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetNpnevt((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetNppevt((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetNtnevt((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetNtpevt((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetJpnevt((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetJppevt((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetJtnevt((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetJtpevt((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetXbjevt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetQsqevt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetNglevt((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetZppevt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->SetZptevt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliGenEposEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenEposEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliGenEposEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliGenEposEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEposEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenEposEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenEposEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenEposEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_708_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenEposEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_708_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliGenEposEventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliGenEposEventHeader(*(AliGenEposEventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEposEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliGenEposEventHeader G__TAliGenEposEventHeader;
static int G__G__STEERBase_708_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliGenEposEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliGenEposEventHeader*) (soff+(sizeof(AliGenEposEventHeader)*i)))->~G__TAliGenEposEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliGenEposEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliGenEposEventHeader*) (soff))->~G__TAliGenEposEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliGenEventHeaderTunedPbPb */
static int G__G__STEERBase_709_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenEventHeaderTunedPbPb* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliGenEventHeaderTunedPbPb((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliGenEventHeaderTunedPbPb((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeaderTunedPbPb));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenEventHeaderTunedPbPb* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenEventHeaderTunedPbPb[n];
     } else {
       p = new((void*) gvp) AliGenEventHeaderTunedPbPb[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenEventHeaderTunedPbPb;
     } else {
       p = new((void*) gvp) AliGenEventHeaderTunedPbPb;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeaderTunedPbPb));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEventHeaderTunedPbPb*) G__getstructoffset())->GetCentrality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEventHeaderTunedPbPb*) G__getstructoffset())->GetPsi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEventHeaderTunedPbPb*) G__getstructoffset())->GetPsi3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenEventHeaderTunedPbPb*) G__getstructoffset())->GetPsi4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEventHeaderTunedPbPb*) G__getstructoffset())->SetCentrality((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEventHeaderTunedPbPb*) G__getstructoffset())->SetPsi2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEventHeaderTunedPbPb*) G__getstructoffset())->SetPsi3((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEventHeaderTunedPbPb*) G__getstructoffset())->SetPsi4((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliGenEventHeaderTunedPbPb::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenEventHeaderTunedPbPb::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliGenEventHeaderTunedPbPb::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliGenEventHeaderTunedPbPb::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenEventHeaderTunedPbPb*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenEventHeaderTunedPbPb::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenEventHeaderTunedPbPb::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenEventHeaderTunedPbPb::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_709_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenEventHeaderTunedPbPb::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_709_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliGenEventHeaderTunedPbPb* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliGenEventHeaderTunedPbPb(*(AliGenEventHeaderTunedPbPb*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeaderTunedPbPb));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliGenEventHeaderTunedPbPb G__TAliGenEventHeaderTunedPbPb;
static int G__G__STEERBase_709_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliGenEventHeaderTunedPbPb*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliGenEventHeaderTunedPbPb*) (soff+(sizeof(AliGenEventHeaderTunedPbPb)*i)))->~G__TAliGenEventHeaderTunedPbPb();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliGenEventHeaderTunedPbPb*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliGenEventHeaderTunedPbPb*) (soff))->~G__TAliGenEventHeaderTunedPbPb();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliGenGeVSimEventHeader */
static int G__G__STEERBase_710_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenGeVSimEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenGeVSimEventHeader[n];
     } else {
       p = new((void*) gvp) AliGenGeVSimEventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenGeVSimEventHeader;
     } else {
       p = new((void*) gvp) AliGenGeVSimEventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenGeVSimEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_710_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenGeVSimEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliGenGeVSimEventHeader((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliGenGeVSimEventHeader((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenGeVSimEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_710_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenGeVSimEventHeader*) G__getstructoffset())->GetEventPlane());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_710_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenGeVSimEventHeader*) G__getstructoffset())->GetEllipticFlow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_710_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenGeVSimEventHeader*) G__getstructoffset())->SetEventPlane((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_710_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenGeVSimEventHeader*) G__getstructoffset())->SetEllipticFlow((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_710_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliGenGeVSimEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_710_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenGeVSimEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_710_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliGenGeVSimEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_710_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliGenGeVSimEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_710_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenGeVSimEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_710_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenGeVSimEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_710_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenGeVSimEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_710_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenGeVSimEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_710_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenGeVSimEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_710_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliGenGeVSimEventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliGenGeVSimEventHeader(*(AliGenGeVSimEventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenGeVSimEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliGenGeVSimEventHeader G__TAliGenGeVSimEventHeader;
static int G__G__STEERBase_710_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliGenGeVSimEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliGenGeVSimEventHeader*) (soff+(sizeof(AliGenGeVSimEventHeader)*i)))->~G__TAliGenGeVSimEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliGenGeVSimEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliGenGeVSimEventHeader*) (soff))->~G__TAliGenGeVSimEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliGenHepMCEventHeader */
static int G__G__STEERBase_711_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenHepMCEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenHepMCEventHeader[n];
     } else {
       p = new((void*) gvp) AliGenHepMCEventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenHepMCEventHeader;
     } else {
       p = new((void*) gvp) AliGenHepMCEventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHepMCEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenHepMCEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliGenHepMCEventHeader((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliGenHepMCEventHeader((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHepMCEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenHepMCEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 22
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliGenHepMCEventHeader(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Int_t) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, (Int_t) G__int(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Double_t) G__double(libp->para[18]), (Double_t) G__double(libp->para[19])
, (Double_t) G__double(libp->para[20]), (Double_t) G__double(libp->para[21]));
   } else {
     p = new((void*) gvp) AliGenHepMCEventHeader(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Int_t) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, (Int_t) G__int(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Double_t) G__double(libp->para[18]), (Double_t) G__double(libp->para[19])
, (Double_t) G__double(libp->para[20]), (Double_t) G__double(libp->para[21]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHepMCEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHepMCEventHeader*) G__getstructoffset())->Ncoll_hard());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHepMCEventHeader*) G__getstructoffset())->Npart_proj());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHepMCEventHeader*) G__getstructoffset())->Npart_targ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHepMCEventHeader*) G__getstructoffset())->Ncoll());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHepMCEventHeader*) G__getstructoffset())->spectator_neutrons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHepMCEventHeader*) G__getstructoffset())->spectator_protons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHepMCEventHeader*) G__getstructoffset())->N_Nwounded_collisions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHepMCEventHeader*) G__getstructoffset())->Nwounded_N_collisions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHepMCEventHeader*) G__getstructoffset())->Nwounded_Nwounded_collisions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenHepMCEventHeader*) G__getstructoffset())->impact_parameter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenHepMCEventHeader*) G__getstructoffset())->event_plane_angle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenHepMCEventHeader*) G__getstructoffset())->eccentricity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenHepMCEventHeader*) G__getstructoffset())->sigma_inel_NN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHepMCEventHeader*) G__getstructoffset())->id1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHepMCEventHeader*) G__getstructoffset())->id2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHepMCEventHeader*) G__getstructoffset())->pdf_id1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHepMCEventHeader*) G__getstructoffset())->pdf_id2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliGenHepMCEventHeader*) G__getstructoffset())->x1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliGenHepMCEventHeader*) G__getstructoffset())->x2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliGenHepMCEventHeader*) G__getstructoffset())->scalePDF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliGenHepMCEventHeader*) G__getstructoffset())->pdf1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliGenHepMCEventHeader*) G__getstructoffset())->pdf2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliGenHepMCEventHeader*) G__getstructoffset())->HeavyIonInfoValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliGenHepMCEventHeader*) G__getstructoffset())->PDFValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliGenHepMCEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenHepMCEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliGenHepMCEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliGenHepMCEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenHepMCEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenHepMCEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenHepMCEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenHepMCEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_711_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenHepMCEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_711_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliGenHepMCEventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliGenHepMCEventHeader(*(AliGenHepMCEventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHepMCEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliGenHepMCEventHeader G__TAliGenHepMCEventHeader;
static int G__G__STEERBase_711_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliGenHepMCEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliGenHepMCEventHeader*) (soff+(sizeof(AliGenHepMCEventHeader)*i)))->~G__TAliGenHepMCEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliGenHepMCEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliGenHepMCEventHeader*) (soff))->~G__TAliGenHepMCEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliGenHerwigEventHeader */
static int G__G__STEERBase_712_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenHerwigEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenHerwigEventHeader[n];
     } else {
       p = new((void*) gvp) AliGenHerwigEventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenHerwigEventHeader;
     } else {
       p = new((void*) gvp) AliGenHerwigEventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHerwigEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenHerwigEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliGenHerwigEventHeader((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliGenHerwigEventHeader((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHerwigEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHerwigEventHeader*) G__getstructoffset())->ProcessType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenHerwigEventHeader*) G__getstructoffset())->SetProcessType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHerwigEventHeader*) G__getstructoffset())->Trials());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenHerwigEventHeader*) G__getstructoffset())->SetTrials((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenHerwigEventHeader*) G__getstructoffset())->Weight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenHerwigEventHeader*) G__getstructoffset())->SetWeight((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenHerwigEventHeader*) G__getstructoffset())->GetPtHard());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenHerwigEventHeader*) G__getstructoffset())->SetPtHardGen((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliGenHerwigEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenHerwigEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliGenHerwigEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliGenHerwigEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenHerwigEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenHerwigEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenHerwigEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenHerwigEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_712_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenHerwigEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_712_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliGenHerwigEventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliGenHerwigEventHeader(*(AliGenHerwigEventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHerwigEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliGenHerwigEventHeader G__TAliGenHerwigEventHeader;
static int G__G__STEERBase_712_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliGenHerwigEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliGenHerwigEventHeader*) (soff+(sizeof(AliGenHerwigEventHeader)*i)))->~G__TAliGenHerwigEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliGenHerwigEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliGenHerwigEventHeader*) (soff))->~G__TAliGenHerwigEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliGenHijingEventHeader */
static int G__G__STEERBase_713_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenHijingEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliGenHijingEventHeader((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliGenHijingEventHeader((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHijingEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenHijingEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenHijingEventHeader[n];
     } else {
       p = new((void*) gvp) AliGenHijingEventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenHijingEventHeader;
     } else {
       p = new((void*) gvp) AliGenHijingEventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHijingEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenHijingEventHeader*) G__getstructoffset())->TotalEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHijingEventHeader*) G__getstructoffset())->Trials());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHijingEventHeader*) G__getstructoffset())->GetTrueNPart());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliGenHijingEventHeader*) G__getstructoffset())->GetSpectatorsInTheStack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliGenHijingEventHeader*) G__getstructoffset())->GetFragmentationFromData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHijingEventHeader*) G__getstructoffset())->GetFreeProjSpecn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHijingEventHeader*) G__getstructoffset())->GetFreeProjSpecp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHijingEventHeader*) G__getstructoffset())->GetFreeTargSpecn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenHijingEventHeader*) G__getstructoffset())->GetFreeTargSpecp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenHijingEventHeader*) G__getstructoffset())->SetTotalEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenHijingEventHeader*) G__getstructoffset())->SetJets((TLorentzVector*) G__int(libp->para[0]), (TLorentzVector*) G__int(libp->para[1])
, (TLorentzVector*) G__int(libp->para[2]), (TLorentzVector*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliGenHijingEventHeader*) G__getstructoffset())->GetJets(*(TLorentzVector*) libp->para[0].ref, *(TLorentzVector*) libp->para[1].ref
, *(TLorentzVector*) libp->para[2].ref, *(TLorentzVector*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenHijingEventHeader*) G__getstructoffset())->SetTrials((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenHijingEventHeader*) G__getstructoffset())->SetTrueNPart((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenHijingEventHeader*) G__getstructoffset())->SetSpectatorsInTheStack((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenHijingEventHeader*) G__getstructoffset())->SetDataFromFragmentation((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenHijingEventHeader*) G__getstructoffset())->SetFreeSpectators((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliGenHijingEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenHijingEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliGenHijingEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliGenHijingEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenHijingEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenHijingEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenHijingEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenHijingEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_713_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenHijingEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_713_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliGenHijingEventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliGenHijingEventHeader(*(AliGenHijingEventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHijingEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliGenHijingEventHeader G__TAliGenHijingEventHeader;
static int G__G__STEERBase_713_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliGenHijingEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliGenHijingEventHeader*) (soff+(sizeof(AliGenHijingEventHeader)*i)))->~G__TAliGenHijingEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliGenHijingEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliGenHijingEventHeader*) (soff))->~G__TAliGenHijingEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliGenPythiaEventHeader */
static int G__G__STEERBase_714_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenPythiaEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenPythiaEventHeader[n];
     } else {
       p = new((void*) gvp) AliGenPythiaEventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenPythiaEventHeader;
     } else {
       p = new((void*) gvp) AliGenPythiaEventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenPythiaEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenPythiaEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliGenPythiaEventHeader((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliGenPythiaEventHeader((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenPythiaEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenPythiaEventHeader*) G__getstructoffset())->ProcessType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenPythiaEventHeader*) G__getstructoffset())->SetNMPI((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenPythiaEventHeader*) G__getstructoffset())->SetNSuperpositions((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenPythiaEventHeader*) G__getstructoffset())->SetProcessType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenPythiaEventHeader*) G__getstructoffset())->Trials());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenPythiaEventHeader*) G__getstructoffset())->SetTrials((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenPythiaEventHeader*) G__getstructoffset())->AddJet((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenPythiaEventHeader*) G__getstructoffset())->AddUQJet((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenPythiaEventHeader*) G__getstructoffset())->NTriggerJets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenPythiaEventHeader*) G__getstructoffset())->NUQTriggerJets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliGenPythiaEventHeader*) G__getstructoffset())->TriggerJet((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliGenPythiaEventHeader*) G__getstructoffset())->UQJet((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliGenPythiaEventHeader*) G__getstructoffset())->GetXJet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliGenPythiaEventHeader*) G__getstructoffset())->GetYJet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliGenPythiaEventHeader*) G__getstructoffset())->GetInMediumLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliGenPythiaEventHeader*) G__getstructoffset())->GetImpactParameter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenPythiaEventHeader*) G__getstructoffset())->SetXYJet((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenPythiaEventHeader*) G__getstructoffset())->SetImpactParameter((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenPythiaEventHeader*) G__getstructoffset())->SetInMe((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenPythiaEventHeader*) G__getstructoffset())->SetZQuench((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliGenPythiaEventHeader*) G__getstructoffset())->GetZQuench((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenPythiaEventHeader*) G__getstructoffset())->SetPtHard((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenPythiaEventHeader*) G__getstructoffset())->GetPtHard());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenPythiaEventHeader*) G__getstructoffset())->SetXsection((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliGenPythiaEventHeader*) G__getstructoffset())->GetXsection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenPythiaEventHeader*) G__getstructoffset())->GetNMPI());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliGenPythiaEventHeader*) G__getstructoffset())->GetNSuperpositions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliGenPythiaEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenPythiaEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliGenPythiaEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliGenPythiaEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenPythiaEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenPythiaEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenPythiaEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenPythiaEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_714_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenPythiaEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_714_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliGenPythiaEventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliGenPythiaEventHeader(*(AliGenPythiaEventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenPythiaEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliGenPythiaEventHeader G__TAliGenPythiaEventHeader;
static int G__G__STEERBase_714_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliGenPythiaEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliGenPythiaEventHeader*) (soff+(sizeof(AliGenPythiaEventHeader)*i)))->~G__TAliGenPythiaEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliGenPythiaEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliGenPythiaEventHeader*) (soff))->~G__TAliGenPythiaEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliGenToyEventHeader */
static int G__G__STEERBase_715_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenToyEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliGenToyEventHeader((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliGenToyEventHeader((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliGenToyEventHeader[n];
       } else {
         p = new((void*) gvp) AliGenToyEventHeader[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliGenToyEventHeader;
       } else {
         p = new((void*) gvp) AliGenToyEventHeader;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenToyEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_715_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliGenToyEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliGenToyEventHeader(*(AliGenToyEventHeader*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliGenToyEventHeader(*(AliGenToyEventHeader*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenToyEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_715_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliGenToyEventHeader& obj = ((AliGenToyEventHeader*) G__getstructoffset())->operator=(*(AliGenToyEventHeader*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_715_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenToyEventHeader*) G__getstructoffset())->SetCentrality((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_715_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenToyEventHeader*) G__getstructoffset())->SetValue(*(string*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_715_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliGenToyEventHeader*) G__getstructoffset())->GetCentrality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_715_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliGenToyEventHeader*) G__getstructoffset())->GetParameter(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_715_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliGenToyEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_715_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenToyEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_715_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliGenToyEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_715_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliGenToyEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_715_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliGenToyEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_715_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenToyEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_715_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenToyEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_715_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliGenToyEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_715_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliGenToyEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliGenToyEventHeader G__TAliGenToyEventHeader;
static int G__G__STEERBase_715_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliGenToyEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliGenToyEventHeader*) (soff+(sizeof(AliGenToyEventHeader)*i)))->~G__TAliGenToyEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliGenToyEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliGenToyEventHeader*) (soff))->~G__TAliGenToyEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliStack */
static int G__G__STEERBase_716_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliStack* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStack((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliStack((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStack((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliStack((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliStack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStack[n];
     } else {
       p = new((void*) gvp) AliStack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStack;
     } else {
       p = new((void*) gvp) AliStack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliStack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliStack(*(AliStack*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliStack(*(AliStack*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliStack& obj = ((AliStack*) G__getstructoffset())->operator=(*(AliStack*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliStack*) G__getstructoffset())->PushTrack(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Float_t*) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (TMCProcess) G__int(libp->para[7])
, *(Int_t*) G__Intref(&libp->para[8]), (Float_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliStack*) G__getstructoffset())->ConnectTree((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliStack*) G__getstructoffset())->GetEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliStack*) G__getstructoffset())->PurifyKine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliStack*) G__getstructoffset())->ReorderKine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliStack*) G__getstructoffset())->FinishEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliStack*) G__getstructoffset())->FlagTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliStack*) G__getstructoffset())->KeepTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliStack*) G__getstructoffset())->Clean((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliStack*) G__getstructoffset())->Clean();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliStack*) G__getstructoffset())->Reset((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliStack*) G__getstructoffset())->Reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliStack*) G__getstructoffset())->DumpPart((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliStack*) G__getstructoffset())->DumpPStack();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliStack*) G__getstructoffset())->DumpLoadedStack();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliStack*) G__getstructoffset())->SetNtrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliStack*) G__getstructoffset())->SetHighWaterMark((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliStack*) G__getstructoffset())->GetNtransported());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliStack*) G__getstructoffset())->Particle((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliStack*) G__getstructoffset())->GetPrimary((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliStack*) G__getstructoffset())->TreeK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliStack*) G__getstructoffset())->ParticleFromTreeK((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliStack*) G__getstructoffset())->TreeKEntry((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliStack*) G__getstructoffset())->IsPhysicalPrimary((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliStack*) G__getstructoffset())->IsSecondaryFromWeakDecay((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliStack*) G__getstructoffset())->IsSecondaryFromMaterial((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliStack*) G__getstructoffset())->TrackLabel((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((AliStack*) G__getstructoffset())->TrackLabelMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliStack*) G__getstructoffset())->Particles());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliStack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliStack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliStack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliStack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliStack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliStack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliStack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliStack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_716_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliStack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliStack G__TAliStack;
static int G__G__STEERBase_716_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliStack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliStack*) (soff+(sizeof(AliStack)*i)))->~G__TAliStack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliStack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliStack*) (soff))->~G__TAliStack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliHeader */
static int G__G__STEERBase_717_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliHeader[n];
     } else {
       p = new((void*) gvp) AliHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliHeader;
     } else {
       p = new((void*) gvp) AliHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliHeader(*(AliHeader*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliHeader(*(AliHeader*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliHeader((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) AliHeader((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliHeader(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) AliHeader(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHeader*) G__getstructoffset())->Reset((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHeader*) G__getstructoffset())->Reset((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHeader*) G__getstructoffset())->SetRun((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliHeader*) G__getstructoffset())->GetRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHeader*) G__getstructoffset())->SetNprimary((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliHeader*) G__getstructoffset())->GetNprimary());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliHeader*) G__getstructoffset())->GetNsecondary());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHeader*) G__getstructoffset())->SetNvertex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliHeader*) G__getstructoffset())->GetNvertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHeader*) G__getstructoffset())->SetNtrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliHeader*) G__getstructoffset())->GetNtrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHeader*) G__getstructoffset())->SetEvent((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliHeader*) G__getstructoffset())->GetEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHeader*) G__getstructoffset())->SetEventNrInRun((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliHeader*) G__getstructoffset())->GetEventNrInRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliHeader*) G__getstructoffset())->Stack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHeader*) G__getstructoffset())->SetStack((AliStack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHeader*) G__getstructoffset())->SetGenEventHeader((AliGenEventHeader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliHeader*) G__getstructoffset())->GenEventHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHeader*) G__getstructoffset())->AddDetectorEventHeader((AliDetectorEventHeader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliHeader*) G__getstructoffset())->GetDetectorEventHeader((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHeader*) G__getstructoffset())->SetTimeStamp((time_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const AliHeader*) G__getstructoffset())->GetTimeStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliHeader& obj = ((AliHeader*) G__getstructoffset())->operator=(*(AliHeader*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_717_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliHeader G__TAliHeader;
static int G__G__STEERBase_717_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliHeader*) (soff+(sizeof(AliHeader)*i)))->~G__TAliHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliHeader*) (soff))->~G__TAliHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliLHCTag */
static int G__G__STEERBase_719_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliLHCTag* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliLHCTag[n];
     } else {
       p = new((void*) gvp) AliLHCTag[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliLHCTag;
     } else {
       p = new((void*) gvp) AliLHCTag;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliLHCTag* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliLHCTag(*(AliLHCTag*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliLHCTag(*(AliLHCTag*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliLHCTag& obj = ((AliLHCTag*) G__getstructoffset())->operator=(*(AliLHCTag*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTag*) G__getstructoffset())->UpdateFromRunTable(*(AliLHCTag*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTag*) G__getstructoffset())->SetLHCState(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTag*) G__getstructoffset())->SetLuminosity((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTag*) G__getstructoffset())->SetNBunches((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTag*) G__getstructoffset())->SetFillingScheme(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTag*) G__getstructoffset())->SetFillNo((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTag*) G__getstructoffset())->SetBeamEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTag*) G__getstructoffset())->SetBunchIntensity((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliLHCTag*) G__getstructoffset())->GetLHCState());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliLHCTag*) G__getstructoffset())->GetLuminosity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliLHCTag*) G__getstructoffset())->GetNBunches());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliLHCTag*) G__getstructoffset())->GetFillingScheme();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliLHCTag*) G__getstructoffset())->GetFillNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliLHCTag*) G__getstructoffset())->GetBeamEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliLHCTag*) G__getstructoffset())->GetBunchIntensity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliLHCTag::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliLHCTag::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliLHCTag::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLHCTag::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTag*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliLHCTag::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliLHCTag::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliLHCTag::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_719_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliLHCTag::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliLHCTag G__TAliLHCTag;
static int G__G__STEERBase_719_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliLHCTag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliLHCTag*) (soff+(sizeof(AliLHCTag)*i)))->~G__TAliLHCTag();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliLHCTag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliLHCTag*) (soff))->~G__TAliLHCTag();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliLHCTagCuts */
static int G__G__STEERBase_720_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliLHCTagCuts* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliLHCTagCuts[n];
     } else {
       p = new((void*) gvp) AliLHCTagCuts[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliLHCTagCuts;
     } else {
       p = new((void*) gvp) AliLHCTagCuts;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTagCuts));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTagCuts*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTagCuts*) G__getstructoffset())->SetLHCState(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTagCuts*) G__getstructoffset())->SetLHCLuminosityRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTagCuts*) G__getstructoffset())->SetNBunchesRange((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTagCuts*) G__getstructoffset())->SetFillingScheme(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTagCuts*) G__getstructoffset())->SetFillNoRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTagCuts*) G__getstructoffset())->SetBeamEnergyRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTagCuts*) G__getstructoffset())->SetBunchIntensityRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliLHCTagCuts*) G__getstructoffset())->IsAccepted((AliLHCTag*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliLHCTagCuts::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliLHCTagCuts::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliLHCTagCuts::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliLHCTagCuts::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliLHCTagCuts*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliLHCTagCuts::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliLHCTagCuts::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliLHCTagCuts::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_720_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliLHCTagCuts::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_720_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliLHCTagCuts* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliLHCTagCuts(*(AliLHCTagCuts*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTagCuts));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliLHCTagCuts G__TAliLHCTagCuts;
static int G__G__STEERBase_720_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliLHCTagCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliLHCTagCuts*) (soff+(sizeof(AliLHCTagCuts)*i)))->~G__TAliLHCTagCuts();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliLHCTagCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliLHCTagCuts*) (soff))->~G__TAliLHCTagCuts();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_720_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliLHCTagCuts* dest = (AliLHCTagCuts*) G__getstructoffset();
   *dest = *(AliLHCTagCuts*) libp->para[0].ref;
   const AliLHCTagCuts& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliMagWrapCheb */
static int G__G__STEERBase_723_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMagWrapCheb* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMagWrapCheb[n];
     } else {
       p = new((void*) gvp) AliMagWrapCheb[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMagWrapCheb;
     } else {
       p = new((void*) gvp) AliMagWrapCheb;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagWrapCheb));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMagWrapCheb* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliMagWrapCheb(*(AliMagWrapCheb*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliMagWrapCheb(*(AliMagWrapCheb*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagWrapCheb));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->CopyFrom(*(AliMagWrapCheb*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliMagWrapCheb& obj = ((AliMagWrapCheb*) G__getstructoffset())->operator=(*(AliMagWrapCheb*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagWrapCheb*) G__getstructoffset())->GetNParamsSol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagWrapCheb*) G__getstructoffset())->GetNSegZSol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliMagWrapCheb*) G__getstructoffset())->GetSegZSol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagWrapCheb*) G__getstructoffset())->GetNParamsTPCInt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagWrapCheb*) G__getstructoffset())->GetNSegZTPCInt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagWrapCheb*) G__getstructoffset())->GetNParamsTPCRatInt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagWrapCheb*) G__getstructoffset())->GetNSegZTPCRatInt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagWrapCheb*) G__getstructoffset())->GetNParamsDip());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagWrapCheb*) G__getstructoffset())->GetNSegZDip());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMagWrapCheb*) G__getstructoffset())->GetMaxZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMagWrapCheb*) G__getstructoffset())->GetMinZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMagWrapCheb*) G__getstructoffset())->GetMinZSol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMagWrapCheb*) G__getstructoffset())->GetMaxZSol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMagWrapCheb*) G__getstructoffset())->GetMaxRSol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMagWrapCheb*) G__getstructoffset())->GetMinZDip());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMagWrapCheb*) G__getstructoffset())->GetMaxZDip());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMagWrapCheb*) G__getstructoffset())->GetMinZTPCInt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMagWrapCheb*) G__getstructoffset())->GetMaxZTPCInt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMagWrapCheb*) G__getstructoffset())->GetMaxRTPCInt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMagWrapCheb*) G__getstructoffset())->GetMinZTPCRatInt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMagWrapCheb*) G__getstructoffset())->GetMaxZTPCRatInt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMagWrapCheb*) G__getstructoffset())->GetMaxRTPCRatInt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMagWrapCheb*) G__getstructoffset())->GetParamSol((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMagWrapCheb*) G__getstructoffset())->GetParamTPCRatInt((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMagWrapCheb*) G__getstructoffset())->GetParamTPCInt((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMagWrapCheb*) G__getstructoffset())->GetParamDip((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliMagWrapCheb*) G__getstructoffset())->Field((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMagWrapCheb*) G__getstructoffset())->GetBz((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliMagWrapCheb*) G__getstructoffset())->FieldCyl((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliMagWrapCheb*) G__getstructoffset())->GetTPCInt((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliMagWrapCheb*) G__getstructoffset())->GetTPCIntCyl((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliMagWrapCheb*) G__getstructoffset())->GetTPCRatInt((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliMagWrapCheb*) G__getstructoffset())->GetTPCRatIntCyl((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagWrapCheb*) G__getstructoffset())->FindSolSegment((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagWrapCheb*) G__getstructoffset())->FindTPCSegment((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagWrapCheb*) G__getstructoffset())->FindTPCRatSegment((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagWrapCheb*) G__getstructoffset())->FindDipSegment((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMagWrapCheb::CylToCartCylB((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMagWrapCheb::CylToCartCartB((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMagWrapCheb::CartToCylCartB((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMagWrapCheb::CartToCylCylB((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMagWrapCheb::CartToCyl((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMagWrapCheb::CylToCart((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->LoadData((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMagWrapCheb* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliMagWrapCheb((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliMagWrapCheb((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagWrapCheb));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliMagWrapCheb*) G__getstructoffset())->SaveData((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliMagWrapCheb*) G__getstructoffset())->SegmentDimension(
(Float_t**) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->AddParamSol((AliCheb3D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->AddParamTPCInt((AliCheb3D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->AddParamTPCRatInt((AliCheb3D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->AddParamDip((AliCheb3D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->BuildTable(
(Int_t) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Float_t*) G__Floatref(&libp->para[5])
, *(Float_t*) G__Floatref(&libp->para[6]), (Float_t**) G__int(libp->para[7])
, (Float_t**) G__int(libp->para[8]), (Float_t**) G__int(libp->para[9])
, (Int_t**) G__int(libp->para[10]), (Int_t**) G__int(libp->para[11])
, (Int_t**) G__int(libp->para[12]), (Int_t**) G__int(libp->para[13])
, (Int_t**) G__int(libp->para[14]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->BuildTableSol();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->BuildTableDip();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->BuildTableTPCInt();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->BuildTableTPCRatInt();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->ResetTPCInt();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->ResetTPCRatInt();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->ResetSol();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->ResetDip();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMagWrapCheb::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMagWrapCheb::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliMagWrapCheb::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMagWrapCheb::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagWrapCheb*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMagWrapCheb::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMagWrapCheb::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMagWrapCheb::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_723_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMagWrapCheb::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliMagWrapCheb G__TAliMagWrapCheb;
static int G__G__STEERBase_723_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliMagWrapCheb*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliMagWrapCheb*) (soff+(sizeof(AliMagWrapCheb)*i)))->~G__TAliMagWrapCheb();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliMagWrapCheb*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliMagWrapCheb*) (soff))->~G__TAliMagWrapCheb();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliMagF */
static int G__G__STEERBase_724_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMagF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMagF[n];
     } else {
       p = new((void*) gvp) AliMagF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMagF;
     } else {
       p = new((void*) gvp) AliMagF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMagF* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 10:
     //m: 10
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (AliMagF::BMap_t) G__int(libp->para[4]), (AliMagF::BeamType_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (const char*) G__int(libp->para[9]));
     } else {
       p = new((void*) gvp) AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (AliMagF::BMap_t) G__int(libp->para[4]), (AliMagF::BeamType_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (const char*) G__int(libp->para[9]));
     }
     break;
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (AliMagF::BMap_t) G__int(libp->para[4]), (AliMagF::BeamType_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     } else {
       p = new((void*) gvp) AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (AliMagF::BMap_t) G__int(libp->para[4]), (AliMagF::BeamType_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (AliMagF::BMap_t) G__int(libp->para[4]), (AliMagF::BeamType_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (AliMagF::BMap_t) G__int(libp->para[4]), (AliMagF::BeamType_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (AliMagF::BMap_t) G__int(libp->para[4]), (AliMagF::BeamType_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (AliMagF::BMap_t) G__int(libp->para[4]), (AliMagF::BeamType_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (AliMagF::BMap_t) G__int(libp->para[4]), (AliMagF::BeamType_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (AliMagF::BMap_t) G__int(libp->para[4]), (AliMagF::BeamType_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (AliMagF::BMap_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (AliMagF::BMap_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) AliMagF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMagF((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliMagF((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMagF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliMagF(*(AliMagF*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliMagF(*(AliMagF*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliMagF& obj = ((AliMagF*) G__getstructoffset())->operator=(*(AliMagF*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliMagF*) G__getstructoffset())->GetTPCInt((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliMagF*) G__getstructoffset())->GetTPCRatInt((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliMagF*) G__getstructoffset())->GetTPCIntCyl((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliMagF*) G__getstructoffset())->GetTPCRatIntCyl((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMagF*) G__getstructoffset())->GetBz((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMagF*) G__getstructoffset())->GetMeasuredMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliMagF*) G__getstructoffset())->SetFactorSol((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliMagF*) G__getstructoffset())->SetFactorSol();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliMagF*) G__getstructoffset())->SetFactorDip((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliMagF*) G__getstructoffset())->SetFactorDip();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMagF*) G__getstructoffset())->GetFactorSol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMagF*) G__getstructoffset())->GetFactorDip());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMagF*) G__getstructoffset())->Factor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMagF*) G__getstructoffset())->GetCurrentSol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMagF*) G__getstructoffset())->GetCurrentDip());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliMagF*) G__getstructoffset())->IsUniform());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliMagF*) G__getstructoffset())->MachineField((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagF*) G__getstructoffset())->GetMapType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagF*) G__getstructoffset())->GetBeamType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliMagF*) G__getstructoffset())->GetBeamTypeText());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMagF*) G__getstructoffset())->GetBeamEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMagF*) G__getstructoffset())->Max());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagF*) G__getstructoffset())->Integ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMagF*) G__getstructoffset())->PrecInteg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMagF*) G__getstructoffset())->SolenoidField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliMagF*) G__getstructoffset())->GetDataFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliMagF*) G__getstructoffset())->GetParamName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagF*) G__getstructoffset())->SetDataFileName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagF*) G__getstructoffset())->SetParamName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliMagF*) G__getstructoffset())->LoadParameterization());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMagF::GetPolarityConvention());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      G__letint(result7, 85, (long) AliMagF::CreateFieldMap(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (const Char_t*) G__int(libp->para[5])
, (const Char_t*) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) AliMagF::CreateFieldMap(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (const Char_t*) G__int(libp->para[5])
, (const Char_t*) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) AliMagF::CreateFieldMap((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (const Char_t*) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) AliMagF::CreateFieldMap((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) AliMagF::CreateFieldMap((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) AliMagF::CreateFieldMap((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) AliMagF::CreateFieldMap((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) AliMagF::CreateFieldMap((Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) AliMagF::CreateFieldMap());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMagF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMagF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliMagF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMagF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMagF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMagF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMagF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMagF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_724_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMagF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliMagF G__TAliMagF;
static int G__G__STEERBase_724_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliMagF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliMagF*) (soff+(sizeof(AliMagF)*i)))->~G__TAliMagF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliMagF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliMagF*) (soff))->~G__TAliMagF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliMathBase */
static int G__G__STEERBase_740_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMathBase* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMathBase[n];
     } else {
       p = new((void*) gvp) AliMathBase[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMathBase;
     } else {
       p = new((void*) gvp) AliMathBase;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMathBase));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMathBase::EvaluateUni((const Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, (const Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      AliMathBase::EvaluateUniExternal((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      AliMathBase::EvaluateUniExternal((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMathBase::Freq((Int_t) G__int(libp->para[0]), (const Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      AliMathBase::TruncatedMean((TH1F*) G__int(libp->para[0]), (TVectorD*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      AliMathBase::TruncatedMean((TH1F*) G__int(libp->para[0]), (TVectorD*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      AliMathBase::TruncatedMean((TH1F*) G__int(libp->para[0]), (TVectorD*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      AliMathBase::TruncatedMean((TH1F*) G__int(libp->para[0]), (TVectorD*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      AliMathBase::LTM((TH1F*) G__int(libp->para[0]), (TVectorD*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      AliMathBase::LTM((TH1F*) G__int(libp->para[0]), (TVectorD*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      AliMathBase::LTM((TH1F*) G__int(libp->para[0]), (TVectorD*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      AliMathBase::LTM((TH1F*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 100, (double) AliMathBase::FitGaus((TH1F*) G__int(libp->para[0]), (TVectorD*) G__int(libp->para[1])
, (TMatrixD*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) AliMathBase::FitGaus((TH1F*) G__int(libp->para[0]), (TVectorD*) G__int(libp->para[1])
, (TMatrixD*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) AliMathBase::FitGaus((TH1F*) G__int(libp->para[0]), (TVectorD*) G__int(libp->para[1])
, (TMatrixD*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) AliMathBase::FitGaus((TH1F*) G__int(libp->para[0]), (TVectorD*) G__int(libp->para[1])
, (TMatrixD*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) AliMathBase::FitGaus((TH1F*) G__int(libp->para[0]), (TVectorD*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) AliMathBase::FitGaus((TH1F*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letdouble(result7, 100, (double) AliMathBase::FitGaus(
(Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (TVectorD*) G__int(libp->para[4]), (TMatrixD*) G__int(libp->para[5])
, (Bool_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letdouble(result7, 100, (double) AliMathBase::FitGaus((Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (TVectorD*) G__int(libp->para[4]), (TMatrixD*) G__int(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) AliMathBase::FitGaus((Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (TVectorD*) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) AliMathBase::FitGaus((Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 102, (double) AliMathBase::GetCOG((Short_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Float_t*) G__int(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 102, (double) AliMathBase::GetCOG((Short_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t*) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 102, (double) AliMathBase::GetCOG((Short_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliMathBase::TruncatedGaus((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliMathBase::TruncatedGaus((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMathBase::MakeStat2D((TH3*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMathBase::MakeStat1D((TH3*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliMathBase::ErfcFast((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliMathBase::ErfFast((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      AliMathBase::TestGausFit((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      AliMathBase::TestGausFit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 100, (double) AliMathBase::BetheBlochAleph((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) AliMathBase::BetheBlochAleph((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) AliMathBase::BetheBlochAleph((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) AliMathBase::BetheBlochAleph((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) AliMathBase::BetheBlochAleph((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) AliMathBase::BetheBlochAleph((Double_t) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) AliMathBase::Gamma((Double_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) AliMathBase::Gamma());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMathBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMathBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliMathBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMathBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMathBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMathBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMathBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMathBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_740_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMathBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_740_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliMathBase* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliMathBase(*(AliMathBase*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMathBase));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliMathBase G__TAliMathBase;
static int G__G__STEERBase_740_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliMathBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliMathBase*) (soff+(sizeof(AliMathBase)*i)))->~G__TAliMathBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliMathBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliMathBase*) (soff))->~G__TAliMathBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_740_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMathBase* dest = (AliMathBase*) G__getstructoffset();
   *dest = *(AliMathBase*) libp->para[0].ref;
   const AliMathBase& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVHeader */
static int G__G__STEERBase_752_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVHeader& obj = ((AliVHeader*) G__getstructoffset())->operator=(*(AliVHeader*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliVHeader*) G__getstructoffset())->GetBunchCrossNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVHeader*) G__getstructoffset())->GetOrbitNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVHeader*) G__getstructoffset())->GetPeriodNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVHeader*) G__getstructoffset())->GetTimeStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliVHeader*) G__getstructoffset())->GetTriggerMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliVHeader*) G__getstructoffset())->GetTriggerCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVHeader*) G__getstructoffset())->GetEventType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliVHeader*) G__getstructoffset())->GetCocktailHeaders());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliVHeader*) G__getstructoffset())->GetEventIdAsLong());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVHeader*) G__getstructoffset())->IsTriggerInputFired((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVHeader*) G__getstructoffset())->GetL0TriggerInputs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVHeader*) G__getstructoffset())->GetL1TriggerInputs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliVHeader*) G__getstructoffset())->GetL2TriggerInputs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TBits* pobj;
         const TBits xobj = ((const AliVHeader*) G__getstructoffset())->GetIRInt2InteractionMap();
         pobj = new TBits(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TBits* pobj;
         const TBits xobj = ((const AliVHeader*) G__getstructoffset())->GetIRInt1InteractionMap();
         pobj = new TBits(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVHeader*) G__getstructoffset())->GetIRInt2ClosestInteractionMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const AliVHeader*) G__getstructoffset())->GetIRInt1ClosestInteractionMap((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const AliVHeader*) G__getstructoffset())->GetIRInt1ClosestInteractionMap());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_752_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVHeader G__TAliVHeader;
static int G__G__STEERBase_752_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVHeader*) (soff+(sizeof(AliVHeader)*i)))->~G__TAliVHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVHeader*) (soff))->~G__TAliVHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVCluster */
static int G__G__STEERBase_753_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVCluster[n];
     } else {
       p = new((void*) gvp) AliVCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVCluster;
     } else {
       p = new((void*) gvp) AliVCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliVCluster(*(AliVCluster*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliVCluster(*(AliVCluster*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVCluster& obj = ((AliVCluster*) G__getstructoffset())->operator=(*(AliVCluster*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCluster*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetType((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const AliVCluster*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetE((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->E());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetChi2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->Chi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetPositionAt((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetPosition((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVCluster*) G__getstructoffset())->GetPosition((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetPIDAt((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetPID((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliVCluster*) G__getstructoffset())->GetPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVCluster*) G__getstructoffset())->IsEMCAL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVCluster*) G__getstructoffset())->IsPHOS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetDispersion((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->GetDispersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetM20((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->GetM20());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetM02((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->GetM02());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetNExMax((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliVCluster*) G__getstructoffset())->GetNExMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetTOF((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->GetTOF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetEmcCpvDistance((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->GetEmcCpvDistance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetTrackDistance((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->GetTrackDx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->GetTrackDz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetDistanceToBadChannel((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->GetDistanceToBadChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetNCells((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCluster*) G__getstructoffset())->GetNCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetCellsAbsId((UShort_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((AliVCluster*) G__getstructoffset())->GetCellsAbsId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetCellsAmplitudeFraction((Double32_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((AliVCluster*) G__getstructoffset())->GetCellsAmplitudeFraction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCluster*) G__getstructoffset())->GetCellAbsId((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->GetCellAmplitudeFraction((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCluster*) G__getstructoffset())->GetLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCluster*) G__getstructoffset())->GetLabelAt((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const AliVCluster*) G__getstructoffset())->GetLabels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVCluster*) G__getstructoffset())->GetNLabels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetLabel((Int_t*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetCellsMCEdepFractionMap((UInt_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const AliVCluster*) G__getstructoffset())->GetCellsMCEdepFractionMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVCluster*) G__getstructoffset())->GetCellMCEdepFractionArray((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVCluster*) G__getstructoffset())->PackMCEdepFraction((Float_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetClusterMCEdepFractionFromEdepArray((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetClusterMCEdepFraction((UShort_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const AliVCluster*) G__getstructoffset())->GetClusterMCEdepFraction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVCluster*) G__getstructoffset())->GetClusterMCEdepFraction((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCluster*) G__getstructoffset())->GetNTracksMatched());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVCluster*) G__getstructoffset())->GetTrackMatched((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const AliVCluster*) G__getstructoffset())->GetTrackMatchedIndex((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const AliVCluster*) G__getstructoffset())->GetTrackMatchedIndex());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->GetCoreEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetCoreEnergy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->GetMCEnergyFraction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetMCEnergyFraction((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVCluster*) G__getstructoffset())->GetIsExotic());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetIsExotic((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->GetUserDefEnergy((AliVCluster::VCluUserDefEnergy_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetUserDefEnergy((AliVCluster::VCluUserDefEnergy_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->GetUserDefEnergy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetUserDefEnergy((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->GetNonLinCorrEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetNonLinCorrEnergy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCluster*) G__getstructoffset())->GetHadCorrEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->SetHadCorrEnergy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVCluster*) G__getstructoffset())->GetMomentum(*(TLorentzVector*) libp->para[0].ref, (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVCluster*) G__getstructoffset())->GetMomentum(*(TLorentzVector*) libp->para[0].ref, (Double_t*) G__int(libp->para[1])
, (AliVCluster::VCluUserDefEnergy_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_753_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVCluster G__TAliVCluster;
static int G__G__STEERBase_753_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVCluster*) (soff+(sizeof(AliVCluster)*i)))->~G__TAliVCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVCluster*) (soff))->~G__TAliVCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVCaloCells */
static int G__G__STEERBase_757_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVCaloCells& obj = ((AliVCaloCells*) G__getstructoffset())->operator=(*(AliVCaloCells*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVCaloCells*) G__getstructoffset())->IsEMCAL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVCaloCells*) G__getstructoffset())->IsPHOS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const AliVCaloCells*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloCells*) G__getstructoffset())->SetType((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloCells*) G__getstructoffset())->CreateContainer((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloCells*) G__getstructoffset())->DeleteContainer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloCells*) G__getstructoffset())->Sort();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVCaloCells*) G__getstructoffset())->GetCell((Short_t) G__int(libp->para[0]), *(Short_t*) G__Shortref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 103, (long) ((AliVCaloCells*) G__getstructoffset())->SetCell(
(Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Bool_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) ((AliVCaloCells*) G__getstructoffset())->SetCell((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((AliVCaloCells*) G__getstructoffset())->SetCell((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((AliVCaloCells*) G__getstructoffset())->SetCell((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliVCaloCells*) G__getstructoffset())->GetNumberOfCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloCells*) G__getstructoffset())->SetNumberOfCells((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliVCaloCells*) G__getstructoffset())->GetCellAmplitude((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVCaloCells*) G__getstructoffset())->GetCellHighGain((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliVCaloCells*) G__getstructoffset())->GetCellTime((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((AliVCaloCells*) G__getstructoffset())->GetCellPosition((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCaloCells*) G__getstructoffset())->GetAmplitude((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVCaloCells*) G__getstructoffset())->GetHighGain((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCaloCells*) G__getstructoffset())->GetTime((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliVCaloCells*) G__getstructoffset())->GetCellNumber((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVCaloCells*) G__getstructoffset())->CopyCaloCells((Bool_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliVCaloCells*) G__getstructoffset())->GetCellMCLabel((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCaloCells*) G__getstructoffset())->GetMCLabel((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliVCaloCells*) G__getstructoffset())->GetCellEFraction((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVCaloCells*) G__getstructoffset())->GetEFraction((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloCells*) G__getstructoffset())->SetCellEFraction((Short_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloCells*) G__getstructoffset())->SetEFraction((Short_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVCaloCells::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVCaloCells::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVCaloCells::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVCaloCells::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloCells*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVCaloCells::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVCaloCells::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVCaloCells::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_757_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVCaloCells::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVCaloCells G__TAliVCaloCells;
static int G__G__STEERBase_757_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVCaloCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVCaloCells*) (soff+(sizeof(AliVCaloCells)*i)))->~G__TAliVCaloCells();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVCaloCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVCaloCells*) (soff))->~G__TAliVCaloCells();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVCaloTrigger */
static int G__G__STEERBase_759_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVCaloTrigger& obj = ((AliVCaloTrigger*) G__getstructoffset())->operator=(*(AliVCaloTrigger*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVCaloTrigger*) G__getstructoffset())->IsEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloTrigger*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloTrigger*) G__getstructoffset())->Allocate((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloTrigger*) G__getstructoffset())->DeAllocate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVCaloTrigger*) G__getstructoffset())->Add(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVCaloTrigger*) G__getstructoffset())->Add(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloTrigger*) G__getstructoffset())->SetL1Threshold((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloTrigger*) G__getstructoffset())->SetL1Threshold((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloTrigger*) G__getstructoffset())->SetL1V0((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloTrigger*) G__getstructoffset())->SetL1V0((Int_t) G__int(libp->para[0]), (const Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloTrigger*) G__getstructoffset())->SetL1FrameMask((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloTrigger*) G__getstructoffset())->SetL1FrameMask((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVCaloTrigger*) G__getstructoffset())->GetPosition(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVCaloTrigger*) G__getstructoffset())->GetAmplitude(*(Float_t*) G__Floatref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVCaloTrigger*) G__getstructoffset())->GetTime(*(Float_t*) G__Floatref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVCaloTrigger*) G__getstructoffset())->GetTriggerBits(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVCaloTrigger*) G__getstructoffset())->GetNL0Times(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVCaloTrigger*) G__getstructoffset())->GetL0Times((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCaloTrigger*) G__getstructoffset())->GetEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVCaloTrigger*) G__getstructoffset())->GetL1TimeSum(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCaloTrigger*) G__getstructoffset())->GetL1TimeSum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVCaloTrigger*) G__getstructoffset())->GetL1SubRegion(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCaloTrigger*) G__getstructoffset())->GetL1SubRegion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCaloTrigger*) G__getstructoffset())->GetL1Threshold((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCaloTrigger*) G__getstructoffset())->GetL1Threshold((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCaloTrigger*) G__getstructoffset())->GetL1V0((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCaloTrigger*) G__getstructoffset())->GetL1V0((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCaloTrigger*) G__getstructoffset())->GetL1FrameMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCaloTrigger*) G__getstructoffset())->GetL1FrameMask((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCaloTrigger*) G__getstructoffset())->GetMedian((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVCaloTrigger*) G__getstructoffset())->GetTriggerBitWord());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVCaloTrigger*) G__getstructoffset())->GetTriggerBitWord(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVCaloTrigger*) G__getstructoffset())->Next());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVCaloTrigger::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVCaloTrigger::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVCaloTrigger::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVCaloTrigger::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVCaloTrigger*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVCaloTrigger::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVCaloTrigger::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVCaloTrigger::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_759_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVCaloTrigger::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVCaloTrigger G__TAliVCaloTrigger;
static int G__G__STEERBase_759_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVCaloTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVCaloTrigger*) (soff+(sizeof(AliVCaloTrigger)*i)))->~G__TAliVCaloTrigger();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVCaloTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVCaloTrigger*) (soff))->~G__TAliVCaloTrigger();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTOFTriggerMask */
static int G__G__STEERBase_775_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTOFTriggerMask* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTOFTriggerMask[n];
     } else {
       p = new((void*) gvp) AliTOFTriggerMask[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTOFTriggerMask;
     } else {
       p = new((void*) gvp) AliTOFTriggerMask;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFTriggerMask));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTOFTriggerMask* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTOFTriggerMask(*(AliTOFTriggerMask*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTOFTriggerMask(*(AliTOFTriggerMask*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFTriggerMask));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTOFTriggerMask& obj = ((AliTOFTriggerMask*) G__getstructoffset())->operator=(*(AliTOFTriggerMask*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTOFTriggerMask*) G__getstructoffset())->GetTriggerMask((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((AliTOFTriggerMask*) G__getstructoffset())->GetTriggerMaskArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFTriggerMask*) G__getstructoffset())->SetTriggerMaskArray((UInt_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFTriggerMask*) G__getstructoffset())->ResetMask();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFTriggerMask*) G__getstructoffset())->SetON((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTOFTriggerMask*) G__getstructoffset())->IsON((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliTOFTriggerMask*) G__getstructoffset())->GetNumberMaxiPadOn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliTOFTriggerMask*) G__getstructoffset())->GetHistoMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTOFTriggerMask::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTOFTriggerMask::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTOFTriggerMask::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTOFTriggerMask::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTOFTriggerMask*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTOFTriggerMask::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTOFTriggerMask::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTOFTriggerMask::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_775_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTOFTriggerMask::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTOFTriggerMask G__TAliTOFTriggerMask;
static int G__G__STEERBase_775_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTOFTriggerMask*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTOFTriggerMask*) (soff+(sizeof(AliTOFTriggerMask)*i)))->~G__TAliTOFTriggerMask();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTOFTriggerMask*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTOFTriggerMask*) (soff))->~G__TAliTOFTriggerMask();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVTrdTracklet */
static int G__G__STEERBase_776_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVTrdTracklet& obj = ((AliVTrdTracklet*) G__getstructoffset())->operator=(*(AliVTrdTracklet*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVTrdTracklet*) G__getstructoffset())->GetTrackletWord());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrdTracklet*) G__getstructoffset())->GetBinY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrdTracklet*) G__getstructoffset())->GetBinDy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrdTracklet*) G__getstructoffset())->GetBinZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrdTracklet*) G__getstructoffset())->GetPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTrdTracklet*) G__getstructoffset())->GetLocalY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTrdTracklet*) G__getstructoffset())->GetDyDx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrdTracklet*) G__getstructoffset())->GetHCId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrdTracklet*) G__getstructoffset())->GetDetector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrdTracklet*) G__getstructoffset())->GetLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVTrdTracklet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTrdTracklet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVTrdTracklet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVTrdTracklet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrdTracklet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTrdTracklet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVTrdTracklet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTrdTracklet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_776_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVTrdTracklet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVTrdTracklet G__TAliVTrdTracklet;
static int G__G__STEERBase_776_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVTrdTracklet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVTrdTracklet*) (soff+(sizeof(AliVTrdTracklet)*i)))->~G__TAliVTrdTracklet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVTrdTracklet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVTrdTracklet*) (soff))->~G__TAliVTrdTracklet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVTrdTrack */
static int G__G__STEERBase_777_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVTrdTrack& obj = ((AliVTrdTrack*) G__getstructoffset())->operator=(*(AliVTrdTrack*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrdTrack*) G__getstructoffset())->GetA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrdTrack*) G__getstructoffset())->GetLayerMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrdTrack*) G__getstructoffset())->GetPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrdTrack*) G__getstructoffset())->GetPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrdTrack*) G__getstructoffset())->GetStack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrdTrack*) G__getstructoffset())->GetSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVTrdTrack*) G__getstructoffset())->GetTrackInTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliVTrdTrack*) G__getstructoffset())->GetFlagsTiming());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrdTrack*) G__getstructoffset())->GetLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTrdTrack*) G__getstructoffset())->Pt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTrdTrack*) G__getstructoffset())->GetNTracklets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVTrdTrack*) G__getstructoffset())->GetTracklet((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVTrdTrack*) G__getstructoffset())->GetTrackMatch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrdTrack*) G__getstructoffset())->SetA((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrdTrack*) G__getstructoffset())->SetLayerMask((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrdTrack*) G__getstructoffset())->SetPID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrdTrack*) G__getstructoffset())->SetLabel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrdTrack*) G__getstructoffset())->SetSector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrdTrack*) G__getstructoffset())->SetStack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVTrdTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTrdTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVTrdTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVTrdTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTrdTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTrdTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVTrdTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTrdTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_777_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVTrdTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVTrdTrack G__TAliVTrdTrack;
static int G__G__STEERBase_777_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVTrdTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVTrdTrack*) (soff+(sizeof(AliVTrdTrack)*i)))->~G__TAliVTrdTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVTrdTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVTrdTrack*) (soff))->~G__TAliVTrdTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVMultiplicity */
static int G__G__STEERBase_778_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVMultiplicity& obj = ((AliVMultiplicity*) G__getstructoffset())->operator=(*(AliVMultiplicity*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVMultiplicity*) G__getstructoffset())->GetMultTrackRefs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVMultiplicity*) G__getstructoffset())->GetScaleDThetaBySin2T());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVMultiplicity*) G__getstructoffset())->SetMultTrackRefs((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVMultiplicity*) G__getstructoffset())->SetScaleDThetaBySin2T((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVMultiplicity*) G__getstructoffset())->GetNumberOfTracklets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVMultiplicity*) G__getstructoffset())->GetTheta((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVMultiplicity*) G__getstructoffset())->GetPhi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVMultiplicity*) G__getstructoffset())->GetDeltaPhi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVMultiplicity*) G__getstructoffset())->GetLabel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVMultiplicity*) G__getstructoffset())->SetLabel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVMultiplicity*) G__getstructoffset())->GetEta((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliVMultiplicity*) G__getstructoffset())->GetTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliVMultiplicity*) G__getstructoffset())->GetPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliVMultiplicity*) G__getstructoffset())->GetDeltPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const AliVMultiplicity*) G__getstructoffset())->GetLabels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const AliVMultiplicity*) G__getstructoffset())->GetLabels2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliVMultiplicity*) G__getstructoffset())->GetNumberOfFiredChips((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVMultiplicity*) G__getstructoffset())->SetFiredChips((Int_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVMultiplicity*) G__getstructoffset())->SetFastOrFiredChips((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVMultiplicity*) G__getstructoffset())->SetFastOrFiredChipMap(*(TBits*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TBits& obj = ((const AliVMultiplicity*) G__getstructoffset())->GetFastOrFiredChips();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TBits& obj = ((const AliVMultiplicity*) G__getstructoffset())->GetFastOrFiredChipMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVMultiplicity*) G__getstructoffset())->TestFastOrFiredChips((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVMultiplicity*) G__getstructoffset())->SetFiredChipMap(*(TBits*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVMultiplicity*) G__getstructoffset())->SetFiredChipMap((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TBits& obj = ((const AliVMultiplicity*) G__getstructoffset())->GetFiredChipMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVMultiplicity*) G__getstructoffset())->TestFiredChipMap((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVMultiplicity*) G__getstructoffset())->GetNumberOfITSClusters((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVMultiplicity*) G__getstructoffset())->GetNumberOfSPDClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVMultiplicity*) G__getstructoffset())->SetITSClusters((Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVMultiplicity::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVMultiplicity::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVMultiplicity::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVMultiplicity::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVMultiplicity*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVMultiplicity::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVMultiplicity::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVMultiplicity::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_778_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVMultiplicity::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVMultiplicity G__TAliVMultiplicity;
static int G__G__STEERBase_778_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVMultiplicity*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVMultiplicity*) (soff+(sizeof(AliVMultiplicity)*i)))->~G__TAliVMultiplicity();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVMultiplicity*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVMultiplicity*) (soff))->~G__TAliVMultiplicity();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVVZERO */
static int G__G__STEERBase_780_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVVZERO& obj = ((AliVVZERO*) G__getstructoffset())->operator=(*(AliVVZERO*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliVVZERO*) G__getstructoffset())->GetNbPMV0A());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliVVZERO*) G__getstructoffset())->GetNbPMV0C());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVVZERO*) G__getstructoffset())->GetMTotV0A());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVVZERO*) G__getstructoffset())->GetMTotV0C());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVVZERO*) G__getstructoffset())->GetMRingV0A((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVVZERO*) G__getstructoffset())->GetMRingV0C((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVVZERO*) G__getstructoffset())->GetMultiplicity((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVVZERO*) G__getstructoffset())->GetMultiplicityV0A((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVVZERO*) G__getstructoffset())->GetMultiplicityV0C((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVZERO*) G__getstructoffset())->BBTriggerV0A((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVZERO*) G__getstructoffset())->BGTriggerV0A((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVZERO*) G__getstructoffset())->BBTriggerV0C((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVZERO*) G__getstructoffset())->BGTriggerV0C((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVZERO*) G__getstructoffset())->GetBBFlag((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVZERO*) G__getstructoffset())->GetBGFlag((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVVZERO*) G__getstructoffset())->GetV0ATime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVVZERO*) G__getstructoffset())->GetV0CTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVVZERO*) G__getstructoffset())->GetV0ADecision());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVVZERO*) G__getstructoffset())->GetV0CDecision());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliVVZERO*) G__getstructoffset())->GetTriggerChargeA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliVVZERO*) G__getstructoffset())->GetTriggerChargeC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliVVZERO*) G__getstructoffset())->GetTriggerBits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVZERO*) G__getstructoffset())->GetPFBBFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVZERO*) G__getstructoffset())->GetPFBGFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliVVZERO::GetVZEROAvgPhi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliVVZERO::GetVZEROEtaMin((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliVVZERO::GetVZEROEtaMax((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVVZERO::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVVZERO::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVVZERO::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVVZERO::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVVZERO*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVVZERO::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVVZERO::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVVZERO::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_780_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVVZERO::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVVZERO G__TAliVVZERO;
static int G__G__STEERBase_780_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVVZERO*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVVZERO*) (soff+(sizeof(AliVVZERO)*i)))->~G__TAliVVZERO();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVVZERO*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVVZERO*) (soff))->~G__TAliVVZERO();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVZDC */
static int G__G__STEERBase_781_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVZDC& obj = ((AliVZDC*) G__getstructoffset())->operator=(*(AliVZDC*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliVZDC*) G__getstructoffset())->GetZDCParticipants());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliVZDC*) G__getstructoffset())->GetZDCPartSideA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliVZDC*) G__getstructoffset())->GetZDCPartSideC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVZDC*) G__getstructoffset())->GetImpactParameter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVZDC*) G__getstructoffset())->GetImpactParamSideA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVZDC*) G__getstructoffset())->GetImpactParamSideC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVZDC*) G__getstructoffset())->GetZNCEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVZDC*) G__getstructoffset())->GetZNAEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVZDC*) G__getstructoffset())->GetZPCEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVZDC*) G__getstructoffset())->GetZPAEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVZDC*) G__getstructoffset())->GetZEM1Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVZDC*) G__getstructoffset())->GetZEM2Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliVZDC*) G__getstructoffset())->GetZNCTowerEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliVZDC*) G__getstructoffset())->GetZNATowerEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliVZDC*) G__getstructoffset())->GetZPCTowerEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliVZDC*) G__getstructoffset())->GetZPATowerEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliVZDC*) G__getstructoffset())->GetZNCTowerEnergyLR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliVZDC*) G__getstructoffset())->GetZNATowerEnergyLR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVZDC*) G__getstructoffset())->GetZNCentroidInPbPb((Float_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVZDC*) G__getstructoffset())->GetZNCentroidInpp((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVZDC*) G__getstructoffset())->GetZDCTimeSum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVZDC*) G__getstructoffset())->GetZDCTimeDiff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVZDC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVZDC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVZDC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVZDC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVZDC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVZDC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVZDC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVZDC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_781_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVZDC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVZDC G__TAliVZDC;
static int G__G__STEERBase_781_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVZDC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVZDC*) (soff+(sizeof(AliVZDC)*i)))->~G__TAliVZDC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVZDC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVZDC*) (soff))->~G__TAliVZDC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVMFT */
static int G__G__STEERBase_782_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVMFT* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVMFT[n];
     } else {
       p = new((void*) gvp) AliVMFT[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVMFT;
     } else {
       p = new((void*) gvp) AliVMFT;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMFT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_782_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVMFT* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliVMFT(*(AliVMFT*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliVMFT(*(AliVMFT*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMFT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_782_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVMFT& obj = ((AliVMFT*) G__getstructoffset())->operator=(*(AliVMFT*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_782_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVMFT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_782_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVMFT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_782_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVMFT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_782_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVMFT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_782_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVMFT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_782_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVMFT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_782_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVMFT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_782_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVMFT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_782_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVMFT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVMFT G__TAliVMFT;
static int G__G__STEERBase_782_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVMFT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVMFT*) (soff+(sizeof(AliVMFT)*i)))->~G__TAliVMFT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVMFT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVMFT*) (soff))->~G__TAliVMFT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVAD */
static int G__G__STEERBase_787_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVAD& obj = ((AliVAD*) G__getstructoffset())->operator=(*(AliVAD*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliVAD*) G__getstructoffset())->GetNbPMADA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliVAD*) G__getstructoffset())->GetNbPMADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVAD*) G__getstructoffset())->GetMTotADA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVAD*) G__getstructoffset())->GetMTotADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVAD*) G__getstructoffset())->GetMultiplicity((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVAD*) G__getstructoffset())->GetMultiplicityADA((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVAD*) G__getstructoffset())->GetMultiplicityADC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVAD*) G__getstructoffset())->BBTriggerADA((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVAD*) G__getstructoffset())->BGTriggerADA((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVAD*) G__getstructoffset())->BBTriggerADC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVAD*) G__getstructoffset())->BGTriggerADC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVAD*) G__getstructoffset())->GetBBFlag((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVAD*) G__getstructoffset())->GetBGFlag((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVAD*) G__getstructoffset())->GetADATime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVAD*) G__getstructoffset())->GetADCTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVAD*) G__getstructoffset())->GetADADecision());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVAD*) G__getstructoffset())->GetADCDecision());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliVAD*) G__getstructoffset())->GetTriggerChargeA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliVAD*) G__getstructoffset())->GetTriggerChargeC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliVAD*) G__getstructoffset())->GetTriggerBits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVAD*) G__getstructoffset())->GetPFBBFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVAD*) G__getstructoffset())->GetPFBGFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVAD::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVAD::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVAD::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVAD::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAD*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVAD::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVAD::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVAD::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_787_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVAD::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVAD G__TAliVAD;
static int G__G__STEERBase_787_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVAD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVAD*) (soff+(sizeof(AliVAD)*i)))->~G__TAliVAD();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVAD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVAD*) (soff))->~G__TAliVAD();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTrackReference */
static int G__G__STEERBase_794_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTrackReference* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackReference[n];
     } else {
       p = new((void*) gvp) AliTrackReference[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackReference;
     } else {
       p = new((void*) gvp) AliTrackReference;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReference));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTrackReference* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackReference((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliTrackReference((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackReference((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliTrackReference((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReference));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTrackReference* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTrackReference(*(AliTrackReference*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTrackReference(*(AliTrackReference*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReference));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTrackReference*) G__getstructoffset())->GetTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackReference*) G__getstructoffset())->SetTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackReference*) G__getstructoffset())->SetLength((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackReference*) G__getstructoffset())->SetTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->GetLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->GetTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTrackReference*) G__getstructoffset())->Label());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackReference*) G__getstructoffset())->SetLabel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->R());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->Pt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->Phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->Theta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->Z());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->Px());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->Py());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->Pz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->P());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTrackReference*) G__getstructoffset())->UserId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTrackReference*) G__getstructoffset())->DetectorId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackReference*) G__getstructoffset())->SetDetectorId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackReference*) G__getstructoffset())->SetPosition((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackReference*) G__getstructoffset())->SetMomentum((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackReference*) G__getstructoffset())->SetUserId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->PhiPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->Alpha());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->LocalX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackReference*) G__getstructoffset())->LocalY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTrackReference::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTrackReference::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTrackReference::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTrackReference::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackReference*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTrackReference::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTrackReference::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTrackReference::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_794_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTrackReference::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTrackReference G__TAliTrackReference;
static int G__G__STEERBase_794_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTrackReference*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTrackReference*) (soff+(sizeof(AliTrackReference)*i)))->~G__TAliTrackReference();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTrackReference*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTrackReference*) (soff))->~G__TAliTrackReference();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_794_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTrackReference* dest = (AliTrackReference*) G__getstructoffset();
   *dest = *(AliTrackReference*) libp->para[0].ref;
   const AliTrackReference& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliMCParticle */
static int G__G__STEERBase_796_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMCParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMCParticle[n];
     } else {
       p = new((void*) gvp) AliMCParticle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMCParticle;
     } else {
       p = new((void*) gvp) AliMCParticle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMCParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMCParticle(
(TParticle*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliMCParticle(
(TParticle*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMCParticle((TParticle*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliMCParticle((TParticle*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMCParticle((TParticle*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliMCParticle((TParticle*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMCParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliMCParticle(*(AliMCParticle*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliMCParticle(*(AliMCParticle*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliMCParticle& obj = ((AliMCParticle*) G__getstructoffset())->operator=(*(AliMCParticle*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMCParticle*) G__getstructoffset())->T());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMCParticle*) G__getstructoffset())->Label());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMCParticle*) G__getstructoffset())->Particle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMCParticle*) G__getstructoffset())->GetNumberOfTrackReferences());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliMCParticle*) G__getstructoffset())->GetTrackReference((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 102, (double) ((AliMCParticle*) G__getstructoffset())->GetTPCTrackLength((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 102, (double) ((AliMCParticle*) G__getstructoffset())->GetTPCTrackLength((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), (Float_t) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCParticle*) G__getstructoffset())->SetMother((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCParticle*) G__getstructoffset())->SetFirstDaughter((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCParticle*) G__getstructoffset())->SetLastDaughter((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCParticle*) G__getstructoffset())->SetLabel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMCParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMCParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliMCParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMCParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMCParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMCParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMCParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_796_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMCParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliMCParticle G__TAliMCParticle;
static int G__G__STEERBase_796_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliMCParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliMCParticle*) (soff+(sizeof(AliMCParticle)*i)))->~G__TAliMCParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliMCParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliMCParticle*) (soff))->~G__TAliMCParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliMCEventHandler */
static int G__G__STEERBase_799_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMCEventHandler* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMCEventHandler[n];
     } else {
       p = new((void*) gvp) AliMCEventHandler[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMCEventHandler;
     } else {
       p = new((void*) gvp) AliMCEventHandler;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMCEventHandler* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliMCEventHandler((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) AliMCEventHandler((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEventHandler*) G__getstructoffset())->SetInputPath((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMCEventHandler*) G__getstructoffset())->GetInputPath());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliMCEventHandler*) G__getstructoffset())->InitIO((Option_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEventHandler*) G__getstructoffset())->ResetIO();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliMCEventHandler*) G__getstructoffset())->LoadEvent((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEventHandler*) G__getstructoffset())->SetReadTR((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEventHandler*) G__getstructoffset())->AddSubsidiaryHandler((AliMCEventHandler*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEventHandler*) G__getstructoffset())->SetNumberOfEventsInContainer((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEventHandler*) G__getstructoffset())->SetPreReadMode((AliMCEventHandler::PreReadMode_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMCEventHandler*) G__getstructoffset())->TreeTR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMCEventHandler*) G__getstructoffset())->TreeK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliMCEventHandler*) G__getstructoffset())->GetParticleAndTR((Int_t) G__int(libp->para[0]), libp->para[1].ref ? *(TParticle**) libp->para[1].ref : *(TParticle**) (void*) (&G__Mlong(libp->para[1]))
, libp->para[2].ref ? *(TClonesArray**) libp->para[2].ref : *(TClonesArray**) (void*) (&G__Mlong(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliMCEventHandler*) G__getstructoffset())->DrawCheck((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliMCEventHandler*) G__getstructoffset())->DrawCheck((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliMCEventHandler*) G__getstructoffset())->InitOk());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEventHandler*) G__getstructoffset())->SelectParticle((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliMCEventHandler*) G__getstructoffset())->IsParticleSelected((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEventHandler*) G__getstructoffset())->CreateLabelMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliMCEventHandler*) G__getstructoffset())->GetNewLabel((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMCEventHandler::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMCEventHandler::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliMCEventHandler::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMCEventHandler::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCEventHandler*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMCEventHandler::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMCEventHandler::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMCEventHandler::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_799_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMCEventHandler::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliMCEventHandler G__TAliMCEventHandler;
static int G__G__STEERBase_799_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliMCEventHandler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliMCEventHandler*) (soff+(sizeof(AliMCEventHandler)*i)))->~G__TAliMCEventHandler();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliMCEventHandler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliMCEventHandler*) (soff))->~G__TAliMCEventHandler();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliMCVertex */
static int G__G__STEERBase_801_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMCVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMCVertex[n];
     } else {
       p = new((void*) gvp) AliMCVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMCVertex;
     } else {
       p = new((void*) gvp) AliMCVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_801_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMCVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliMCVertex(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) AliMCVertex(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_801_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCVertex*) G__getstructoffset())->SetPosition((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_801_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMCVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_801_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMCVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_801_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliMCVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_801_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMCVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_801_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMCVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_801_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMCVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_801_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMCVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_801_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMCVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_801_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMCVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_801_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliMCVertex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliMCVertex(*(AliMCVertex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliMCVertex G__TAliMCVertex;
static int G__G__STEERBase_801_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliMCVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliMCVertex*) (soff+(sizeof(AliMCVertex)*i)))->~G__TAliMCVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliMCVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliMCVertex*) (soff))->~G__TAliMCVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_801_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMCVertex* dest = (AliMCVertex*) G__getstructoffset();
   *dest = *(AliMCVertex*) libp->para[0].ref;
   const AliMCVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliMergeableCollectionIterator */
static int G__G__STEERBase_803_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMergeableCollectionIterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMergeableCollectionIterator((AliMergeableCollection*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliMergeableCollectionIterator((AliMergeableCollection*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMergeableCollectionIterator((AliMergeableCollection*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliMergeableCollectionIterator((AliMergeableCollection*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionIterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_803_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMergeableCollectionIterator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_803_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMergeableCollectionIterator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_803_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliMergeableCollectionIterator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_803_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMergeableCollectionIterator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_803_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMergeableCollectionIterator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_803_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMergeableCollectionIterator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_803_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMergeableCollectionIterator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_803_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMergeableCollectionIterator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_803_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMergeableCollectionIterator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliMergeableCollectionIterator G__TAliMergeableCollectionIterator;
static int G__G__STEERBase_803_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliMergeableCollectionIterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliMergeableCollectionIterator*) (soff+(sizeof(AliMergeableCollectionIterator)*i)))->~G__TAliMergeableCollectionIterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliMergeableCollectionIterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliMergeableCollectionIterator*) (soff))->~G__TAliMergeableCollectionIterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliMergeableCollectionProxy */
static int G__G__STEERBase_804_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollectionProxy*) G__getstructoffset())->GetObject((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollectionProxy*) G__getstructoffset())->Histo((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollectionProxy*) G__getstructoffset())->H1((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollectionProxy*) G__getstructoffset())->H2((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollectionProxy*) G__getstructoffset())->Prof((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliMergeableCollectionProxy*) G__getstructoffset())->Adopt((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliMergeableCollectionProxy*) G__getstructoffset())->Adopt((const char*) G__int(libp->para[0]), (TObject*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const AliMergeableCollectionProxy*) G__getstructoffset())->CreateIterator((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const AliMergeableCollectionProxy*) G__getstructoffset())->CreateIterator());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMergeableCollectionProxy::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMergeableCollectionProxy::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliMergeableCollectionProxy::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMergeableCollectionProxy::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMergeableCollectionProxy*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMergeableCollectionProxy::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMergeableCollectionProxy::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMergeableCollectionProxy::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_804_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMergeableCollectionProxy::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliMergeableCollectionProxy G__TAliMergeableCollectionProxy;
static int G__G__STEERBase_804_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliMergeableCollectionProxy*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliMergeableCollectionProxy*) (soff+(sizeof(AliMergeableCollectionProxy)*i)))->~G__TAliMergeableCollectionProxy();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliMergeableCollectionProxy*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliMergeableCollectionProxy*) (soff))->~G__TAliMergeableCollectionProxy();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliMergeableCollection */
static int G__G__STEERBase_805_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMergeableCollection* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMergeableCollection((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliMergeableCollection((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMergeableCollection((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliMergeableCollection((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliMergeableCollection[n];
       } else {
         p = new((void*) gvp) AliMergeableCollection[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliMergeableCollection;
       } else {
         p = new((void*) gvp) AliMergeableCollection;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((AliMergeableCollection*) G__getstructoffset())->Attach((AliMergeableCollection*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((AliMergeableCollection*) G__getstructoffset())->Attach((AliMergeableCollection*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliMergeableCollection*) G__getstructoffset())->Adopt((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliMergeableCollection*) G__getstructoffset())->Adopt((const char*) G__int(libp->para[0]), (TObject*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMergeableCollection*) G__getstructoffset())->NumberOfObjects());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMergeableCollection*) G__getstructoffset())->NumberOfKeys());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->GetObject((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->GetObject((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->Histo((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->Histo((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->H1((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->H1((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->H2((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->H2((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->Prof((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->Prof((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((AliMergeableCollection*) G__getstructoffset())->CreateProxy((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((AliMergeableCollection*) G__getstructoffset())->CreateProxy((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->CreateIterator((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->CreateIterator());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->CreateListOfKeys((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->CreateListOfObjectNames((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliMergeableCollection*) G__getstructoffset())->Remove((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliMergeableCollection*) G__getstructoffset())->RemoveByType((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         const TString* pobj;
         const TString xobj = ((const AliMergeableCollection*) G__getstructoffset())->GetKey((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         const TString* pobj;
         const TString xobj = ((const AliMergeableCollection*) G__getstructoffset())->GetKey((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliMergeableCollection*) G__getstructoffset())->GetIdentifier((const char*) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliMergeableCollection*) G__getstructoffset())->GetObjectName((const char*) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMergeableCollection*) G__getstructoffset())->ClearMessages();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const AliMergeableCollection*) G__getstructoffset())->PrintMessages((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const AliMergeableCollection*) G__getstructoffset())->PrintMessages();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((AliMergeableCollection*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->Project((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((const AliMergeableCollection*) G__getstructoffset())->EstimateSize((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((const AliMergeableCollection*) G__getstructoffset())->EstimateSize());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliMergeableCollection*) G__getstructoffset())->ShowEmptyObjects((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliMergeableCollection*) G__getstructoffset())->ShowEmptyObjects();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMergeableCollection*) G__getstructoffset())->PruneEmptyObjects();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliMergeableCollection*) G__getstructoffset())->Prune((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) AliMergeableCollection::MergeObject((TObject*) G__int(libp->para[0]), (TObject*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->GetSum((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliMergeableCollection*) G__getstructoffset())->IsEmptyObject((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMergeableCollection::CorrectIdentifier(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->SortAllIdentifiers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliMergeableCollection*) G__getstructoffset())->NormalizeName((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMergeableCollection*) G__getstructoffset())->Map());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMergeableCollection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMergeableCollection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliMergeableCollection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMergeableCollection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMergeableCollection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMergeableCollection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMergeableCollection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMergeableCollection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_805_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMergeableCollection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliMergeableCollection G__TAliMergeableCollection;
static int G__G__STEERBase_805_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliMergeableCollection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliMergeableCollection*) (soff+(sizeof(AliMergeableCollection)*i)))->~G__TAliMergeableCollection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliMergeableCollection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliMergeableCollection*) (soff))->~G__TAliMergeableCollection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliMixedEvent */
static int G__G__STEERBase_806_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMixedEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMixedEvent[n];
     } else {
       p = new((void*) gvp) AliMixedEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMixedEvent;
     } else {
       p = new((void*) gvp) AliMixedEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMixedEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMixedEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliMixedEvent(*(AliMixedEvent*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliMixedEvent(*(AliMixedEvent*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMixedEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliMixedEvent& obj = ((AliMixedEvent*) G__getstructoffset())->operator=(*(AliMixedEvent*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMixedEvent*) G__getstructoffset())->AddEvent((AliVEvent*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMixedEvent*) G__getstructoffset())->SetPrimaryVertex((AliVVertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMixedEvent*) G__getstructoffset())->Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMixedEvent*) G__getstructoffset())->GetEventVertex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliMixedEvent*) G__getstructoffset())->GetVertexOfEvent((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliMixedEvent*) G__getstructoffset())->GetNumberOfEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMixedEvent*) G__getstructoffset())->GetNumberOfPHOSCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMixedEvent*) G__getstructoffset())->GetNumberOfEMCALCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const AliMixedEvent*) G__getstructoffset())->GetPHOSCellsCumul());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const AliMixedEvent*) G__getstructoffset())->GetEMCALCellsCumul());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMixedEvent*) G__getstructoffset())->GetNCaloClustersCumul((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliMixedEvent*) G__getstructoffset())->ComputeVtx((TObjArray*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Int_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMixedEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMixedEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliMixedEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMixedEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMixedEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMixedEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMixedEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMixedEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_806_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMixedEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliMixedEvent G__TAliMixedEvent;
static int G__G__STEERBase_806_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliMixedEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliMixedEvent*) (soff+(sizeof(AliMixedEvent)*i)))->~G__TAliMixedEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliMixedEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliMixedEvent*) (soff))->~G__TAliMixedEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliMultSelectionBase */
static int G__G__STEERBase_807_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMultSelectionBase* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMultSelectionBase[n];
     } else {
       p = new((void*) gvp) AliMultSelectionBase[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMultSelectionBase;
     } else {
       p = new((void*) gvp) AliMultSelectionBase;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMultSelectionBase));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_807_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMultSelectionBase* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMultSelectionBase((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliMultSelectionBase((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMultSelectionBase((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliMultSelectionBase((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMultSelectionBase));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_807_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliMultSelectionBase::GetMultiplicityPercentileWithFallback((AliVEvent*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_807_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 102, (double) ((AliMultSelectionBase*) G__getstructoffset())->GetMultiplicityPercentile(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((AliMultSelectionBase*) G__getstructoffset())->GetMultiplicityPercentile(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_807_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMultSelectionBase*) G__getstructoffset())->GetEvSelCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_807_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMultSelectionBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_807_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMultSelectionBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_807_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliMultSelectionBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_807_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMultSelectionBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_807_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMultSelectionBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_807_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMultSelectionBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_807_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMultSelectionBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_807_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMultSelectionBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_807_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMultSelectionBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_807_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliMultSelectionBase* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliMultSelectionBase(*(AliMultSelectionBase*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMultSelectionBase));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliMultSelectionBase G__TAliMultSelectionBase;
static int G__G__STEERBase_807_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliMultSelectionBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliMultSelectionBase*) (soff+(sizeof(AliMultSelectionBase)*i)))->~G__TAliMultSelectionBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliMultSelectionBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliMultSelectionBase*) (soff))->~G__TAliMultSelectionBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_807_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMultSelectionBase* dest = (AliMultSelectionBase*) G__getstructoffset();
   *dest = *(AliMultSelectionBase*) libp->para[0].ref;
   const AliMultSelectionBase& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliNeutralTrackParam */
static int G__G__STEERBase_808_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliNeutralTrackParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliNeutralTrackParam[n];
     } else {
       p = new((void*) gvp) AliNeutralTrackParam[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliNeutralTrackParam;
     } else {
       p = new((void*) gvp) AliNeutralTrackParam;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_808_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliNeutralTrackParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliNeutralTrackParam(*(AliNeutralTrackParam*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliNeutralTrackParam(*(AliNeutralTrackParam*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_808_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliNeutralTrackParam& obj = ((AliNeutralTrackParam*) G__getstructoffset())->operator=(*(AliNeutralTrackParam*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_808_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliNeutralTrackParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliNeutralTrackParam(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) AliNeutralTrackParam(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_808_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliNeutralTrackParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliNeutralTrackParam((AliVTrack*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliNeutralTrackParam((AliVTrack*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_808_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliNeutralTrackParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliNeutralTrackParam(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Short_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) AliNeutralTrackParam(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Short_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_808_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliNeutralTrackParam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_808_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliNeutralTrackParam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_808_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliNeutralTrackParam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_808_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliNeutralTrackParam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_808_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliNeutralTrackParam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_808_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliNeutralTrackParam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_808_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliNeutralTrackParam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_808_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliNeutralTrackParam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_808_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliNeutralTrackParam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliNeutralTrackParam G__TAliNeutralTrackParam;
static int G__G__STEERBase_808_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliNeutralTrackParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliNeutralTrackParam*) (soff+(sizeof(AliNeutralTrackParam)*i)))->~G__TAliNeutralTrackParam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliNeutralTrackParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliNeutralTrackParam*) (soff))->~G__TAliNeutralTrackParam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliPDG */
static int G__G__STEERBase_809_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliPDG::AddParticlesToPdgDataBase();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_809_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliPDG::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_809_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPDG::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_809_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliPDG::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_809_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliPDG::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_809_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPDG*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_809_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPDG::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_809_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliPDG::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_809_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPDG::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_809_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliPDG::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__G__STEERBase_809_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliPDG *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliPDG[n];
     } else {
       p = new((void*) gvp) AliPDG[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliPDG;
     } else {
       p = new((void*) gvp) AliPDG;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPDG));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_809_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliPDG* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliPDG(*(AliPDG*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPDG));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliPDG G__TAliPDG;
static int G__G__STEERBase_809_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliPDG*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliPDG*) (soff+(sizeof(AliPDG)*i)))->~G__TAliPDG();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliPDG*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliPDG*) (soff))->~G__TAliPDG();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_809_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliPDG* dest = (AliPDG*) G__getstructoffset();
   *dest = *(AliPDG*) libp->para[0].ref;
   const AliPDG& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliPIDCombined */
static int G__G__STEERBase_810_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliPIDCombined* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliPIDCombined[n];
     } else {
       p = new((void*) gvp) AliPIDCombined[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliPIDCombined;
     } else {
       p = new((void*) gvp) AliPIDCombined;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDCombined));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliPIDCombined* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliPIDCombined(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) AliPIDCombined(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDCombined));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDCombined*) G__getstructoffset())->SetDetectorMask((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDCombined*) G__getstructoffset())->GetDetectorMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDCombined*) G__getstructoffset())->SetRejectMismatchMask((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDCombined*) G__getstructoffset())->GetRejectMismatchMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDCombined*) G__getstructoffset())->SetEnablePriors((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliPIDCombined*) G__getstructoffset())->GetEnablePriors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDCombined*) G__getstructoffset())->SetPriorDistribution((AliPID::EParticleType) G__int(libp->para[0]), (TH1F*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliPIDCombined*) G__getstructoffset())->GetPriorDistribution((AliPID::EParticleType) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliPIDCombined*) G__getstructoffset())->GetPriors((AliVTrack*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (AliPIDResponse*) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDCombined*) G__getstructoffset())->SetDefaultTPCPriors();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 104, (long) ((const AliPIDCombined*) G__getstructoffset())->ComputeProbabilities((AliVTrack*) G__int(libp->para[0]), (AliPIDResponse*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 104, (long) ((const AliPIDCombined*) G__getstructoffset())->ComputeProbabilities((AliVTrack*) G__int(libp->para[0]), (AliPIDResponse*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDCombined*) G__getstructoffset())->SetSelectedSpecies((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDCombined*) G__getstructoffset())->GetSelectedSpecies());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliPIDCombined::GetTOFmismatchProb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliPIDCombined::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPIDCombined::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliPIDCombined::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliPIDCombined::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDCombined*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPIDCombined::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliPIDCombined::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPIDCombined::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_810_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliPIDCombined::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliPIDCombined G__TAliPIDCombined;
static int G__G__STEERBase_810_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliPIDCombined*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliPIDCombined*) (soff+(sizeof(AliPIDCombined)*i)))->~G__TAliPIDCombined();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliPIDCombined*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliPIDCombined*) (soff))->~G__TAliPIDCombined();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliPIDValues */
static int G__G__STEERBase_811_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliPIDValues* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliPIDValues[n];
     } else {
       p = new((void*) gvp) AliPIDValues[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliPIDValues;
     } else {
       p = new((void*) gvp) AliPIDValues;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDValues));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliPIDValues* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliPIDValues(*(AliPIDValues*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliPIDValues(*(AliPIDValues*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDValues));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliPIDValues* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliPIDValues(
(Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (AliPIDResponse::EDetPidStatus) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliPIDValues(
(Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (AliPIDResponse::EDetPidStatus) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliPIDValues((Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliPIDValues((Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDValues));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliPIDValues& obj = ((AliPIDValues*) G__getstructoffset())->operator=(*(AliPIDValues*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((AliPIDValues*) G__getstructoffset())->SetValues((Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (AliPIDResponse::EDetPidStatus) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliPIDValues*) G__getstructoffset())->SetValues((Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDValues*) G__getstructoffset())->GetValues((Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliPIDValues*) G__getstructoffset())->GetValue((AliPID::EParticleType) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDValues*) G__getstructoffset())->SetPIDStatus((AliPIDResponse::EDetPidStatus) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliPIDValues*) G__getstructoffset())->GetPIDStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliPIDValues::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPIDValues::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliPIDValues::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliPIDValues::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliPIDValues*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPIDValues::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliPIDValues::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliPIDValues::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_811_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliPIDValues::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliPIDValues G__TAliPIDValues;
static int G__G__STEERBase_811_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliPIDValues*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliPIDValues*) (soff+(sizeof(AliPIDValues)*i)))->~G__TAliPIDValues();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliPIDValues*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliPIDValues*) (soff))->~G__TAliPIDValues();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliProdInfo */
static int G__G__STEERBase_812_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliProdInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliProdInfo[n];
     } else {
       p = new((void*) gvp) AliProdInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliProdInfo;
     } else {
       p = new((void*) gvp) AliProdInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliProdInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliProdInfo(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) AliProdInfo(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliProdInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliProdInfo((TList*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliProdInfo((TList*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliProdInfo*) G__getstructoffset())->Init((TList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliProdInfo*) G__getstructoffset())->List();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((AliProdInfo*) G__getstructoffset())->GetTag((AliProdInfo::ETagType) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliProdInfo*) G__getstructoffset())->GetLHCPeriod();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliProdInfo*) G__getstructoffset())->GetAlirootVersion();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliProdInfo*) G__getstructoffset())->GetAlirootSvnVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliProdInfo*) G__getstructoffset())->GetRootVersion();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliProdInfo*) G__getstructoffset())->GetRootSvnVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliProdInfo*) G__getstructoffset())->GetRecoPass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const AliProdInfo*) G__getstructoffset())->GetRecoPassName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliProdInfo*) G__getstructoffset())->IsMC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliProdInfo*) G__getstructoffset())->HasLPMPass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliProdInfo*) G__getstructoffset())->IsParsed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliProdInfo*) G__getstructoffset())->SetParsed((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliProdInfo*) G__getstructoffset())->SetParsed();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliProdInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliProdInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliProdInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliProdInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliProdInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliProdInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliProdInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliProdInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_812_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliProdInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliProdInfo G__TAliProdInfo;
static int G__G__STEERBase_812_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliProdInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliProdInfo*) (soff+(sizeof(AliProdInfo)*i)))->~G__TAliProdInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliProdInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliProdInfo*) (soff))->~G__TAliProdInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliQA */
static int G__G__STEERBase_815_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliQA* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliQA[n];
     } else {
       p = new((void*) gvp) AliQA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliQA;
     } else {
       p = new((void*) gvp) AliQA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliQA* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliQA((const AliQA::ALITASK_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliQA((const AliQA::ALITASK_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliQA* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliQA((const AliQA::DETECTORINDEX_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliQA((const AliQA::DETECTORINDEX_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliQA* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliQA(*(AliQA*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliQA(*(AliQA*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliQA& obj = ((AliQA*) G__getstructoffset())->operator=(*(AliQA*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliQA::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliQA::Instance((const AliQA::DETECTORINDEX_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliQA::Instance((const AliQA::ALITASK_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliQA::Instance((const AliQA::TASKINDEX_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliQA*) G__getstructoffset())->CheckFatal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliQA::Close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliQA::GetAliTaskName((AliQA::ALITASK_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = AliQA::GetExpert();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) AliQA::GetExpertBit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = AliQA::GetLabLocalFile();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = AliQA::GetLabLocalOCDB();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = AliQA::GetLabAliEnOCDB();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliQA::GetDetIndex((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = AliQA::GetDetName((AliQA::DETECTORINDEX_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliQA::GetDetName((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = AliQA::GetGRPPath();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) AliQA::GetQABit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliQA::GetQADataFile((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliQA::GetQADataFile((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliQA::GetQADataFileName((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliQA::GetQADataFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliQA::GetQAName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliQA::GetQACorrName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliQA::GetQAResultFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliQA::GetQAResultFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliQA::GetQARefDefaultStorage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliQA::GetQARefFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliQA::GetQARefStorage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliQA::GetRefOCDBDirName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliQA::GetRefDataDirName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         TString* pobj;
         TString xobj = AliQA::GetRunTypeName((AliQA::RUNTYPE_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         TString* pobj;
         TString xobj = AliQA::GetRunTypeName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliQA::GetTaskIndex((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = AliQA::GetTaskName((UInt_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliQA*) G__getstructoffset())->IsSet((AliQA::DETECTORINDEX_t) G__int(libp->para[0]), (AliQA::ALITASK_t) G__int(libp->para[1])
, (AliQA::QABIT_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliQA*) G__getstructoffset())->IsSetAny((AliQA::DETECTORINDEX_t) G__int(libp->para[0]), (AliQA::ALITASK_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliQA*) G__getstructoffset())->IsSetAny((AliQA::DETECTORINDEX_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((AliQA*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliQA*) G__getstructoffset())->Set((AliQA::QABIT_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliQA::SetQAResultDirName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliQA::SetQARefStorage((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliQA::SetQARefDataDirName((AliQA::RUNTYPE_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliQA::SetQARefDataDirName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliQA*) G__getstructoffset())->Show();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliQA*) G__getstructoffset())->Show((AliQA::DETECTORINDEX_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliQA*) G__getstructoffset())->ShowAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliQA*) G__getstructoffset())->UnSet((AliQA::QABIT_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliQA::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliQA::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliQA::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliQA::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliQA*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliQA::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliQA::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliQA::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_815_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliQA::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliQA G__TAliQA;
static int G__G__STEERBase_815_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliQA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliQA*) (soff+(sizeof(AliQA)*i)))->~G__TAliQA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliQA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliQA*) (soff))->~G__TAliQA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliRefArray */
static int G__G__STEERBase_821_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliRefArray* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliRefArray[n];
     } else {
       p = new((void*) gvp) AliRefArray[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliRefArray;
     } else {
       p = new((void*) gvp) AliRefArray;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliRefArray));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliRefArray* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliRefArray((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliRefArray((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliRefArray((UInt_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliRefArray((UInt_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliRefArray));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliRefArray* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliRefArray(*(AliRefArray*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliRefArray(*(AliRefArray*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliRefArray));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliRefArray& obj = ((AliRefArray*) G__getstructoffset())->operator=(*(AliRefArray*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliRefArray*) G__getstructoffset())->GetNElems());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliRefArray*) G__getstructoffset())->Expand((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliRefArray*) G__getstructoffset())->Expand();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliRefArray*) G__getstructoffset())->IsReferred((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliRefArray*) G__getstructoffset())->HasReference((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRefArray*) G__getstructoffset())->AddReference((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRefArray*) G__getstructoffset())->AddReferences((UInt_t) G__int(libp->para[0]), (UInt_t*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliRefArray*) G__getstructoffset())->GetReferences((UInt_t) G__int(libp->para[0]), (UInt_t*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRefArray*) G__getstructoffset())->GetReference((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRefArray*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRefArray*) G__getstructoffset())->Compactify();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliRefArray::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliRefArray::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliRefArray::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliRefArray::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRefArray*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliRefArray::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliRefArray::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliRefArray::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_821_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliRefArray::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliRefArray G__TAliRefArray;
static int G__G__STEERBase_821_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliRefArray*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliRefArray*) (soff+(sizeof(AliRefArray)*i)))->~G__TAliRefArray();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliRefArray*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliRefArray*) (soff))->~G__TAliRefArray();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliRunTagCuts */
static int G__G__STEERBase_822_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliRunTagCuts* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliRunTagCuts[n];
     } else {
       p = new((void*) gvp) AliRunTagCuts[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliRunTagCuts;
     } else {
       p = new((void*) gvp) AliRunTagCuts;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTagCuts));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetRunId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetMagneticField((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetDipoleField((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetRunStartTimeRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetRunStopTimeRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetAlirootVersion(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetRootVersion(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetGeant3Version(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetLHCPeriod(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetReconstructionPass(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetProductionName(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetRunValidation((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->AddRunQualityValue((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetBeamEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetBeamType(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetCalibVersion((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetDataType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetBeamTriggersRange((ULong_t) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetCollisionTriggersRange((ULong_t) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetEmptyTriggersRange((ULong_t) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetASideTriggersRange((ULong_t) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetCSideTriggersRange((ULong_t) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetHMTriggersRange((ULong_t) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetMuonTriggersRange((ULong_t) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetCollisionRatesRange((ULong_t) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetMeanVertexsRange((ULong_t) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->SetVertexQualitysRange((ULong_t) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliRunTagCuts*) G__getstructoffset())->IsAccepted((AliRunTag*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliRunTagCuts::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliRunTagCuts::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliRunTagCuts::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliRunTagCuts::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRunTagCuts*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliRunTagCuts::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliRunTagCuts::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliRunTagCuts::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_822_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliRunTagCuts::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_822_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliRunTagCuts* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliRunTagCuts(*(AliRunTagCuts*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTagCuts));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliRunTagCuts G__TAliRunTagCuts;
static int G__G__STEERBase_822_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliRunTagCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliRunTagCuts*) (soff+(sizeof(AliRunTagCuts)*i)))->~G__TAliRunTagCuts();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliRunTagCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliRunTagCuts*) (soff))->~G__TAliRunTagCuts();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_822_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliRunTagCuts* dest = (AliRunTagCuts*) G__getstructoffset();
   *dest = *(AliRunTagCuts*) libp->para[0].ref;
   const AliRunTagCuts& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliSysInfo */
static int G__G__STEERBase_827_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliSysInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliSysInfo[n];
     } else {
       p = new((void*) gvp) AliSysInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliSysInfo;
     } else {
       p = new((void*) gvp) AliSysInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliSysInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliSysInfo::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      AliSysInfo::AddStamp((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      AliSysInfo::AddStamp((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      AliSysInfo::AddStamp((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      AliSysInfo::AddStamp((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      AliSysInfo::AddStamp((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) AliSysInfo::MakeTree((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) AliSysInfo::MakeTree((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliSysInfo::MakeDUTree((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliSysInfo::OpenMemStat();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliSysInfo::CloseMemStat();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) AliSysInfo::Contain((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliSysInfo::AddCallBack((AliSysInfo::StampCallback_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliSysInfo::EstimateObjectSize((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliSysInfo::Test());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      AliSysInfo::SetVerbose((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      AliSysInfo::SetVerbose();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) AliSysInfo::GetVerbose());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      AliSysInfo::SetDisabled((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      AliSysInfo::SetDisabled();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) AliSysInfo::IsDisabled());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      AliSysInfo::PrintJiraTable((TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      AliSysInfo::PrintJiraTable((TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliSysInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliSysInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliSysInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliSysInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliSysInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliSysInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliSysInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliSysInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_827_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliSysInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliSysInfo G__TAliSysInfo;
static int G__G__STEERBase_827_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliSysInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliSysInfo*) (soff+(sizeof(AliSysInfo)*i)))->~G__TAliSysInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliSysInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliSysInfo*) (soff))->~G__TAliSysInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTagCreator */
static int G__G__STEERBase_830_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTagCreator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTagCreator[n];
     } else {
       p = new((void*) gvp) AliTagCreator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTagCreator;
     } else {
       p = new((void*) gvp) AliTagCreator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTagCreator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTagCreator*) G__getstructoffset())->MergeTags((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTagCreator*) G__getstructoffset())->MergeTags((const char*) G__int(libp->para[0]), (TGridResult*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTagCreator*) G__getstructoffset())->MergeTags((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTagCreator*) G__getstructoffset())->MergeTagsForRun((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTagCreator*) G__getstructoffset())->MergeTagsForRun((const char*) G__int(libp->para[0]), (TGridResult*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTagCreator*) G__getstructoffset())->MergeTagsForRun((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTagCreator*) G__getstructoffset())->SetSE((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTagCreator*) G__getstructoffset())->SetStorage((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTagCreator*) G__getstructoffset())->SetGridPath((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTagCreator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTagCreator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTagCreator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTagCreator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTagCreator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTagCreator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTagCreator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTagCreator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_830_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTagCreator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__STEERBase_830_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliTagCreator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliTagCreator(*(AliTagCreator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTagCreator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTagCreator G__TAliTagCreator;
static int G__G__STEERBase_830_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTagCreator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTagCreator*) (soff+(sizeof(AliTagCreator)*i)))->~G__TAliTagCreator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTagCreator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTagCreator*) (soff))->~G__TAliTagCreator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_830_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTagCreator* dest = (AliTagCreator*) G__getstructoffset();
   *dest = *(AliTagCreator*) libp->para[0].ref;
   const AliTagCreator& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTimeStamp */
static int G__G__STEERBase_831_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTimeStamp[n];
     } else {
       p = new((void*) gvp) AliTimeStamp[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTimeStamp;
     } else {
       p = new((void*) gvp) AliTimeStamp;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (ULong64_t) G__ULonglong(libp->para[2]));
   } else {
     p = new((void*) gvp) AliTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (ULong64_t) G__ULonglong(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) AliTimeStamp(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTimeStamp(*(AliTimeStamp*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTimeStamp(*(AliTimeStamp*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTimeStamp& obj = ((AliTimeStamp*) G__getstructoffset())->operator=(*(AliTimeStamp*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTimeStamp*) G__getstructoffset())->GetOrbit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTimeStamp*) G__getstructoffset())->GetPeriod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliTimeStamp*) G__getstructoffset())->GetBunchCross());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTimeStamp*) G__getstructoffset())->GetSeconds());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTimeStamp*) G__getstructoffset())->GetMicroSecs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTimeStamp*) G__getstructoffset())->SetTimeStamp((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (ULong64_t) G__ULonglong(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTimeStamp*) G__getstructoffset())->SetTimeStamp((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTimeStamp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTimeStamp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTimeStamp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTimeStamp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTimeStamp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTimeStamp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTimeStamp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTimeStamp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_831_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTimeStamp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTimeStamp G__TAliTimeStamp;
static int G__G__STEERBase_831_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTimeStamp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTimeStamp*) (soff+(sizeof(AliTimeStamp)*i)))->~G__TAliTimeStamp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTimeStamp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTimeStamp*) (soff))->~G__TAliTimeStamp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTRDNDFast */
static int G__G__STEERBase_834_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDNDFast* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDNDFast[n];
     } else {
       p = new((void*) gvp) AliTRDNDFast[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDNDFast;
     } else {
       p = new((void*) gvp) AliTRDNDFast;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDNDFast));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDNDFast* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTRDNDFast(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
   } else {
     p = new((void*) gvp) AliTRDNDFast(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDNDFast));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDNDFast* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTRDNDFast(*(AliTRDNDFast*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTRDNDFast(*(AliTRDNDFast*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDNDFast));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTRDNDFast& obj = ((AliTRDNDFast*) G__getstructoffset())->operator=(*(AliTRDNDFast*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliTRDNDFast*) G__getstructoffset())->FitLandau(*((TString*) G__int(libp->para[0])), (TH1F*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), *((TString*) G__int(libp->para[3]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliTRDNDFast*) G__getstructoffset())->Build((TH1F**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((AliTRDNDFast*) G__getstructoffset())->Build((TH1F**) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDNDFast*) G__getstructoffset())->Build((Double_t**) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTRDNDFast*) G__getstructoffset())->Eval((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliTRDNDFast*) G__getstructoffset())->Random((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliTRDNDFast*) G__getstructoffset())->GetNDim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliTRDNDFast*) G__getstructoffset())->GetParam((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDNDFast*) G__getstructoffset())->PrintPars();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTRDNDFast::Random((Double_t*) G__int(libp->para[0]), (AliTRDNDFast*) G__int(libp->para[1])
, (AliTRDNDFast*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTRDNDFast::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDNDFast::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTRDNDFast::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTRDNDFast::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDNDFast*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDNDFast::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDNDFast::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDNDFast::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_834_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDNDFast::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTRDNDFast G__TAliTRDNDFast;
static int G__G__STEERBase_834_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTRDNDFast*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTRDNDFast*) (soff+(sizeof(AliTRDNDFast)*i)))->~G__TAliTRDNDFast();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTRDNDFast*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTRDNDFast*) (soff))->~G__TAliTRDNDFast();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTRDPIDParams */
static int G__G__STEERBase_836_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDParams* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDParams[n];
     } else {
       p = new((void*) gvp) AliTRDPIDParams[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDParams;
     } else {
       p = new((void*) gvp) AliTRDPIDParams;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParams));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_836_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDParams* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTRDPIDParams((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliTRDPIDParams((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParams));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_836_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDParams* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTRDPIDParams(*(AliTRDPIDParams*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTRDPIDParams(*(AliTRDPIDParams*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParams));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_836_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDPIDParams*) G__getstructoffset())->AddCentralityClass((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_836_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((const AliTRDPIDParams*) G__getstructoffset())->GetThresholdParameters((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((const AliTRDPIDParams*) G__getstructoffset())->GetThresholdParameters((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_836_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((AliTRDPIDParams*) G__getstructoffset())->SetThresholdParameters((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((AliTRDPIDParams*) G__getstructoffset())->SetThresholdParameters((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_836_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTRDPIDParams::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_836_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDParams::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_836_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTRDPIDParams::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_836_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTRDPIDParams::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_836_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDPIDParams*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_836_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDParams::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_836_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDPIDParams::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_836_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDParams::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_836_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDPIDParams::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTRDPIDParams G__TAliTRDPIDParams;
static int G__G__STEERBase_836_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTRDPIDParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTRDPIDParams*) (soff+(sizeof(AliTRDPIDParams)*i)))->~G__TAliTRDPIDParams();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTRDPIDParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTRDPIDParams*) (soff))->~G__TAliTRDPIDParams();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTRDPIDParams::AliTRDPIDThresholds */
static int G__G__STEERBase_837_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDParams::AliTRDPIDThresholds* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDParams::AliTRDPIDThresholds[n];
     } else {
       p = new((void*) gvp) AliTRDPIDParams::AliTRDPIDThresholds[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDParams::AliTRDPIDThresholds;
     } else {
       p = new((void*) gvp) AliTRDPIDParams::AliTRDPIDThresholds;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDParams::AliTRDPIDThresholds* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDParams::AliTRDPIDThresholds(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) AliTRDPIDParams::AliTRDPIDThresholds(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDParams::AliTRDPIDThresholds(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) AliTRDPIDParams::AliTRDPIDThresholds(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDParams::AliTRDPIDThresholds* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDParams::AliTRDPIDThresholds(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliTRDPIDParams::AliTRDPIDThresholds(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDParams::AliTRDPIDThresholds((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) AliTRDPIDParams::AliTRDPIDThresholds((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDParams::AliTRDPIDThresholds* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTRDPIDParams::AliTRDPIDThresholds(*(AliTRDPIDParams::AliTRDPIDThresholds*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTRDPIDParams::AliTRDPIDThresholds(*(AliTRDPIDParams::AliTRDPIDThresholds*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTRDPIDParams::AliTRDPIDThresholds& obj = ((AliTRDPIDParams::AliTRDPIDThresholds*) G__getstructoffset())->operator=(*(AliTRDPIDParams::AliTRDPIDThresholds*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTRDPIDParams::AliTRDPIDThresholds*) G__getstructoffset())->GetNTracklets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((const AliTRDPIDParams::AliTRDPIDThresholds*) G__getstructoffset())->GetElectronEfficiency((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const AliTRDPIDParams::AliTRDPIDThresholds*) G__getstructoffset())->GetElectronEfficiency());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliTRDPIDParams::AliTRDPIDThresholds*) G__getstructoffset())->GetThresholdParams());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTRDPIDParams::AliTRDPIDThresholds::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDParams::AliTRDPIDThresholds::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTRDPIDParams::AliTRDPIDThresholds::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTRDPIDParams::AliTRDPIDThresholds::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDPIDParams::AliTRDPIDThresholds*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDParams::AliTRDPIDThresholds::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDPIDParams::AliTRDPIDThresholds::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDParams::AliTRDPIDThresholds::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_837_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDPIDParams::AliTRDPIDThresholds::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTRDPIDParams::AliTRDPIDThresholds G__TAliTRDPIDParamscLcLAliTRDPIDThresholds;
static int G__G__STEERBase_837_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTRDPIDParams::AliTRDPIDThresholds*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTRDPIDParams::AliTRDPIDThresholds*) (soff+(sizeof(AliTRDPIDParams::AliTRDPIDThresholds)*i)))->~G__TAliTRDPIDParamscLcLAliTRDPIDThresholds();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTRDPIDParams::AliTRDPIDThresholds*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTRDPIDParams::AliTRDPIDThresholds*) (soff))->~G__TAliTRDPIDParamscLcLAliTRDPIDThresholds();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTRDPIDParams::AliTRDPIDCentrality */
static int G__G__STEERBase_838_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDParams::AliTRDPIDCentrality* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDParams::AliTRDPIDCentrality[n];
     } else {
       p = new((void*) gvp) AliTRDPIDParams::AliTRDPIDCentrality[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDParams::AliTRDPIDCentrality;
     } else {
       p = new((void*) gvp) AliTRDPIDParams::AliTRDPIDCentrality;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDCentrality));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDParams::AliTRDPIDCentrality* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTRDPIDParams::AliTRDPIDCentrality((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) AliTRDPIDParams::AliTRDPIDCentrality((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDCentrality));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDParams::AliTRDPIDCentrality* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTRDPIDParams::AliTRDPIDCentrality(*(AliTRDPIDParams::AliTRDPIDCentrality*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTRDPIDParams::AliTRDPIDCentrality(*(AliTRDPIDParams::AliTRDPIDCentrality*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDCentrality));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTRDPIDParams::AliTRDPIDCentrality& obj = ((AliTRDPIDParams::AliTRDPIDCentrality*) G__getstructoffset())->operator=(*(AliTRDPIDParams::AliTRDPIDCentrality*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTRDPIDParams::AliTRDPIDCentrality*) G__getstructoffset())->GetMinCentrality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTRDPIDParams::AliTRDPIDCentrality*) G__getstructoffset())->GetMaxCentrality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDPIDParams::AliTRDPIDCentrality*) G__getstructoffset())->SetThresholdParameters((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTRDPIDParams::AliTRDPIDCentrality*) G__getstructoffset())->GetThresholdParameters((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTRDPIDParams::AliTRDPIDCentrality::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDParams::AliTRDPIDCentrality::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTRDPIDParams::AliTRDPIDCentrality::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTRDPIDParams::AliTRDPIDCentrality::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDPIDParams::AliTRDPIDCentrality*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDParams::AliTRDPIDCentrality::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDPIDParams::AliTRDPIDCentrality::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDParams::AliTRDPIDCentrality::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_838_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDPIDParams::AliTRDPIDCentrality::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTRDPIDParams::AliTRDPIDCentrality G__TAliTRDPIDParamscLcLAliTRDPIDCentrality;
static int G__G__STEERBase_838_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTRDPIDParams::AliTRDPIDCentrality*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTRDPIDParams::AliTRDPIDCentrality*) (soff+(sizeof(AliTRDPIDParams::AliTRDPIDCentrality)*i)))->~G__TAliTRDPIDParamscLcLAliTRDPIDCentrality();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTRDPIDParams::AliTRDPIDCentrality*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTRDPIDParams::AliTRDPIDCentrality*) (soff))->~G__TAliTRDPIDParamscLcLAliTRDPIDCentrality();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTRDPIDReference */
static int G__G__STEERBase_839_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDReference* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDReference[n];
     } else {
       p = new((void*) gvp) AliTRDPIDReference[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDPIDReference;
     } else {
       p = new((void*) gvp) AliTRDPIDReference;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDReference));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDReference* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTRDPIDReference((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliTRDPIDReference((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDReference));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDPIDReference* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTRDPIDReference(*(AliTRDPIDReference*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTRDPIDReference(*(AliTRDPIDReference*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDReference));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTRDPIDReference& obj = ((AliTRDPIDReference*) G__getstructoffset())->operator=(*(AliTRDPIDReference*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDPIDReference*) G__getstructoffset())->SetNumberOfMomentumBins((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDPIDReference*) G__getstructoffset())->AddReference((TObject*) G__int(libp->para[0]), (AliPID::EParticleType) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTRDPIDReference*) G__getstructoffset())->GetLowerReference((AliPID::EParticleType) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTRDPIDReference*) G__getstructoffset())->GetUpperReference((AliPID::EParticleType) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTRDPIDReference*) G__getstructoffset())->GetNumberOfMomentumBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTRDPIDReference::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDReference::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTRDPIDReference::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTRDPIDReference::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDPIDReference*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDReference::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDPIDReference::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDPIDReference::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_839_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDPIDReference::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTRDPIDReference G__TAliTRDPIDReference;
static int G__G__STEERBase_839_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTRDPIDReference*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTRDPIDReference*) (soff+(sizeof(AliTRDPIDReference)*i)))->~G__TAliTRDPIDReference();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTRDPIDReference*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTRDPIDReference*) (soff))->~G__TAliTRDPIDReference();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTRDTKDInterpolator */
static int G__G__STEERBase_852_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDTKDInterpolator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDTKDInterpolator[n];
     } else {
       p = new((void*) gvp) AliTRDTKDInterpolator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDTKDInterpolator;
     } else {
       p = new((void*) gvp) AliTRDTKDInterpolator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDTKDInterpolator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTRDTKDInterpolator(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Float_t**) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) AliTRDTKDInterpolator(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Float_t**) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTRDTKDInterpolator*) G__getstructoffset())->Eval((Double_t*) G__int(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliTRDTKDInterpolator*) G__getstructoffset())->Projection((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTRDTKDInterpolator*) G__getstructoffset())->GetNDIM());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTRDTKDInterpolator*) G__getstructoffset())->GetRange((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDTKDInterpolator*) G__getstructoffset())->SetNPointsInterpolation((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliTRDTKDInterpolator*) G__getstructoffset())->GetNPointsInterpolation());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliTRDTKDInterpolator*) G__getstructoffset())->SetUseWeights((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliTRDTKDInterpolator*) G__getstructoffset())->SetUseWeights();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDTKDInterpolator*) G__getstructoffset())->SetPDFMode((AliTRDTKDInterpolator::TRDTKDMode) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDTKDInterpolator*) G__getstructoffset())->SetStoreCov((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTRDTKDInterpolator*) G__getstructoffset())->Build());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDTKDInterpolator*) G__getstructoffset())->SetUseHelperNodes((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTRDTKDInterpolator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDTKDInterpolator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTRDTKDInterpolator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTRDTKDInterpolator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDTKDInterpolator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDTKDInterpolator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDTKDInterpolator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDTKDInterpolator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_852_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDTKDInterpolator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTRDTKDInterpolator G__TAliTRDTKDInterpolator;
static int G__G__STEERBase_852_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTRDTKDInterpolator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTRDTKDInterpolator*) (soff+(sizeof(AliTRDTKDInterpolator)*i)))->~G__TAliTRDTKDInterpolator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTRDTKDInterpolator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTRDTKDInterpolator*) (soff))->~G__TAliTRDTKDInterpolator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTRDTKDInterpolator::AliTRDTKDNodeInfo */
static int G__G__STEERBase_854_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDTKDInterpolator::AliTRDTKDNodeInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTRDTKDInterpolator::AliTRDTKDNodeInfo((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliTRDTKDInterpolator::AliTRDTKDNodeInfo((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliTRDTKDInterpolator::AliTRDTKDNodeInfo[n];
       } else {
         p = new((void*) gvp) AliTRDTKDInterpolator::AliTRDTKDNodeInfo[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliTRDTKDInterpolator::AliTRDTKDNodeInfo;
       } else {
         p = new((void*) gvp) AliTRDTKDInterpolator::AliTRDTKDNodeInfo;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_854_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTRDTKDInterpolator::AliTRDTKDNodeInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTRDTKDInterpolator::AliTRDTKDNodeInfo(*(AliTRDTKDInterpolator::AliTRDTKDNodeInfo*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTRDTKDInterpolator::AliTRDTKDNodeInfo(*(AliTRDTKDInterpolator::AliTRDTKDNodeInfo*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_854_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTRDTKDInterpolator::AliTRDTKDNodeInfo& obj = ((AliTRDTKDInterpolator::AliTRDTKDNodeInfo*) G__getstructoffset())->operator=(*(AliTRDTKDInterpolator::AliTRDTKDNodeInfo*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_854_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((const AliTRDTKDInterpolator::AliTRDTKDNodeInfo*) G__getstructoffset())->CookPDF((Double_t*) G__int(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), (AliTRDTKDInterpolator::TRDTKDMode) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((const AliTRDTKDInterpolator::AliTRDTKDNodeInfo*) G__getstructoffset())->CookPDF((Double_t*) G__int(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_854_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTRDTKDInterpolator::AliTRDTKDNodeInfo*) G__getstructoffset())->Has((Float_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_854_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDTKDInterpolator::AliTRDTKDNodeInfo*) G__getstructoffset())->Store((TVectorD*) G__int(libp->para[0]), (TMatrixD*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_854_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_854_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_854_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_854_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_854_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTRDTKDInterpolator::AliTRDTKDNodeInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_854_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDTKDInterpolator::AliTRDTKDNodeInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_854_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDTKDInterpolator::AliTRDTKDNodeInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_854_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTRDTKDInterpolator::AliTRDTKDNodeInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_854_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTRDTKDInterpolator::AliTRDTKDNodeInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTRDTKDInterpolator::AliTRDTKDNodeInfo G__TAliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo;
static int G__G__STEERBase_854_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTRDTKDInterpolator::AliTRDTKDNodeInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTRDTKDInterpolator::AliTRDTKDNodeInfo*) (soff+(sizeof(AliTRDTKDInterpolator::AliTRDTKDNodeInfo)*i)))->~G__TAliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTRDTKDInterpolator::AliTRDTKDNodeInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTRDTKDInterpolator::AliTRDTKDNodeInfo*) (soff))->~G__TAliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTriggerScalers */
static int G__G__STEERBase_855_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerScalers* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerScalers[n];
     } else {
       p = new((void*) gvp) AliTriggerScalers[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerScalers;
     } else {
       p = new((void*) gvp) AliTriggerScalers;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalers));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerScalers* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerScalers(
(UChar_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]));
   } else {
     p = new((void*) gvp) AliTriggerScalers(
(UChar_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalers));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerScalers* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 9
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerScalers(
(UChar_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]), (UInt_t) G__int(libp->para[7])
, (UInt_t) G__int(libp->para[8]));
   } else {
     p = new((void*) gvp) AliTriggerScalers(
(UChar_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]), (UInt_t) G__int(libp->para[7])
, (UInt_t) G__int(libp->para[8]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalers));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerScalers*) G__getstructoffset())->GetLOCB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerScalers*) G__getstructoffset())->GetLOCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerScalers*) G__getstructoffset())->GetL1CB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerScalers*) G__getstructoffset())->GetL1CA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerScalers*) G__getstructoffset())->GetL2CB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerScalers*) G__getstructoffset())->GetL2CA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerScalers*) G__getstructoffset())->GetLMCB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerScalers*) G__getstructoffset())->GetLMCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliTriggerScalers*) G__getstructoffset())->GetAllScalers((UInt_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliTriggerScalers*) G__getstructoffset())->GetAllScalersM012((UInt_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliTriggerScalers*) G__getstructoffset())->GetClassIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTriggerScalers::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerScalers::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTriggerScalers::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTriggerScalers::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalers*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerScalers::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerScalers::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerScalers::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_855_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerScalers::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTriggerScalers G__TAliTriggerScalers;
static int G__G__STEERBase_855_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTriggerScalers*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTriggerScalers*) (soff+(sizeof(AliTriggerScalers)*i)))->~G__TAliTriggerScalers();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTriggerScalers*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTriggerScalers*) (soff))->~G__TAliTriggerScalers();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTriggerScalersRecord */
static int G__G__STEERBase_856_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerScalersRecord* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerScalersRecord[n];
     } else {
       p = new((void*) gvp) AliTriggerScalersRecord[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerScalersRecord;
     } else {
       p = new((void*) gvp) AliTriggerScalersRecord;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalersRecord));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalersRecord*) G__getstructoffset())->SetTimeStamp((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalersRecord*) G__getstructoffset())->SetTimeGroup((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalersRecord*) G__getstructoffset())->AddTriggerScalers((AliTriggerScalers*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalersRecord*) G__getstructoffset())->AddTriggerScalers(
(UChar_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalersRecord*) G__getstructoffset())->AddTriggerScalers(
(UChar_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]), (UInt_t) G__int(libp->para[7])
, (UInt_t) G__int(libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTriggerScalersRecord*) G__getstructoffset())->GetTimeStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTriggerScalersRecord*) G__getstructoffset())->GetTriggerScalers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTriggerScalersRecord*) G__getstructoffset())->GetTriggerScalersForClass((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliTriggerScalersRecord*) G__getstructoffset())->GetTriggerScalersForClassBinary((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((AliTriggerScalersRecord*) G__getstructoffset())->GetTimeGroup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTriggerScalersRecord::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerScalersRecord::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTriggerScalersRecord::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTriggerScalersRecord::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalersRecord*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerScalersRecord::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerScalersRecord::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerScalersRecord::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_856_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerScalersRecord::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTriggerScalersRecord G__TAliTriggerScalersRecord;
static int G__G__STEERBase_856_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTriggerScalersRecord*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTriggerScalersRecord*) (soff+(sizeof(AliTriggerScalersRecord)*i)))->~G__TAliTriggerScalersRecord();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTriggerScalersRecord*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTriggerScalersRecord*) (soff))->~G__TAliTriggerScalersRecord();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVAODHeader */
static int G__G__STEERBase_860_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetMagneticField((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetMuonMagFieldScale((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetDiamond((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetDiamondZ((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVAODHeader*) G__getstructoffset())->GetRunNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVAODHeader*) G__getstructoffset())->GetMagneticField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVAODHeader*) G__getstructoffset())->GetMuonMagFieldScale());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVAODHeader*) G__getstructoffset())->GetDiamondX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVAODHeader*) G__getstructoffset())->GetDiamondY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVAODHeader*) G__getstructoffset())->GetDiamondZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVAODHeader*) G__getstructoffset())->GetDiamondCovXY((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVAODHeader*) G__getstructoffset())->GetSigma2DiamondX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVAODHeader*) G__getstructoffset())->GetSigma2DiamondY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVAODHeader*) G__getstructoffset())->GetSigma2DiamondZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVAODHeader*) G__getstructoffset())->InitMagneticField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetRunNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetOrbitNumber((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetPeriodNumber((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetBunchCrossNumber((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetTimeStamp((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetEventType((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetTriggerMask((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetTriggerMaskNext50((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliVAODHeader*) G__getstructoffset())->GetTriggerMaskNext50());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetTriggerCluster((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetFiredTriggerClasses(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliVAODHeader*) G__getstructoffset())->GetFiredTriggerClasses();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVAODHeader*) G__getstructoffset())->GetZDCN1Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVAODHeader*) G__getstructoffset())->GetZDCP1Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVAODHeader*) G__getstructoffset())->GetZDCN2Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVAODHeader*) G__getstructoffset())->GetZDCP2Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVAODHeader*) G__getstructoffset())->GetZDCEMEnergy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVAODHeader*) G__getstructoffset())->GetNumberOfESDTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVAODHeader*) G__getstructoffset())->GetNumberOfITSClusters((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVAODHeader*) G__getstructoffset())->GetT0spread((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVAODHeader*) G__getstructoffset())->GetCentralityP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVAODHeader*) G__getstructoffset())->GetEventplaneP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVAODHeader*) G__getstructoffset())->GetCentrality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliVAODHeader*) G__getstructoffset())->GetVZEROEqFactors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVAODHeader*) G__getstructoffset())->GetVZEROEqFactors((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetVZEROEqFactors((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((AliVAODHeader*) G__getstructoffset())->GetOfflineTrigger());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVAODHeader*) G__getstructoffset())->GetRefMultiplicity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVAODHeader*) G__getstructoffset())->GetEventplane());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVAODHeader*) G__getstructoffset())->GetDAQAttributes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_860_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVAODHeader*) G__getstructoffset())->SetDAQAttributes((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVAODHeader G__TAliVAODHeader;
static int G__G__STEERBase_860_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVAODHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVAODHeader*) (soff+(sizeof(AliVAODHeader)*i)))->~G__TAliVAODHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVAODHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVAODHeader*) (soff))->~G__TAliVAODHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_860_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVAODHeader* dest = (AliVAODHeader*) G__getstructoffset();
   *dest = *(AliVAODHeader*) libp->para[0].ref;
   const AliVAODHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVersion */
static int G__G__STEERBase_861_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVersion* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVersion[n];
     } else {
       p = new((void*) gvp) AliVersion[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVersion;
     } else {
       p = new((void*) gvp) AliVersion;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVersion));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_861_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVersion::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_861_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const AliVersion*) G__getstructoffset())->GetHash();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_861_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const AliVersion*) G__getstructoffset())->GetTag();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_861_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVersion*) G__getstructoffset())->GetSerial());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_861_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVersion::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_861_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVersion::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_861_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVersion::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_861_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVersion::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_861_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVersion*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_861_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVersion::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_861_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVersion::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_861_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVersion::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_861_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVersion::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVersion G__TAliVersion;
static int G__G__STEERBase_861_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVersion*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVersion*) (soff+(sizeof(AliVersion)*i)))->~G__TAliVersion();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVersion*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVersion*) (soff))->~G__TAliVersion();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVEventPool */
static int G__G__STEERBase_862_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliVEventPool*) G__getstructoffset())->GetNextChain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_862_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEventPool*) G__getstructoffset())->GetCurrentBin((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_862_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliVEventPool*) G__getstructoffset())->GetDimension());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_862_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEventPool*) G__getstructoffset())->Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_862_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVEventPool*) G__getstructoffset())->BinNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_862_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEventPool*) G__getstructoffset())->SetChain((TChain*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_862_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVEventPool& obj = ((AliVEventPool*) G__getstructoffset())->operator=(*(AliVEventPool*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_862_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVEventPool::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_862_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVEventPool::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_862_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVEventPool::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_862_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVEventPool::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_862_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVEventPool*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_862_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVEventPool::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_862_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVEventPool::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_862_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVEventPool::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_862_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVEventPool::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVEventPool G__TAliVEventPool;
static int G__G__STEERBase_862_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVEventPool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVEventPool*) (soff+(sizeof(AliVEventPool)*i)))->~G__TAliVEventPool();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVEventPool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVEventPool*) (soff))->~G__TAliVEventPool();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVfriendTrack */
static int G__G__STEERBase_863_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVfriendTrack*) G__getstructoffset())->GetTPCseed(*(AliTPCseed*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVfriendTrack*) G__getstructoffset())->GetCalibObject((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVfriendTrack*) G__getstructoffset())->GetTPCOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVfriendTrack*) G__getstructoffset())->GetITSOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVfriendTrack*) G__getstructoffset())->GetTrackParamTPCOut(*(AliExternalTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVfriendTrack*) G__getstructoffset())->GetTrackParamITSOut(*(AliExternalTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVfriendTrack*) G__getstructoffset())->ResetTrackParamTPCOut((AliExternalTrackParam*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVfriendTrack*) G__getstructoffset())->ResetTPCseed((AliTPCseed*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVfriendTrack*) G__getstructoffset())->GetTrackPointArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVfriendTrack*) G__getstructoffset())->SetSkipBit((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVfriendTrack*) G__getstructoffset())->TestSkipBit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVfriendTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVfriendTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVfriendTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVfriendTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVfriendTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVfriendTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVfriendTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVfriendTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_863_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVfriendTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVfriendTrack G__TAliVfriendTrack;
static int G__G__STEERBase_863_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVfriendTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVfriendTrack*) (soff+(sizeof(AliVfriendTrack)*i)))->~G__TAliVfriendTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVfriendTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVfriendTrack*) (soff))->~G__TAliVfriendTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVVZEROfriend */
static int G__G__STEERBase_864_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVVZEROfriend* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVVZEROfriend[n];
     } else {
       p = new((void*) gvp) AliVVZEROfriend[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVVZEROfriend;
     } else {
       p = new((void*) gvp) AliVVZEROfriend;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROfriend));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVVZEROfriend* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliVVZEROfriend(*(AliVVZEROfriend*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliVVZEROfriend(*(AliVVZEROfriend*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROfriend));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVVZEROfriend& obj = ((AliVVZEROfriend*) G__getstructoffset())->operator=(*(AliVVZEROfriend*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVVZEROfriend*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliVVZEROfriend*) G__getstructoffset())->GetBBScalers((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliVVZEROfriend*) G__getstructoffset())->GetBGScalers((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVVZEROfriend*) G__getstructoffset())->GetTriggerScalers((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliVVZEROfriend*) G__getstructoffset())->GetBunchNumbersMB((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliVVZEROfriend*) G__getstructoffset())->GetChargeMB((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVZEROfriend*) G__getstructoffset())->GetIntMBFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVZEROfriend*) G__getstructoffset())->GetBBMBFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVZEROfriend*) G__getstructoffset())->GetBGMBFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVVZEROfriend*) G__getstructoffset())->GetADC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVVZEROfriend*) G__getstructoffset())->GetPedestal((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVZEROfriend*) G__getstructoffset())->GetIntegratorFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVZEROfriend*) G__getstructoffset())->GetBBFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVVZEROfriend*) G__getstructoffset())->GetBGFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVVZEROfriend*) G__getstructoffset())->GetTime((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVVZEROfriend*) G__getstructoffset())->GetWidth((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVVZEROfriend::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVVZEROfriend::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVVZEROfriend::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVVZEROfriend::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVVZEROfriend*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVVZEROfriend::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVVZEROfriend::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVVZEROfriend::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_864_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVVZEROfriend::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVVZEROfriend G__TAliVVZEROfriend;
static int G__G__STEERBase_864_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVVZEROfriend*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVVZEROfriend*) (soff+(sizeof(AliVVZEROfriend)*i)))->~G__TAliVVZEROfriend();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVVZEROfriend*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVVZEROfriend*) (soff))->~G__TAliVVZEROfriend();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVTOFcluster */
static int G__G__STEERBase_869_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVTOFcluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVTOFcluster[n];
     } else {
       p = new((void*) gvp) AliVTOFcluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVTOFcluster;
     } else {
       p = new((void*) gvp) AliVTOFcluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFcluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVTOFcluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliVTOFcluster(*(AliVTOFcluster*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliVTOFcluster(*(AliVTOFcluster*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFcluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVTOFcluster& obj = ((AliVTOFcluster*) G__getstructoffset())->operator=(*(AliVTOFcluster*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTOFcluster*) G__getstructoffset())->GetClusterIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTOFcluster*) G__getstructoffset())->GetTOFchannel((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTOFcluster*) G__getstructoffset())->GetTime((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTOFcluster*) G__getstructoffset())->GetTimeRaw((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTOFcluster*) G__getstructoffset())->GetTOT((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTOFcluster*) G__getstructoffset())->GetLabel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTOFcluster*) G__getstructoffset())->GetDeltaBC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTOFcluster*) G__getstructoffset())->GetL0L1Latency((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVTOFcluster*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTOFcluster*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTOFcluster*) G__getstructoffset())->GetPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTOFcluster*) G__getstructoffset())->GetR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTOFcluster*) G__getstructoffset())->GetNMatchableTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTOFcluster*) G__getstructoffset())->GetTrackIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTOFcluster*) G__getstructoffset())->GetDistanceInStripPlane((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTOFcluster*) G__getstructoffset())->GetDx((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTOFcluster*) G__getstructoffset())->GetDy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTOFcluster*) G__getstructoffset())->GetDz((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTOFcluster*) G__getstructoffset())->GetLength((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTOFcluster*) G__getstructoffset())->GetIntegratedTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTOFcluster*) G__getstructoffset())->GetNTOFhits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFcluster*) G__getstructoffset())->SetEvent((AliVEvent*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVTOFcluster*) G__getstructoffset())->GetEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVTOFcluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTOFcluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVTOFcluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVTOFcluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFcluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTOFcluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVTOFcluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTOFcluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_869_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVTOFcluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVTOFcluster G__TAliVTOFcluster;
static int G__G__STEERBase_869_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVTOFcluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVTOFcluster*) (soff+(sizeof(AliVTOFcluster)*i)))->~G__TAliVTOFcluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVTOFcluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVTOFcluster*) (soff))->~G__TAliVTOFcluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVTOFHit */
static int G__G__STEERBase_871_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVTOFHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVTOFHit[n];
     } else {
       p = new((void*) gvp) AliVTOFHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVTOFHit;
     } else {
       p = new((void*) gvp) AliVTOFHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVTOFHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliVTOFHit(*(AliVTOFHit*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliVTOFHit(*(AliVTOFHit*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVTOFHit& obj = ((AliVTOFHit*) G__getstructoffset())->operator=(*(AliVTOFHit*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTOFHit*) G__getstructoffset())->GetESDTOFClusterIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFHit*) G__getstructoffset())->SetESDTOFClusterIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFHit*) G__getstructoffset())->SetTime((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFHit*) G__getstructoffset())->SetLabel((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFHit*) G__getstructoffset())->SetTimeRaw((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFHit*) G__getstructoffset())->SetTOT((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFHit*) G__getstructoffset())->SetL0L1Latency((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFHit*) G__getstructoffset())->SetDeltaBC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFHit*) G__getstructoffset())->SetTOFchannel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFHit*) G__getstructoffset())->SetClusterIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTOFHit*) G__getstructoffset())->GetTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTOFHit*) G__getstructoffset())->GetTimeRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTOFHit*) G__getstructoffset())->GetTOT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTOFHit*) G__getstructoffset())->GetL0L1Latency());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTOFHit*) G__getstructoffset())->GetTOFLabel((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTOFHit*) G__getstructoffset())->GetDeltaBC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTOFHit*) G__getstructoffset())->GetTOFchannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTOFHit*) G__getstructoffset())->GetClusterIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVTOFHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTOFHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVTOFHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVTOFHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTOFHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVTOFHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTOFHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_871_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVTOFHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVTOFHit G__TAliVTOFHit;
static int G__G__STEERBase_871_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVTOFHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVTOFHit*) (soff+(sizeof(AliVTOFHit)*i)))->~G__TAliVTOFHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVTOFHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVTOFHit*) (soff))->~G__TAliVTOFHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVTOFMatch */
static int G__G__STEERBase_872_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVTOFMatch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVTOFMatch[n];
     } else {
       p = new((void*) gvp) AliVTOFMatch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVTOFMatch;
     } else {
       p = new((void*) gvp) AliVTOFMatch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFMatch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVTOFMatch* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliVTOFMatch(*(AliVTOFMatch*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliVTOFMatch(*(AliVTOFMatch*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFMatch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVTOFMatch& obj = ((AliVTOFMatch*) G__getstructoffset())->operator=(*(AliVTOFMatch*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVTOFMatch*) G__getstructoffset())->GetTrackIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFMatch*) G__getstructoffset())->SetTrackIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTOFMatch*) G__getstructoffset())->GetDx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTOFMatch*) G__getstructoffset())->GetDy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTOFMatch*) G__getstructoffset())->GetDz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliVTOFMatch*) G__getstructoffset())->GetTrackLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVTOFMatch*) G__getstructoffset())->GetIntegratedTimes((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVTOFMatch*) G__getstructoffset())->GetIntegratedTimes((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFMatch*) G__getstructoffset())->SetIntegratedTimes((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFMatch*) G__getstructoffset())->SetDx((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFMatch*) G__getstructoffset())->SetDy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFMatch*) G__getstructoffset())->SetDz((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFMatch*) G__getstructoffset())->SetTrackLength((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVTOFMatch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTOFMatch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVTOFMatch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVTOFMatch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTOFMatch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTOFMatch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVTOFMatch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVTOFMatch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_872_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVTOFMatch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVTOFMatch G__TAliVTOFMatch;
static int G__G__STEERBase_872_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVTOFMatch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVTOFMatch*) (soff+(sizeof(AliVTOFMatch)*i)))->~G__TAliVTOFMatch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVTOFMatch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVTOFMatch*) (soff))->~G__TAliVTOFMatch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVTPCseed */
static int G__G__STEERBase_873_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliVTPCseed*) G__getstructoffset())->CopyToTPCseed(*(AliTPCseed*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_873_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTPCseed*) G__getstructoffset())->SetFromTPCseed((AliTPCseed*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_873_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVTPCseed*) G__getstructoffset())->TagSuppressSharedClusters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVTPCseed G__TAliVTPCseed;
static int G__G__STEERBase_873_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVTPCseed*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVTPCseed*) (soff+(sizeof(AliVTPCseed)*i)))->~G__TAliVTPCseed();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVTPCseed*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVTPCseed*) (soff))->~G__TAliVTPCseed();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__STEERBase_873_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVTPCseed* dest = (AliVTPCseed*) G__getstructoffset();
   *dest = *(AliVTPCseed*) libp->para[0].ref;
   const AliVTPCseed& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TTreeDataElement */
static int G__G__STEERBase_879_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTreeDataElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TTreeDataElement((Char_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TTreeDataElement((Char_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeDataElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_879_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTreeDataElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TTreeDataElement((TDataType*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TTreeDataElement((TDataType*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeDataElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_879_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTreeDataElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TTreeDataElement((TClass*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TTreeDataElement((TClass*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeDataElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_879_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTreeDataElement*) G__getstructoffset())->SetPointer((void*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_879_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const TTreeDataElement*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_879_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TTreeDataElement::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_879_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTreeDataElement::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_879_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TTreeDataElement::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_879_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TTreeDataElement::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_879_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTreeDataElement*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_879_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTreeDataElement::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_879_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTreeDataElement::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_879_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTreeDataElement::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_879_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTreeDataElement::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TTreeDataElement G__TTTreeDataElement;
static int G__G__STEERBase_879_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TTreeDataElement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TTreeDataElement*) (soff+(sizeof(TTreeDataElement)*i)))->~G__TTTreeDataElement();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TTreeDataElement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TTreeDataElement*) (soff))->~G__TTTreeDataElement();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TTreeStream */
static int G__G__STEERBase_880_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTreeStream* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTreeStream((const char*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TTreeStream((const char*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTreeStream((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TTreeStream((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTreeStream*) G__getstructoffset())->Close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TTreeStream::Test();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TTreeStream*) G__getstructoffset())->CheckIn((Char_t) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TTreeStream*) G__getstructoffset())->CheckIn((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTreeStream*) G__getstructoffset())->BuildTree();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTreeStream*) G__getstructoffset())->Fill();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TTreeStream*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->Endl();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->operator<<(*(Bool_t*) G__Boolref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->operator<<(*(Char_t*) G__Charref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->operator<<(*(UChar_t*) G__UCharref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->operator<<(*(Short_t*) G__Shortref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->operator<<(*(UShort_t*) G__UShortref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->operator<<(*(Int_t*) G__Intref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->operator<<(*(UInt_t*) G__UIntref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->operator<<(*(Long_t*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->operator<<(*(ULong_t*) G__ULongref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->operator<<(*(Long64_t*) G__Longlongref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->operator<<(*(ULong64_t*) G__ULonglongref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->operator<<(*(Float_t*) G__Floatref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->operator<<(*(Double_t*) G__Doubleref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->operator<<((TObject*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeStream*) G__getstructoffset())->operator<<((const Char_t*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TTreeStream*) G__getstructoffset())->GetTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TTreeStream::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTreeStream::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TTreeStream::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TTreeStream::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTreeStream*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTreeStream::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTreeStream::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTreeStream::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_880_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTreeStream::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TTreeStream G__TTTreeStream;
static int G__G__STEERBase_880_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TTreeStream*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TTreeStream*) (soff+(sizeof(TTreeStream)*i)))->~G__TTTreeStream();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TTreeStream*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TTreeStream*) (soff))->~G__TTTreeStream();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TTreeSRedirector */
static int G__G__STEERBase_881_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TTreeSRedirector* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTreeSRedirector((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TTreeSRedirector((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TTreeSRedirector((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TTreeSRedirector((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TTreeSRedirector[n];
       } else {
         p = new((void*) gvp) TTreeSRedirector[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TTreeSRedirector;
       } else {
         p = new((void*) gvp) TTreeSRedirector;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeSRedirector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTreeSRedirector*) G__getstructoffset())->Close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TTreeSRedirector::Test();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TTreeSRedirector::Test2();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TTreeSRedirector::UnitTestSparse((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      TTreeSRedirector::UnitTest((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      TTreeSRedirector::UnitTest();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTreeSRedirector*) G__getstructoffset())->StoreObject((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TTreeSRedirector*) G__getstructoffset())->GetFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TTreeSRedirector*) G__getstructoffset())->GetDirectory());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeSRedirector*) G__getstructoffset())->operator<<((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TTreeStream& obj = ((TTreeSRedirector*) G__getstructoffset())->operator<<((const char*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTreeSRedirector*) G__getstructoffset())->SetDirectory((TDirectory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTreeSRedirector*) G__getstructoffset())->SetFile((TFile*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTreeSRedirector*) G__getstructoffset())->SetExternalTree((const char*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      TTreeSRedirector::SetDisabled((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      TTreeSRedirector::SetDisabled();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) TTreeSRedirector::IsDisabled());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TTreeSRedirector::FixLeafNameBug((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TTreeSRedirector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTreeSRedirector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TTreeSRedirector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TTreeSRedirector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TTreeSRedirector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTreeSRedirector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTreeSRedirector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TTreeSRedirector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__STEERBase_881_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TTreeSRedirector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TTreeSRedirector G__TTTreeSRedirector;
static int G__G__STEERBase_881_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TTreeSRedirector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TTreeSRedirector*) (soff+(sizeof(TTreeSRedirector)*i)))->~G__TTTreeSRedirector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TTreeSRedirector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TTreeSRedirector*) (soff))->~G__TTTreeSRedirector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* AliCentrality */

/* AliCheb2DStack */

/* AliCheb2DStackF */

/* AliCheb2DStackS */

/* AliCheb3DCalc */

/* AliCheb3D */

/* AliLog */

/* AliCodeTimer */

/* AliCodeTimer::AliPair */

/* AliCollisionGeometry */

/* AliCounterCollection */

/* AliDAQ */

/* AliDataFile */

/* AliDetectorEventHeader */

/* AliPID */

/* AliVParticle */

/* AliVEvent */

/* AliVVertex */

/* AliExternalTrackParam */

/* AliTPCdEdxInfo */

/* AliDetectorPID */

/* AliTOFHeader */

/* AliVTrack */

/* AliITSPidParams */

/* AliITSPIDResponse */

/* AliOADBContainer */

/* AliTPCPIDResponse */

/* AliTRDPIDResponseObject */

/* AliTRDdEdxParams */

/* AliTRDPIDResponse */

/* AliTOFPIDParams */

/* AliTOFPIDResponse */

/* AliHMPIDPIDResponse */

/* AliEMCALPIDResponse */

/* AliMCEvent */

/* AliHMPIDPIDParams */

/* AliPIDResponse */

/* AliDetectorTag */

/* AliDetectorTagCuts */

/* AliVfriendEvent */

/* AliVEventHandler */

/* AliVCuts */

/* AliRunTag */

/* AliEventTag */

/* AliInputEventHandler */

/* AliDummyHandler */

/* AliEventplane */

/* AliEventTagCuts */

/* AliFileTag */

/* AliGenEventHeader */

/* AliGenCocktailEventHeader */

/* AliGenDPMjetEventHeader */

/* AliGenEpos3EventHeader */

/* AliGenEposEventHeader */

/* AliGenEventHeaderTunedPbPb */

/* AliGenGeVSimEventHeader */

/* AliGenHepMCEventHeader */

/* AliGenHerwigEventHeader */

/* AliGenHijingEventHeader */

/* AliGenPythiaEventHeader */

/* AliGenToyEventHeader */

/* AliStack */

/* AliHeader */

/* AliLHCTag */

/* AliLHCTagCuts */

/* AliMagWrapCheb */

/* AliMagF */

/* AliMathBase */

/* AliVHeader */

/* AliVCluster */

/* AliVCaloCells */

/* AliVCaloTrigger */

/* AliTOFTriggerMask */

/* AliVTrdTracklet */

/* AliVTrdTrack */

/* AliVMultiplicity */

/* AliVVZERO */

/* AliVZDC */

/* AliVMFT */

/* AliVAD */

/* AliTrackReference */

/* AliMCParticle */

/* AliMCEventHandler */

/* AliMCVertex */

/* AliMergeableCollectionIterator */

/* AliMergeableCollectionProxy */

/* AliMergeableCollection */

/* AliMixedEvent */

/* AliMultSelectionBase */

/* AliNeutralTrackParam */

/* AliPDG */

/* AliPIDCombined */

/* AliPIDValues */

/* AliProdInfo */

/* AliQA */

/* AliRefArray */

/* AliRunTagCuts */

/* AliSysInfo */

/* AliTagCreator */

/* AliTimeStamp */

/* AliTRDNDFast */

/* AliTRDPIDParams */

/* AliTRDPIDParams::AliTRDPIDThresholds */

/* AliTRDPIDParams::AliTRDPIDCentrality */

/* AliTRDPIDReference */

/* AliTRDTKDInterpolator */

/* AliTRDTKDInterpolator::AliTRDTKDNodeInfo */

/* AliTriggerScalers */

/* AliTriggerScalersRecord */

/* AliVAODHeader */

/* AliVersion */

/* AliVEventPool */

/* AliVfriendTrack */

/* AliVVZEROfriend */

/* AliVTOFcluster */

/* AliVTOFHit */

/* AliVTOFMatch */

/* AliVTPCseed */

/* TTreeDataElement */

/* TTreeStream */

/* TTreeSRedirector */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__STEERBase {
 public:
  G__Sizep2memfuncG__STEERBase(): p(&G__Sizep2memfuncG__STEERBase::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__STEERBase::*p)();
};

size_t G__get_sizep2memfuncG__STEERBase()
{
  G__Sizep2memfuncG__STEERBase a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__STEERBase() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCentrality))) {
     AliCentrality *G__Lderived;
     G__Lderived=(AliCentrality*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCentrality),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCentrality),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStack))) {
     AliCheb2DStack *G__Lderived;
     G__Lderived=(AliCheb2DStack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStack),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackF))) {
     AliCheb2DStackF *G__Lderived;
     G__Lderived=(AliCheb2DStackF*)0x1000;
     {
       AliCheb2DStack *G__Lpbase=(AliCheb2DStack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackF),G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackF),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackS))) {
     AliCheb2DStackS *G__Lderived;
     G__Lderived=(AliCheb2DStackS*)0x1000;
     {
       AliCheb2DStack *G__Lpbase=(AliCheb2DStack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackS),G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackS),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3DCalc))) {
     AliCheb3DCalc *G__Lderived;
     G__Lderived=(AliCheb3DCalc*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3DCalc),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3DCalc),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D))) {
     AliCheb3D *G__Lderived;
     G__Lderived=(AliCheb3D*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliLog))) {
     AliLog *G__Lderived;
     G__Lderived=(AliLog*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliLog),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimer))) {
     AliCodeTimer *G__Lderived;
     G__Lderived=(AliCodeTimer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimer),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimercLcLAliPair))) {
     AliCodeTimer::AliPair *G__Lderived;
     G__Lderived=(AliCodeTimer::AliPair*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimercLcLAliPair),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCounterCollection))) {
     AliCounterCollection *G__Lderived;
     G__Lderived=(AliCounterCollection*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCounterCollection),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCounterCollection),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQ))) {
     AliDAQ *G__Lderived;
     G__Lderived=(AliDAQ*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQ),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorEventHeader))) {
     AliDetectorEventHeader *G__Lderived;
     G__Lderived=(AliDetectorEventHeader*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPID))) {
     AliPID *G__Lderived;
     G__Lderived=(AliPID*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPID),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVParticle))) {
     AliVParticle *G__Lderived;
     G__Lderived=(AliVParticle*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVParticle),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent))) {
     AliVEvent *G__Lderived;
     G__Lderived=(AliVEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex))) {
     AliVVertex *G__Lderived;
     G__Lderived=(AliVVertex*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam))) {
     AliExternalTrackParam *G__Lderived;
     G__Lderived=(AliExternalTrackParam*)0x1000;
     {
       AliVTrack *G__Lpbase=(AliVTrack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam),G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       AliVParticle *G__Lpbase=(AliVParticle*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam),G__get_linked_tagnum(&G__G__STEERBaseLN_AliVParticle),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCdEdxInfo))) {
     AliTPCdEdxInfo *G__Lderived;
     G__Lderived=(AliTPCdEdxInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCdEdxInfo),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorPID))) {
     AliDetectorPID *G__Lderived;
     G__Lderived=(AliDetectorPID*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorPID),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFHeader))) {
     AliTOFHeader *G__Lderived;
     G__Lderived=(AliTOFHeader*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrack))) {
     AliVTrack *G__Lderived;
     G__Lderived=(AliVTrack*)0x1000;
     {
       AliVParticle *G__Lpbase=(AliVParticle*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrack),G__get_linked_tagnum(&G__G__STEERBaseLN_AliVParticle),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrack),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPidParams))) {
     AliITSPidParams *G__Lderived;
     G__Lderived=(AliITSPidParams*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPidParams),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPidParams),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPIDResponse))) {
     AliITSPIDResponse *G__Lderived;
     G__Lderived=(AliITSPIDResponse*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPIDResponse),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliOADBContainer))) {
     AliOADBContainer *G__Lderived;
     G__Lderived=(AliOADBContainer*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliOADBContainer),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliOADBContainer),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponse))) {
     AliTPCPIDResponse *G__Lderived;
     G__Lderived=(AliTPCPIDResponse*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponse),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponse),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponseObject))) {
     AliTRDPIDResponseObject *G__Lderived;
     G__Lderived=(AliTRDPIDResponseObject*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponseObject),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponseObject),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDdEdxParams))) {
     AliTRDdEdxParams *G__Lderived;
     G__Lderived=(AliTRDdEdxParams*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDdEdxParams),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDdEdxParams),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponse))) {
     AliTRDPIDResponse *G__Lderived;
     G__Lderived=(AliTRDPIDResponse*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponse),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDParams))) {
     AliTOFPIDParams *G__Lderived;
     G__Lderived=(AliTOFPIDParams*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDParams),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDParams),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDResponse))) {
     AliTOFPIDResponse *G__Lderived;
     G__Lderived=(AliTOFPIDResponse*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDResponse),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponse))) {
     AliHMPIDPIDResponse *G__Lderived;
     G__Lderived=(AliHMPIDPIDResponse*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponse),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponse),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEMCALPIDResponse))) {
     AliEMCALPIDResponse *G__Lderived;
     G__Lderived=(AliEMCALPIDResponse*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEMCALPIDResponse),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEvent))) {
     AliMCEvent *G__Lderived;
     G__Lderived=(AliMCEvent*)0x1000;
     {
       AliVEvent *G__Lpbase=(AliVEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEvent),G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEvent),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDParams))) {
     AliHMPIDPIDParams *G__Lderived;
     G__Lderived=(AliHMPIDPIDParams*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDParams),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDParams),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponse))) {
     AliPIDResponse *G__Lderived;
     G__Lderived=(AliPIDResponse*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponse),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponse),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTag))) {
     AliDetectorTag *G__Lderived;
     G__Lderived=(AliDetectorTag*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTag),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTagCuts))) {
     AliDetectorTagCuts *G__Lderived;
     G__Lderived=(AliDetectorTagCuts*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTagCuts),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVfriendEvent))) {
     AliVfriendEvent *G__Lderived;
     G__Lderived=(AliVfriendEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVfriendEvent),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventHandler))) {
     AliVEventHandler *G__Lderived;
     G__Lderived=(AliVEventHandler*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventHandler),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventHandler),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCuts))) {
     AliVCuts *G__Lderived;
     G__Lderived=(AliVCuts*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCuts),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCuts),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTag))) {
     AliRunTag *G__Lderived;
     G__Lderived=(AliRunTag*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTag),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTag))) {
     AliEventTag *G__Lderived;
     G__Lderived=(AliEventTag*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTag),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler))) {
     AliInputEventHandler *G__Lderived;
     G__Lderived=(AliInputEventHandler*)0x1000;
     {
       AliVEventHandler *G__Lpbase=(AliVEventHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler),G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventHandler),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDummyHandler))) {
     AliDummyHandler *G__Lderived;
     G__Lderived=(AliDummyHandler*)0x1000;
     {
       AliInputEventHandler *G__Lpbase=(AliInputEventHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDummyHandler),G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       AliVEventHandler *G__Lpbase=(AliVEventHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDummyHandler),G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventHandler),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDummyHandler),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDummyHandler),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventplane))) {
     AliEventplane *G__Lderived;
     G__Lderived=(AliEventplane*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventplane),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventplane),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTagCuts))) {
     AliEventTagCuts *G__Lderived;
     G__Lderived=(AliEventTagCuts*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTagCuts),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliFileTag))) {
     AliFileTag *G__Lderived;
     G__Lderived=(AliFileTag*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliFileTag),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader))) {
     AliGenEventHeader *G__Lderived;
     G__Lderived=(AliGenEventHeader*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenCocktailEventHeader))) {
     AliGenCocktailEventHeader *G__Lderived;
     G__Lderived=(AliGenCocktailEventHeader*)0x1000;
     {
       AliGenEventHeader *G__Lpbase=(AliGenEventHeader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenCocktailEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenCocktailEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenCocktailEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenDPMjetEventHeader))) {
     AliGenDPMjetEventHeader *G__Lderived;
     G__Lderived=(AliGenDPMjetEventHeader*)0x1000;
     {
       AliGenEventHeader *G__Lpbase=(AliGenEventHeader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenDPMjetEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenDPMjetEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenDPMjetEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       AliCollisionGeometry *G__Lpbase=(AliCollisionGeometry*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenDPMjetEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_AliCollisionGeometry),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEpos3EventHeader))) {
     AliGenEpos3EventHeader *G__Lderived;
     G__Lderived=(AliGenEpos3EventHeader*)0x1000;
     {
       AliGenEventHeader *G__Lpbase=(AliGenEventHeader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEpos3EventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEpos3EventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEpos3EventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       AliCollisionGeometry *G__Lpbase=(AliCollisionGeometry*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEpos3EventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_AliCollisionGeometry),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEposEventHeader))) {
     AliGenEposEventHeader *G__Lderived;
     G__Lderived=(AliGenEposEventHeader*)0x1000;
     {
       AliGenEventHeader *G__Lpbase=(AliGenEventHeader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEposEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEposEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEposEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       AliCollisionGeometry *G__Lpbase=(AliCollisionGeometry*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEposEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_AliCollisionGeometry),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeaderTunedPbPb))) {
     AliGenEventHeaderTunedPbPb *G__Lderived;
     G__Lderived=(AliGenEventHeaderTunedPbPb*)0x1000;
     {
       AliGenEventHeader *G__Lpbase=(AliGenEventHeader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeaderTunedPbPb),G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeaderTunedPbPb),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeaderTunedPbPb),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenGeVSimEventHeader))) {
     AliGenGeVSimEventHeader *G__Lderived;
     G__Lderived=(AliGenGeVSimEventHeader*)0x1000;
     {
       AliGenEventHeader *G__Lpbase=(AliGenEventHeader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenGeVSimEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenGeVSimEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenGeVSimEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHepMCEventHeader))) {
     AliGenHepMCEventHeader *G__Lderived;
     G__Lderived=(AliGenHepMCEventHeader*)0x1000;
     {
       AliGenEventHeader *G__Lpbase=(AliGenEventHeader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHepMCEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHepMCEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHepMCEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHerwigEventHeader))) {
     AliGenHerwigEventHeader *G__Lderived;
     G__Lderived=(AliGenHerwigEventHeader*)0x1000;
     {
       AliGenEventHeader *G__Lpbase=(AliGenEventHeader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHerwigEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHerwigEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHerwigEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHijingEventHeader))) {
     AliGenHijingEventHeader *G__Lderived;
     G__Lderived=(AliGenHijingEventHeader*)0x1000;
     {
       AliGenEventHeader *G__Lpbase=(AliGenEventHeader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHijingEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHijingEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHijingEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       AliCollisionGeometry *G__Lpbase=(AliCollisionGeometry*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHijingEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_AliCollisionGeometry),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenPythiaEventHeader))) {
     AliGenPythiaEventHeader *G__Lderived;
     G__Lderived=(AliGenPythiaEventHeader*)0x1000;
     {
       AliGenEventHeader *G__Lpbase=(AliGenEventHeader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenPythiaEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenPythiaEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenPythiaEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenToyEventHeader))) {
     AliGenToyEventHeader *G__Lderived;
     G__Lderived=(AliGenToyEventHeader*)0x1000;
     {
       AliGenEventHeader *G__Lpbase=(AliGenEventHeader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenToyEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenToyEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenToyEventHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack))) {
     AliStack *G__Lderived;
     G__Lderived=(AliStack*)0x1000;
     {
       TVirtualMCStack *G__Lpbase=(TVirtualMCStack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack),G__get_linked_tagnum(&G__G__STEERBaseLN_TVirtualMCStack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliHeader))) {
     AliHeader *G__Lderived;
     G__Lderived=(AliHeader*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTag))) {
     AliLHCTag *G__Lderived;
     G__Lderived=(AliLHCTag*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTag),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTagCuts))) {
     AliLHCTagCuts *G__Lderived;
     G__Lderived=(AliLHCTagCuts*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTagCuts),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagWrapCheb))) {
     AliMagWrapCheb *G__Lderived;
     G__Lderived=(AliMagWrapCheb*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagWrapCheb),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagWrapCheb),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagF))) {
     AliMagF *G__Lderived;
     G__Lderived=(AliMagF*)0x1000;
     {
       TVirtualMagField *G__Lpbase=(TVirtualMagField*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagF),G__get_linked_tagnum(&G__G__STEERBaseLN_TVirtualMagField),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagF),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagF),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMathBase))) {
     AliMathBase *G__Lderived;
     G__Lderived=(AliMathBase*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMathBase),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVHeader))) {
     AliVHeader *G__Lderived;
     G__Lderived=(AliVHeader*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCluster))) {
     AliVCluster *G__Lderived;
     G__Lderived=(AliVCluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCluster),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCells))) {
     AliVCaloCells *G__Lderived;
     G__Lderived=(AliVCaloCells*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCells),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCells),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloTrigger))) {
     AliVCaloTrigger *G__Lderived;
     G__Lderived=(AliVCaloTrigger*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloTrigger),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloTrigger),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFTriggerMask))) {
     AliTOFTriggerMask *G__Lderived;
     G__Lderived=(AliTOFTriggerMask*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFTriggerMask),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrdTracklet))) {
     AliVTrdTracklet *G__Lderived;
     G__Lderived=(AliVTrdTracklet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrdTracklet),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrdTrack))) {
     AliVTrdTrack *G__Lderived;
     G__Lderived=(AliVTrdTrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrdTrack),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMultiplicity))) {
     AliVMultiplicity *G__Lderived;
     G__Lderived=(AliVMultiplicity*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMultiplicity),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMultiplicity),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZERO))) {
     AliVVZERO *G__Lderived;
     G__Lderived=(AliVVZERO*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZERO),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVZDC))) {
     AliVZDC *G__Lderived;
     G__Lderived=(AliVZDC*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVZDC),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMFT))) {
     AliVMFT *G__Lderived;
     G__Lderived=(AliVMFT*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMFT),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVAD))) {
     AliVAD *G__Lderived;
     G__Lderived=(AliVAD*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVAD),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReference))) {
     AliTrackReference *G__Lderived;
     G__Lderived=(AliTrackReference*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReference),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCParticle))) {
     AliMCParticle *G__Lderived;
     G__Lderived=(AliMCParticle*)0x1000;
     {
       AliVParticle *G__Lpbase=(AliVParticle*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCParticle),G__get_linked_tagnum(&G__G__STEERBaseLN_AliVParticle),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCParticle),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandler))) {
     AliMCEventHandler *G__Lderived;
     G__Lderived=(AliMCEventHandler*)0x1000;
     {
       AliInputEventHandler *G__Lpbase=(AliInputEventHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandler),G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       AliVEventHandler *G__Lpbase=(AliVEventHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandler),G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventHandler),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandler),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandler),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCVertex))) {
     AliMCVertex *G__Lderived;
     G__Lderived=(AliMCVertex*)0x1000;
     {
       AliVVertex *G__Lpbase=(AliVVertex*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCVertex),G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCVertex),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCVertex),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionIterator))) {
     AliMergeableCollectionIterator *G__Lderived;
     G__Lderived=(AliMergeableCollectionIterator*)0x1000;
     {
       TIterator *G__Lpbase=(TIterator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionIterator),G__get_linked_tagnum(&G__G__STEERBaseLN_TIterator),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionProxy))) {
     AliMergeableCollectionProxy *G__Lderived;
     G__Lderived=(AliMergeableCollectionProxy*)0x1000;
     {
       TFolder *G__Lpbase=(TFolder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionProxy),G__get_linked_tagnum(&G__G__STEERBaseLN_TFolder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionProxy),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionProxy),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollection))) {
     AliMergeableCollection *G__Lderived;
     G__Lderived=(AliMergeableCollection*)0x1000;
     {
       TFolder *G__Lpbase=(TFolder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollection),G__get_linked_tagnum(&G__G__STEERBaseLN_TFolder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollection),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollection),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMixedEvent))) {
     AliMixedEvent *G__Lderived;
     G__Lderived=(AliMixedEvent*)0x1000;
     {
       AliVEvent *G__Lpbase=(AliVEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMixedEvent),G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMixedEvent),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMultSelectionBase))) {
     AliMultSelectionBase *G__Lderived;
     G__Lderived=(AliMultSelectionBase*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMultSelectionBase),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMultSelectionBase),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam))) {
     AliNeutralTrackParam *G__Lderived;
     G__Lderived=(AliNeutralTrackParam*)0x1000;
     {
       AliExternalTrackParam *G__Lpbase=(AliExternalTrackParam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam),G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       AliVTrack *G__Lpbase=(AliVTrack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam),G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrack),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       AliVParticle *G__Lpbase=(AliVParticle*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam),G__get_linked_tagnum(&G__G__STEERBaseLN_AliVParticle),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPDG))) {
     AliPDG *G__Lderived;
     G__Lderived=(AliPDG*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPDG),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDCombined))) {
     AliPIDCombined *G__Lderived;
     G__Lderived=(AliPIDCombined*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDCombined),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDCombined),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDValues))) {
     AliPIDValues *G__Lderived;
     G__Lderived=(AliPIDValues*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDValues),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfo))) {
     AliProdInfo *G__Lderived;
     G__Lderived=(AliProdInfo*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfo),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfo),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA))) {
     AliQA *G__Lderived;
     G__Lderived=(AliQA*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliRefArray))) {
     AliRefArray *G__Lderived;
     G__Lderived=(AliRefArray*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliRefArray),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTagCuts))) {
     AliRunTagCuts *G__Lderived;
     G__Lderived=(AliRunTagCuts*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTagCuts),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_TVirtualMCStack))) {
     TVirtualMCStack *G__Lderived;
     G__Lderived=(TVirtualMCStack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_TVirtualMCStack),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliSysInfo))) {
     AliSysInfo *G__Lderived;
     G__Lderived=(AliSysInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliSysInfo),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTagCreator))) {
     AliTagCreator *G__Lderived;
     G__Lderived=(AliTagCreator*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTagCreator),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTimeStamp))) {
     AliTimeStamp *G__Lderived;
     G__Lderived=(AliTimeStamp*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTimeStamp),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDNDFast))) {
     AliTRDNDFast *G__Lderived;
     G__Lderived=(AliTRDNDFast*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDNDFast),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParams))) {
     AliTRDPIDParams *G__Lderived;
     G__Lderived=(AliTRDPIDParams*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParams),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParams),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds))) {
     AliTRDPIDParams::AliTRDPIDThresholds *G__Lderived;
     G__Lderived=(AliTRDPIDParams::AliTRDPIDThresholds*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDCentrality))) {
     AliTRDPIDParams::AliTRDPIDCentrality *G__Lderived;
     G__Lderived=(AliTRDPIDParams::AliTRDPIDCentrality*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDCentrality),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDReference))) {
     AliTRDPIDReference *G__Lderived;
     G__Lderived=(AliTRDPIDReference*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDReference),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDReference),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolator))) {
     AliTRDTKDInterpolator *G__Lderived;
     G__Lderived=(AliTRDTKDInterpolator*)0x1000;
     {
       TKDTree<int,float> *G__Lpbase=(TKDTree<int,float>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolator),G__get_linked_tagnum(&G__G__STEERBaseLN_TKDTreelEintcOfloatgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolator),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo))) {
     AliTRDTKDInterpolator::AliTRDTKDNodeInfo *G__Lderived;
     G__Lderived=(AliTRDTKDInterpolator::AliTRDTKDNodeInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalers))) {
     AliTriggerScalers *G__Lderived;
     G__Lderived=(AliTriggerScalers*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalers),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalersRecord))) {
     AliTriggerScalersRecord *G__Lderived;
     G__Lderived=(AliTriggerScalersRecord*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalersRecord),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVAODHeader))) {
     AliVAODHeader *G__Lderived;
     G__Lderived=(AliVAODHeader*)0x1000;
     {
       AliVHeader *G__Lpbase=(AliVHeader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVAODHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_AliVHeader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVAODHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVAODHeader),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVersion))) {
     AliVersion *G__Lderived;
     G__Lderived=(AliVersion*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVersion),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVersion),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventPool))) {
     AliVEventPool *G__Lderived;
     G__Lderived=(AliVEventPool*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventPool),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventPool),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVfriendTrack))) {
     AliVfriendTrack *G__Lderived;
     G__Lderived=(AliVfriendTrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVfriendTrack),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROfriend))) {
     AliVVZEROfriend *G__Lderived;
     G__Lderived=(AliVVZEROfriend*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROfriend),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFcluster))) {
     AliVTOFcluster *G__Lderived;
     G__Lderived=(AliVTOFcluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFcluster),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFHit))) {
     AliVTOFHit *G__Lderived;
     G__Lderived=(AliVTOFHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFHit),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFMatch))) {
     AliVTOFMatch *G__Lderived;
     G__Lderived=(AliVTOFMatch*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFMatch),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeDataElement))) {
     TTreeDataElement *G__Lderived;
     G__Lderived=(TTreeDataElement*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeDataElement),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeDataElement),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream))) {
     TTreeStream *G__Lderived;
     G__Lderived=(TTreeStream*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream),G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeSRedirector))) {
     TTreeSRedirector *G__Lderived;
     G__Lderived=(TTreeSRedirector*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeSRedirector),G__get_linked_tagnum(&G__G__STEERBaseLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__STEERBase() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("ULong_t",107,-1,0,-1);
   G__setnewtype(-1,"Unsigned long integer 8 bytes (unsigned long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Double32_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes in memory, written as a 4 bytes float",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("ULong64_t",109,-1,0,-1);
   G__setnewtype(-1,"Portable unsigned long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__STEERBaseLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__STEERBaseLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__STEERBaseLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__STEERBaseLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("stFun_t",89,-1,0,-1);
   G__setnewtype(-1,"original distribution provided via such function",0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("void (*)(float*,float*)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__G__STEERBaseLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("AliLogNotification",89,-1,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliLog));
   G__setnewtype(-1,"void (*AliLogNotification)(EType_t type, const char* message );",0);
   G__search_typename2("AliVConstructorReinitialisationFlag",117,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVConstructorReinitialisationFlag),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorF",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorD",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixD",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparse<Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTSparselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Double_t (*)(Double_t)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__STEERBaseLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__STEERBaseLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,int>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,int>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("StampCallback_t",89,-1,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliSysInfo));
   G__setnewtype(-1,"void (*StampCallback_t)(const Char_t * desription);",0);
   G__search_typename2("TKDTree<Int_t,Double_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TKDTreelEintcOdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__STEERBaseLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__STEERBaseLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TKDTree<Int_t,Float_t>",117,G__get_linked_tagnum(&G__G__STEERBaseLN_TKDTreelEintcOfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* AliCentrality */
static void G__setup_memvarAliCentrality(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCentrality));
   { AliCentrality *p; p=(AliCentrality*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fQuality=",0,"Quality of centrality determination");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0M=",0,"Centrality from V0A+V0C");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0A=",0,"Centrality from V0A");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0A0=",0,"Centrality from V0A0");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0A123=",0,"Centrality from V0A123");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0C=",0,"Centrality from V0C");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0A23=",0,"Centrality from V0A23");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0C01=",0,"Centrality from V0C01");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0S=",0,"Centrality from V0S");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0MEq=",0,"Centrality from V0A+V0C equalized channel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0AEq=",0,"Centrality from V0A equalized channel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0CEq=",0,"Centrality from V0C equalized channel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityFMD=",0,"Centrality from FMD");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityTRK=",0,"Centrality from tracks");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityTKL=",0,"Centrality from tracklets");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityCL0=",0,"Centrality from Clusters in layer 0");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityCL1=",0,"Centrality from Clusters in layer 1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityCND=",0,"Centrality from tracks (candle condition)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityZNA=",0,"Centrality from ZNA");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityZNC=",0,"Centrality from ZNC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityZPA=",0,"Centrality from ZPA");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityZPC=",0,"Centrality from ZPC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityNPA=",0,"Centrality from Npart (MC)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0MvsFMD=",0,"Centrality from V0 vs FMD");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityTKLvsV0M=",0,"Centrality from tracklets vs V0");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityZEMvsZDC=",0,"Centrality from ZEM vs ZDC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0Mtrue=",0,"Centrality from true (sim) V0A+V0C");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0Atrue=",0,"Centrality from true (sim) V0A");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0Ctrue=",0,"Centrality from true (sim) V0C");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0MEqtrue=",0,"Centrality from true (sim) V0A+V0C equalized channels");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0AEqtrue=",0,"Centrality from true (sim) V0A equalized channels");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityV0CEqtrue=",0,"Centrality from true (sim) V0C equalized channels");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityFMDtrue=",0,"Centrality from true (sim) FMD");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityTRKtrue=",0,"Centrality from true (sim) tracks");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityTKLtrue=",0,"Centrality from true (sim) tracklets");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityCL0true=",0,"Centrality from true (sim) Clusters in layer 0");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityCL1true=",0,"Centrality from true (sim) Clusters in layer 1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityCNDtrue=",0,"Centrality from true (sim) tracks (candle condition)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityZNAtrue=",0,"Centrality from true (sim) ZNA");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityZNCtrue=",0,"Centrality from true (sim) ZNC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityZPAtrue=",0,"Centrality from true (sim) ZNA");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCentralityZPCtrue=",0,"Centrality from true (sim) ZNC");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliCheb2DStack */
static void G__setup_memvarAliCheb2DStack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStack));
   { AliCheb2DStack *p; p=(AliCheb2DStack*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMaxPoints=%lldLL",(long long)AliCheb2DStack::kMaxPoints).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("ktgp=%lldLL",(long long)AliCheb2DStack::ktgp).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kz=%lldLL",(long long)AliCheb2DStack::kz).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDimOut=",0,"each slice maps 2D to fDimOut values");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSlices=",0,"number of slices in the stack");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNParams=",0,"number of parameterizations = fNSlices*fDimOut");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNCoefsTot=",0,"dimension of coeffs array for all slices");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRowsTot=",0,"total number of 1D Cheb. param rows");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBMin[2]=",0,"min boundaries in each dimension");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBMax[2]=",0,"max boundaries in each dimension  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBScaleZ=",0,"scale for Z boundary mapping to [-1:1] interval");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBOffsetZ=",0,"offset for Z boundary mapping to [-1:1] interval");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDead[2]=",0,"dead zone in cm to account if X for each row is provided");
   G__memvar_setup((void*)0,70,0,1,-1,G__defined_typename("Float_t"),-1,2,"fRowXI=",0,"! optional external!!! set 1/X for each row if dead zones to be accounted");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fNRows=",0,"[fNParams] N of used rows in the 2D coeffs matrix of each param");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fNCols=",0,"[fNRowsTot] N of used columns in each row");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCoeffsEntry=",0,"[fNSlices] start of the coeffs array in fCoeffs for each slice");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fColEntry=",0,"[fNSlices] start of the Ncolumns array in fNCols for each slice");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fgkDefPrec=",0,"default precision");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fWSpace[255]=",0,"workspace");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliCheb2DStackF */
static void G__setup_memvarAliCheb2DStackF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackF));
   { AliCheb2DStackF *p; p=(AliCheb2DStackF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fCoeffs=",0,"[fNCoefsTot] coeffs container (all slices)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliCheb2DStackS */
static void G__setup_memvarAliCheb2DStackS(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackS));
   { AliCheb2DStackS *p; p=(AliCheb2DStackS*)0x1000; if (p) { }
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fParScale=",0,"[fNParams] scaling param. to bring symmetrized variation to +-MaxShort");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fParHVar=",0,"[fNParams] half of variation within the row");
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,2,"fCoeffs=",0,"[fNCoefsTot] coeffs container (all slices)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliCheb3DCalc */
static void G__setup_memvarAliCheb3DCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3DCalc));
   { AliCheb3DCalc *p; p=(AliCheb3DCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNCoefs=",0,"total number of coeeficients");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRows=",0,"number of significant rows in the 3D coeffs matrix");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNCols=",0,"max number of significant cols in the 3D coeffs matrix");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNElemBound2D=",0,"number of elements (fNRows*fNCols) to store for the 2D boundary of significant coeffs");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fNColsAtRow=",0,"[fNRows] number of sighificant columns (2nd dim) at each row of 3D coefs matrix");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fColAtRowBg=",0,"[fNRows] beginnig of significant columns (2nd dim) for row in the 2D boundary matrix");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fCoefBound2D0=",0,"[fNElemBound2D] 2D matrix defining the boundary of significance for 3D coeffs.matrix (Ncoefs for col/row)");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fCoefBound2D1=",0,"[fNElemBound2D] 2D matrix defining the start beginnig of significant coeffs for col/row");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fCoefs=",0,"[fNCoefs] array of Chebyshev coefficients");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTmpCf1=",0,"[fNCols] temp. coeffs for 2d summation");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTmpCf0=",0,"[fNRows] temp. coeffs for 1d summation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPrec=",0,"Requested precision");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliCheb3D */
static void G__setup_memvarAliCheb3D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D));
   { AliCheb3D *p; p=(AliCheb3D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDimOut=",0,"dimension of the ouput array");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPrec=",0,"requested precision");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBMin[3]=",0,"min boundaries in each dimension");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBMax[3]=",0,"max boundaries in each dimension  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBScale[3]=",0,"scale for boundary mapping to [-1:1] interval");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBOffset[3]=",0,"offset for boundary mapping to [-1:1] interval");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,2,"fChebCalc=",0,"Chebyshev parameterization for each output dimension");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxCoefs=",0,"! max possible number of coefs per parameterization");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNPoints[3]=",0,"! number of used points in each dimension");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fArgsTmp[3]=",0,"! temporary vector for coefs caluclation");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fResTmp=",0,"! temporary vector for results of user function caluclation");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fGrid=",0,"! temporary buffer for Chebyshef roots grid");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fGridOffs[3]=",0,"! start of grid for each dimension");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,2,"fUsrFunName=",0,"! name of user macro containing the function of  \"void (*fcn)(float*,float*)\" format");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TMethodCall),-1,-1,2,"fUsrMacro=",0,"! Pointer to MethodCall for function from user macro ");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,2,"fgkMinPrec=",0,"smallest precision");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliLog */
static void G__setup_memvarAliLog(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliLog));
   { AliLog *p; p=(AliLog*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliLogcLcLEType_t),-1,-2,1,G__FastAllocString(2048).Format("kFatal=%lldLL",(long long)AliLog::kFatal).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliLogcLcLEType_t),-1,-2,1,G__FastAllocString(2048).Format("kError=%lldLL",(long long)AliLog::kError).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliLogcLcLEType_t),-1,-2,1,G__FastAllocString(2048).Format("kWarning=%lldLL",(long long)AliLog::kWarning).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliLogcLcLEType_t),-1,-2,1,G__FastAllocString(2048).Format("kInfo=%lldLL",(long long)AliLog::kInfo).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliLogcLcLEType_t),-1,-2,1,G__FastAllocString(2048).Format("kDebug=%lldLL",(long long)AliLog::kDebug).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliLogcLcLEType_t),-1,-2,1,G__FastAllocString(2048).Format("kMaxType=%lldLL",(long long)AliLog::kMaxType).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliLogcLcLdA),-1,-2,4,"kDebugOffset=3LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliLog),-1,-2,4,"fgInstance=",0,"! pointer to current instance");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fgDebugEnabled=",0,"flag for debug en-/disabling");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fgCoreEnabled=",0,"flag for core dump en-/disabling");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fGlobalLogLevel=",0,"global logging level");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fModuleDebugLevels=",0,"debug levels for modules");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fClassDebugLevels=",0,"debug levels for classes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fOutputTypes[5]=",0,"types of output streams");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fFileNames[5]=",0,"file names");
   G__memvar_setup((void*)0,69,0,0,-1,-1,-1,4,"fOutputFiles[5]=",0,"! log output files");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ostream"),-1,4,"fOutputStreams[5]=",0,"! log output streams");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPrintType[5]=",0,"print type on/off");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPrintModule[5]=",0,"print module on/off");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPrintScope[5]=",0,"print scope/class name on/off");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPrintLocation[5]=",0,"print file and line on/off");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPrintRepetitions=",0,"print number of repetitions instead of repeated message on/off");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRepetitions=",0,"! counter of repetitions");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fLastType=",0,"! type of last message");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fLastMessage=",0,"! last message");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fLastModule=",0,"! module name of last message");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fLastClassName=",0,"! class name of last message");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fLastFunction=",0,"! function name of last message");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fLastFile=",0,"! file name of last message");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLastLine=",0,"! line number of last message");
   G__memvar_setup((void*)0,89,0,0,-1,G__defined_typename("AliLogNotification"),-1,4,"fCallBacks[5]=",0,"! external notification callback");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliCodeTimer */
static void G__setup_memvarAliCodeTimer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimer));
   { AliCodeTimer *p; p=(AliCodeTimer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimer),-1,-2,4,"fgInstance=",0,"< unique instance");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TMap),-1,-1,4,"fTimers=",0,"< internal timers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliCodeTimer::AliPair */
static void G__setup_memvarAliCodeTimercLcLAliPair(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimercLcLAliPair));
   { AliCodeTimer::AliPair *p; p=(AliCodeTimer::AliPair*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjString),-1,-1,4,"fName=",0,"name of the timer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TStopwatch),-1,-1,4,"fTimer=",0,"actual timer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliCollisionGeometry */
static void G__setup_memvarAliCollisionGeometry(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCollisionGeometry));
   { AliCollisionGeometry *p; p=(AliCollisionGeometry*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNHardScatters=",0,"Number of hard scatterings");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNProjectileParticipants=",0,"Number of projectiles participants");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNTargetParticipants=",0,"Number of target participants");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNNColl=",0,"Number of N-N collisions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNNwColl=",0,"Number of N-Nwounded collisions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNwNColl=",0,"Number of Nwounded-N collisons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNwNwColl=",0,"Number of Nwounded-Nwounded collisions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fProjectileSpecn=",0,"Num. of spectator neutrons from projectile nucleus");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fProjectileSpecp=",0,"Num. of spectator protons from projectile nucleus");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTargetSpecn=",0,"Num. of spectator neutrons from target nucleus");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTargetSpecp=",0,"Num. of spectator protons from target nucleus");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fImpactParameter=",0,"Impact Parameter");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fReactionPlaneAngle=",0,"Reaction plane angle");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSD1=",0,"number of SD1 in pA, AA ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSD2=",0,"number of SD2 in pA, AA");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNDD=",0,"number of DD  in pA, AA");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliCounterCollection */
static void G__setup_memvarAliCounterCollection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCounterCollection));
   { AliCounterCollection *p; p=(AliCounterCollection*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_THashList),-1,-1,4,"fRubrics=",0,"/< list of rubrics with associated key words");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayI),-1,-1,4,"fRubricsSize=",0,"/< maximum number of key words in the corresponding rubric");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_THnSparse),-1,-1,4,"fCounters=",0,"/< histogram of nRubrics dimensions used as n-dimensional counter");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fWeightedCounters=",0,"/< use THnSparseF instead of THnSparseI");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fLongCounters=",0,"/< use THnSparseL instead of THnSparseI");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliDAQ */
static void G__setup_memvarAliDAQ(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQ));
   { AliDAQ *p; p=(AliDAQ*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNDetectors=%lldLL",(long long)AliDAQ::kNDetectors).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kHLTId=%lldLL",(long long)AliDAQ::kHLTId).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kSPD=%lldLL",(long long)AliDAQ::kSPD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kSDD=%lldLL",(long long)AliDAQ::kSDD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kSSD=%lldLL",(long long)AliDAQ::kSSD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kITS=%lldLL",(long long)AliDAQ::kITS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kTPC=%lldLL",(long long)AliDAQ::kTPC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kTRD=%lldLL",(long long)AliDAQ::kTRD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kTOF=%lldLL",(long long)AliDAQ::kTOF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kHMPID=%lldLL",(long long)AliDAQ::kHMPID).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kPHOS=%lldLL",(long long)AliDAQ::kPHOS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kCPV=%lldLL",(long long)AliDAQ::kCPV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kPMD=%lldLL",(long long)AliDAQ::kPMD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kMUONTRK=%lldLL",(long long)AliDAQ::kMUONTRK).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kMUONTRG=%lldLL",(long long)AliDAQ::kMUONTRG).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kMUON=%lldLL",(long long)AliDAQ::kMUON).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kFMD=%lldLL",(long long)AliDAQ::kFMD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kT0=%lldLL",(long long)AliDAQ::kT0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kVZERO=%lldLL",(long long)AliDAQ::kVZERO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kZDC=%lldLL",(long long)AliDAQ::kZDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kACORDE=%lldLL",(long long)AliDAQ::kACORDE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kTRG=%lldLL",(long long)AliDAQ::kTRG).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kEMCAL=%lldLL",(long long)AliDAQ::kEMCAL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kDAQTEST=%lldLL",(long long)AliDAQ::kDAQTEST).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kEMPTY=%lldLL",(long long)AliDAQ::kEMPTY).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kAD=%lldLL",(long long)AliDAQ::kAD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kMFT=%lldLL",(long long)AliDAQ::kMFT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kFIT=%lldLL",(long long)AliDAQ::kFIT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits),-1,-2,1,G__FastAllocString(2048).Format("kHLT=%lldLL",(long long)AliDAQ::kHLT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kACORDE_QF=%lldLL",(long long)AliDAQ::kACORDE_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kAD_QF=%lldLL",(long long)AliDAQ::kAD_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kCPV_QF=%lldLL",(long long)AliDAQ::kCPV_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kDAQ_TEST_QF=%lldLL",(long long)AliDAQ::kDAQ_TEST_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kEMCAL_QF=%lldLL",(long long)AliDAQ::kEMCAL_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kFMD_QF=%lldLL",(long long)AliDAQ::kFMD_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kHLT_QF=%lldLL",(long long)AliDAQ::kHLT_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kHMPID_QF=%lldLL",(long long)AliDAQ::kHMPID_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kMUON_TRG_QF=%lldLL",(long long)AliDAQ::kMUON_TRG_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kMUON_TRK_QF=%lldLL",(long long)AliDAQ::kMUON_TRK_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kPHOS_QF=%lldLL",(long long)AliDAQ::kPHOS_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kPMD_QF=%lldLL",(long long)AliDAQ::kPMD_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kSDD_QF=%lldLL",(long long)AliDAQ::kSDD_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kSPD_QF=%lldLL",(long long)AliDAQ::kSPD_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kSSD_QF=%lldLL",(long long)AliDAQ::kSSD_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kT0_QF=%lldLL",(long long)AliDAQ::kT0_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kTOF_QF=%lldLL",(long long)AliDAQ::kTOF_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kTPC_QF=%lldLL",(long long)AliDAQ::kTPC_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kTRD_QF=%lldLL",(long long)AliDAQ::kTRD_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kTRIGGER_QF=%lldLL",(long long)AliDAQ::kTRIGGER_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kV0_QF=%lldLL",(long long)AliDAQ::kV0_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag),-1,-2,1,G__FastAllocString(2048).Format("kZDC_QF=%lldLL",(long long)AliDAQ::kZDC_QF).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,67,0,1,-1,-1,-2,4,"fgkDetectorName[25]=",0,"Detector names");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fgkNumberOfDdls[25]=",0,"Number of DDLs per detector");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"fgkNumberOfLdcs[25]=",0,"Number of LDCs per detector (not fixed - used only for the raw data simulation)");
   G__memvar_setup((void*)0,67,0,1,-1,-1,-2,4,"fgkOfflineModuleName[25]=",0,"Names of the offline modules corresponding to the detectors");
   G__memvar_setup((void*)0,67,0,1,-1,-1,-2,4,"fgkOnlineName[25]=",0,"Online (DAQ/ECS) detector names");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fgkRunPeriod=",0,"1 corresponds to Run1, 1 - to Run2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fgkFirstSTUDDL=",0,"ID of the first STU DDLwithin the EMCAL range");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fgkLastSTUDDL=",0,"ID of the last STU DDL within the EMCAL range");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliDataFile */
static void G__setup_memvarAliDataFile(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDataFile));
   { AliDataFile *p; p=(AliDataFile*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliDetectorEventHeader */
static void G__setup_memvarAliDetectorEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorEventHeader));
   { AliDetectorEventHeader *p; p=(AliDetectorEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliPID */
static void G__setup_memvarAliPID(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPID));
   { AliPID *p; p=(AliPID*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kSPECIES=%lldLL",(long long)AliPID::kSPECIES).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kSPECIESC=%lldLL",(long long)AliPID::kSPECIESC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kSPECIESCN=%lldLL",(long long)AliPID::kSPECIESCN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType),-1,-2,1,G__FastAllocString(2048).Format("kElectron=%lldLL",(long long)AliPID::kElectron).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType),-1,-2,1,G__FastAllocString(2048).Format("kMuon=%lldLL",(long long)AliPID::kMuon).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType),-1,-2,1,G__FastAllocString(2048).Format("kPion=%lldLL",(long long)AliPID::kPion).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType),-1,-2,1,G__FastAllocString(2048).Format("kKaon=%lldLL",(long long)AliPID::kKaon).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType),-1,-2,1,G__FastAllocString(2048).Format("kProton=%lldLL",(long long)AliPID::kProton).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType),-1,-2,1,G__FastAllocString(2048).Format("kDeuteron=%lldLL",(long long)AliPID::kDeuteron).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType),-1,-2,1,G__FastAllocString(2048).Format("kTriton=%lldLL",(long long)AliPID::kTriton).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType),-1,-2,1,G__FastAllocString(2048).Format("kHe3=%lldLL",(long long)AliPID::kHe3).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType),-1,-2,1,G__FastAllocString(2048).Format("kAlpha=%lldLL",(long long)AliPID::kAlpha).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType),-1,-2,1,G__FastAllocString(2048).Format("kPhoton=%lldLL",(long long)AliPID::kPhoton).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType),-1,-2,1,G__FastAllocString(2048).Format("kPi0=%lldLL",(long long)AliPID::kPi0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType),-1,-2,1,G__FastAllocString(2048).Format("kNeutron=%lldLL",(long long)AliPID::kNeutron).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType),-1,-2,1,G__FastAllocString(2048).Format("kKaon0=%lldLL",(long long)AliPID::kKaon0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType),-1,-2,1,G__FastAllocString(2048).Format("kEleCon=%lldLL",(long long)AliPID::kEleCon).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType),-1,-2,1,G__FastAllocString(2048).Format("kUnknown=%lldLL",(long long)AliPID::kUnknown).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fCharged=",0,"flag for charged/neutral");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fProbDensity[14]=",0,"probability densities");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgPrior[14]=",0,"a priori probabilities");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"fgkParticleMass[15]=",0,"particle masses");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"fgkParticleMassZ[15]=",0,"particle masses/charge");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-2,4,"fgkParticleCharge[15]=",0,"particle charge (in e units!)");
   G__memvar_setup((void*)0,67,0,1,-1,-1,-2,4,"fgkParticleName[15]=",0,"particle names");
   G__memvar_setup((void*)0,67,0,1,-1,-1,-2,4,"fgkParticleShortName[15]=",0,"particle names");
   G__memvar_setup((void*)0,67,0,1,-1,-1,-2,4,"fgkParticleLatexName[15]=",0,"particle names");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgkParticleCode[15]=",0,"particle codes");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVParticle */
static void G__setup_memvarAliVParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVParticle));
   { AliVParticle *p; p=(AliVParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVEvent */
static void G__setup_memvarAliVEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent));
   { AliVEvent *p; p=(AliVEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEDataLayoutType),-1,-2,1,G__FastAllocString(2048).Format("kESD=%lldLL",(long long)AliVEvent::kESD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEDataLayoutType),-1,-2,1,G__FastAllocString(2048).Format("kMC=%lldLL",(long long)AliVEvent::kMC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEDataLayoutType),-1,-2,1,G__FastAllocString(2048).Format("kAOD=%lldLL",(long long)AliVEvent::kAOD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEDataLayoutType),-1,-2,1,G__FastAllocString(2048).Format("kMixed=%lldLL",(long long)AliVEvent::kMixed).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEDataLayoutType),-1,-2,1,G__FastAllocString(2048).Format("kFlat=%lldLL",(long long)AliVEvent::kFlat).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMB=%lldLL",(long long)AliVEvent::kMB).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kINT1=%lldLL",(long long)AliVEvent::kINT1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kINT7=%lldLL",(long long)AliVEvent::kINT7).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMUON=%lldLL",(long long)AliVEvent::kMUON).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kHighMult=%lldLL",(long long)AliVEvent::kHighMult).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kHighMultSPD=%lldLL",(long long)AliVEvent::kHighMultSPD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kEMC1=%lldLL",(long long)AliVEvent::kEMC1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kCINT5=%lldLL",(long long)AliVEvent::kCINT5).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kINT5=%lldLL",(long long)AliVEvent::kINT5).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kCMUS5=%lldLL",(long long)AliVEvent::kCMUS5).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMUSPB=%lldLL",(long long)AliVEvent::kMUSPB).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kINT7inMUON=%lldLL",(long long)AliVEvent::kINT7inMUON).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMuonSingleHighPt7=%lldLL",(long long)AliVEvent::kMuonSingleHighPt7).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMUSH7=%lldLL",(long long)AliVEvent::kMUSH7).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMUSHPB=%lldLL",(long long)AliVEvent::kMUSHPB).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMuonLikeLowPt7=%lldLL",(long long)AliVEvent::kMuonLikeLowPt7).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMUL7=%lldLL",(long long)AliVEvent::kMUL7).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMuonLikePB=%lldLL",(long long)AliVEvent::kMuonLikePB).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMuonUnlikeLowPt7=%lldLL",(long long)AliVEvent::kMuonUnlikeLowPt7).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMUU7=%lldLL",(long long)AliVEvent::kMUU7).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMuonUnlikePB=%lldLL",(long long)AliVEvent::kMuonUnlikePB).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kEMC7=%lldLL",(long long)AliVEvent::kEMC7).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kEMC8=%lldLL",(long long)AliVEvent::kEMC8).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMUS7=%lldLL",(long long)AliVEvent::kMUS7).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMuonSingleLowPt7=%lldLL",(long long)AliVEvent::kMuonSingleLowPt7).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kPHI1=%lldLL",(long long)AliVEvent::kPHI1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kPHI7=%lldLL",(long long)AliVEvent::kPHI7).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kPHI8=%lldLL",(long long)AliVEvent::kPHI8).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kPHOSPb=%lldLL",(long long)AliVEvent::kPHOSPb).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kEMCEJE=%lldLL",(long long)AliVEvent::kEMCEJE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kEMCEGA=%lldLL",(long long)AliVEvent::kEMCEGA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kHighMultV0=%lldLL",(long long)AliVEvent::kHighMultV0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kCentral=%lldLL",(long long)AliVEvent::kCentral).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kSemiCentral=%lldLL",(long long)AliVEvent::kSemiCentral).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kDG=%lldLL",(long long)AliVEvent::kDG).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kDG5=%lldLL",(long long)AliVEvent::kDG5).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kZED=%lldLL",(long long)AliVEvent::kZED).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kSPI7=%lldLL",(long long)AliVEvent::kSPI7).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kSPI=%lldLL",(long long)AliVEvent::kSPI).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kINT8=%lldLL",(long long)AliVEvent::kINT8).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMuonSingleLowPt8=%lldLL",(long long)AliVEvent::kMuonSingleLowPt8).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMuonSingleHighPt8=%lldLL",(long long)AliVEvent::kMuonSingleHighPt8).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMuonLikeLowPt8=%lldLL",(long long)AliVEvent::kMuonLikeLowPt8).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMuonUnlikeLowPt8=%lldLL",(long long)AliVEvent::kMuonUnlikeLowPt8).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kMuonUnlikeLowPt0=%lldLL",(long long)AliVEvent::kMuonUnlikeLowPt0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kUserDefined=%lldLL",(long long)AliVEvent::kUserDefined).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kTRD=%lldLL",(long long)AliVEvent::kTRD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kFastOnly=%lldLL",(long long)AliVEvent::kFastOnly).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kAny=%lldLL",(long long)AliVEvent::kAny).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes),-1,-2,1,G__FastAllocString(2048).Format("kAnyINT=%lldLL",(long long)AliVEvent::kAnyINT).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVVertex */
static void G__setup_memvarAliVVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex));
   { AliVVertex *p; p=(AliVVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliExternalTrackParam */
static void G__setup_memvarAliExternalTrackParam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam));
   { AliExternalTrackParam *p; p=(AliExternalTrackParam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fX=",0,"X coordinate for the point of parametrisation");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fAlpha=",0,"Local <-->global coor.system rotation angle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fP[5]=",0,"The track parameters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fC[15]=",0,"The track parameter covariance matrix");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-2,2,"fgMostProbablePt=",0,"\"Most probable\" pt");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"fgUseLogTermMS=",0,"use log term in Mult.Stattering evaluation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTPCdEdxInfo */
static void G__setup_memvarAliTPCdEdxInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCdEdxInfo));
   { AliTPCdEdxInfo *p; p=(AliTPCdEdxInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fTPCsignalRegion[4]=",0,"[0.,0.,10] TPC dEdx signal in 4 different regions - 0 - IROC, 1- OROC medium, 2 - OROC long, 3- OROC all, (default truncation used)  - for qTot");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fTPCsignalRegionQmax[4]=",0,"[0.,0.,10] TPC dEdx signal in 4 different regions - 0 - IROC, 1- OROC medium, 2 - OROC long, 3- OROC all, (default truncation used) - for qMax");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"fTPCsignalNRegion[3]=",0,"number of clusters above threshold used in the dEdx calculation");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"fTPCsignalNRowRegion[3]=",0,"number of crosed rows used in the dEdx calculation - signal below threshold included");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-2,4,"fArraySectorCalibration=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliDetectorPID */
static void G__setup_memvarAliDetectorPID(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorPID));
   { AliDetectorPID *p; p=(AliDetectorPID*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClonesArray),-1,-1,4,"fArrNsigmas=",0,"array to store nsigma values of all detectors");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClonesArray),-1,-1,4,"fArrRawProbabilities=",0,"array to strore raw probabilities of all detectors");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTOFHeader */
static void G__setup_memvarAliTOFHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFHeader));
   { AliTOFHeader *p; p=(AliTOFHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDefaultEventTimeValue=",0,"TOF event time value more frequent");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDefaultEventTimeRes=",0,"TOF event time res more frequent");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNbins=",0,"number of bins with TOF event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF),-1,-1,2,"fEventTimeValues=",0,"array for TOF event time values");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF),-1,-1,2,"fEventTimeRes=",0,"array for TOF event time resolutions");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayI),-1,-1,2,"fNvalues=",0,"array for order numbers of momentum bin");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTOFtimeResolution=",0,"TOF time resolution as written in TOF OCDB");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fT0spread=",0,"t0spread as written in TOF OCDB");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNumberOfTOFclusters=",0,"[0,170000,18] number of reconstructed TOF clusters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNumberOfTOFtrgPads=",0,"[0,170000,18] number of reconstructed TOF trigger pads");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFTriggerMask),-1,-1,2,"fTrigMask=",0,"Trigger mask");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVTrack */
static void G__setup_memvarAliVTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrack));
   { AliVTrack *p; p=(AliVTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kITSin=%lldLL",(long long)AliVTrack::kITSin).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kITSout=%lldLL",(long long)AliVTrack::kITSout).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kITSrefit=%lldLL",(long long)AliVTrack::kITSrefit).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kITSpid=%lldLL",(long long)AliVTrack::kITSpid).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTPCin=%lldLL",(long long)AliVTrack::kTPCin).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTPCout=%lldLL",(long long)AliVTrack::kTPCout).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTPCrefit=%lldLL",(long long)AliVTrack::kTPCrefit).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTPCpid=%lldLL",(long long)AliVTrack::kTPCpid).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTRDin=%lldLL",(long long)AliVTrack::kTRDin).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTRDout=%lldLL",(long long)AliVTrack::kTRDout).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTRDrefit=%lldLL",(long long)AliVTrack::kTRDrefit).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTRDpid=%lldLL",(long long)AliVTrack::kTRDpid).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTOFin=%lldLL",(long long)AliVTrack::kTOFin).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTOFout=%lldLL",(long long)AliVTrack::kTOFout).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTOFrefit=%lldLL",(long long)AliVTrack::kTOFrefit).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTOFpid=%lldLL",(long long)AliVTrack::kTOFpid).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kHMPIDout=%lldLL",(long long)AliVTrack::kHMPIDout).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kHMPIDpid=%lldLL",(long long)AliVTrack::kHMPIDpid).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kEMCALmatch=%lldLL",(long long)AliVTrack::kEMCALmatch).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTRDbackup=%lldLL",(long long)AliVTrack::kTRDbackup).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTOFmismatch=%lldLL",(long long)AliVTrack::kTOFmismatch).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kPHOSmatch=%lldLL",(long long)AliVTrack::kPHOSmatch).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kITSupg=%lldLL",(long long)AliVTrack::kITSupg).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kSkipFriend=%lldLL",(long long)AliVTrack::kSkipFriend).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kGlobalMerge=%lldLL",(long long)AliVTrack::kGlobalMerge).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMultInV0=%lldLL",(long long)AliVTrack::kMultInV0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMultSec=%lldLL",(long long)AliVTrack::kMultSec).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kEmbedded=%lldLL",(long long)AliVTrack::kEmbedded).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kITSpureSA=%lldLL",(long long)AliVTrack::kITSpureSA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTRDStop=%lldLL",(long long)AliVTrack::kTRDStop).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kESDpid=%lldLL",(long long)AliVTrack::kESDpid).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTIME=%lldLL",(long long)AliVTrack::kTIME).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTRDnPlanes=%lldLL",(long long)AliVTrack::kTRDnPlanes).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kEMCALNoMatch=%lldLL",(long long)AliVTrack::kEMCALNoMatch).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTOFBCNA=%lldLL",(long long)AliVTrack::kTOFBCNA).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliITSPidParams */
static void G__setup_memvarAliITSPidParams(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPidParams));
   { AliITSPidParams *p; p=(AliITSPidParams*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSDDElecMPV=",0,"Electron dE/dx Most Probable vs. p in SDD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSDDElecLandauWidth=",0,"Electron dE/dx Landau width vs. p in SDD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSDDElecGaussWidth=",0,"Electron dE/dx Gaussian width vs. p in SDD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSSDElecMPV=",0,"Electron dE/dx Most Probable vs. p in SSD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSSDElecLandauWidth=",0,"Electron dE/dx Landau width vs. p in SSD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSSDElecGaussWidth=",0,"Electron dE/dx Gaussian width vs. p in SSD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSDDPionMPV=",0,"Pion dE/dx Most Probable vs. p in SDD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSDDPionLandauWidth=",0,"pion dE/dx Landau width vs. p in SDD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSDDPionGaussWidth=",0,"pion dE/dx Gaussian width vs. p in SDD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSSDPionMPV=",0,"Pion dE/dx Most Probable vs. p in SSD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSSDPionLandauWidth=",0,"pion dE/dx Landau width vs. p in SSD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSSDPionGaussWidth=",0,"pion dE/dx Gaussian width vs. p in SSD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSDDKaonMPV=",0,"Kaon dE/dx Most Probable vs. p in SDD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSDDKaonLandauWidth=",0,"kaon dE/dx Landau width vs. p in SDD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSDDKaonGaussWidth=",0,"kaon dE/dx Gaussian width vs. p in SDD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSSDKaonMPV=",0,"Kaon dE/dx Most Probable vs. p in SSD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSSDKaonLandauWidth=",0,"kaon dE/dx Landau width vs. p in SSD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSSDKaonGaussWidth=",0,"kaon dE/dx Gaussian width vs. p in SSD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSDDProtMPV=",0,"Proton dE/dx Most Probable vs. p in SSD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSDDProtLandauWidth=",0,"Proton dE/dx Landau width vs. p in SDD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSDDProtGaussWidth=",0,"Proton dE/dx Gaussian width vs. p in SDD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSSDProtMPV=",0,"Proton dE/dx Most Probable vs. p in SSD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSSDProtLandauWidth=",0,"Proton dE/dx Landau width vs. p in SSD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFormula),-1,-1,4,"fSSDProtGaussWidth=",0,"Proton dE/dx Gaussian width vs. p in SSD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliITSPIDResponse */
static void G__setup_memvarAliITSPIDResponse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPIDResponse));
   { AliITSPIDResponse *p; p=(AliITSPIDResponse*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRes=",0,"relative dEdx resolution");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fKp1=",0,"ALEPH BB param 1");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fKp2=",0,"ALEPH BB param 2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fKp3=",0,"ALEPH BB param 3");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fKp4=",0,"ALEPH BB param 4");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fKp5=",0,"ALEPH BB param ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBBsa[5]=",0,"parameters of BB for SA tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBBsaHybrid[9]=",0,"parameters of Hybrid BB for SA tracks, PHOB + Polinomial al low beta*gamma");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBBsaElectron[5]=",0,"parameters of electron BB for SA tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBBtpcits[5]=",0,"parameters of BB for TPC+ITS tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBBdeu[5]=",0,"parameters of deuteron BB for TPC+ITS tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBBtri[5]=",0,"parameters of triton BB for TPC+ITS tracks");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fResolSA[5]=",0,"resolutions vs. n. of SDD/SSD points");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fResolTPCITS[5]=",0,"resolutions vs. n. of SDD/SSD points");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fResolTPCITSDeu3[3]=",0,"deuteron resolutions vs. p for tracks with 3 SDD/SSD points");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fResolTPCITSDeu4[3]=",0,"deuteron resolutions vs. p for tracks with 4 SDD/SSD points");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fResolTPCITSTri3[3]=",0,"triton resolutions vs. p for tracks with 3 SDD/SSD points");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fResolTPCITSTri4[3]=",0,"triton resolutions vs. p for tracks with 4 SDD/SSD points");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliOADBContainer */
static void G__setup_memvarAliOADBContainer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliOADBContainer));
   { AliOADBContainer *p; p=(AliOADBContainer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fArray=",0,"Array with objects corresponding to run ranges");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TList),-1,-1,4,"fDefaultList=",0,"List with default arrays");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fPassNames=",0,"Pass names");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayI),-1,-1,4,"fLowerLimits=",0,"lower limit of run range");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayI),-1,-1,4,"fUpperLimits=",0,"upper limit of run range");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEntries=",0,"Number of entries");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTPCPIDResponse */
static void G__setup_memvarAliTPCPIDResponse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponse));
   { AliTPCPIDResponse *p; p=(AliTPCPIDResponse*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLEChamberStatus),-1,-2,1,G__FastAllocString(2048).Format("kChamberOff=%lldLL",(long long)AliTPCPIDResponse::kChamberOff).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLEChamberStatus),-1,-2,1,G__FastAllocString(2048).Format("kChamberHighGain=%lldLL",(long long)AliTPCPIDResponse::kChamberHighGain).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLEChamberStatus),-1,-2,1,G__FastAllocString(2048).Format("kChamberLowGain=%lldLL",(long long)AliTPCPIDResponse::kChamberLowGain).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLEChamberStatus),-1,-2,1,G__FastAllocString(2048).Format("kChamberInvalid=%lldLL",(long long)AliTPCPIDResponse::kChamberInvalid).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCgainScenario),-1,-2,1,G__FastAllocString(2048).Format("kDefault=%lldLL",(long long)AliTPCPIDResponse::kDefault).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCgainScenario),-1,-2,1,G__FastAllocString(2048).Format("kALLhigh=%lldLL",(long long)AliTPCPIDResponse::kALLhigh).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCgainScenario),-1,-2,1,G__FastAllocString(2048).Format("kOROChigh=%lldLL",(long long)AliTPCPIDResponse::kOROChigh).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCgainScenario),-1,-2,1,G__FastAllocString(2048).Format("kGainScenarioInvalid=%lldLL",(long long)AliTPCPIDResponse::kGainScenarioInvalid).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("fgkNumberOfParticleSpecies=%lldLL",(long long)AliTPCPIDResponse::fgkNumberOfParticleSpecies).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("fgkNumberOfGainScenarios=%lldLL",(long long)AliTPCPIDResponse::fgkNumberOfGainScenarios).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("fgkNumberOfdEdxSourceScenarios=%lldLL",(long long)AliTPCPIDResponse::fgkNumberOfdEdxSourceScenarios).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCdEdxSource),-1,-2,1,G__FastAllocString(2048).Format("kdEdxDefault=%lldLL",(long long)AliTPCPIDResponse::kdEdxDefault).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCdEdxSource),-1,-2,1,G__FastAllocString(2048).Format("kdEdxOROC=%lldLL",(long long)AliTPCPIDResponse::kdEdxOROC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCdEdxSource),-1,-2,1,G__FastAllocString(2048).Format("kdEdxHybrid=%lldLL",(long long)AliTPCPIDResponse::kdEdxHybrid).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCdEdxSource),-1,-2,1,G__FastAllocString(2048).Format("kdEdxInvalid=%lldLL",(long long)AliTPCPIDResponse::kdEdxInvalid).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCdEdxType),-1,-2,1,G__FastAllocString(2048).Format("kdEdxTrack=%lldLL",(long long)AliTPCPIDResponse::kdEdxTrack).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCdEdxType),-1,-2,1,G__FastAllocString(2048).Format("kdEdxInfo=%lldLL",(long long)AliTPCPIDResponse::kdEdxInfo).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMIP=",0,"dEdx for MIP");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRes0[3]=",0,"relative dEdx resolution  rel sigma = fRes0*sqrt(1+fResN2/npoint)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fResN2[3]=",0,"relative Npoint dependence rel  sigma = fRes0*sqrt(1+fResN2/npoint)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fKp1=",0,"Parameters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fKp2=",0,"of");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fKp3=",0,"the ALEPH");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fKp4=",0,"Bethe-Bloch");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fKp5=",0,"formula");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseDatabase=",0,"flag if fine-tuned database-response or simple ALEPH BB should be used");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fResponseFunctions=",0,"! ObjArray of response functions individually for each particle");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliOADBContainer),-1,-1,4,"fOADBContainer=",0,"! OADB container with response functions");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TVectorTlEfloatgR),G__defined_typename("TVectorF"),-1,4,"fVoltageMap=",0,"!stores a map of voltages wrt nominal for all chambers");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLowGainIROCthreshold=",0,"voltage threshold below which the IROC is considered low gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBadIROCthreshhold=",0,"voltage threshold for bad IROCS");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLowGainOROCthreshold=",0,"voltage threshold below which the OROC is considered low gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBadOROCthreshhold=",0,"voltage threshold for bad OROCS");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaxBadLengthFraction=",0,"the maximum allowed fraction of track length in a bad sector.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMagField=",0,"! Magnetic field");
   G__memvar_setup((void*)0,67,0,1,-1,-1,-2,4,"fgkGainScenarioName[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TH2D),-1,-1,4,"fhEtaCorr=",0,"! Map for TPC eta correction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TH2D),-1,-1,4,"fhEtaSigmaPar1=",0,"! Map for parameter 1 of the IROCdEdx sigma parametrisation");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigmaPar0=",0,"Parameter 0 of the dEdx sigma parametrisation");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCurrentEventMultiplicity=",0,"Multiplicity of the current event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TF1),-1,-1,4,"fCorrFuncMultiplicity=",0,"! Function to correct for the multiplicity dependence of the TPC dEdx");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TF1),-1,-1,4,"fCorrFuncMultiplicityTanTheta=",0,"! Function to correct the additional tanTheta dependence of the multiplicity dependence of the TPC dEdx");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TF1),-1,-1,4,"fCorrFuncSigmaMultiplicity=",0,"! Function to correct for the multiplicity dependence of the TPC dEdx resolution");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCdEdxType),-1,-1,4,"fdEdxType=",0,"source for dEdx information to use");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fdEdxChargeType=",0,"charge type to use for dEdx calculation from AliTPCdEdxInfo");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fdEdxWeightType=",0,"tracklet weighting type to use for dEdx calculation from AliTPCdEdxInfo");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fIROCweight=",0,"IROC weight to use for dEdx calculation from AliTPCdEdxInfo");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fOROCmedWeight=",0,"OROC medium pad size weight to use for dEdx calculation from AliTPCdEdxInfo");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fOROClongWeight=",0,"OROC long pad size weight to use for dEdx calculation from AliTPCdEdxInfo");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fRecoPassNameUsed=",0,"! Name or number of the actually used reconstruction pass");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponse),-1,-2,4,"fgInstance=",0,"! Instance of this class (singleton implementation)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fSplineArray=",0,"array of registered splines");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTRDPIDResponseObject */
static void G__setup_memvarAliTRDPIDResponseObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponseObject));
   { AliTRDPIDResponseObject *p; p=(AliTRDPIDResponseObject*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponseObjectcLcLETRDPIDResponseObjectStatus),-1,-2,1,G__FastAllocString(2048).Format("kIsOwner=%lldLL",(long long)AliTRDPIDResponseObject::kIsOwner).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParams),-1,-1,4,"fPIDParams[5]=",0,"Contains Thresholds");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDReference),-1,-1,4,"fPIDReference[5]=",0,"Contains References");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNSlicesQ0=",0,"Number of Slices for Q0");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTRDdEdxParams */
static void G__setup_memvarAliTRDdEdxParams(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDdEdxParams));
   { AliTRDdEdxParams *p; p=(AliTRDdEdxParams*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TVectorTlEfloatgR),G__defined_typename("TVectorF"),-1,4,"fMeanPar[160]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TVectorTlEfloatgR),G__defined_typename("TVectorF"),-1,4,"fSigmaPar[160]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTRDPIDResponse */
static void G__setup_memvarAliTRDPIDResponse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponse));
   { AliTRDPIDResponse *p; p=(AliTRDPIDResponse*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDResponseStatus),-1,-2,1,G__FastAllocString(2048).Format("kIsOwner=%lldLL",(long long)AliTRDPIDResponse::kIsOwner).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDResponseDef),-1,-2,1,G__FastAllocString(2048).Format("kNlayer=%lldLL",(long long)AliTRDPIDResponse::kNlayer).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDResponseDef),-1,-2,1,G__FastAllocString(2048).Format("kNPBins=%lldLL",(long long)AliTRDPIDResponse::kNPBins).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDMethod),-1,-2,1,G__FastAllocString(2048).Format("kNN=%lldLL",(long long)AliTRDPIDResponse::kNN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDMethod),-1,-2,1,G__FastAllocString(2048).Format("kLQ2D=%lldLL",(long long)AliTRDPIDResponse::kLQ2D).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDMethod),-1,-2,1,G__FastAllocString(2048).Format("kLQ1D=%lldLL",(long long)AliTRDPIDResponse::kLQ1D).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDMethod),-1,-2,1,G__FastAllocString(2048).Format("kLQ3D=%lldLL",(long long)AliTRDPIDResponse::kLQ3D).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDMethod),-1,-2,1,G__FastAllocString(2048).Format("kLQ7D=%lldLL",(long long)AliTRDPIDResponse::kLQ7D).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDNMethod),-1,-2,1,G__FastAllocString(2048).Format("kNMethod=%lldLL",(long long)AliTRDPIDResponse::kNMethod).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNslices),-1,-2,1,G__FastAllocString(2048).Format("kNslicesLQ1D=%lldLL",(long long)AliTRDPIDResponse::kNslicesLQ1D).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNslices),-1,-2,1,G__FastAllocString(2048).Format("kNslicesLQ2D=%lldLL",(long long)AliTRDPIDResponse::kNslicesLQ2D).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNslices),-1,-2,1,G__FastAllocString(2048).Format("kNslicesNN=%lldLL",(long long)AliTRDPIDResponse::kNslicesNN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNslices),-1,-2,1,G__FastAllocString(2048).Format("kNslicesLQ3D=%lldLL",(long long)AliTRDPIDResponse::kNslicesLQ3D).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNslices),-1,-2,1,G__FastAllocString(2048).Format("kNslicesLQ7D=%lldLL",(long long)AliTRDPIDResponse::kNslicesLQ7D).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNsliceQ0),-1,-2,1,G__FastAllocString(2048).Format("kNsliceQ0LQ1D=%lldLL",(long long)AliTRDPIDResponse::kNsliceQ0LQ1D).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNsliceQ0),-1,-2,1,G__FastAllocString(2048).Format("kNsliceQ0LQ2D=%lldLL",(long long)AliTRDPIDResponse::kNsliceQ0LQ2D).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNsliceQ0),-1,-2,1,G__FastAllocString(2048).Format("kNsliceQ0NN=%lldLL",(long long)AliTRDPIDResponse::kNsliceQ0NN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNsliceQ0),-1,-2,1,G__FastAllocString(2048).Format("kNsliceQ0LQ3D=%lldLL",(long long)AliTRDPIDResponse::kNsliceQ0LQ3D).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNsliceQ0),-1,-2,1,G__FastAllocString(2048).Format("kNsliceQ0LQ7D=%lldLL",(long long)AliTRDPIDResponse::kNsliceQ0LQ7D).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponseObject),-1,-1,4,"fkPIDResponseObject=",0,"! PID References and Params");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDdEdxParams),-1,-1,4,"fkTRDdEdxParams=",0,"! parametrisation for truncated mean");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fGainNormalisationFactor=",0,"! Gain normalisation factor");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fCorrectEta=",0,"! switch for eta correction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TH2D),-1,-1,4,"fhEtaCorr[1]=",0,"! Map for TRD eta correction");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fCorrectCluster=",0,"! switch for cluster correction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TH2D),-1,-1,4,"fhClusterCorr[3]=",0,"! Map for TRD eta correction");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fCorrectCentrality=",0,"! switch for centrality correction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TH2D),-1,-1,4,"fhCentralityCorr[1]=",0,"! Map for TRD centrality correction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCurrCentrality=",0,"current (in the current event) centrality percentile");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMagField=",0,"! Magnetic field");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTOFPIDParams */
static void G__setup_memvarAliTOFPIDParams(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDParams));
   { AliTOFPIDParams *p; p=(AliTOFPIDParams*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDParamscLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kSigPparams=%lldLL",(long long)AliTOFPIDParams::kSigPparams).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEStartTimeType_t),-1,-1,4,"fStartTime=",0,"startTime method");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTOFresolution=",0,"TOF MRPC intrinsic resolution");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigPparams[4]=",0,"parameterisation of sigma(p) dependency ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTOFtail=",0,"fraction of tracks with TOF signal within gaussian behaviour");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTOFmatchingLossMC=",0,"fraction of tracks (%) MC has to loose to follow reconstructed data performance");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTOFadditionalMismForMC=",0,"fraction of tracks (%) MC has to add to match mismatch percentage in data");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTOFtimeOffset=",0,"overall offset to be added to startTime to handle intercalibration issues");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fOADBentryTag=",0,"code name (period-pass) for the entry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTOFPIDResponse */
static void G__setup_memvarAliTOFPIDResponse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDResponse));
   { AliTOFPIDResponse *p; p=(AliTOFPIDResponse*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigma=",0,"intrinsic TOF resolution");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPmax=",0,"\"maximal\" probability of mismathing (at ~0.5 GeV/c)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTime0=",0,"time zero");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fNmomBins=10LL",0,"number of momentum bin ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fT0event[10]=",0,"t0 (best, T0, T0-TOF, ...) of the event as a function of p ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fT0resolution[10]=",0,"t0 (best, T0, T0-TOF, ...) resolution as a function of p ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPCutMin[11]=",0,"min values for p bins");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaskT0[10]=",0,"mask withthe T0 used (0x1=T0-TOF,0x2=T0A,0x3=TOC) for p bins");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPar[4]=",0,"parameter for expected times resolution");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TF1),-1,-2,4,"fTOFtailResponse=",0,"function to generate a TOF tail");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TH1F),-1,-2,4,"fHmismTOF=",0,"TOF mismatch distribution");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TH1D),-1,-2,4,"fHchannelTOFdistr=",0,"TOF channel distance distribution");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TH1D),-1,-2,4,"fHTOFtailResponse=",0,"histogram to generate a TOF tail");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliHMPIDPIDResponse */
static void G__setup_memvarAliHMPIDPIDResponse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponse));
   { AliHMPIDPIDResponse *p; p=(AliHMPIDPIDResponse*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEChamberData),-1,-2,1,G__FastAllocString(2048).Format("kMinCh=%lldLL",(long long)AliHMPIDPIDResponse::kMinCh).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEChamberData),-1,-2,1,G__FastAllocString(2048).Format("kMaxCh=%lldLL",(long long)AliHMPIDPIDResponse::kMaxCh).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEChamberData),-1,-2,1,G__FastAllocString(2048).Format("kMinPc=%lldLL",(long long)AliHMPIDPIDResponse::kMinPc).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEChamberData),-1,-2,1,G__FastAllocString(2048).Format("kMaxPc=%lldLL",(long long)AliHMPIDPIDResponse::kMaxPc).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEPadxData),-1,-2,1,G__FastAllocString(2048).Format("kPadPcX=%lldLL",(long long)AliHMPIDPIDResponse::kPadPcX).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEPadxData),-1,-2,1,G__FastAllocString(2048).Format("kMinPx=%lldLL",(long long)AliHMPIDPIDResponse::kMinPx).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEPadxData),-1,-2,1,G__FastAllocString(2048).Format("kMaxPx=%lldLL",(long long)AliHMPIDPIDResponse::kMaxPx).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEPadxData),-1,-2,1,G__FastAllocString(2048).Format("kMaxPcx=%lldLL",(long long)AliHMPIDPIDResponse::kMaxPcx).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEPadyData),-1,-2,1,G__FastAllocString(2048).Format("kPadPcY=%lldLL",(long long)AliHMPIDPIDResponse::kPadPcY).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEPadyData),-1,-2,1,G__FastAllocString(2048).Format("kMinPy=%lldLL",(long long)AliHMPIDPIDResponse::kMinPy).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEPadyData),-1,-2,1,G__FastAllocString(2048).Format("kMaxPy=%lldLL",(long long)AliHMPIDPIDResponse::kMaxPy).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEPadyData),-1,-2,1,G__FastAllocString(2048).Format("kMaxPcy=%lldLL",(long long)AliHMPIDPIDResponse::kMaxPcy).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fgkMinPcX[6]=",0,"limits PC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fgkMinPcY[6]=",0,"limits PC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fgkMaxPcX[6]=",0,"limits PC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fgkMaxPcY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fgCellX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fgCellY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fgPcX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fgPcY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fgAllX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fgAllY=",0,"definition of HMPID geometric parameters ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TGeoHMatrix),-1,-1,2,"fM[7]=",0,"pointers to matrices defining HMPID chambers rotations-translations");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRefIdx=",0,"running refractive index of C6F14");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TVector3),-1,-1,2,"fTrkDir=",0,"track direction in LORS at RAD");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TVector2),-1,-1,2,"fTrkPos=",0,"track positon in LORS at RAD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,2,"fRefIndexArray=",0,"array of refracive index funxtion;");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliEMCALPIDResponse */
static void G__setup_memvarAliEMCALPIDResponse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEMCALPIDResponse));
   { AliEMCALPIDResponse *p; p=(AliEMCALPIDResponse*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TF1),-1,-1,4,"fNorm=",0,"Gauss function for normalizing NON electron probabilities ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCurrCentrality=",0,"current (in the current event) centrality percentile ");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fkPIDParams=",0,"PID Params");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliMCEvent */
static void G__setup_memvarAliMCEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEvent));
   { AliMCEvent *p; p=(AliMCEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack),-1,-1,4,"fStack=",0,"Current pointer to stack");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClonesArray),-1,-1,4,"fMCParticles=",0,"Pointer to list of particles");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fMCParticleMap=",0,"Map of MC Particles");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHeader),-1,-1,4,"fHeader=",0,"Current pointer to header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVHeader),-1,-1,4,"fAODMCHeader=",0,"Current pointer to AODMC header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClonesArray),-1,-1,4,"fTRBuffer=",0,"Track reference buffer    ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClonesArray),-1,-1,4,"fTrackReferences=",0,"Array of track references");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TTree),-1,-1,4,"fTreeTR=",0,"Pointer to Track Reference Tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TTree),-1,-1,4,"fTmpTreeTR=",0,"Temporary tree TR to read old format");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFile),-1,-1,4,"fTmpFileTR=",0,"Temporary file with TreeTR to read old format");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNprimaries=",0,"Number of primaries");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNparticles=",0,"Number of particles");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TList),-1,-1,4,"fSubsidiaryEvents=",0,"List of possible subsidiary events (for example merged underlying event) ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPrimaryOffset=",0,"Offset for primaries");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSecondaryOffset=",0,"Offset for secondaries");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fExternal=",0,"True if external particle array");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fgkBgLabelOffset=",0,"Standard branch name    ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex),-1,-1,4,"fVertex=",0,"MC Vertex");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNBG=",0,"! Background particles in current event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliHMPIDPIDParams */
static void G__setup_memvarAliHMPIDPIDParams(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDParams));
   { AliHMPIDPIDParams *p; p=(AliHMPIDPIDParams*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fHMPIDRefIndexArray=",0,"C6F14 refractive index");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliPIDResponse */
static void G__setup_memvarAliPIDResponse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponse));
   { AliPIDResponse *p; p=(AliPIDResponse*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kITS=%lldLL",(long long)AliPIDResponse::kITS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kTPC=%lldLL",(long long)AliPIDResponse::kTPC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kTRD=%lldLL",(long long)AliPIDResponse::kTRD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kTOF=%lldLL",(long long)AliPIDResponse::kTOF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kHMPID=%lldLL",(long long)AliPIDResponse::kHMPID).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kEMCAL=%lldLL",(long long)AliPIDResponse::kEMCAL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kPHOS=%lldLL",(long long)AliPIDResponse::kPHOS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetector),-1,-2,1,G__FastAllocString(2048).Format("kNdetectors=%lldLL",(long long)AliPIDResponse::kNdetectors).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetCode),-1,-2,1,G__FastAllocString(2048).Format("kDetITS=%lldLL",(long long)AliPIDResponse::kDetITS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetCode),-1,-2,1,G__FastAllocString(2048).Format("kDetTPC=%lldLL",(long long)AliPIDResponse::kDetTPC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetCode),-1,-2,1,G__FastAllocString(2048).Format("kDetTRD=%lldLL",(long long)AliPIDResponse::kDetTRD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetCode),-1,-2,1,G__FastAllocString(2048).Format("kDetTOF=%lldLL",(long long)AliPIDResponse::kDetTOF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetCode),-1,-2,1,G__FastAllocString(2048).Format("kDetHMPID=%lldLL",(long long)AliPIDResponse::kDetHMPID).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetCode),-1,-2,1,G__FastAllocString(2048).Format("kDetEMCAL=%lldLL",(long long)AliPIDResponse::kDetEMCAL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetCode),-1,-2,1,G__FastAllocString(2048).Format("kDetPHOS=%lldLL",(long long)AliPIDResponse::kDetPHOS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEBeamType),-1,-2,1,G__FastAllocString(2048).Format("kPP=%lldLL",(long long)AliPIDResponse::kPP).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEBeamType),-1,-2,1,G__FastAllocString(2048).Format("kPPB=%lldLL",(long long)AliPIDResponse::kPPB).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEBeamType),-1,-2,1,G__FastAllocString(2048).Format("kPBPB=%lldLL",(long long)AliPIDResponse::kPBPB).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEStartTimeType_t),-1,-2,1,G__FastAllocString(2048).Format("kFILL_T0=%lldLL",(long long)AliPIDResponse::kFILL_T0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEStartTimeType_t),-1,-2,1,G__FastAllocString(2048).Format("kTOF_T0=%lldLL",(long long)AliPIDResponse::kTOF_T0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEStartTimeType_t),-1,-2,1,G__FastAllocString(2048).Format("kT0_T0=%lldLL",(long long)AliPIDResponse::kT0_T0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEStartTimeType_t),-1,-2,1,G__FastAllocString(2048).Format("kBest_T0=%lldLL",(long long)AliPIDResponse::kBest_T0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLITSPIDmethod),-1,-2,1,G__FastAllocString(2048).Format("kITSTruncMean=%lldLL",(long long)AliPIDResponse::kITSTruncMean).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLITSPIDmethod),-1,-2,1,G__FastAllocString(2048).Format("kITSLikelihood=%lldLL",(long long)AliPIDResponse::kITSLikelihood).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus),-1,-2,1,G__FastAllocString(2048).Format("kDetNoSignal=%lldLL",(long long)AliPIDResponse::kDetNoSignal).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus),-1,-2,1,G__FastAllocString(2048).Format("kDetPidOk=%lldLL",(long long)AliPIDResponse::kDetPidOk).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus),-1,-2,1,G__FastAllocString(2048).Format("kDetMismatch=%lldLL",(long long)AliPIDResponse::kDetMismatch).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus),-1,-2,1,G__FastAllocString(2048).Format("kDetNoParams=%lldLL",(long long)AliPIDResponse::kDetNoParams).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPIDResponse),-1,-1,2,"fITSResponse=",0,"PID response function of the ITS");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponse),-1,-1,2,"fTPCResponse=",0,"PID response function of the TPC");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponse),-1,-1,2,"fTRDResponse=",0,"PID response function of the TRD");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDResponse),-1,-1,2,"fTOFResponse=",0,"PID response function of the TOF");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponse),-1,-1,2,"fHMPIDResponse=",0,"PID response function of the HMPID");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliEMCALPIDResponse),-1,-1,2,"fEMCALResponse=",0,"PID response function of the EMCAL");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRange=",0,"nSigma max in likelihood");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLITSPIDmethod),-1,-1,2,"fITSPIDmethod=",0,"0 = trunc mean; 1 = likelihood");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fTuneMConData=",0,"switch to force the MC to be similar to data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTuneMConDataMask=",0,"select for which detectors enable MC tuning on data");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"fgTOFmismatchProb=",0,"TOF mismatch probability (Bayesian)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsMC=",0,"If we run on MC data");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fCachePID=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fOADBPath=",0,"OADB path to use");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fCustomTPCpidResponse=",0,"Custom TPC Pid Response file for debugging purposes");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fCustomTPCpidResponseOADBFile=",0,"Custom TPC Pid Response file for debugging purposes using the new OADB method");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fCustomTPCetaMaps=",0,"Custom TPC eta map file for debugging purposes");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fBeamType=",0,"! beam type (PP) or (PBPB)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fLHCperiod=",0,"! LHC period");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fMCperiodTPC=",0,"! corresponding MC period to use for the TPC splines");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fMCperiodUser=",0,"MC prodution requested by the user");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fCurrentFile=",0,"! name of currently processed file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fRecoPassName=",0,"Full reconstruction pass name");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fRecoPassNameUser=",0,"Full reconstruction pass name set by the user");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCurrentAliRootRev=",0,"! Aliroot rev. used to reconstruct the data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRecoPass=",0,"! reconstruction pass");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRecoPassUser=",0,"reconstruction pass explicitly set by the user");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRun=",0,"! current run number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fOldRun=",0,"! current run number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fResT0A=",0,"! T0A resolution in current run");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fResT0C=",0,"! T0C resolution in current run");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fResT0AC=",0,"! T0A.and.T0C resolution in current run");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fTPCPIDResponseArray=",0,"! Array with PID response parametrisations (new object)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fArrPidResponseMaster=",0,"! TPC pid splines (old object)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TF1),-1,-1,4,"fResolutionCorrection=",0,"! TPC resolution correction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliOADBContainer),-1,-1,4,"fOADBvoltageMaps=",0,"! container with the voltage maps");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseTPCEtaCorrection=",0,"Use TPC eta correction");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseTPCMultiplicityCorrection=",0,"Use TPC multiplicity correction");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseTPCNewResponse=",0,"Use new method for TPC PID response");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponseObject),-1,-1,4,"fTRDPIDResponseObject=",0,"! TRD PID Response Object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDdEdxParams),-1,-1,4,"fTRDdEdxParams=",0,"! TRD dEdx Response for truncated mean signal");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseTRDEtaCorrection=",0,"Use TRD eta correction");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseTRDClusterCorrection=",0,"Use TRD cluster correction");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseTRDCentralityCorrection=",0,"Use TRD cluster correction");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTOFtail=",0,"! TOF tail effect used in TOF probability");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDParams),-1,-1,4,"fTOFPIDParams=",0,"! TOF PID Params - period depending (OADB loaded)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDParams),-1,-1,4,"fHMPIDPIDParams=",0,"! HMPID PID Params (OADB loaded)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fEMCALPIDParams=",0,"! EMCAL PID Params");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent),-1,-1,4,"fCurrentEvent=",0,"! event currently being processed");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEvent),-1,-1,4,"fCurrentMCEvent=",0,"! MC event of event currently being processed");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCurrCentrality=",0,"! current centrality");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEBeamType),-1,-1,4,"fBeamTypeNum=",0,"! beam type enum");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNoTOFmism=",0,"! flag to switch off the TOF mismatch in the TOF weights (to check with old aliroot version)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliDetectorTag */
static void G__setup_memvarAliDetectorTag(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTag));
   { AliDetectorTag *p; p=(AliDetectorTag*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fMaskDAQ=",0,"detector mask in DAQ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fMaskReco=",0,"detector mask in Reco");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fDetectorValidityRange[30]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fDetectorStatus[30]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliDetectorTagCuts */
static void G__setup_memvarAliDetectorTagCuts(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTagCuts));
   { AliDetectorTagCuts *p; p=(AliDetectorTagCuts*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fDetectorsReco=",0,"selected detector pattern for Reco");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fDetectorsDAQ=",0,"selected detector pattern for DAQ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDetectorsFlag=",0,"cut used or not");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fDetectorValidityMatch[30]=",0,"Detector validity to match");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDetectorValidityFlag[30]=",0,"Flag if validity match is to be used");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVfriendEvent */
static void G__setup_memvarAliVfriendEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVfriendEvent));
   { AliVfriendEvent *p; p=(AliVfriendEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVEventHandler */
static void G__setup_memvarAliVEventHandler(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventHandler));
   { AliVEventHandler *p; p=(AliVEventHandler*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventHandlercLcLEEventHandlerFlags),-1,-2,1,G__FastAllocString(2048).Format("kHandlerLocked=%lldLL",(long long)AliVEventHandler::kHandlerLocked).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVCuts */
static void G__setup_memvarAliVCuts(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCuts));
   { AliVCuts *p; p=(AliVCuts*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliRunTag */
static void G__setup_memvarAliRunTag(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTag));
   { AliRunTag *p; p=(AliRunTag*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAliceRunId=",0,"the run id");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAliceMagneticField=",0,"value of the magnetic field");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAliceDipoleField=",0,"value of the magnetic field in dipole");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAliceRunStartTime=",0,"run start date");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAliceRunStopTime=",0,"run stop date");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fAlirootVersion=",0,"aliroot version");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fRootVersion=",0,"root version");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fGeant3Version=",0,"geant3 version");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fLHCPeriod=",0,"datataking period");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fRecPass=",0,"Reconstruction pass number");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fProductionName=",0,"production name");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAliceRunValidated=",0,"validation script");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAliceRunGlobalQuality=",0,"validation script");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAliceBeamEnergy=",0,"beam energy cm");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fAliceBeamType=",0,"run type (pp, AA, pA)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAliceCalibrationVersion=",0,"calibration version  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAliceDataType=",0,"0: simulation -- 1: data  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumFiles=",0,"number of files in the run");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fBeamTriggers=",0,"number of beam triggers in run (CBEAMB)");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fCollisionTriggers=",0,"number of collision triggers in run (CINT1-B)");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fEmptyTriggers=",0,"number of empty triggers in run (CINT1-E)");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fASideTriggers=",0,"number of A-side triggers in run (CINT1-A)");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fCSideTriggers=",0,"number of C-side triggers in run (CINT1-C)");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fHMTriggers=",0,"number of High-Mult triggers");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fMuonTriggers=",0,"number of Muon Triggers");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCollisionRate=",0,"Average collision rate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanVertex=",0,"mean vertex position");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVertexQuality=",0,"vertex quality");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumDetectors=",0,"number of detector configs per file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fFileTags=",0,"array of file tags");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTag),-1,-1,4,"fDetectorTag=",0,"array with all the detector tags");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTag),-1,-1,4,"fLHCTag=",0,"LHC tag object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fActiveTriggerClasses=",0,"Active trigger classes for run");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA),-1,-1,4,"fQA=",0,"needed for backward compaibility");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fQALength=",0,"Length of the fQA array  ");
   G__memvar_setup((void*)0,75,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fQAArray=",0,"[fQALength] QA objects's data	");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fESLength=",0,"Length of the Event Specie Length");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fEventSpecies=",0,"[fESLength] EventSpecies in this run	");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliEventTag */
static void G__setup_memvarAliEventTag(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTag));
   { AliEventTag *p; p=(AliEventTag*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPeriodNumber=",0,"The period number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fOrbitNumber=",0,"The orbit number");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fBunchCrossNumber=",0,"The BC number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fEventType=",0,"event type == 7 ==> PHYSICS_EVENT");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fPhysicsFlag=",0,"1 - flagged as correct physics event");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fBackgroundFlag=",0,"1 - flagged by the background rejection procedure");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfParticipants=",0,"Number of participants - side C");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfParticipants2=",0,"Number of participants - side A");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fImpactParameter=",0,"The impact parameter");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPrimaryVertexFlag=",0,"Primary vertex flag: 0->not found, 1->found");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPrimaryVertexX=",0,"Primary vertex - X coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPrimaryVertexY=",0,"Primary vertex - Y coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPrimaryVertexZ=",0,"Primary vertex - Z coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPrimaryVertexZError=",0,"Primary vertex - Z coordinate - error");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fTriggerMask=",0,"Information from trigger (trigger mask)");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fTriggerMaskNext50=",0,"Information from trigger (trigger mask)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fTriggerCluster=",0,"Trigger cluster (mask)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCNeutron1Energy=",0,"ZDC info - neutron");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCProton1Energy=",0,"ZDC info - proton");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCNeutron2Energy=",0,"ZDC info - neutron");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCProton2Energy=",0,"ZDC info - proton");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCEMEnergy[2]=",0,"ZDC info - em");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fT0VertexZ=",0,"T0 info");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfTracks=",0,"Multiplicity");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfPositiveTracks=",0,"Multiplicity of positive tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfNegativeTracks=",0,"Multiplicity of negative tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfNeutralTracks=",0,"Multiplicity of neutral tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfV0s=",0,"Number of V0s");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfCascades=",0,"Number of cascades");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfKinks=",0,"Number of kinks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfPMDTracks=",0,"PMD tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfFMDTracks=",0,"FMD tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfPHOSClusters=",0,"PHOS clusters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfEMCALClusters=",0,"EMCAL clusters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfJetCandidates=",0,"Jet candidates");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaxJetEnergy=",0,"jet energy info");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfHardPhotonsCandidates=",0,"Hard photons candidates");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaxNeutralEnergy=",0,"neutral energy info");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfChargedAbove1GeV=",0,"Number of charged above 1 GeV/c");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfChargedAbove3GeV=",0,"Number of charged above 3 GeV/c");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfChargedAbove10GeV=",0,"Number of charged above 10 GeV/c");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfMuonsAbove1GeV=",0,"Number of muons above 1 GeV/c");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfMuonsAbove3GeV=",0,"Number of muons above 3 GeV/c");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfMuonsAbove10GeV=",0,"Number of muons above 10 GeV/c");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfElectronsAbove1GeV=",0,"Number of electrons above 1 GeV/c");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfElectronsAbove3GeV=",0,"Number of electrons above 3 GeV/c");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfElectronsAbove10GeV=",0,"Number of electrons above 10 GeV/c");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfElectrons=",0,"Number of electrons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfFWMuons=",0,"Number of forward muons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfFWMatchedMuons=",0,"Number of forward matched muons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfMuons=",0,"Number of muons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfPions=",0,"Number of pions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfKaons=",0,"Number of kaons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfProtons=",0,"Number of protons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfLambdas=",0,"Number of lambdas");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfPhotons=",0,"Number of photons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfPi0s=",0,"Number of pi0");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfNeutrons=",0,"Number of neutrons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfKaon0s=",0,"Number of Ks");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTotalP=",0,"Sum of the momentum per event");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanPt=",0,"Mean Pt per event");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaxPt=",0,"Max Pt for each event");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEtaMaxPt=",0,"Eta of the particle with max pt (leading particle)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPhiMaxPt=",0,"Phi of the particle with max pt (leading particle)  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTotalNeutralP=",0,"Sum of the momentum per event for neutral");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanNeutralPt=",0,"Mean Pt per event for neutral");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaxNeutralPt=",0,"Max Pt for each event for neutral");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEventPlaneAngle=",0,"event plane info");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fHBTRadii=",0,"HBT info");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfFiredChipsLayer1=",0,"number of fired chips - layer 1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfFiredChipsLayer2=",0,"number of fired chips - layer 2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfSPDTracklets=",0,"number of SPD tracklets");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMTotV0A=",0,"Total multiplicity in V0 A side");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMTotV0C=",0,"Total multiplicity in V0 C side");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNbPMV0A=",0,"Total number of fired channels in V0 A side");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNbPMV0C=",0,"Total number of fired channels in V0 C side");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliInputEventHandler */
static void G__setup_memvarAliInputEventHandler(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler));
   { AliInputEventHandler *p; p=(AliInputEventHandler*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandlercLcLEInputHandlerFlags),-1,-2,1,G__FastAllocString(2048).Format("kUserCallSelectionMask=%lldLL",(long long)AliInputEventHandler::kUserCallSelectionMask).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandlercLcLEInputHandlerFlags),-1,-2,1,G__FastAllocString(2048).Format("kCheckStatistics=%lldLL",(long long)AliInputEventHandler::kCheckStatistics).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandlercLcLEInputHandlerFlags),-1,-2,1,G__FastAllocString(2048).Format("kNeedField=%lldLL",(long long)AliInputEventHandler::kNeedField).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TTree),-1,-1,2,"fTree=",0,"! Pointer to the tree");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,2,"fBranches=",0,"List of branches to be switched off (separated by space)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,2,"fBranchesOn=",0,"List of branches to be switched on  (separated by space)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,2,"fInputFileName=",0,"Name of the input file");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fNewEvent=",0,"New event flag ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCuts),-1,-1,2,"fEventCuts=",0,"Cuts on the event level");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fIsSelectedResult=",0,"Selection result");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler),-1,-1,2,"fMixingHandler=",0,"Optionla plugin for mixing");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler),-1,-1,2,"fParentHandler=",0,"optional pointer to parent handlers (used in AliMultiInputEventHandler)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TList),-1,-1,2,"fUserInfo=",0,"! transient user info for current tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliDummyHandler */
static void G__setup_memvarAliDummyHandler(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDummyHandler));
   { AliDummyHandler *p; p=(AliDummyHandler*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent),-1,-1,2,"fEvent=",0,"Pointer to the event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliEventplane */
static void G__setup_memvarAliEventplane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventplane));
   { AliEventplane *p; p=(AliEventplane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TVector2),-1,-1,4,"fQVector=",0,"Q-Vector of event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF),-1,-1,4,"fQContributionX=",0,"array of the tracks' contributions to X component of Q-Vector - index = track ID");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF),-1,-1,4,"fQContributionY=",0,"array of the tracks' contributions to Y component of Q-Vector - index = track ID");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF),-1,-1,4,"fQContributionXsub1=",0,"array of the tracks' contributions to X component of Q-Vectorsub1 - index = track ID");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF),-1,-1,4,"fQContributionYsub1=",0,"array of the tracks' contributions to Y component of Q-Vectorsub1 - index = track ID");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF),-1,-1,4,"fQContributionXsub2=",0,"array of the tracks' contributions to X component of Q-Vectorsub2 - index = track ID");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF),-1,-1,4,"fQContributionYsub2=",0,"array of the tracks' contributions to Y component of Q-Vectorsub2 - index = track ID");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEventplaneQ=",0,"Event plane angle from Q-Vector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TVector2),-1,-1,4,"fQsub1=",0,"Q-Vector of subevent 1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TVector2),-1,-1,4,"fQsub2=",0,"Q-Vector of subevent 2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fQsubRes=",0,"Difference of EP angles of subevents");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMeanX2[11]=",0,"Mean Q^2_X for VZERO EP");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMeanY2[11]=",0,"Mean Q^2_Y for VZERO EP");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAPlus[11]=",0,"Q^2_X rescaling parameter for VZERO EP");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAMinus[11]=",0,"Q^2_Y rescaling parameter for VZERO EP");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLambdaPlus[11]=",0,"Q^2_X twisting parameter for VZERO EP");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLambdaMinus[11]=",0,"Q^2_Y twisting parameter for VZERO EP ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCos8Psi[11]=",0,"4th Fourier momenta used to flatten VZERO EP within a sector ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliEventTagCuts */
static void G__setup_memvarAliEventTagCuts(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTagCuts));
   { AliEventTagCuts *p; p=(AliEventTagCuts*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPeriodNumberMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPeriodNumberMax=",0,"min/max value of the period number");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPeriodNumberFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fOrbitNumberMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fOrbitNumberMax=",0,"min/max value of the orbit number");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fOrbitNumberFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fBunchCrossNumberMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fBunchCrossNumberMax=",0,"min/max value of the bunch crossing number");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fBunchCrossNumberFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fEventType=",0,"event type == 7 ==> PHYSICS_EVENT");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fEventTypeFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNParticipantsMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNParticipantsMax=",0,"# participants range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNParticipantsFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fImpactParamMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fImpactParamMax=",0,"Impact parameter range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fImpactParamFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEtaMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEtaMax=",0,"Definition of the range of the eta leading");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fEtaFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPhiMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPhiMax=",0,"Definition of the range of the phi leading");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPhiFlag=",0,"Shows whether this cut is used or not  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVxMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVxMax=",0,"Definition of the range of the Vx");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fVxFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVyMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVyMax=",0,"Definition of the range of the Vy");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fVyFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVzMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVzMax=",0,"Definition of the range of the Vz");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fVzFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPrimaryVertexFlag=",0,"Primary vertex flag: 0->not found, 1->found");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPVFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPrimaryVertexZErrorMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPrimaryVertexZErrorMax=",0,"Range of the primary vertex z error");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPVzErrorFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fTriggerMask=",0,"trigger mask definition");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTriggerMaskFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fTriggerCluster=",0,"trigger cluster definition");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTriggerClusterFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCNeutron1EnergyMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCNeutron1EnergyMax=",0,"ZDC min,max - neutron");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fZDCNeutron1EnergyFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCProton1EnergyMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCProton1EnergyMax=",0,"ZDC min,max - proton");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fZDCProton1EnergyFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCNeutron2EnergyMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCNeutron2EnergyMax=",0,"ZDC min,max - neutron");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fZDCNeutron2EnergyFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCProton2EnergyMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCProton2EnergyMax=",0,"ZDC min,max - proton");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fZDCProton2EnergyFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCEMEnergyMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCEMEnergyMax=",0,"ZDC min,max - em");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fZDCEMEnergyFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fT0VertexZMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fT0VertexZMax=",0,"T0 min, max");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fT0VertexZFlag=",0,"Shows whether this cut is used or not  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMultMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMultMax=",0,"Definition of the range of the multiplicity");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fMultFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPosMultMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPosMultMax=",0,"Positive tracks multiplicity range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPosMultFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNegMultMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNegMultMax=",0,"Negative tracks multiplicity range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNegMultFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNeutrMultMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNeutrMultMax=",0,"Neutral tracks multiplicity range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNeutrMultFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNV0sMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNV0sMax=",0,"Range of # of V0s");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNV0sFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNCascadesMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNCascadesMax=",0,"Range of # of cascades");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNCascadesFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNKinksMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNKinksMax=",0,"Range of # of kinks");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNKinksFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPMDTracksMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPMDTracksMax=",0,"Range of # of PMD tracks");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNPMDTracksFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNFMDTracksMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNFMDTracksMax=",0,"Range of # of FMD tracks");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNFMDTracksFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPHOSClustersMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPHOSClustersMax=",0,"Range of # of PHOS clusters");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNPHOSClustersFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNEMCALClustersMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNEMCALClustersMax=",0,"Range of # of EMCAL clusters");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNEMCALClustersFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNJetCandidatesMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNJetCandidatesMax=",0,"Range of # of jet candidates");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNJetCandidatesFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTopJetEnergyMin=",0,"top jet energy minimum value");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTopJetEnergyMinFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTopNeutralEnergyMin=",0,"top neutral energy minimum value");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTopNeutralEnergyMinFlag=",0,"Shows whether this cut is used or not  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNHardPhotonCandidatesMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNHardPhotonCandidatesMax=",0,"# of hard photons candidates");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNHardPhotonCandidatesFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNChargedAbove1GeVMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNChargedAbove1GeVMax=",0,"Definition of the range of the # of charged above 1GeV");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNChargedAbove1GeVFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNChargedAbove3GeVMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNChargedAbove3GeVMax=",0,"Definition of the range of the # of charged above 3GeV");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNChargedAbove3GeVFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNChargedAbove10GeVMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNChargedAbove10GeVMax=",0,"Definition of the range of the # of charged above 10GeV");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNChargedAbove10GeVFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNMuonsAbove1GeVMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNMuonsAbove1GeVMax=",0,"Definition of the range of the # of muons above 1GeV");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNMuonsAbove1GeVFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNMuonsAbove3GeVMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNMuonsAbove3GeVMax=",0,"Definition of the range of the # of muons above 3GeV");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNMuonsAbove3GeVFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNMuonsAbove10GeVMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNMuonsAbove10GeVMax=",0,"Definition of the range of the # of muons above 10GeV");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNMuonsAbove10GeVFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNElectronsAbove1GeVMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNElectronsAbove1GeVMax=",0,"Definition of the range of the # of electorns above 1GeV");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNElectronsAbove1GeVFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNElectronsAbove3GeVMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNElectronsAbove3GeVMax=",0,"Definition of the range of the # of electorns above 3GeV");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNElectronsAbove3GeVFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNElectronsAbove10GeVMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNElectronsAbove10GeVMax=",0,"Definition of the range of the # of electorns above 10GeV");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNElectronsAbove10GeVFlag=",0,"Shows whether this cut is used or not  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNElectronsMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNElectronsMax=",0,"# of electrons range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNElectronsFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNFWMuonsMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNFWMuonsMax=",0,"# of forward muons range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNFWMuonsFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNFWMatchedMuonsMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNFWMatchedMuonsMax=",0,"# of forward matched muons range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNFWMatchedMuonsFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNMuonsMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNMuonsMax=",0,"# of muons range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNMuonsFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPionsMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPionsMax=",0,"# of pions range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNPionsFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNKaonsMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNKaonsMax=",0,"# of kaons range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNKaonsFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNProtonsMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNProtonsMax=",0,"# of protons range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNProtonsFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNLambdasMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNLambdasMax=",0,"# of lambdas range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNLambdasFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPhotonsMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPhotonsMax=",0,"# of photons range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNPhotonFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPi0sMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPi0sMax=",0,"# of Pi0s range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNPi0sFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNNeutronsMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNNeutronsMax=",0,"# of neutrons range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNNeutronsFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNKaon0sMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNKaon0sMax=",0,"# of K0s range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNKaon0sFlag=",0,"Shows whether this cut is used or not  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTotalPMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTotalPMax=",0,"Range of the sum of the momentum per event");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTotalPFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanPtMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanPtMax=",0,"Range of mean Pt per event");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fMeanPtFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTopPtMin=",0,"Max Pt for each event");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTopPtMinFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTotalNeutralPMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTotalNeutralPMax=",0,"Sum of the momentum per event for neutral");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTotalNeutralPFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanNeutralPtMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanNeutralPtMax=",0,"Mean Pt per event for neutral");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fMeanNeutralPtFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTopNeutralPtMin=",0,"Minimum value for highest Pt for the event for neutral");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTopNeutralPtMinFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEventPlaneAngleMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEventPlaneAngleMax=",0,"event plane info");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fEventPlaneAngleFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fHBTRadiiMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fHBTRadiiMax=",0,"HBT info");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fHBTRadiiFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfFiredChipsLayer1Min=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfFiredChipsLayer1Max=",0,"min/max number of fired chips - layer 1");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNumberOfFiredChipsLayer1Flag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfFiredChipsLayer2Min=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfFiredChipsLayer2Max=",0,"min/max number of fired chips - layer 2");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNumberOfFiredChipsLayer2Flag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfSPDTrackletsMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfSPDTrackletsMax=",0,"min/max number of SPD tracklets");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNumberOfSPDTrackletsFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFiredTriggerClassFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fFiredTriggerClass=",0,"Triger class must be present to accept event");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fActiveTriggerClasses=",0,"Trigger classes active for this run");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliFileTag */
static void G__setup_memvarAliFileTag(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliFileTag));
   { AliFileTag *p; p=(AliFileTag*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fGUID=",0,"The unique identifier of the file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fPath=",0,"The file's path (local storage)");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fsize=",0,"the size of the file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fmd5=",0,"another file identifier");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fturl=",0,"the file's url");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fEventTags=",0,"array with all event tags");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliGenEventHeader */
static void G__setup_memvarAliGenEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader));
   { AliGenEventHeader *p; p=(AliGenEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNProduced=",0,"Number stable or undecayed particles");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF),-1,-1,2,"fVertex=",0,"Primary Vertex Position");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fInteractionTime=",0,"Time of the interaction");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fEventWeight=",0,"Event weight");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR),G__defined_typename("map<std::string,Float_t>"),-1,2,"fEventWeights=",0,"named event weights");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,2,"fEventWeightNameGenerator=",0,"! name for generator level weight");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliGenCocktailEventHeader */
static void G__setup_memvarAliGenCocktailEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenCocktailEventHeader));
   { AliGenCocktailEventHeader *p; p=(AliGenCocktailEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TList),-1,-1,2,"fHeaders=",0,"List of Headers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliGenDPMjetEventHeader */
static void G__setup_memvarAliGenDPMjetEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenDPMjetEventHeader));
   { AliGenDPMjetEventHeader *p; p=(AliGenDPMjetEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTotalEnergy=",0,"Total energy of produced particles");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTrials=",0,"Number of trials to fulfill trigger condition");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fProcessType=",0,"Process Type ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliGenEpos3EventHeader */
static void G__setup_memvarAliGenEpos3EventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEpos3EventHeader));
   { AliGenEpos3EventHeader *p; p=(AliGenEpos3EventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIversn=",0,"EPOS version number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLaproj=",0,"atomic number projectile");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaproj=",0,"mass number projectile");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLatarg=",0,"atomic number target");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMatarg=",0,"mass number target");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEngy=",0,"energy in the CMS in GeV");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNfull=",0,"number of full events");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNfreeze=",0,"number of freeze outs per full event");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBim=",0,"impact parameter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliGenEposEventHeader */
static void G__setup_memvarAliGenEposEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEposEventHeader));
   { AliGenEposEventHeader *p; p=(AliGenEposEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBimevt=",0,"bimevt ........ absolute value of impact parameter");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPhievt=",0,"phievt ........ angle of impact parameter");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fKolevt=",0,"kolevt ........ number of collisions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fKoievt=",0,"koievt ........ number of inelastic collisions");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPmxevt=",0,"pmxevt ........ reference momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEgyevt=",0,"egyevt ........ pp cm energy (hadron) or string energy (lepton)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNpjevt=",0,"npjevt ........ number of primary projectile participants");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNtgevt=",0,"ntgevt ........ number of primary target participants");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNpnevt=",0,"npnevt ........ number of primary projectile neutron spectators");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNppevt=",0,"nppevt ........ number of primary projectile proton spectators");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNtnevt=",0,"ntnevt ........ number of primary target neutron spectators");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNtpevt=",0,"ntpevt ........ number of primary target proton spectators");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fJpnevt=",0,"jpnevt ........ number of absolute projectile neutron spectators");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fJppevt=",0,"jppevt ........ number of absolute projectile proton spectators");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fJtnevt=",0,"jtnevt ........ number of absolute target neutron spectators");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fJtpevt=",0,"jtpevt ........ number of absolute target proton spectators");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXbjevt=",0,"xbjevt ........ bjorken x for dis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fQsqevt=",0,"qsqevt ........ q**2 for dis");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNglevt=",0,"nglevt ........ number of collisions acc to  Glauber");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZppevt=",0,"zppevt ........ average Z-parton-proj");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZptevt=",0,"zptevt ........ average Z-parton-targ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliGenEventHeaderTunedPbPb */
static void G__setup_memvarAliGenEventHeaderTunedPbPb(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeaderTunedPbPb));
   { AliGenEventHeaderTunedPbPb *p; p=(AliGenEventHeaderTunedPbPb*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fCentrality=",0,"centrality");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPsi2=",0,"psi_2 EP");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPsi3=",0,"psi_3 EP");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPsi4=",0,"psi_4 EP");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliGenGeVSimEventHeader */
static void G__setup_memvarAliGenGeVSimEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenGeVSimEventHeader));
   { AliGenGeVSimEventHeader *p; p=(AliGenGeVSimEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEventPlane=",0,"event plane in rad.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEllipticFlow=",0,"elliptic flow (fast solution)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliGenHepMCEventHeader */
static void G__setup_memvarAliGenHepMCEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHepMCEventHeader));
   { AliGenHepMCEventHeader *p; p=(AliGenHepMCEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNcoll_hard=",0,"Number of hard scatterings");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNpart_proj=",0,"Number of projectile participants");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNpart_targ=",0,"Number of target participants");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNcoll=",0,"Number of NN (nucleon-nucleon) collisions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fspectator_neutrons=",0,"Number of spectator neutrons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fspectator_protons=",0,"Number of spectator protons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fN_Nwounded_collisions=",0,"Number of N-Nwounded collisions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNwounded_N_collisions=",0,"Number of Nwounded-N collisons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNwounded_Nwounded_collisions=",0,"Number of Nwounded-Nwounded collisions");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fimpact_parameter=",0,"Impact Parameter(in fm) of collision");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fevent_plane_angle=",0,"Azimuthal angle of event plane");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"feccentricity=",0,"eccentricity of participating nucleons in the transverse plane (as in phobos nucl-ex/0510031)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fsigma_inel_NN=",0,"nucleon-nucleon inelastic (including diffractive) cross-section");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fid1=",0,"flavour code of first parton");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fid2=",0,"flavour code of second parton");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fpdf_id1=",0,"LHAPDF set id of first parton");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fpdf_id2=",0,"LHAPDF set id of second parton");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fx1=",0,"fraction of beam momentum carried by first parton (\"beam side\")");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fx2=",0,"fraction of beam momentum carried by second parton (\"target side\")");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fscalePDF=",0,"Q-scale used in evaluation of PDF's   (in GeV)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fpdf1=",0,"PDF (id1, x1, Q) - x*f(x)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fpdf2=",0,"PDF (id2, x2, Q) - x*f(x)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliGenHerwigEventHeader */
static void G__setup_memvarAliGenHerwigEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHerwigEventHeader));
   { AliGenHerwigEventHeader *p; p=(AliGenHerwigEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fProcessType=",0,"HERWIG process id for this event ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTrials=",0,"Number of trials to fulfill trigger condition");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fWeight=",0,"Event weight (= cross section in nb for unweighted events)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPtHard=",0,"Generated pT-hard in the 2-2 process");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliGenHijingEventHeader */
static void G__setup_memvarAliGenHijingEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHijingEventHeader));
   { AliGenHijingEventHeader *p; p=(AliGenHijingEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTotalEnergy=",0,"Total energy of produced particles");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTrials=",0,"Number of trials to fulfill trigger condition");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNPart=",0,"True number of participants ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TLorentzVector),-1,-1,2,"fJet1=",0,"4-Momentum-Vector of first   triggered jet  ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TLorentzVector),-1,-1,2,"fJet2=",0,"4-Momentum-Vector of second  triggered jet     ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TLorentzVector),-1,-1,2,"fJetFsr1=",0,"4-Momentum-Vector of first   triggered jet  ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TLorentzVector),-1,-1,2,"fJetFsr2=",0,"4-Momentum-Vector of second  triggered jet     ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fAreSpectatorsInTheStack=",0,"check whether spectators are in the stack");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsDataFragmentationSet=",0,"check if the data driven correction is switched on");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fFreeProjSpecn=",0,"Num. of spectator neutrons from projectile nucleus");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fFreeProjSpecp=",0,"Num. of spectator protons from projectile nucleus");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fFreeTargSpecn=",0,"Num. of spectator neutrons from target nucleus");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fFreeTargSpecp=",0,"Num. of spectator protons from target nucleus");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliGenPythiaEventHeader */
static void G__setup_memvarAliGenPythiaEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenPythiaEventHeader));
   { AliGenPythiaEventHeader *p; p=(AliGenPythiaEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fProcessType=",0,"PYTHIA process id for this event ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTrials=",0,"Number of trials to fulfill trigger condition");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNJets=",0,"Number of triggered jets");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNUQJets=",0,"Number of unquenched jets");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNMPI=",0,"numbers of MPI");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSuperpositions=",0,"numbers of superimposed events");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXJet=",0,"Jet production point (x)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fYJet=",0,"Jet production point (y)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fInMediumLength=",0,"In medium length");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fImpactParameter=",0,"Impact parameter for Q-Pythia");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fJets[4][10]=",0,"Trigger jets");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fUQJets[4][10]=",0,"Unquenched trigger jets");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZquench[4]=",0,"Quenching fraction");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPtHard=",0,"pT hard");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fXsection=",0,"Cross-section");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliGenToyEventHeader */
static void G__setup_memvarAliGenToyEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenToyEventHeader));
   { AliGenToyEventHeader *p; p=(AliGenToyEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fCentrality=",0,"centrality");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR),G__defined_typename("map<std::string,Float_t>"),-1,2,"fParameters=",0,"additional parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliStack */
static void G__setup_memvarAliStack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack));
   { AliStack *p; p=(AliStack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClonesArray),-1,-1,4,"fParticles=",0,"! Pointer to list of particles");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fParticleMap=",0,"! Map of particles in the supporting TClonesArray");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayI),-1,-1,4,"fParticleFileMap=",0,"Map for particle ids ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TParticle),-1,-1,4,"fParticleBuffer=",0,"! Pointer to current particle for writing");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TParticle),-1,-1,4,"fCurrentTrack=",0,"! Pointer to particle currently transported");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TTree),-1,-1,4,"fTreeK=",0,"! Particle stack  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNtrack=",0,"Number of tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNprimary=",0,"Number of primaries");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNtransported=",0,"Number of particles to be transported");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCurrent=",0,"! Last track returned from the stack");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCurrentPrimary=",0,"! Last primary track returned from the stack");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fHgwmk=",0,"! Last track purified");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLoadPoint=",0,"! Next free position in the particle buffer");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayI),-1,-1,4,"fTrackLabelMap=",0,"! Map of track labels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliHeader */
static void G__setup_memvarAliHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliHeader));
   { AliHeader *p; p=(AliHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRun=",0,"Run number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNvertex=",0,"Number of vertices");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNprimary=",0,"Number of primary tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNtrack=",0,"Number of tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEvent=",0,"Event number (serial in the file)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEventNrInRun=",0,"Unique Event number within the run");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("time_t"),-1,2,"fTimeStamp=",0,"Event time-stamp");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack),-1,-1,2,"fStack=",0,"Pointer to stack");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader),-1,-1,2,"fGenHeader=",0,"Event Header for Generator");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,2,"fDetHeaders=",0,"Event Headers for detector specific information ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliLHCTag */
static void G__setup_memvarAliLHCTag(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTag));
   { AliLHCTag *p; p=(AliLHCTag*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fLHCState=",0,"LHC run conditions - comments");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLHCLuminosity=",0,"the value of the luminosity");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNBunches=",0,"Number of bunches in beam");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fFillingScheme=",0,"Filling scheme name");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFillNo=",0,"Fill number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBeamEnergy=",0,"Beam energy");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBunchIntensity=",0,"Intensity per bunch");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliLHCTagCuts */
static void G__setup_memvarAliLHCTagCuts(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTagCuts));
   { AliLHCTagCuts *p; p=(AliLHCTagCuts*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fLHCState=",0,"LHC State");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fLHCStateFlag=",0,"Shows whether this cut is used or");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLHCLuminosityMin=",0,"LHC luminosity - min");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLHCLuminosityMax=",0,"LHC luminosity - max");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fLHCLuminosityFlag=",0,"Shows whether this cut is used or");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNBunchesRange[2]=",0,"Number of bunches in beam");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNBunchesFlag=",0,"Shows whether this cut is used or");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fFillingScheme=",0,"Rquired filling scheme name");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFillingSchemeFlag=",0,"Shows whether this cut is used or");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFillNoRange[2]=",0,"Required Fill no range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFillNoFlag=",0,"Shows whether this cut is used or");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBeamEnergyRange[2]=",0,"Beam energy range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fBeamEnergyFlag=",0,"Shows whether this cut is used or");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBunchIntensityRange[2]=",0,"Intensity per bunch range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fBunchIntensityFlag=",0,"Shows whether this cut is used or");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliMagWrapCheb */
static void G__setup_memvarAliMagWrapCheb(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagWrapCheb));
   { AliMagWrapCheb *p; p=(AliMagWrapCheb*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNParamsSol=",0,"Total number of parameterization pieces for solenoid ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNZSegSol=",0,"number of distinct Z segments in Solenoid");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNPSegSol=",0,"number of distinct P segments in Solenoid");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRSegSol=",0,"number of distinct R segments in Solenoid");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSegZSol=",0,"[fNZSegSol] coordinates of distinct Z segments in Solenoid");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSegPSol=",0,"[fNPSegSol] coordinated of P segments for each Zsegment in Solenoid");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSegRSol=",0,"[fNRSegSol] coordinated of R segments for each Psegment in Solenoid");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBegSegPSol=",0,"[fNPSegSol] beginning of P segments array for each Z segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSegPSol=",0,"[fNZSegSol] number of P segments for each Z segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBegSegRSol=",0,"[fNPSegSol] beginning of R segments array for each P segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSegRSol=",0,"[fNPSegSol] number of R segments for each P segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSegIDSol=",0,"[fNRSegSol] ID of the solenoid parameterization for given RPZ segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMinZSol=",0,"Min Z of Solenoid parameterization");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMaxZSol=",0,"Max Z of Solenoid parameterization");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,2,"fParamsSol=",0,"Parameterization pieces for Solenoid field");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMaxRSol=",0,"max raduis for Solenoid field");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNParamsTPC=",0,"Total number of parameterization pieces for TPCint ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNZSegTPC=",0,"number of distinct Z segments in TPCint");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNPSegTPC=",0,"number of distinct P segments in TPCint");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRSegTPC=",0,"number of distinct R segments in TPCint");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSegZTPC=",0,"[fNZSegTPC] coordinates of distinct Z segments in TPCint");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSegPTPC=",0,"[fNPSegTPC] coordinated of P segments for each Zsegment in TPCint");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSegRTPC=",0,"[fNRSegTPC] coordinated of R segments for each Psegment in TPCint");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBegSegPTPC=",0,"[fNPSegTPC] beginning of P segments array for each Z segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSegPTPC=",0,"[fNZSegTPC] number of P segments for each Z segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBegSegRTPC=",0,"[fNPSegTPC] beginning of R segments array for each P segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSegRTPC=",0,"[fNPSegTPC] number of R segments for each P segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSegIDTPC=",0,"[fNRSegTPC] ID of the TPCint parameterization for given RPZ segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMinZTPC=",0,"Min Z of TPCint parameterization");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMaxZTPC=",0,"Max Z of TPCint parameterization");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,2,"fParamsTPC=",0,"Parameterization pieces for TPCint field");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMaxRTPC=",0,"max raduis for Solenoid field integral in TPC");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNParamsTPCRat=",0,"Total number of parameterization pieces for tr.field to Bz integrals in TPC region ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNZSegTPCRat=",0,"number of distinct Z segments in TpcRatInt");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNPSegTPCRat=",0,"number of distinct P segments in TpcRatInt");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRSegTPCRat=",0,"number of distinct R segments in TpcRatInt");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSegZTPCRat=",0,"[fNZSegTPCRat] coordinates of distinct Z segments in TpcRatInt");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSegPTPCRat=",0,"[fNPSegTPCRat] coordinated of P segments for each Zsegment in TpcRatInt");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSegRTPCRat=",0,"[fNRSegTPCRat] coordinated of R segments for each Psegment in TpcRatInt");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBegSegPTPCRat=",0,"[fNPSegTPCRat] beginning of P segments array for each Z segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSegPTPCRat=",0,"[fNZSegTPCRat] number of P segments for each Z segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBegSegRTPCRat=",0,"[fNPSegTPCRat] beginning of R segments array for each P segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSegRTPCRat=",0,"[fNPSegTPCRat] number of R segments for each P segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSegIDTPCRat=",0,"[fNRSegTPCRat] ID of the TpcRatInt parameterization for given RPZ segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMinZTPCRat=",0,"Min Z of TpcRatInt parameterization");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMaxZTPCRat=",0,"Max Z of TpcRatInt parameterization");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,2,"fParamsTPCRat=",0,"Parameterization pieces for TpcRatInt field");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMaxRTPCRat=",0,"max raduis for Solenoid field ratios integral in TPC ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNParamsDip=",0,"Total number of parameterization pieces for dipole ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNZSegDip=",0,"number of distinct Z segments in Dipole");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNYSegDip=",0,"number of distinct Y segments in Dipole");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNXSegDip=",0,"number of distinct X segments in Dipole");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSegZDip=",0,"[fNZSegDip] coordinates of distinct Z segments in Dipole");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSegYDip=",0,"[fNYSegDip] coordinated of Y segments for each Zsegment in Dipole");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSegXDip=",0,"[fNXSegDip] coordinated of X segments for each Ysegment in Dipole");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBegSegYDip=",0,"[fNZSegDip] beginning of Y segments array for each Z segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSegYDip=",0,"[fNZSegDip] number of Y segments for each Z segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBegSegXDip=",0,"[fNYSegDip] beginning of X segments array for each Y segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSegXDip=",0,"[fNYSegDip] number of X segments for each Y segment");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSegIDDip=",0,"[fNXSegDip] ID of the dipole parameterization for given XYZ segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMinZDip=",0,"Min Z of Dipole parameterization");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMaxZDip=",0,"Max Z of Dipole parameterization");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,2,"fParamsDip=",0,"Parameterization pieces for Dipole field");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D),-1,-1,2,"fCacheSol=",0,"! last used solenoid patch");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D),-1,-1,2,"fCacheDip=",0,"! last used dipole patch");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D),-1,-1,2,"fCacheTPCInt=",0,"! last used patch for TPC integral");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D),-1,-1,2,"fCacheTPCRat=",0,"! last used patch for TPC normalized integral");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliMagF */
static void G__setup_memvarAliMagF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagF));
   { AliMagF *p; p=(AliMagF*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLBMap_t),-1,-2,1,G__FastAllocString(2048).Format("k2kG=%lldLL",(long long)AliMagF::k2kG).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLBMap_t),-1,-2,1,G__FastAllocString(2048).Format("k5kG=%lldLL",(long long)AliMagF::k5kG).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLBMap_t),-1,-2,1,G__FastAllocString(2048).Format("k5kGUniform=%lldLL",(long long)AliMagF::k5kGUniform).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLBeamType_t),-1,-2,1,G__FastAllocString(2048).Format("kNoBeamField=%lldLL",(long long)AliMagF::kNoBeamField).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLBeamType_t),-1,-2,1,G__FastAllocString(2048).Format("kBeamTypepp=%lldLL",(long long)AliMagF::kBeamTypepp).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLBeamType_t),-1,-2,1,G__FastAllocString(2048).Format("kBeamTypeAA=%lldLL",(long long)AliMagF::kBeamTypeAA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLBeamType_t),-1,-2,1,G__FastAllocString(2048).Format("kBeamTypepA=%lldLL",(long long)AliMagF::kBeamTypepA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLBeamType_t),-1,-2,1,G__FastAllocString(2048).Format("kBeamTypeAp=%lldLL",(long long)AliMagF::kBeamTypeAp).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLPolarityConvention_t),-1,-2,1,G__FastAllocString(2048).Format("kConvLHC=%lldLL",(long long)AliMagF::kConvLHC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLPolarityConvention_t),-1,-2,1,G__FastAllocString(2048).Format("kConvDCS2008=%lldLL",(long long)AliMagF::kConvDCS2008).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLPolarityConvention_t),-1,-2,1,G__FastAllocString(2048).Format("kConvMap2005=%lldLL",(long long)AliMagF::kConvMap2005).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kOverrideGRP=%lldLL",(long long)AliMagF::kOverrideGRP).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagWrapCheb),-1,-1,2,"fMeasuredMap=",0,"! Measured part of the field map");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLBMap_t),-1,-1,2,"fMapType=",0,"field map type");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSolenoid=",0,"Solenoid field setting");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLBeamType_t),-1,-1,2,"fBeamType=",0,"Beam type: A-A (fBeamType=0) or p-p (fBeamType=1)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBeamEnergy=",0,"Beam energy in GeV");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fInteg=",0,"Default integration method as indicated in Geant");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPrecInteg=",0,"Alternative integration method, e.g. for higher precision");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fFactorSol=",0,"Multiplicative factor for solenoid");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fFactorDip=",0,"Multiplicative factor for dipole");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMax=",0,"Max Field as indicated in Geant");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDipoleOFF=",0,"Dipole ON/OFF flag");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fQuadGradient=",0,"Gradient field for inner triplet quadrupoles");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDipoleField=",0,"Field value for D1 and D2 dipoles");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCCorrField=",0,"Side C 2nd compensator field");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fACorr1Field=",0,"Side A 1st compensator field ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fACorr2Field=",0,"Side A 2nd compensator field");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TNamed),-1,-1,2,"fParNames=",0,"file and parameterization loadad");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,2,"fgkSol2DipZ=",0,"conventional Z of transition from L3 to Dipole field");
   G__memvar_setup((void*)G__PVOID,114,0,1,-1,G__defined_typename("UShort_t"),-2,2,"fgkPolarityConvention=0ULL",0,"convention for the mapping of the curr.sign on main component sign");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliMathBase */
static void G__setup_memvarAliMathBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMathBase));
   { AliMathBase *p; p=(AliMathBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVHeader */
static void G__setup_memvarAliVHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVHeader));
   { AliVHeader *p; p=(AliVHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVCluster */
static void G__setup_memvarAliVCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCluster));
   { AliVCluster *p; p=(AliVCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVClu_t),-1,-2,1,G__FastAllocString(2048).Format("kUndef=%lldLL",(long long)AliVCluster::kUndef).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVClu_t),-1,-2,1,G__FastAllocString(2048).Format("kPHOSNeutral=%lldLL",(long long)AliVCluster::kPHOSNeutral).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVClu_t),-1,-2,1,G__FastAllocString(2048).Format("kPHOSCharged=%lldLL",(long long)AliVCluster::kPHOSCharged).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVClu_t),-1,-2,1,G__FastAllocString(2048).Format("kEMCALClusterv1=%lldLL",(long long)AliVCluster::kEMCALClusterv1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVClu_t),-1,-2,1,G__FastAllocString(2048).Format("kPMDNeutral=%lldLL",(long long)AliVCluster::kPMDNeutral).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVClu_t),-1,-2,1,G__FastAllocString(2048).Format("kPMDCharged=%lldLL",(long long)AliVCluster::kPMDCharged).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluPID_t),-1,-2,1,G__FastAllocString(2048).Format("kElectron=%lldLL",(long long)AliVCluster::kElectron).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluPID_t),-1,-2,1,G__FastAllocString(2048).Format("kMuon=%lldLL",(long long)AliVCluster::kMuon).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluPID_t),-1,-2,1,G__FastAllocString(2048).Format("kPion=%lldLL",(long long)AliVCluster::kPion).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluPID_t),-1,-2,1,G__FastAllocString(2048).Format("kKaon=%lldLL",(long long)AliVCluster::kKaon).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluPID_t),-1,-2,1,G__FastAllocString(2048).Format("kProton=%lldLL",(long long)AliVCluster::kProton).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluPID_t),-1,-2,1,G__FastAllocString(2048).Format("kPhoton=%lldLL",(long long)AliVCluster::kPhoton).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluPID_t),-1,-2,1,G__FastAllocString(2048).Format("kPi0=%lldLL",(long long)AliVCluster::kPi0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluPID_t),-1,-2,1,G__FastAllocString(2048).Format("kNeutron=%lldLL",(long long)AliVCluster::kNeutron).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluPID_t),-1,-2,1,G__FastAllocString(2048).Format("kKaon0=%lldLL",(long long)AliVCluster::kKaon0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluPID_t),-1,-2,1,G__FastAllocString(2048).Format("kEleCon=%lldLL",(long long)AliVCluster::kEleCon).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluPID_t),-1,-2,1,G__FastAllocString(2048).Format("kUnknown=%lldLL",(long long)AliVCluster::kUnknown).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluPID_t),-1,-2,1,G__FastAllocString(2048).Format("kCharged=%lldLL",(long long)AliVCluster::kCharged).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluPID_t),-1,-2,1,G__FastAllocString(2048).Format("kNeutral=%lldLL",(long long)AliVCluster::kNeutral).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluUserDefEnergy_t),-1,-2,1,G__FastAllocString(2048).Format("kNonLinCorr=%lldLL",(long long)AliVCluster::kNonLinCorr).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluUserDefEnergy_t),-1,-2,1,G__FastAllocString(2048).Format("kHadCorr=%lldLL",(long long)AliVCluster::kHadCorr).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluUserDefEnergy_t),-1,-2,1,G__FastAllocString(2048).Format("kUserDefEnergy1=%lldLL",(long long)AliVCluster::kUserDefEnergy1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluUserDefEnergy_t),-1,-2,1,G__FastAllocString(2048).Format("kUserDefEnergy2=%lldLL",(long long)AliVCluster::kUserDefEnergy2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVClustercLcLVCluUserDefEnergy_t),-1,-2,1,G__FastAllocString(2048).Format("kLastUserDefEnergy=%lldLL",(long long)AliVCluster::kLastUserDefEnergy).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVCaloCells */
static void G__setup_memvarAliVCaloCells(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCells));
   { AliVCaloCells *p; p=(AliVCaloCells*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCellscLcLVCells_t),-1,-2,1,G__FastAllocString(2048).Format("kUndef=%lldLL",(long long)AliVCaloCells::kUndef).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCellscLcLVCells_t),-1,-2,1,G__FastAllocString(2048).Format("kPHOSCell=%lldLL",(long long)AliVCaloCells::kPHOSCell).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCellscLcLVCells_t),-1,-2,1,G__FastAllocString(2048).Format("kEMCALCell=%lldLL",(long long)AliVCaloCells::kEMCALCell).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVCaloTrigger */
static void G__setup_memvarAliVCaloTrigger(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloTrigger));
   { AliVCaloTrigger *p; p=(AliVCaloTrigger*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTOFTriggerMask */
static void G__setup_memvarAliTOFTriggerMask(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFTriggerMask));
   { AliTOFTriggerMask *p; p=(AliTOFTriggerMask*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fPowerMask[24]=",0,"2-power mask table");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fTriggerMask[72]=",0,"[0,16777215,23] trigger mask array");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVTrdTracklet */
static void G__setup_memvarAliVTrdTracklet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrdTracklet));
   { AliVTrdTracklet *p; p=(AliVTrdTracklet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,2,"fgkBinWidthY=",0,"bin width y-position");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,2,"fgkBinWidthDy=",0,"bin width deflection length");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,2,"fgkDriftLength=",0,"drift length to which the deflection length is scaled");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVTrdTrack */
static void G__setup_memvarAliVTrdTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrdTrack));
   { AliVTrdTrack *p; p=(AliVTrdTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"fgkNlayers=6LL",0,"number of TRD layers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVMultiplicity */
static void G__setup_memvarAliVMultiplicity(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMultiplicity));
   { AliVMultiplicity *p; p=(AliVMultiplicity*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMultiplicitycLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMultTrackRefs=%lldLL",(long long)AliVMultiplicity::kMultTrackRefs).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMultiplicitycLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kScaleDThtbySin2=%lldLL",(long long)AliVMultiplicity::kScaleDThtbySin2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMultiplicitycLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kSPD2Sng=%lldLL",(long long)AliVMultiplicity::kSPD2Sng).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVVZERO */
static void G__setup_memvarAliVVZERO(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZERO));
   { AliVVZERO *p; p=(AliVVZERO*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kCorrectedLeadingTime=%lldLL",(long long)AliVVZERO::kCorrectedLeadingTime).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTriggerBitsFilled=%lldLL",(long long)AliVVZERO::kTriggerBitsFilled).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDecisionFilled=%lldLL",(long long)AliVVZERO::kDecisionFilled).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kOnlineBitsFilled=%lldLL",(long long)AliVVZERO::kOnlineBitsFilled).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kCorrectedForSaturation=%lldLL",(long long)AliVVZERO::kCorrectedForSaturation).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kRobustMeanTime=%lldLL",(long long)AliVVZERO::kRobustMeanTime).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTriggerChargeBitsFilled=%lldLL",(long long)AliVVZERO::kTriggerChargeBitsFilled).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kPastFutureFlagsFilled=%lldLL",(long long)AliVVZERO::kPastFutureFlagsFilled).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLDecision),-1,-2,1,G__FastAllocString(2048).Format("kV0Invalid=%lldLL",(long long)AliVVZERO::kV0Invalid).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLDecision),-1,-2,1,G__FastAllocString(2048).Format("kV0Empty=%lldLL",(long long)AliVVZERO::kV0Empty).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLDecision),-1,-2,1,G__FastAllocString(2048).Format("kV0BB=%lldLL",(long long)AliVVZERO::kV0BB).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLDecision),-1,-2,1,G__FastAllocString(2048).Format("kV0BG=%lldLL",(long long)AliVVZERO::kV0BG).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLDecision),-1,-2,1,G__FastAllocString(2048).Format("kV0Fake=%lldLL",(long long)AliVVZERO::kV0Fake).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBBAandBBC=%lldLL",(long long)AliVVZERO::kBBAandBBC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBBAorBBC=%lldLL",(long long)AliVVZERO::kBBAorBBC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBGAandBBC=%lldLL",(long long)AliVVZERO::kBGAandBBC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBGA=%lldLL",(long long)AliVVZERO::kBGA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBGCandBBA=%lldLL",(long long)AliVVZERO::kBGCandBBA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBGC=%lldLL",(long long)AliVVZERO::kBGC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kCTA1andCTC1=%lldLL",(long long)AliVVZERO::kCTA1andCTC1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kCTA1orCTC1=%lldLL",(long long)AliVVZERO::kCTA1orCTC1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kCTA2andCTC2=%lldLL",(long long)AliVVZERO::kCTA2andCTC2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kCTA2orCTC2=%lldLL",(long long)AliVVZERO::kCTA2orCTC2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kMTAandMTC=%lldLL",(long long)AliVVZERO::kMTAandMTC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kMTAorMTC=%lldLL",(long long)AliVVZERO::kMTAorMTC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBBA=%lldLL",(long long)AliVVZERO::kBBA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBBC=%lldLL",(long long)AliVVZERO::kBBC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBGAorBGC=%lldLL",(long long)AliVVZERO::kBGAorBGC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBGAandBBCorBGCandBBA=%lldLL",(long long)AliVVZERO::kBGAandBBCorBGCandBBA).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVZDC */
static void G__setup_memvarAliVZDC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVZDC));
   { AliVZDC *p; p=(AliVZDC*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVZDCcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kCorrectedTDCFilled=%lldLL",(long long)AliVZDC::kCorrectedTDCFilled).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVZDCcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kEnergyCalibratedSignal=%lldLL",(long long)AliVZDC::kEnergyCalibratedSignal).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVZDCcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTDCcablingSet=%lldLL",(long long)AliVZDC::kTDCcablingSet).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVMFT */
static void G__setup_memvarAliVMFT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMFT));
   { AliVMFT *p; p=(AliVMFT*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVAD */
static void G__setup_memvarAliVAD(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVAD));
   { AliVAD *p; p=(AliVAD*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kCorrectedLeadingTime=%lldLL",(long long)AliVAD::kCorrectedLeadingTime).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTriggerBitsFilled=%lldLL",(long long)AliVAD::kTriggerBitsFilled).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDecisionFilled=%lldLL",(long long)AliVAD::kDecisionFilled).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kOnlineBitsFilled=%lldLL",(long long)AliVAD::kOnlineBitsFilled).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kCorrectedForSaturation=%lldLL",(long long)AliVAD::kCorrectedForSaturation).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kRobustMeanTime=%lldLL",(long long)AliVAD::kRobustMeanTime).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTriggerChargeBitsFilled=%lldLL",(long long)AliVAD::kTriggerChargeBitsFilled).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kPastFutureFlagsFilled=%lldLL",(long long)AliVAD::kPastFutureFlagsFilled).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLDecision),-1,-2,1,G__FastAllocString(2048).Format("kADInvalid=%lldLL",(long long)AliVAD::kADInvalid).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLDecision),-1,-2,1,G__FastAllocString(2048).Format("kADEmpty=%lldLL",(long long)AliVAD::kADEmpty).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLDecision),-1,-2,1,G__FastAllocString(2048).Format("kADBB=%lldLL",(long long)AliVAD::kADBB).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLDecision),-1,-2,1,G__FastAllocString(2048).Format("kADBG=%lldLL",(long long)AliVAD::kADBG).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLDecision),-1,-2,1,G__FastAllocString(2048).Format("kADFake=%lldLL",(long long)AliVAD::kADFake).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBBAandBBC=%lldLL",(long long)AliVAD::kBBAandBBC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBBAorBBC=%lldLL",(long long)AliVAD::kBBAorBBC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBGAandBBC=%lldLL",(long long)AliVAD::kBGAandBBC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBGA=%lldLL",(long long)AliVAD::kBGA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBGCandBBA=%lldLL",(long long)AliVAD::kBGCandBBA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBGC=%lldLL",(long long)AliVAD::kBGC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kCTA1andCTC1=%lldLL",(long long)AliVAD::kCTA1andCTC1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kCTA1orCTC1=%lldLL",(long long)AliVAD::kCTA1orCTC1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kCTA2andCTC2=%lldLL",(long long)AliVAD::kCTA2andCTC2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kCTA2orCTC2=%lldLL",(long long)AliVAD::kCTA2orCTC2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kMTAandMTC=%lldLL",(long long)AliVAD::kMTAandMTC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kMTAorMTC=%lldLL",(long long)AliVAD::kMTAorMTC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBBA=%lldLL",(long long)AliVAD::kBBA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBBC=%lldLL",(long long)AliVAD::kBBC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBGAorBGC=%lldLL",(long long)AliVAD::kBGAorBGC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLTriggerBits),-1,-2,1,G__FastAllocString(2048).Format("kBGAandBBCorBGCandBBA=%lldLL",(long long)AliVAD::kBGAandBBCorBGCandBBA).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTrackReference */
static void G__setup_memvarAliTrackReference(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReference));
   { AliTrackReference *p; p=(AliTrackReference*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kDisappeared=%lldLL",(long long)AliTrackReference::kDisappeared).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kITS=%lldLL",(long long)AliTrackReference::kITS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kTPC=%lldLL",(long long)AliTrackReference::kTPC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kFRAME=%lldLL",(long long)AliTrackReference::kFRAME).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kTRD=%lldLL",(long long)AliTrackReference::kTRD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kTOF=%lldLL",(long long)AliTrackReference::kTOF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kMUON=%lldLL",(long long)AliTrackReference::kMUON).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kHMPID=%lldLL",(long long)AliTrackReference::kHMPID).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kT0=%lldLL",(long long)AliTrackReference::kT0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kEMCAL=%lldLL",(long long)AliTrackReference::kEMCAL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kPMD=%lldLL",(long long)AliTrackReference::kPMD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kFMD=%lldLL",(long long)AliTrackReference::kFMD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kVZERO=%lldLL",(long long)AliTrackReference::kVZERO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kZDC=%lldLL",(long long)AliTrackReference::kZDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kMFT=%lldLL",(long long)AliTrackReference::kMFT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kHALL=%lldLL",(long long)AliTrackReference::kHALL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kFIT=%lldLL",(long long)AliTrackReference::kFIT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants),-1,-2,1,G__FastAllocString(2048).Format("kAD=%lldLL",(long long)AliTrackReference::kAD).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTrack=",0,"Track number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fX=",0,"X reference position of the track");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fY=",0,"Y reference position of the track");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZ=",0,"Z reference position of the track");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPx=",0,"momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPy=",0,"momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPz=",0,"momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fLength=",0,"track lenght from its origin in cm");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTime=",0,"time of flight in cm  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fUserId=",0,"optional Id defined by user");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDetectorId=",0,"Detector Id");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliMCParticle */
static void G__setup_memvarAliMCParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCParticle));
   { AliMCParticle *p; p=(AliMCParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TParticle),-1,-1,4,"fParticle=",0,"The wrapped TParticle");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fTrackReferences=",0,"Array to track references");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNTrackRef=",0,"Number of track references");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLabel=",0,"fParticle Label in the Stack");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMother=",0,"Mother particles");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFirstDaughter=",0,"First daughter");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLastDaughter=",0,"LastDaughter");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fGeneratorIndex=",0,"!Generator index in cocktail  ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliMCEventHandler */
static void G__setup_memvarAliMCEventHandler(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandler));
   { AliMCEventHandler *p; p=(AliMCEventHandler*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandlercLcLPreReadMode_t),-1,-2,1,G__FastAllocString(2048).Format("kNoPreRead=%lldLL",(long long)AliMCEventHandler::kNoPreRead).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandlercLcLPreReadMode_t),-1,-2,1,G__FastAllocString(2048).Format("kLmPreRead=%lldLL",(long long)AliMCEventHandler::kLmPreRead).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandlercLcLPreReadMode_t),-1,-2,1,G__FastAllocString(2048).Format("kHmPreRead=%lldLL",(long long)AliMCEventHandler::kHmPreRead).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEvent),-1,-1,4,"fMCEvent=",0,"! MC Event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFile),-1,-1,4,"fFileE=",0,"! File with TreeE");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFile),-1,-1,4,"fFileK=",0,"! File with TreeK");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFile),-1,-1,4,"fFileTR=",0,"! File with TreeTR");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TTree),-1,-1,4,"fTreeE=",0,"! TreeE  (Event Headers)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TTree),-1,-1,4,"fTreeK=",0,"! TreeK  (kinematics tree)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TTree),-1,-1,4,"fTreeTR=",0,"! TreeTR (track references tree)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TDirectoryFile),-1,-1,4,"fDirK=",0,"! Directory for Kine Tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TDirectoryFile),-1,-1,4,"fDirTR=",0,"! Directory for TR Tree");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TExMap),-1,-1,4,"fParticleSelected=",0,"! List of selected MC particles for t");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TExMap),-1,-1,4,"fLabelMap=",0,"! Stores the Map of MC (ESDLabel,AODlabel)  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNEvent=",0,"! Number of events");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEvent=",0,"! Current event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fPathName=",0,"! Input file path ");
   G__memvar_setup((void*)0,67,0,1,-1,G__defined_typename("Char_t"),-1,4,"fkExtension=",0,"! File name extension ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFileNumber=",0,"! Input file number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventsPerFile=",0,"! Number of events per file");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fReadTR=",0,"determines if TR shall be read");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fInitOk=",0,"Initialization ok");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TList),-1,-1,4,"fSubsidiaryHandlers=",0,"! List of subsidiary MC handlers (for example for Background)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventsInContainer=",0,"! Number of events in container class");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandlercLcLPreReadMode_t),-1,-1,4,"fPreReadMode=",0,"Pre reading mode");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fCacheSize=",0,"Cache size for kinematics tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeCache),-1,-1,4,"fCacheTK=",0,"! Cache for kinematics tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeCache),-1,-1,4,"fCacheTR=",0,"! Cache for track references tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliMCVertex */
static void G__setup_memvarAliMCVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCVertex));
   { AliMCVertex *p; p=(AliMCVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fPosition[3]=",0,"vertex position");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliMergeableCollectionIterator */
static void G__setup_memvarAliMergeableCollectionIterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionIterator));
   { AliMergeableCollectionIterator *p; p=(AliMergeableCollectionIterator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollection),-1,-1,4,"fkMergeableCollection=",0,"Mergeable objects collection being iterated");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TIterator),-1,-1,4,"fMapIterator=",0,"Iterator for the internal map");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TIterator),-1,-1,4,"fHashListIterator=",0,"Iterator for the current hash list");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDirection=",0,"forward or reverse");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliMergeableCollectionProxy */
static void G__setup_memvarAliMergeableCollectionProxy(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionProxy));
   { AliMergeableCollectionProxy *p; p=(AliMergeableCollectionProxy*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollection),-1,-1,4,"fOC=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__G__STEERBaseLN_THashList),-1,-1,4,"fList=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliMergeableCollection */
static void G__setup_memvarAliMergeableCollection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollection));
   { AliMergeableCollection *p; p=(AliMergeableCollection*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TMap),-1,-1,4,"fMap=",0,"/ map of TMap of THashList* of TObject*...");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fMustShowEmptyObject=",0,"/ Whether or not to show empty objects with the Print method");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMapVersion=",0,"/ internal version of map (to avoid custom streamer...)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),G__defined_typename("map<std::string,int>"),-1,4,"fMessages=",0,"! log messages");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliMixedEvent */
static void G__setup_memvarAliMixedEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMixedEvent));
   { AliMixedEvent *p; p=(AliMixedEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TList),-1,-1,4,"fEventList=",0,"! List of Events");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNEvents=",0,"! Number of Events ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfTracks=",0,"! Total number of tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfCaloClusters=",0,"! Total number of calo clusters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfPHOSCells=",0,"! Total number of PHOS Cells");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumberOfEMCALCells=",0,"! Total number of EMCAL Cells");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNTracksCumul=",0,"! Cumulant");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNCaloClustersCumul=",0,"! Cumulant");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPHOSCellsCumul=",0,"! Cumulant");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNEMCALCellsCumul=",0,"! Cumulant");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCells),-1,-1,4,"fPHOSCells=",0,"! array ofPHOS cells  ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCells),-1,-1,4,"fEMCALCells=",0,"! array ofPHOS cells  ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex),-1,-1,4,"fMeanVertex=",0,"! Mean vertex");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliMultSelectionBase */
static void G__setup_memvarAliMultSelectionBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMultSelectionBase));
   { AliMultSelectionBase *p; p=(AliMultSelectionBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliNeutralTrackParam */
static void G__setup_memvarAliNeutralTrackParam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam));
   { AliNeutralTrackParam *p; p=(AliNeutralTrackParam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliPDG */
static void G__setup_memvarAliPDG(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPDG));
   { AliPDG *p; p=(AliPDG*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliPIDCombined */
static void G__setup_memvarAliPIDCombined(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDCombined));
   { AliPIDCombined *p; p=(AliPIDCombined*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDetectorMask=",0,"Detectors included in combined pid");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRejectMismatchMask=",0,"Detectors set return flat prob. if mismatch detected ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fEnablePriors=",0,"Enable bayesian PID (if kFALSE priors set flat)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSelectedSpecies=",0,"Number of selected species to study");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TH1F),-1,-1,4,"fPriorsDistributions[9]=",0,"priors");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseDefaultTPCPriors=",0,"switch to use Defaul TPC Priors");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TH2F),-1,-2,4,"fDefaultPriorsTPC[9]=",0,"Default priors for TPC tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TH2F),-1,-2,4,"fDefaultPriorsTPCpPb[9]=",0,"Default priors for TPC tracks in pPb");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"fTOFmismProb=",0,"TOF mismatch probability");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliPIDValues */
static void G__setup_memvarAliPIDValues(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDValues));
   { AliPIDValues *p; p=(AliPIDValues*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fValues[14]=",0,"[0.,0.,8] PID values");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus),-1,-1,4,"fPIDStatus=",0,"PID status of the detector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliProdInfo */
static void G__setup_memvarAliProdInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfo));
   { AliProdInfo *p; p=(AliProdInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfocLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kParsedBit=%lldLL",(long long)AliProdInfo::kParsedBit).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfocLcLETagType),-1,-2,1,G__FastAllocString(2048).Format("kAliroot=%lldLL",(long long)AliProdInfo::kAliroot).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfocLcLETagType),-1,-2,1,G__FastAllocString(2048).Format("kRoot=%lldLL",(long long)AliProdInfo::kRoot).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfocLcLETagType),-1,-2,1,G__FastAllocString(2048).Format("kOutDir=%lldLL",(long long)AliProdInfo::kOutDir).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfocLcLETagType),-1,-2,1,G__FastAllocString(2048).Format("kPass=%lldLL",(long long)AliProdInfo::kPass).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfocLcLETagType),-1,-2,1,G__FastAllocString(2048).Format("kProdType=%lldLL",(long long)AliProdInfo::kProdType).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfocLcLETagType),-1,-2,1,G__FastAllocString(2048).Format("kProdTag=%lldLL",(long long)AliProdInfo::kProdTag).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfocLcLETagType),-1,-2,1,G__FastAllocString(2048).Format("kPeriod=%lldLL",(long long)AliProdInfo::kPeriod).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfocLcLETagType),-1,-2,1,G__FastAllocString(2048).Format("kNTags=%lldLL",(long long)AliProdInfo::kNTags).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fMcFlag=",0,"MC data: kTrue ; raw data: kFalse");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAlirootSvnVersion=",0,"aliroot svn numbering");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRootSvnVersion=",0,"root svn numbering");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRecoPass=",0,"Reconstruction pass");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fTags[7]=",0,"Array with tag values");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fPeriod=",0,"LHC period");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fProductionTag=",0,"production tag");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fAlirootVersion=",0,"aliroot version used producing data");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fRootVersion=",0,"root version used producing data");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fRecoPassName=",0,"Full name of the reconstruction pass, deduced from the output file structure");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliQA */
static void G__setup_memvarAliQA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA));
   { AliQA *p; p=(AliQA*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kNULLDET=%lldLL",(long long)AliQA::kNULLDET).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kITS=%lldLL",(long long)AliQA::kITS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kTPC=%lldLL",(long long)AliQA::kTPC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kTRD=%lldLL",(long long)AliQA::kTRD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kTOF=%lldLL",(long long)AliQA::kTOF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kPHOS=%lldLL",(long long)AliQA::kPHOS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kHMPID=%lldLL",(long long)AliQA::kHMPID).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kEMCAL=%lldLL",(long long)AliQA::kEMCAL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kMUON=%lldLL",(long long)AliQA::kMUON).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kFMD=%lldLL",(long long)AliQA::kFMD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kZDC=%lldLL",(long long)AliQA::kZDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kPMD=%lldLL",(long long)AliQA::kPMD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kT0=%lldLL",(long long)AliQA::kT0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kVZERO=%lldLL",(long long)AliQA::kVZERO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kACORDE=%lldLL",(long long)AliQA::kACORDE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kHLT=%lldLL",(long long)AliQA::kHLT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kGLOBAL=%lldLL",(long long)AliQA::kGLOBAL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kCORR=%lldLL",(long long)AliQA::kCORR).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kNDET=%lldLL",(long long)AliQA::kNDET).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kMFT=%lldLL",(long long)AliQA::kMFT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLALITASK_t),-1,-2,1,G__FastAllocString(2048).Format("kNULLTASK=%lldLL",(long long)AliQA::kNULLTASK).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLALITASK_t),-1,-2,1,G__FastAllocString(2048).Format("kRAW=%lldLL",(long long)AliQA::kRAW).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLALITASK_t),-1,-2,1,G__FastAllocString(2048).Format("kSIM=%lldLL",(long long)AliQA::kSIM).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLALITASK_t),-1,-2,1,G__FastAllocString(2048).Format("kREC=%lldLL",(long long)AliQA::kREC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLALITASK_t),-1,-2,1,G__FastAllocString(2048).Format("kESD=%lldLL",(long long)AliQA::kESD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLALITASK_t),-1,-2,1,G__FastAllocString(2048).Format("kANA=%lldLL",(long long)AliQA::kANA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLALITASK_t),-1,-2,1,G__FastAllocString(2048).Format("kNTASK=%lldLL",(long long)AliQA::kNTASK).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLQABIT_t),-1,-2,1,G__FastAllocString(2048).Format("kNULLBit=%lldLL",(long long)AliQA::kNULLBit).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLQABIT_t),-1,-2,1,G__FastAllocString(2048).Format("kINFO=%lldLL",(long long)AliQA::kINFO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLQABIT_t),-1,-2,1,G__FastAllocString(2048).Format("kWARNING=%lldLL",(long long)AliQA::kWARNING).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLQABIT_t),-1,-2,1,G__FastAllocString(2048).Format("kERROR=%lldLL",(long long)AliQA::kERROR).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLQABIT_t),-1,-2,1,G__FastAllocString(2048).Format("kFATAL=%lldLL",(long long)AliQA::kFATAL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLQABIT_t),-1,-2,1,G__FastAllocString(2048).Format("kNBIT=%lldLL",(long long)AliQA::kNBIT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kNULLTYPE=%lldLL",(long long)AliQA::kNULLTYPE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kUNKOWN=%lldLL",(long long)AliQA::kUNKOWN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kAUTOTEST=%lldLL",(long long)AliQA::kAUTOTEST).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kCALIBRATION=%lldLL",(long long)AliQA::kCALIBRATION).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kCALIBRATIONPULSER=%lldLL",(long long)AliQA::kCALIBRATIONPULSER).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kCHANNELDELAYTUNING=%lldLL",(long long)AliQA::kCHANNELDELAYTUNING).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kCOSMIC=%lldLL",(long long)AliQA::kCOSMIC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kCOSMICS=%lldLL",(long long)AliQA::kCOSMICS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kDAQFOUNIFSCAN=%lldLL",(long long)AliQA::kDAQFOUNIFSCAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kDAQGENDACSCAN=%lldLL",(long long)AliQA::kDAQGENDACSCAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kDAQMEANTHSCAN=%lldLL",(long long)AliQA::kDAQMEANTHSCAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kDAQMINTHSCAN=%lldLL",(long long)AliQA::kDAQMINTHSCAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kDAQNOISYPIXSCAN=%lldLL",(long long)AliQA::kDAQNOISYPIXSCAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kDAQPIXDELAYSCAN=%lldLL",(long long)AliQA::kDAQPIXDELAYSCAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kDAQUNIFORMITYSCAN=%lldLL",(long long)AliQA::kDAQUNIFORMITYSCAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kDCSFOUNIFSCAN=%lldLL",(long long)AliQA::kDCSFOUNIFSCAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kDCSMEANTHSCAN=%lldLL",(long long)AliQA::kDCSMEANTHSCAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kDCSMINTHSCAN=%lldLL",(long long)AliQA::kDCSMINTHSCAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kDCSPIXDELAYSCAN=%lldLL",(long long)AliQA::kDCSPIXDELAYSCAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kDCSUNIFORMITYSCAN=%lldLL",(long long)AliQA::kDCSUNIFORMITYSCAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kDDLTEST=%lldLL",(long long)AliQA::kDDLTEST).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kGAIN=%lldLL",(long long)AliQA::kGAIN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kPEDESTAL=%lldLL",(long long)AliQA::kPEDESTAL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kINJECTOR=%lldLL",(long long)AliQA::kINJECTOR).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kLASER=%lldLL",(long long)AliQA::kLASER).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kMONTECARLO=%lldLL",(long long)AliQA::kMONTECARLO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kNOISE=%lldLL",(long long)AliQA::kNOISE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kNOISYPIXSCAN=%lldLL",(long long)AliQA::kNOISYPIXSCAN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kPHYSICS=%lldLL",(long long)AliQA::kPHYSICS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kPULSER=%lldLL",(long long)AliQA::kPULSER).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kSTANDALONE=%lldLL",(long long)AliQA::kSTANDALONE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kSTANDALONEBC=%lldLL",(long long)AliQA::kSTANDALONEBC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kSTANDALONECENTRAL=%lldLL",(long long)AliQA::kSTANDALONECENTRAL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kSTANDALONECOSMIC=%lldLL",(long long)AliQA::kSTANDALONECOSMIC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kSTANDALONEEMD=%lldLL",(long long)AliQA::kSTANDALONEEMD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kSTANDALONELASER=%lldLL",(long long)AliQA::kSTANDALONELASER).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kSTANDALONEMB=%lldLL",(long long)AliQA::kSTANDALONEMB).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kSTANDALONEPEDESTAL=%lldLL",(long long)AliQA::kSTANDALONEPEDESTAL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kSTANDALONESEMICENTRAL=%lldLL",(long long)AliQA::kSTANDALONESEMICENTRAL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kSTANDALONEPULSER=%lldLL",(long long)AliQA::kSTANDALONEPULSER).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t),-1,-2,1,G__FastAllocString(2048).Format("kNTYPE=%lldLL",(long long)AliQA::kNTYPE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLTASKINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kNULLTASKINDEX=%lldLL",(long long)AliQA::kNULLTASKINDEX).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLTASKINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kRAWS=%lldLL",(long long)AliQA::kRAWS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLTASKINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kHITS=%lldLL",(long long)AliQA::kHITS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLTASKINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kSDIGITS=%lldLL",(long long)AliQA::kSDIGITS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLTASKINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kDIGITS=%lldLL",(long long)AliQA::kDIGITS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLTASKINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kRECPOINTS=%lldLL",(long long)AliQA::kRECPOINTS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLTASKINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kTRACKSEGMENTS=%lldLL",(long long)AliQA::kTRACKSEGMENTS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLTASKINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kRECPARTICLES=%lldLL",(long long)AliQA::kRECPARTICLES).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLTASKINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kESDS=%lldLL",(long long)AliQA::kESDS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLTASKINDEX_t),-1,-2,1,G__FastAllocString(2048).Format("kNTASKINDEX=%lldLL",(long long)AliQA::kNTASKINDEX).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA),-1,-2,4,"fgQA=",0,"pointer to the instance of the singleton");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNdet=",0,"number of detectors");
   G__memvar_setup((void*)0,75,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fQA=",0,"[fNdet] the status word 4 bits for SIM, REC, ESD, ANA each");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t),-1,-1,4,"fDet=",0,"!  the current detector (ITS, TPC, ....)");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLALITASK_t),-1,-1,4,"fTask=",0,"!  the current environment (SIM, REC, ESD, ANA)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgDetNames[]=",0,"! list of detector names   ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgGRPPath=",0,"! path of the GRP object in OCDB");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFile),-1,-2,4,"fgQADataFile=",0,"! the output file where the quality assurance maker store their results");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgQADataFileName=",0,"! the name of the file where the quality assurance maker store their results");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFile),-1,-2,4,"fgQARefFile=",0,"! the output file where the quality assurance maker store their results");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgQARefDirName=",0,"! name of directory where to find the reference data file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgQARefFileName=",0,"! file name where to find the reference data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TFile),-1,-2,4,"fgQAResultFile=",0,"! File where to find the QA result");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgQAResultDirName=",0,"! the location of the output file where the QA results are stored  ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgQAResultFileName=",0,"! the output file where the QA results are stored  ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgRTNames[]=",0,"! list of Run Type names   ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgTaskNames[]=",0,"! list of tasks names   ");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgkExpert=",0,"! name for the expert directory");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"fgkExpertBit=0ULL",0,"! TObject bit identifing the object as \"expert\"");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgkLabLocalFile=",0,"! label to identify a file as local ");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgkLabLocalOCDB=",0,"! label to identify a file as local OCDB ");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgkLabAliEnOCDB=",0,"! label to identify a file as AliEn OCDB ");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgkRefFileName=",0,"! name of Reference File Name ");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"fgkQABit=0ULL",0,"! bit in the QA data object which is set when Checker does not return 0");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgkQAName=",0,"! name of QA object ");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgkQACorrNtName=",0,"! name of QA Correlation Ntuple");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgkRefOCDBDirName=",0,"! name of Reference directory name in OCDB  	");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgkRefDataDirName=",0,"! name of Reference directory name in OCDB for data  	");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-2,4,"fgkQARefOCDBDefault=",0,"! default storage for QA in OCDB ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliRefArray */
static void G__setup_memvarAliRefArray(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliRefArray));
   { AliRefArray *p; p=(AliRefArray*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fNElems=",0,"number of referrer elements");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fRefSize=",0,"current size of all references");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fElems=",0,"[fNElems] array of referrers");
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fRefInd=",0,"[fRefSize] indices of next referred node");
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fRefBuff=",0,"[fRefSize] buffer of entries for referred nodes");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliRunTagCuts */
static void G__setup_memvarAliRunTagCuts(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTagCuts));
   { AliRunTagCuts *p; p=(AliRunTagCuts*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAliceRunId=",0,"the run id");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAliceRunIdFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAliceMagneticField=",0,"value of the magnetic field");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAliceMagneticFieldFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAliceDipoleField=",0,"value of the dipole field");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAliceDipoleFieldFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAliceRunStartTimeMin=",0,"minimum run start date");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAliceRunStartTimeMax=",0,"maximum run start date");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAliceRunStartTimeFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAliceRunStopTimeMin=",0,"minmum run stop date");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAliceRunStopTimeMax=",0,"maximum run stop date");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAliceRunStopTimeFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fAlirootVersion=",0,"aliroot version");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAlirootVersionFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fRootVersion=",0,"root version");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fRootVersionFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fGeant3Version=",0,"geant3 version");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fGeant3VersionFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fLHCPeriod=",0,"LHC period version");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fLHCPeriodFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fRecPass=",0,"Reconstruction pass");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fRecPassFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fProdName=",0,"Production Name");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fProdNameFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAliceRunValidation=",0,"validation script");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAliceRunValidationFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fAliceRunQualities=",0,"selected qualities");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAliceRunQualitiesFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAliceBeamEnergy=",0,"beam energy cm");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAliceBeamEnergyFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fAliceBeamType=",0,"run type (pp, AA, pA)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAliceBeamTypeFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAliceCalibrationVersion=",0,"calibration version  ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAliceCalibrationVersionFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAliceDataType=",0,"0: simulation -- 1: data  ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAliceDataTypeFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fBeamTriggerRange[2]=",0,"Beam trigger maximum and minimum");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fBeamTriggerFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fCollisionTriggerRange[2]=",0,"Collision trigger maximum and minimum");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fCollisionTriggerFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fEmptyTriggerRange[2]=",0,"Empty trigger maximum and minimum");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fEmptyTriggerFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fASideTriggerRange[2]=",0,"ASide trigger maximum and minimum");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fASideTriggerFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fCSideTriggerRange[2]=",0,"CSide trigger maximum and minimum");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fCSideTriggerFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fHMTriggerRange[2]=",0,"High Multiplicity trigger maximum and minimum");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fHMTriggerFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fMuonTriggerRange[2]=",0,"Muon trigger maximum and minimum");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fMuonTriggerFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCollisionRateRange[2]=",0,"Collision rate range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fCollisionRateFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanVertexRange[2]=",0,"Mean Vertex Postion");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fMeanVertexFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVertexQualityRange[2]=",0,"Mean Vertex quality");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fVertexQualityFlag=",0,"Shows whether this cut is used or not");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliSysInfo */
static void G__setup_memvarAliSysInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliSysInfo));
   { AliSysInfo *p; p=(AliSysInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("fstream"),-1,4,"fSysWatch=",0,"system watch - Memory and CPU usage ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TStopwatch),-1,-1,4,"fTimer=",0,"timer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TMemStatManager),-1,-1,4,"fMemStat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliSysInfo),-1,-2,4,"fInstance=",0,"instance pointer");
   G__memvar_setup((void*)0,89,2,0,-1,G__defined_typename("StampCallback_t"),-1,4,"fCallBackFunc=",0,"call back functions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNCallBack=",0,"number of call back functions");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fgVerbose=",0,"do we want actually to write the stamps ?");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fgDisabled=",0,"do not even open the file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTagCreator */
static void G__setup_memvarAliTagCreator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTagCreator));
   { AliTagCreator *p; p=(AliTagCreator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,2,"fSE=",0,"the defined storage element");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,2,"fgridpath=",0,"the alien location of the tag files");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fStorage=",0,"0:local - 1:grid");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTimeStamp */
static void G__setup_memvarAliTimeStamp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTimeStamp));
   { AliTimeStamp *p; p=(AliTimeStamp*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("fNanosecPerBC=%lldLL",(long long)AliTimeStamp::fNanosecPerBC).data(),0,"! nanosecs per bunch cross");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fOrbit=",0,"Orbit");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fPeriod=",0,"Period counter");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,2,"fBunchCross=",0,"Bunch Cross ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTRDNDFast */
static void G__setup_memvarAliTRDNDFast(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDNDFast));
   { AliTRDNDFast *p; p=(AliTRDNDFast*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("kNpar=%lldLL",(long long)AliTRDNDFast::kNpar).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNDim=",0,"Dimensions");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,4,"fTitle=",0,"title");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TF1),-1,-1,4,"fFunc=",0,"! functions, do not store");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TH1F),-1,-1,4,"fHistos=",0,"[fNDim] Histograms");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF),-1,-1,4,"fPars[5]=",0,"parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTRDPIDParams */
static void G__setup_memvarAliTRDPIDParams(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParams));
   { AliTRDPIDParams *p; p=(AliTRDPIDParams*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,4,"kVerySmall=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TList),-1,-1,4,"fEntries=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTRDPIDParams::AliTRDPIDThresholds */
static void G__setup_memvarAliTRDPIDParamscLcLAliTRDPIDThresholds(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds));
   { AliTRDPIDParams::AliTRDPIDThresholds *p; p=(AliTRDPIDParams::AliTRDPIDThresholds*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNTracklets=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEfficiency[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fParams[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTRDPIDParams::AliTRDPIDCentrality */
static void G__setup_memvarAliTRDPIDParamscLcLAliTRDPIDCentrality(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDCentrality));
   { AliTRDPIDParams::AliTRDPIDCentrality *p; p=(AliTRDPIDParams::AliTRDPIDCentrality*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TSortedList),-1,-1,4,"fEntries=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMinCentrality=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMaxCentrality=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTRDPIDReference */
static void G__setup_memvarAliTRDPIDReference(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDReference));
   { AliTRDPIDReference *p; p=(AliTRDPIDReference*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDReferencecLcLdA),-1,-2,4,"kIsOwner=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fRefContainer=",0,"Histogram container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF),-1,-1,4,"fMomentumBins=",0,"Momentum Bins");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTRDTKDInterpolator */
static void G__setup_memvarAliTRDTKDInterpolator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolator));
   { AliTRDTKDInterpolator *p; p=(AliTRDTKDInterpolator*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLTRDTKDMode),-1,-2,1,G__FastAllocString(2048).Format("kInterpolation=%lldLL",(long long)AliTRDTKDInterpolator::kInterpolation).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLTRDTKDMode),-1,-2,1,G__FastAllocString(2048).Format("kMinError=%lldLL",(long long)AliTRDTKDInterpolator::kMinError).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLTRDTKDMode),-1,-2,1,G__FastAllocString(2048).Format("kNodeVal=%lldLL",(long long)AliTRDTKDInterpolator::kNodeVal).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNDataNodes=",0,"Number of filled nodes (total-zero nodes)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClonesArray),-1,-1,4,"fNodes=",0,"interpolation nodes");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fLambda=",0,"number of parameters in polynom");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPointsI=",0,"number of points for interpolation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseHelperNodes=",0,"Build Helper nodes to ensure boundary conditions");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseWeights=",0,"Use tricubic weights");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLTRDTKDMode),-1,-1,4,"fPDFMode=",0,"Mode for PDF calculation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStoreCov=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTRDTKDInterpolator::AliTRDTKDNodeInfo */
static void G__setup_memvarAliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo));
   { AliTRDTKDInterpolator::AliTRDTKDNodeInfo *p; p=(AliTRDTKDInterpolator::AliTRDTKDNodeInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNDim=",0,"Dimension of Points");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNBounds=",0,"2* Dimension of Points");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPar=",0,"Number of Parameters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNCov=",0,"Size of Cov Matrix");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"fData=",0,"[fNDim] Data Point");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBounds=",0,"[fNBounds] Boundaries");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVal[2]=",0,"measured value for node");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPar=",0,"[fNPar] interpolator parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCov=",0,"[fNCov] interpolator covariance matrix");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTriggerScalers */
static void G__setup_memvarAliTriggerScalers(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalers));
   { AliTriggerScalers *p; p=(AliTriggerScalers*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fClassIndex=",0,"class index ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fLOCB=",0,"L0 triggers before any vetos  (32 bits)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fLOCA=",0,"L0 triggers after all vetos   (32 bits)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fL1CB=",0,"L1 triggers before any vetos  (32 bits)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fL1CA=",0,"L1 triggers after all vetos   (32 bits)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fL2CB=",0,"L2 triggers before any vetos  (32 bits)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fL2CA=",0,"L2 triggers after all vetos   (32 bits)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fLMCB=",0,"LM triggers before any vetos  (32 bits)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fLMCA=",0,"LM triggers after all vetos   (32 bits)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTriggerScalersRecord */
static void G__setup_memvarAliTriggerScalersRecord(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalersRecord));
   { AliTriggerScalersRecord *p; p=(AliTriggerScalersRecord*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliTimeStamp),-1,-1,4,"fTimestamp=",0,"record timestamp");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fScalers=",0,"Array of scalers (AliTriggerScalers) ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fTimeGroup=",0,"Time group of record");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVAODHeader */
static void G__setup_memvarAliVAODHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVAODHeader));
   { AliVAODHeader *p; p=(AliVAODHeader*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* AliVersion */
static void G__setup_memvarAliVersion(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVersion));
   { AliVersion *p; p=(AliVersion*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,2,"fHash=",0,"last hash");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,2,"fTag=",0,"revision/tag name");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVersion),-1,-2,2,"fgInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVEventPool */
static void G__setup_memvarAliVEventPool(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventPool));
   { AliVEventPool *p; p=(AliVEventPool*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TChain),-1,-1,2,"fChain=",0,"Chain of trees");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVfriendTrack */
static void G__setup_memvarAliVfriendTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVfriendTrack));
   { AliVfriendTrack *p; p=(AliVfriendTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVVZEROfriend */
static void G__setup_memvarAliVVZEROfriend(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROfriend));
   { AliVVZEROfriend *p; p=(AliVVZEROfriend*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROfriendcLcLEVVZEROfriendParams),-1,-2,1,G__FastAllocString(2048).Format("kNChannels=%lldLL",(long long)AliVVZEROfriend::kNChannels).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROfriendcLcLEVVZEROfriendParams),-1,-2,1,G__FastAllocString(2048).Format("kNEvOfInt=%lldLL",(long long)AliVVZEROfriend::kNEvOfInt).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROfriendcLcLEVVZEROfriendParams),-1,-2,1,G__FastAllocString(2048).Format("kNScalers=%lldLL",(long long)AliVVZEROfriend::kNScalers).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROfriendcLcLEVVZEROfriendParams),-1,-2,1,G__FastAllocString(2048).Format("kNBunches=%lldLL",(long long)AliVVZEROfriend::kNBunches).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVTOFcluster */
static void G__setup_memvarAliVTOFcluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFcluster));
   { AliVTOFcluster *p; p=(AliVTOFcluster*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFclustercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMaxHits=%lldLL",(long long)AliVTOFcluster::kMaxHits).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFclustercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMaxMatches=%lldLL",(long long)AliVTOFcluster::kMaxMatches).data(),0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fEvent)-(long)(p)),85,0,1,G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent),-1,-1,1,"fEvent=",0,"! pointer to the event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVTOFHit */
static void G__setup_memvarAliVTOFHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFHit));
   { AliVTOFHit *p; p=(AliVTOFHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVTOFMatch */
static void G__setup_memvarAliVTOFMatch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFMatch));
   { AliVTOFMatch *p; p=(AliVTOFMatch*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVTPCseed */
static void G__setup_memvarAliVTPCseed(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTPCseed));
   { AliVTPCseed *p; p=(AliVTPCseed*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TTreeDataElement */
static void G__setup_memvarTTreeDataElement(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeDataElement));
   { TTreeDataElement *p; p=(TTreeDataElement*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fType=",0,"type of data element");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TDataType),-1,-1,2,"fDType=",0,"data type pointer ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),-1,-1,2,"fClass=",0,"data type pointer");
   G__memvar_setup((void*)0,89,0,0,-1,-1,-1,2,"fPointer=",0,"pointer to element");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TTreeStream */
static void G__setup_memvarTTreeStream(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream));
   { TTreeStream *p; p=(TTreeStream*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,2,"fElements=",0,"array of elements");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,2,"fBranches=",0,"pointers to branches");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TTree),-1,-1,2,"fTree=",0,"data storage");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCurrentIndex=",0,"index of current element");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fId=",0,"identifier of layout");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TString),-1,-1,2,"fNextName=",0,"name for next entry");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNextNameCounter=",0,"next name counter");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fStatus=",0,"status of the layout");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TTreeSRedirector */
static void G__setup_memvarTTreeSRedirector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeSRedirector));
   { TTreeSRedirector *p; p=(TTreeSRedirector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TDirectory),-1,-1,4,"fDirectory=",0,"file");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDirectoryOwner=",0,"do we own the directory?");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray),-1,-1,4,"fDataLayouts=",0,"array of data layouts");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fgDisabled=",0,"disable - do not open any files");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__STEERBaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__STEERBase() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncAliCentrality(void) {
   /* AliCentrality */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCentrality));
   G__memfunc_setup("AliCentrality",1333,G__G__STEERBase_184_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCentrality), -1, 0, 0, 1, 1, 0, "", "/ constructor", (void*) NULL, 0);
   G__memfunc_setup("AliCentrality",1333,G__G__STEERBase_184_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCentrality), -1, 0, 1, 1, 1, 0, "u 'AliCentrality' - 11 - cnt", "/ copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_184_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCentrality), -1, 1, 1, 1, 1, 0, "u 'AliCentrality' - 11 - cnt", "/ assignment operator", (void*) NULL, 0);
   G__memfunc_setup("SetQuality",1045,G__G__STEERBase_184_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - quality", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityV0M",1566,G__G__STEERBase_184_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityV0A",1554,G__G__STEERBase_184_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityV0A0",1602,G__G__STEERBase_184_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityV0A123",1704,G__G__STEERBase_184_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityV0C",1556,G__G__STEERBase_184_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityV0A23",1655,G__G__STEERBase_184_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityV0C01",1653,G__G__STEERBase_184_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityV0S",1572,G__G__STEERBase_184_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityV0MEq",1748,G__G__STEERBase_184_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityV0AEq",1736,G__G__STEERBase_184_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityV0CEq",1738,G__G__STEERBase_184_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityFMD",1570,G__G__STEERBase_184_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityTRK",1596,G__G__STEERBase_184_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityTKL",1590,G__G__STEERBase_184_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityCL0",1546,G__G__STEERBase_184_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityCL1",1547,G__G__STEERBase_184_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityCND",1568,G__G__STEERBase_184_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityZNA",1588,G__G__STEERBase_184_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityZNC",1590,G__G__STEERBase_184_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityZPA",1590,G__G__STEERBase_184_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityZPC",1592,G__G__STEERBase_184_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityNPA",1578,G__G__STEERBase_184_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityV0MvsFMD",2014,G__G__STEERBase_184_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityTKLvsV0M",2034,G__G__STEERBase_184_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityZEMvsZDC",2049,G__G__STEERBase_184_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityV0Mtrue",2014,G__G__STEERBase_184_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityV0Atrue",2002,G__G__STEERBase_184_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityV0Ctrue",2004,G__G__STEERBase_184_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityFMDtrue",2018,G__G__STEERBase_184_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityTRKtrue",2044,G__G__STEERBase_184_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityTKLtrue",2038,G__G__STEERBase_184_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityCL0true",1994,G__G__STEERBase_184_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityCL1true",1995,G__G__STEERBase_184_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityCNDtrue",2016,G__G__STEERBase_184_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityZNAtrue",2036,G__G__STEERBase_184_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityZNCtrue",2038,G__G__STEERBase_184_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityZPAtrue",2038,G__G__STEERBase_184_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityZPCtrue",2040,G__G__STEERBase_184_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCentralityPercentile",2378,G__G__STEERBase_184_0_43, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "C - - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCentralityClass10",1942,G__G__STEERBase_184_0_44, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "C - - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCentralityClass5",1898,G__G__STEERBase_184_0_45, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "C - - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEventInCentralityClass",2442,G__G__STEERBase_184_0_46, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"f - 'Float_t' 0 - a f - 'Float_t' 0 - b "
"C - - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCentralityPercentileUnchecked",3284,G__G__STEERBase_184_0_47, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "C - - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCentralityClass10Unchecked",2848,G__G__STEERBase_184_0_48, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "C - - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCentralityClass5Unchecked",2804,G__G__STEERBase_184_0_49, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "C - - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEventInCentralityClassUnchecked",3348,G__G__STEERBase_184_0_50, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"f - 'Float_t' 0 - a f - 'Float_t' 0 - b "
"C - - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQuality",1033,G__G__STEERBase_184_0_51, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__STEERBase_184_0_52, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_184_0_53, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliCentrality::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_184_0_54, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCentrality::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_184_0_55, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliCentrality::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_184_0_56, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliCentrality::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_184_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_184_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCentrality::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_184_0_62, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCentrality::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_184_0_63, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCentrality::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_184_0_64, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCentrality::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliCentrality", 1459, G__G__STEERBase_184_0_65, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliCheb2DStack(void) {
   /* AliCheb2DStack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStack));
   G__memfunc_setup("GetNSlices",977,G__G__STEERBase_185_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDimOut",882,G__G__STEERBase_185_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBoundMin",1084,G__G__STEERBase_185_0_5, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBoundMax",1086,G__G__STEERBase_185_0_6, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXRowInv",1001,G__G__STEERBase_185_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "F - - 10 - xi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXRowInv",989,G__G__STEERBase_185_0_8, 70, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,G__G__STEERBase_185_0_9, 121, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - sliceID F - - 10 - par "
"F - - 0 - res", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Eval",392,G__G__STEERBase_185_0_10, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 8, 
"i - - 0 - sliceID i - - 0 - dimOut "
"F - - 10 - par", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("EvalDeriv",898,G__G__STEERBase_185_0_11, 121, -1, -1, 0, 4, 1, 1, 8, 
"i - - 0 - sliceID i - - 0 - dim "
"F - 'Float_t' 10 - par F - - 0 - res", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("IsInside",792,G__G__STEERBase_185_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "F - - 10 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintSlice",1021,G__G__STEERBase_185_0_14, 121, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - isl C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ChebEval1D",879,G__G__STEERBase_185_0_15, 102, -1, -1, 0, 3, 3, 1, 0, 
"f - - 0 - x F - - 10 - array "
"i - - 0 - ncf", (char*)NULL, (void*) G__func2void( (float (*)(float, const float*, int))(&AliCheb2DStack::ChebEval1D) ), 0);
   G__memfunc_setup("ChebEval1D",879,G__G__STEERBase_185_0_16, 102, -1, -1, 0, 3, 3, 1, 0, 
"f - - 0 - x S - 'Short_t' 10 - array "
"i - - 0 - ncf", (char*)NULL, (void*) G__func2void( (float (*)(float, const Short_t*, int))(&AliCheb2DStack::ChebEval1D) ), 0);
   G__memfunc_setup("ChebEval1Deriv",1317,G__G__STEERBase_185_0_17, 102, -1, -1, 0, 3, 3, 1, 0, 
"f - - 0 - x F - - 10 - array "
"i - - 0 - ncf", (char*)NULL, (void*) G__func2void( (float (*)(float, const float*, int))(&AliCheb2DStack::ChebEval1Deriv) ), 0);
   G__memfunc_setup("ChebEval1Deriv",1317,G__G__STEERBase_185_0_18, 102, -1, -1, 0, 3, 3, 1, 0, 
"f - - 0 - x S - 'Short_t' 10 - array "
"i - - 0 - ncf", (char*)NULL, (void*) G__func2void( (float (*)(float, const Short_t*, int))(&AliCheb2DStack::ChebEval1Deriv) ), 0);
   G__memfunc_setup("SetDefPrecision",1511,G__G__STEERBase_185_0_19, 121, -1, -1, 0, 1, 3, 1, 0, "f - - 0 '1e-4' prc", (char*)NULL, (void*) G__func2void( (void (*)(float))(&AliCheb2DStack::SetDefPrecision) ), 0);
   G__memfunc_setup("GetDefPrecision",1499,G__G__STEERBase_185_0_20, 102, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (float (*)())(&AliCheb2DStack::GetDefPrecision) ), 0);
   G__memfunc_setup("MapToInternal",1310,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 8, 
"i - - 0 - slice F - - 10 - xy "
"F - - 0 - args", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MapToInternal",1310,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 8, 
"i - - 0 - slice F - - 10 - xy "
"f - - 1 - x0 f - - 1 - x1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MapToExternal",1316,(G__InterfaceMethod) NULL, 102, -1, -1, 0, 3, 1, 2, 8, 
"i - - 0 - slice f - - 0 - x "
"i - - 0 - dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineGrid",977,(G__InterfaceMethod) NULL, 70, -1, -1, 0, 3, 1, 2, 8, 
"i - - 0 - slice i - - 0 - dim "
"I - - 10 - np", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckDimensions",1527,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "I - - 10 - np", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcChebCoefs",1237,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 2, 0, 
"F - - 10 - funval i - - 0 - np "
"F - - 0 - outCoefs f - - 0 - prec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStack), -1, 1, 1, 1, 4, 0, "u 'AliCheb2DStack' - 11 - rhs", "dummy", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_185_0_29, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliCheb2DStack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_185_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCheb2DStack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_185_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliCheb2DStack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_185_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliCheb2DStack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_185_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_185_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCheb2DStack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_185_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCheb2DStack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_185_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCheb2DStack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_185_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCheb2DStack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliCheb2DStack", 1394, G__G__STEERBase_185_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliCheb2DStackF(void) {
   /* AliCheb2DStackF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackF));
   G__memfunc_setup("AliCheb2DStackF",1338,G__G__STEERBase_187_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCheb2DStackF",1338,G__G__STEERBase_187_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackF), -1, 0, 9, 1, 1, 0, 
"Y - 'stFun_t' 0 - fun i - - 0 - nSlices "
"i - - 0 - dimOut F - - 10 - bmin "
"F - - 10 - bmax I - - 10 - np "
"F - - 10 '0' dead F - - 10 '0' rowXI "
"F - - 10 '0' precD", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCheb2DStackF",1338,G__G__STEERBase_187_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackF), -1, 0, 9, 1, 1, 0, 
"Y - 'stFun_t' 0 - fun i - - 0 - nSlices "
"i - - 0 - dimOut F - - 10 - bmin "
"F - - 10 - bmax I - - 12 - np "
"F - - 10 '0' dead F - - 10 '0' rowXI "
"F - - 10 '0' precD", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - sliceID F - - 10 - par "
"F - - 0 - res", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Eval",392,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 8, 
"i - - 0 - sliceID i - - 0 - dimOut "
"F - - 10 - par", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EvalDeriv",898,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 8, 
"i - - 0 - sliceID i - - 0 - dim "
"F - 'Float_t' 10 - par F - - 0 - res", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintSlice",1021,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - isl C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateParams",1208,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"Y - 'stFun_t' 0 - fun I - - 10 - np "
"F - - 10 - prc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChebFit",661,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"I - - 10 - np F - - 10 - tmpVals "
"F - - 0 - wspace f - - 0 - prec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillFunValues",1312,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 2, 0, 
"Y - 'stFun_t' 0 - fun i - - 0 - slice "
"i - - 0 - dim F - - 10 - grid "
"I - - 10 - np F - - 0 - vals", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillFunValues",1312,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"Y - 'stFun_t' 0 - fun i - - 0 - slice "
"F - - 10 - grid I - - 10 - np "
"F - - 0 - vals", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCheb2DStackF",1338,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackF), -1, 0, 1, 1, 4, 0, "u 'AliCheb2DStackF' - 11 - src", "dummy", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackF), -1, 1, 1, 1, 4, 0, "u 'AliCheb2DStackF' - 11 - rhs", "dummy", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_187_0_15, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliCheb2DStackF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_187_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCheb2DStackF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_187_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliCheb2DStackF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_187_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliCheb2DStackF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_187_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_187_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCheb2DStackF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_187_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCheb2DStackF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_187_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCheb2DStackF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_187_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCheb2DStackF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliCheb2DStackF", 1464, G__G__STEERBase_187_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliCheb2DStackS(void) {
   /* AliCheb2DStackS */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackS));
   G__memfunc_setup("AliCheb2DStackS",1351,G__G__STEERBase_188_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackS), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCheb2DStackS",1351,G__G__STEERBase_188_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackS), -1, 0, 9, 1, 1, 0, 
"Y - 'stFun_t' 0 - fun i - - 0 - nSlices "
"i - - 0 - dimOut F - - 10 - bmin "
"F - - 10 - bmax I - - 10 - np "
"F - - 10 '0' dead F - - 10 '0' rowXI "
"F - - 10 '0' precD", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCheb2DStackS",1351,G__G__STEERBase_188_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackS), -1, 0, 9, 1, 1, 0, 
"Y - 'stFun_t' 0 - fun i - - 0 - nSlices "
"i - - 0 - dimOut F - - 10 - bmin "
"F - - 10 - bmax I - - 12 - np "
"F - - 10 '0' dead F - - 10 '0' rowXI "
"F - - 10 '0' precD", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - sliceID F - - 10 - par "
"F - - 0 - res", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Eval",392,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 8, 
"i - - 0 - sliceID i - - 0 - dimOut "
"F - - 10 - par", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EvalDeriv",898,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 8, 
"i - - 0 - sliceID i - - 0 - dim "
"F - 'Float_t' 10 - par F - - 0 - res", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintSlice",1021,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - isl C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateParams",1208,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"Y - 'stFun_t' 0 - fun I - - 10 - np "
"F - - 10 - prc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChebFit",661,(G__InterfaceMethod) NULL, 102, -1, -1, 0, 4, 1, 2, 0, 
"I - - 10 - np F - - 10 - wVals "
"F - - 0 - wspace f - - 0 - prec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillFunValues",1312,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 2, 0, 
"Y - 'stFun_t' 0 - fun i - - 0 - slice "
"i - - 0 - dim F - - 10 - grid "
"I - - 10 - np F - - 0 - wVals", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillFunValues",1312,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"Y - 'stFun_t' 0 - fun i - - 0 - slice "
"F - - 10 - grid I - - 10 - np "
"F - - 0 - wVals", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCheb2DStackS",1351,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackS), -1, 0, 1, 1, 4, 0, "u 'AliCheb2DStackS' - 11 - src", "dummy", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb2DStackS), -1, 1, 1, 1, 4, 0, "u 'AliCheb2DStackS' - 11 - rhs", "dummy", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_188_0_15, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliCheb2DStackS::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_188_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCheb2DStackS::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_188_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliCheb2DStackS::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_188_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliCheb2DStackS::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_188_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_188_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCheb2DStackS::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_188_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCheb2DStackS::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_188_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCheb2DStackS::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_188_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCheb2DStackS::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliCheb2DStackS", 1477, G__G__STEERBase_188_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliCheb3DCalc(void) {
   /* AliCheb3DCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3DCalc));
   G__memfunc_setup("AliCheb3DCalc",1138,G__G__STEERBase_190_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3DCalc), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCheb3DCalc",1138,G__G__STEERBase_190_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3DCalc), -1, 0, 1, 1, 1, 0, "u 'AliCheb3DCalc' - 11 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCheb3DCalc",1138,G__G__STEERBase_190_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3DCalc), -1, 0, 1, 1, 1, 0, "E - - 0 - stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_190_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3DCalc), -1, 1, 1, 1, 1, 0, "u 'AliCheb3DCalc' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadData",762,G__G__STEERBase_190_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalDeriv",898,G__G__STEERBase_190_0_7, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - - 0 - dim F - 'Float_t' 10 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalDeriv2",948,G__G__STEERBase_190_0_8, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 8, 
"i - - 0 - dim1 i - - 0 - dim2 "
"F - 'Float_t' 10 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveData",777,G__G__STEERBase_190_0_9, 121, -1, -1, 0, 2, 1, 1, 8, 
"C - - 10 - outfile g - 'Bool_t' 0 'kFALSE' append", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveData",777,G__G__STEERBase_190_0_10, 121, -1, -1, 0, 1, 1, 1, 8, "E - - 0 'stdout' stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitRows",831,G__G__STEERBase_190_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCols",805,G__G__STEERBase_190_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrecision",1240,G__G__STEERBase_190_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1e-6' prc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrecision",1228,G__G__STEERBase_190_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNCoefs",862,G__G__STEERBase_190_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNCols",767,G__G__STEERBase_190_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRows",793,G__G__STEERBase_190_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNElemBound2D",1375,G__G__STEERBase_190_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxColsAtRow",1476,G__G__STEERBase_190_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNColsAtRow",1260,G__G__STEERBase_190_0_20, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetColAtRowBg",1236,G__G__STEERBase_190_0_21, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitElemBound2D",1413,G__G__STEERBase_190_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ne", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoefBound2D0",1339,G__G__STEERBase_190_0_23, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoefBound2D1",1340,G__G__STEERBase_190_0_24, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ChebEval1D",879,G__G__STEERBase_190_0_26, 102, -1, G__defined_typename("Float_t"), 0, 3, 3, 1, 0, 
"f - 'Float_t' 0 - x F - 'Float_t' 10 - array "
"i - - 0 - ncf", (char*)NULL, (void*) G__func2void( (Float_t (*)(Float_t, const Float_t*, int))(&AliCheb3DCalc::ChebEval1D) ), 0);
   G__memfunc_setup("ChebEval1Deriv",1317,G__G__STEERBase_190_0_27, 102, -1, G__defined_typename("Float_t"), 0, 3, 3, 1, 0, 
"f - 'Float_t' 0 - x F - 'Float_t' 10 - array "
"i - - 0 - ncf", (char*)NULL, (void*) G__func2void( (Float_t (*)(Float_t, const Float_t*, int))(&AliCheb3DCalc::ChebEval1Deriv) ), 0);
   G__memfunc_setup("ChebEval1Deriv2",1367,G__G__STEERBase_190_0_28, 102, -1, G__defined_typename("Float_t"), 0, 3, 3, 1, 0, 
"f - 'Float_t' 0 - x F - 'Float_t' 10 - array "
"i - - 0 - ncf", (char*)NULL, (void*) G__func2void( (Float_t (*)(Float_t, const Float_t*, int))(&AliCheb3DCalc::ChebEval1Deriv2) ), 0);
   G__memfunc_setup("InitCoefs",900,G__G__STEERBase_190_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoefs",784,G__G__STEERBase_190_0_30, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadLine",772,G__G__STEERBase_190_0_31, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TString' - 1 - str E - - 0 - stream", (char*)NULL, (void*) G__func2void( (void (*)(TString&, FILE*))(&AliCheb3DCalc::ReadLine) ), 0);
   G__memfunc_setup("Eval",392,G__G__STEERBase_190_0_32, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "F - 'Float_t' 10 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,G__G__STEERBase_190_0_33, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_190_0_34, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliCheb3DCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_190_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCheb3DCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_190_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliCheb3DCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_190_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliCheb3DCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_190_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_190_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCheb3DCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_190_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCheb3DCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_190_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCheb3DCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_190_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCheb3DCalc::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliCheb3DCalc", 1264, G__G__STEERBase_190_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliCheb3D(void) {
   /* AliCheb3D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D));
   G__memfunc_setup("AliCheb3D",767,G__G__STEERBase_203_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCheb3D",767,G__G__STEERBase_203_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D), -1, 0, 1, 1, 1, 0, "u 'AliCheb3D' - 11 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCheb3D",767,G__G__STEERBase_203_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D), -1, 0, 1, 1, 1, 0, "C - - 10 - inpFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCheb3D",767,G__G__STEERBase_203_0_4, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D), -1, 0, 1, 1, 1, 0, "E - - 0 - stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCheb3D",767,G__G__STEERBase_203_0_5, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D), -1, 0, 7, 1, 1, 0, 
"C - - 10 - funName i - 'Int_t' 0 - DimOut "
"F - 'Float_t' 10 - bmin F - 'Float_t' 10 - bmax "
"I - 'Int_t' 0 - npoints f - 'Float_t' 0 '1E-6' prec "
"F - 'Float_t' 10 '0' precD", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCheb3D",767,G__G__STEERBase_203_0_6, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D), -1, 0, 7, 1, 1, 0, 
"1 - 'void (*)(float*,float*)' 0 - ptr i - 'Int_t' 0 - DimOut "
"F - 'Float_t' 0 - bmin F - 'Float_t' 0 - bmax "
"I - 'Int_t' 0 - npoints f - 'Float_t' 0 '1E-6' prec "
"F - 'Float_t' 10 '0' precD", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCheb3D",767,G__G__STEERBase_203_0_7, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D), -1, 0, 9, 1, 1, 0, 
"1 - 'void (*)(float*,float*)' 0 - ptr i - - 0 - DimOut "
"F - 'Float_t' 0 - bmin F - 'Float_t' 0 - bmax "
"I - 'Int_t' 0 - npX I - 'Int_t' 0 - npY "
"I - 'Int_t' 0 - npZ f - 'Float_t' 0 '1E-6' prec "
"F - 'Float_t' 10 '0' precD", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCheb3D",767,G__G__STEERBase_203_0_8, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D), -1, 0, 7, 1, 1, 0, 
"1 - 'void (*)(float*,float*)' 0 - ptr i - - 0 - DimOut "
"F - 'Float_t' 0 - bmin F - 'Float_t' 0 - bmax "
"f - 'Float_t' 0 '1E-6' prec g - 'Bool_t' 0 'kTRUE' run "
"F - 'Float_t' 10 '0' precD", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_203_0_9, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D), -1, 1, 1, 1, 1, 0, "u 'AliCheb3D' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,G__G__STEERBase_203_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 10 - par F - 'Float_t' 0 - res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,G__G__STEERBase_203_0_11, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"F - 'Float_t' 10 - par i - - 0 - idim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,G__G__STEERBase_203_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - par D - 'Double_t' 0 - res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,G__G__STEERBase_203_0_13, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - par i - - 0 - idim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalDeriv",898,G__G__STEERBase_203_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - dimd F - 'Float_t' 10 - par "
"F - 'Float_t' 0 - res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalDeriv2",948,G__G__STEERBase_203_0_15, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - dimd1 i - - 0 - dimd2 "
"F - 'Float_t' 10 - par F - 'Float_t' 0 - res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalDeriv",898,G__G__STEERBase_203_0_16, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"i - - 0 - dimd F - 'Float_t' 10 - par "
"i - - 0 - idim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalDeriv2",948,G__G__STEERBase_203_0_17, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"i - - 0 - dimd1 i - - 0 - dimd2 "
"F - 'Float_t' 10 - par i - - 0 - idim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalDeriv3D",1017,G__G__STEERBase_203_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 10 - par F - 'Float_t' 2 - dbdr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalDeriv3D2",1067,G__G__STEERBase_203_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 10 - par F - 'Float_t' 3 - dbdrdr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsInside",792,G__G__STEERBase_203_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "F - 'Float_t' 10 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInside",792,G__G__STEERBase_203_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChebCalc",1029,G__G__STEERBase_203_0_23, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3DCalc), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBoundMin",1084,G__G__STEERBase_203_0_24, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBoundMax",1086,G__G__STEERBase_203_0_25, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBoundMin",1084,G__G__STEERBase_203_0_26, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBoundMax",1086,G__G__STEERBase_203_0_27, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrecision",1228,G__G__STEERBase_203_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShiftBound",1014,G__G__STEERBase_203_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - id f - - 0 - dif", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__G__STEERBase_203_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - inpFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__G__STEERBase_203_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InvertSign",1033,G__G__STEERBase_203_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNCNeeded",1014,G__G__STEERBase_203_0_33, 73, -1, -1, 0, 6, 1, 1, 0, 
"F - - 0 - xyz i - - 0 - DimVar "
"f - - 0 - mn f - - 0 - mx "
"f - - 0 - prec i - 'Int_t' 0 '30' npCheck", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EstimateNPoints",1543,G__G__STEERBase_203_0_34, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - - 0 - prec I - - 2 - gridBC "
"i - 'Int_t' 0 '30' npd1 i - 'Int_t' 0 '30' npd2 "
"i - 'Int_t' 0 '30' npd3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveData",777,G__G__STEERBase_203_0_35, 121, -1, -1, 0, 2, 1, 1, 8, 
"C - - 10 - outfile g - 'Bool_t' 0 'kFALSE' append", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveData",777,G__G__STEERBase_203_0_36, 121, -1, -1, 0, 1, 1, 1, 8, "E - - 0 'stdout' stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUsrFunction",1452,G__G__STEERBase_203_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUsrFunction",1452,G__G__STEERBase_203_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "1 - 'void (*)(float*,float*)' 0 - ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalUsrFunction",1544,G__G__STEERBase_203_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 10 - x F - 'Float_t' 0 - res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestRMS",658,G__G__STEERBase_203_0_40, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH1), -1, 0, 3, 1, 1, 0, 
"i - - 0 - idim i - - 0 '1000' npoints "
"U 'TH1' - 0 '0' histo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcChebCoefs",1237,G__G__STEERBase_203_0_41, 105, -1, G__defined_typename("Int_t"), 0, 4, 3, 1, 0, 
"F - 'Float_t' 10 - funval i - - 0 - np "
"F - 'Float_t' 0 - outCoefs f - 'Float_t' 0 '-1' prec", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Float_t*, int, Float_t*, Float_t))(&AliCheb3D::CalcChebCoefs) ), 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDimOut",894,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - - 10 - d F - - 10 '0' prec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrepareBoundaries",1755,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"F - 'Float_t' 10 - bmin F - 'Float_t' 10 - bmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalUsrFunction",1544,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineGrid",977,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "I - 'Int_t' 0 - npoints", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChebFit",661,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", "fit all output dimensions", (void*) NULL, 0);
   G__memfunc_setup("ChebFit",661,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i - - 0 - dmOut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrecision",1240,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "f - - 0 - prec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MapToInternal",1310,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 2, 8, 
"f - 'Float_t' 0 - x i - 'Int_t' 0 - d", "map x to [-1:1]", (void*) NULL, 0);
   G__memfunc_setup("MapToExternal",1316,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 2, 8, 
"f - 'Float_t' 0 - x i - 'Int_t' 0 - d", "map from [-1:1] to x", (void*) NULL, 0);
   G__memfunc_setup("MapToInternal",1310,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 8, 
"d - 'Double_t' 0 - x i - 'Int_t' 0 - d", "map x to [-1:1]", (void*) NULL, 0);
   G__memfunc_setup("MapToExternal",1316,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 8, 
"d - 'Double_t' 0 - x i - 'Int_t' 0 - d", "map from [-1:1] to x", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_203_0_54, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliCheb3D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_203_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCheb3D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_203_0_56, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliCheb3D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_203_0_57, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliCheb3D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_203_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_203_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCheb3D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_203_0_63, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCheb3D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_203_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCheb3D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_203_0_65, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCheb3D::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliCheb3D", 893, G__G__STEERBase_203_0_66, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliLog(void) {
   /* AliLog */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliLog));
   G__memfunc_setup("GetRootLogger",1316,G__G__STEERBase_441_0_1, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliLog), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (AliLog* (*)())(&AliLog::GetRootLogger) ), 0);
   G__memfunc_setup("DeleteRootLogger",1623,G__G__STEERBase_441_0_2, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliLog::DeleteRootLogger) ), 0);
   G__memfunc_setup("EnableCoreDump",1382,G__G__STEERBase_441_0_3, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - enabled", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&AliLog::EnableCoreDump) ), 0);
   G__memfunc_setup("MakeCoreDump",1181,G__G__STEERBase_441_0_4, 121, -1, -1, 0, 1, 3, 1, 0, "C - - 10 - fout", (char*)NULL, (void*) G__func2void( (void (*)(const char*))(&AliLog::MakeCoreDump) ), 0);
   G__memfunc_setup("EnableDebug",1070,G__G__STEERBase_441_0_5, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - enabled", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&AliLog::EnableDebug) ), 0);
   G__memfunc_setup("SetGlobalLogLevel",1687,G__G__STEERBase_441_0_6, 121, -1, -1, 0, 1, 3, 1, 0, "i 'AliLog::EType_t' - 0 - type", (char*)NULL, (void*) G__func2void( (void (*)(AliLog::EType_t))(&AliLog::SetGlobalLogLevel) ), 0);
   G__memfunc_setup("GetGlobalLogLevel",1675,G__G__STEERBase_441_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&AliLog::GetGlobalLogLevel) ), 0);
   G__memfunc_setup("SetGlobalDebugLevel",1884,G__G__STEERBase_441_0_8, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - level", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&AliLog::SetGlobalDebugLevel) ), 0);
   G__memfunc_setup("GetGlobalDebugLevel",1872,G__G__STEERBase_441_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&AliLog::GetGlobalDebugLevel) ), 0);
   G__memfunc_setup("SetModuleDebugLevel",1905,G__G__STEERBase_441_0_10, 121, -1, -1, 0, 2, 3, 1, 0, 
"C - - 10 - module i - 'Int_t' 0 - level", (char*)NULL, (void*) G__func2void( (void (*)(const char*, Int_t))(&AliLog::SetModuleDebugLevel) ), 0);
   G__memfunc_setup("ClearModuleDebugLevel",2092,G__G__STEERBase_441_0_11, 121, -1, -1, 0, 1, 3, 1, 0, "C - - 10 - module", (char*)NULL, (void*) G__func2void( (void (*)(const char*))(&AliLog::ClearModuleDebugLevel) ), 0);
   G__memfunc_setup("SetClassDebugLevel",1793,G__G__STEERBase_441_0_12, 121, -1, -1, 0, 2, 3, 1, 0, 
"C - - 10 - className i - 'Int_t' 0 - level", (char*)NULL, (void*) G__func2void( (void (*)(const char*, Int_t))(&AliLog::SetClassDebugLevel) ), 0);
   G__memfunc_setup("ClearClassDebugLevel",1980,G__G__STEERBase_441_0_13, 121, -1, -1, 0, 1, 3, 1, 0, "C - - 10 - className", (char*)NULL, (void*) G__func2void( (void (*)(const char*))(&AliLog::ClearClassDebugLevel) ), 0);
   G__memfunc_setup("SetStandardOutput",1774,G__G__STEERBase_441_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliLog::SetStandardOutput) ), 0);
   G__memfunc_setup("SetStandardOutput",1774,G__G__STEERBase_441_0_15, 121, -1, -1, 0, 1, 3, 1, 0, "i 'AliLog::EType_t' - 0 - type", (char*)NULL, (void*) G__func2void( (void (*)(AliLog::EType_t))(&AliLog::SetStandardOutput) ), 0);
   G__memfunc_setup("SetErrorOutput",1479,G__G__STEERBase_441_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliLog::SetErrorOutput) ), 0);
   G__memfunc_setup("SetErrorOutput",1479,G__G__STEERBase_441_0_17, 121, -1, -1, 0, 1, 3, 1, 0, "i 'AliLog::EType_t' - 0 - type", (char*)NULL, (void*) G__func2void( (void (*)(AliLog::EType_t))(&AliLog::SetErrorOutput) ), 0);
   G__memfunc_setup("SetFileOutput",1341,G__G__STEERBase_441_0_18, 121, -1, -1, 0, 1, 3, 1, 0, "C - - 10 - fileName", (char*)NULL, (void*) G__func2void( (void (*)(const char*))(&AliLog::SetFileOutput) ), 0);
   G__memfunc_setup("SetFileOutput",1341,G__G__STEERBase_441_0_19, 121, -1, -1, 0, 2, 3, 1, 0, 
"i 'AliLog::EType_t' - 0 - type C - - 10 - fileName", (char*)NULL, (void*) G__func2void( (void (*)(AliLog::EType_t, const char*))(&AliLog::SetFileOutput) ), 0);
   G__memfunc_setup("SetStreamOutput",1577,G__G__STEERBase_441_0_20, 121, -1, -1, 0, 1, 3, 1, 0, "U 'basic_ostream<char,char_traits<char> >' 'ostream' 0 - stream", (char*)NULL, (void*) G__func2void( (void (*)(ostream*))(&AliLog::SetStreamOutput) ), 0);
   G__memfunc_setup("SetStreamOutput",1577,G__G__STEERBase_441_0_21, 121, -1, -1, 0, 2, 3, 1, 0, 
"i 'AliLog::EType_t' - 0 - type U 'basic_ostream<char,char_traits<char> >' 'ostream' 0 - stream", (char*)NULL, (void*) G__func2void( (void (*)(AliLog::EType_t, ostream*))(&AliLog::SetStreamOutput) ), 0);
   G__memfunc_setup("SetLogNotification",1845,G__G__STEERBase_441_0_22, 121, -1, -1, 0, 1, 3, 1, 0, "Y - 'AliLog::AliLogNotification' 0 - pCallBack", (char*)NULL, (void*) G__func2void( (void (*)(AliLog::AliLogNotification))(&AliLog::SetLogNotification) ), 0);
   G__memfunc_setup("SetLogNotification",1845,G__G__STEERBase_441_0_23, 121, -1, -1, 0, 2, 3, 1, 0, 
"i 'AliLog::EType_t' - 0 - type Y - 'AliLog::AliLogNotification' 0 - pCallBack", (char*)NULL, (void*) G__func2void( (void (*)(AliLog::EType_t, AliLog::AliLogNotification))(&AliLog::SetLogNotification) ), 0);
   G__memfunc_setup("Flush",514,G__G__STEERBase_441_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliLog::Flush) ), 0);
   G__memfunc_setup("SetHandleRootMessages",2132,G__G__STEERBase_441_0_25, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - on", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&AliLog::SetHandleRootMessages) ), 0);
   G__memfunc_setup("SetPrintType",1243,G__G__STEERBase_441_0_26, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - on", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&AliLog::SetPrintType) ), 0);
   G__memfunc_setup("SetPrintType",1243,G__G__STEERBase_441_0_27, 121, -1, -1, 0, 2, 3, 1, 0, 
"i 'AliLog::EType_t' - 0 - type g - 'Bool_t' 0 - on", (char*)NULL, (void*) G__func2void( (void (*)(AliLog::EType_t, Bool_t))(&AliLog::SetPrintType) ), 0);
   G__memfunc_setup("SetPrintModule",1439,G__G__STEERBase_441_0_28, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - on", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&AliLog::SetPrintModule) ), 0);
   G__memfunc_setup("SetPrintModule",1439,G__G__STEERBase_441_0_29, 121, -1, -1, 0, 2, 3, 1, 0, 
"i 'AliLog::EType_t' - 0 - type g - 'Bool_t' 0 - on", (char*)NULL, (void*) G__func2void( (void (*)(AliLog::EType_t, Bool_t))(&AliLog::SetPrintModule) ), 0);
   G__memfunc_setup("SetPrintScope",1331,G__G__STEERBase_441_0_30, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - on", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&AliLog::SetPrintScope) ), 0);
   G__memfunc_setup("SetPrintScope",1331,G__G__STEERBase_441_0_31, 121, -1, -1, 0, 2, 3, 1, 0, 
"i 'AliLog::EType_t' - 0 - type g - 'Bool_t' 0 - on", (char*)NULL, (void*) G__func2void( (void (*)(AliLog::EType_t, Bool_t))(&AliLog::SetPrintScope) ), 0);
   G__memfunc_setup("SetPrintLocation",1650,G__G__STEERBase_441_0_32, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - on", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&AliLog::SetPrintLocation) ), 0);
   G__memfunc_setup("SetPrintLocation",1650,G__G__STEERBase_441_0_33, 121, -1, -1, 0, 2, 3, 1, 0, 
"i 'AliLog::EType_t' - 0 - type g - 'Bool_t' 0 - on", (char*)NULL, (void*) G__func2void( (void (*)(AliLog::EType_t, Bool_t))(&AliLog::SetPrintLocation) ), 0);
   G__memfunc_setup("SetPrintRepetitions",1999,G__G__STEERBase_441_0_34, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - on", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&AliLog::SetPrintRepetitions) ), 0);
   G__memfunc_setup("WriteToFile",1102,G__G__STEERBase_441_0_35, 121, -1, -1, 0, 2, 3, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 '0' option", (char*)NULL, (void*) G__func2void( (void (*)(const char*, Int_t))(&AliLog::WriteToFile) ), 0);
   G__memfunc_setup("IsDebugEnabled",1358,G__G__STEERBase_441_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&AliLog::IsDebugEnabled) ), 0);
   G__memfunc_setup("GetDebugLevel",1279,G__G__STEERBase_441_0_37, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"C - - 10 - module C - - 10 - className", (char*)NULL, (void*) G__func2void( (Int_t (*)(const char*, const char*))(&AliLog::GetDebugLevel) ), 0);
   G__memfunc_setup("Message",709,G__G__STEERBase_441_0_38, 121, -1, -1, 0, 7, 3, 1, 0, 
"h - 'UInt_t' 0 - level C - - 10 - message "
"C - - 10 - module C - - 10 - className "
"C - - 10 - function C - - 10 - file "
"i - 'Int_t' 0 - line", (char*)NULL, (void*) G__func2void( (void (*)(UInt_t, const char*, const char*, const char*, const char*, const char*, Int_t))(&AliLog::Message) ), 0);
   G__memfunc_setup("Debug",487,G__G__STEERBase_441_0_39, 121, -1, -1, 0, 7, 3, 1, 0, 
"h - 'UInt_t' 0 - level C - - 10 - message "
"C - - 10 - module C - - 10 - className "
"C - - 10 - function C - - 10 - file "
"i - 'Int_t' 0 - line", (char*)NULL, (void*) G__func2void( (void (*)(UInt_t, const char*, const char*, const char*, const char*, const char*, Int_t))(&AliLog::Debug) ), 0);
   G__memfunc_setup("RedirectStdoutTo",1656,G__G__STEERBase_441_0_40, 105, -1, G__defined_typename("Int_t"), 0, 8, 3, 1, 0, 
"i 'AliLog::EType_t' - 0 - type h - 'UInt_t' 0 - level "
"C - - 10 - module C - - 10 - className "
"C - - 10 - function C - - 10 - file "
"i - 'Int_t' 0 - line g - 'Bool_t' 0 - print", (char*)NULL, (void*) G__func2void( (Int_t (*)(AliLog::EType_t, UInt_t, const char*, const char*, const char*, const char*, Int_t, Bool_t))(&AliLog::RedirectStdoutTo) ), 0);
   G__memfunc_setup("RedirectStderrTo",1641,G__G__STEERBase_441_0_41, 105, -1, G__defined_typename("Int_t"), 0, 8, 3, 1, 0, 
"i 'AliLog::EType_t' - 0 - type h - 'UInt_t' 0 - level "
"C - - 10 - module C - - 10 - className "
"C - - 10 - function C - - 10 - file "
"i - 'Int_t' 0 - line g - 'Bool_t' 0 - print", (char*)NULL, (void*) G__func2void( (Int_t (*)(AliLog::EType_t, UInt_t, const char*, const char*, const char*, const char*, Int_t, Bool_t))(&AliLog::RedirectStderrTo) ), 0);
   G__memfunc_setup("RestoreStdout",1383,G__G__STEERBase_441_0_42, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - original", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&AliLog::RestoreStdout) ), 0);
   G__memfunc_setup("RestoreStderr",1368,G__G__STEERBase_441_0_43, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - original", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&AliLog::RestoreStderr) ), 0);
   G__memfunc_setup("Stream",620,G__G__STEERBase_441_0_44, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 7, 3, 1, 0, 
"i 'AliLog::EType_t' - 0 - type h - 'UInt_t' 0 - level "
"C - - 10 - module C - - 10 - className "
"C - - 10 - function C - - 10 - file "
"i - 'Int_t' 0 - line", (char*)NULL, (void*) G__func2void( (ostream& (*)(AliLog::EType_t, UInt_t, const char*, const char*, const char*, const char*, Int_t))(&AliLog::Stream) ), 0);
   G__memfunc_setup("TestException",1359,G__G__STEERBase_441_0_45, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 '10' level", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&AliLog::TestException) ), 0);
   G__memfunc_setup("AliLog",568,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliLog), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliLog",568,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliLog), -1, 0, 1, 1, 4, 0, "u 'AliLog' - 11 - log", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliLog), -1, 1, 1, 1, 4, 0, "u 'AliLog' - 11 - log", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnvSettings",1526,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RootErrorHandler",1644,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 3, 4, 0, 
"i - 'Int_t' 0 - level g - 'Bool_t' 0 - abort "
"C - - 10 - location C - - 10 - message", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseFile",886,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOutputStream",1565,(G__InterfaceMethod) NULL, 69, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLogLevel",1082,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 4, 8, 
"C - - 10 - module C - - 10 - className", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintMessage",1234,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 7, 1, 4, 0, 
"h - 'UInt_t' 0 - type C - - 10 - message "
"C - - 10 - module C - - 10 - className "
"C - - 10 - function C - - 10 - file "
"i - 'Int_t' 0 - line", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintString",1156,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 8, 4, 0, 
"i - 'Int_t' 0 - type E - - 0 - stream "
"C - - 10 - format", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintRepetitions",1699,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RedirectTo",1013,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 9, 1, 4, 0, 
"E - - 0 - stream i 'AliLog::EType_t' - 0 - type "
"h - 'UInt_t' 0 - level C - - 10 - module "
"C - - 10 - className C - - 10 - function "
"C - - 10 - file i - 'Int_t' 0 - line "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStream",908,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 7, 1, 4, 0, 
"i 'AliLog::EType_t' - 0 - type h - 'UInt_t' 0 - level "
"C - - 10 - module C - - 10 - className "
"C - - 10 - function C - - 10 - file "
"i - 'Int_t' 0 - line", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_441_0_59, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliLog::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_441_0_60, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliLog::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_441_0_61, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliLog::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_441_0_62, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliLog::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_441_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_441_0_67, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliLog::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_441_0_68, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliLog::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_441_0_69, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliLog::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_441_0_70, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliLog::DeclFileLine) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliCodeTimer(void) {
   /* AliCodeTimer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimer));
   G__memfunc_setup("AliCodeTimer",1170,G__G__STEERBase_446_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__STEERBase_446_0_2, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimer), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (AliCodeTimer* (*)())(&AliCodeTimer::Instance) ), 0);
   G__memfunc_setup("Continue",837,G__G__STEERBase_446_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - classname C - - 10 - methodname "
"C - - 10 '\"\"' message", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CpuTime",695,G__G__STEERBase_446_0_4, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"C - - 10 - classname C - - 10 - methodname "
"C - - 10 '\"\"' message", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RealTime",787,G__G__STEERBase_446_0_6, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"C - - 10 - classname C - - 10 - methodname "
"C - - 10 '\"\"' message", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__STEERBase_446_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Start",526,G__G__STEERBase_446_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - classname C - - 10 - methodname "
"C - - 10 '\"\"' message", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stop",422,G__G__STEERBase_446_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - classname C - - 10 - methodname "
"C - - 10 '\"\"' message", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MethodMap",895,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TMap), -1, 0, 1, 1, 4, 8, "C - - 10 - classname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MessageArray",1220,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray), -1, 0, 2, 1, 4, 8, 
"C - - 10 - classname C - - 10 - methodname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stopwatch",957,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TStopwatch), -1, 0, 3, 1, 4, 8, 
"C - - 10 - classname C - - 10 - methodname "
"C - - 10 '\"\"' message", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintClass",1027,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "C - - 10 - classname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintMethod",1134,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"C - - 10 - classname C - - 10 - methodname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCodeTimer",1170,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimer), -1, 0, 1, 1, 4, 0, "u 'AliCodeTimer' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimer), -1, 1, 1, 1, 4, 0, "u 'AliCodeTimer' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_446_0_17, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliCodeTimer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_446_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCodeTimer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_446_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliCodeTimer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_446_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliCodeTimer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_446_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_446_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCodeTimer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_446_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCodeTimer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_446_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCodeTimer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_446_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCodeTimer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliCodeTimer", 1296, G__G__STEERBase_446_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliCodeTimercLcLAliPair(void) {
   /* AliCodeTimer::AliPair */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimercLcLAliPair));
   G__memfunc_setup("AliPair",674,G__G__STEERBase_447_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimercLcLAliPair), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliPair",674,G__G__STEERBase_447_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimercLcLAliPair), -1, 0, 2, 1, 1, 0, 
"U 'TObjString' - 0 - name U 'TStopwatch' - 0 - timer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Name",385,G__G__STEERBase_447_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Timer",513,G__G__STEERBase_447_0_4, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TStopwatch), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - object", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AliPair",674,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimercLcLAliPair), -1, 0, 1, 1, 4, 0, "u 'AliCodeTimer::AliPair' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCodeTimercLcLAliPair), -1, 1, 1, 1, 4, 0, "u 'AliCodeTimer::AliPair' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_447_0_10, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliCodeTimer::AliPair::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_447_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCodeTimer::AliPair::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_447_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliCodeTimer::AliPair::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_447_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliCodeTimer::AliPair::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_447_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_447_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCodeTimer::AliPair::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_447_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCodeTimer::AliPair::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_447_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCodeTimer::AliPair::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_447_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCodeTimer::AliPair::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliPair", 800, G__G__STEERBase_447_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliCollisionGeometry(void) {
   /* AliCollisionGeometry */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCollisionGeometry));
   G__memfunc_setup("AliCollisionGeometry",2062,G__G__STEERBase_449_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCollisionGeometry), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCollisionGeometry",2062,G__G__STEERBase_449_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCollisionGeometry), -1, 0, 1, 1, 1, 0, "u 'AliCollisionGeometry' - 11 - cgeo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ImpactParameter",1535,G__G__STEERBase_449_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReactionPlaneAngle",1804,G__G__STEERBase_449_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HardScatters",1224,G__G__STEERBase_449_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProjectileParticipants",2307,G__G__STEERBase_449_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TargetParticipants",1881,G__G__STEERBase_449_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProjSpectatorsn",1585,G__G__STEERBase_449_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProjSpectatorsp",1587,G__G__STEERBase_449_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TargSpectatorsn",1572,G__G__STEERBase_449_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TargSpectatorsp",1574,G__G__STEERBase_449_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NN",156,G__G__STEERBase_449_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NNw",275,G__G__STEERBase_449_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NwN",275,G__G__STEERBase_449_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NwNw",394,G__G__STEERBase_449_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNDiffractive",1505,G__G__STEERBase_449_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sd1 i - 'Int_t' 0 - sd2 "
"i - 'Int_t' 0 - sdd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImpactParameter",1835,G__G__STEERBase_449_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetReactionPlaneAngle",2104,G__G__STEERBase_449_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHardScatters",1524,G__G__STEERBase_449_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParticipants",1566,G__G__STEERBase_449_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - np i - 'Int_t' 0 - nt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCollisions",1355,G__G__STEERBase_449_0_21, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nn i - 'Int_t' 0 - nnw "
"i - 'Int_t' 0 - nwn i - 'Int_t' 0 - nwnw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpectators",1364,G__G__STEERBase_449_0_22, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nprojspecn i - 'Int_t' 0 - nprojspecp "
"i - 'Int_t' 0 - ntargspecn i - 'Int_t' 0 - ntargspecp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNDiffractive",1493,G__G__STEERBase_449_0_23, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 1 - sd1 i - 'Int_t' 1 - sd2 "
"i - 'Int_t' 1 - sdd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCollisionGeometry), -1, 1, 1, 1, 4, 0, "u 'AliCollisionGeometry' - 11 - cg", "Not implemented", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_449_0_25, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliCollisionGeometry::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_449_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCollisionGeometry::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_449_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliCollisionGeometry::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_449_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliCollisionGeometry::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__STEERBase_449_0_29, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__STEERBase_449_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__STEERBase_449_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_449_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_449_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCollisionGeometry::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_449_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCollisionGeometry::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_449_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCollisionGeometry::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_449_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCollisionGeometry::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliCollisionGeometry", 2188, G__G__STEERBase_449_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliCounterCollection(void) {
   /* AliCounterCollection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliCounterCollection));
   G__memfunc_setup("AliCounterCollection",2050,G__G__STEERBase_455_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCounterCollection), -1, 0, 1, 1, 1, 0, "C - - 10 '\"counters\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddRubric",880,G__G__STEERBase_455_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name u 'TString' - 0 - listOfKeyWords", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRubric",880,G__G__STEERBase_455_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 - maxNKeyWords", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__G__STEERBase_455_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' weightedCounters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKeyWords",1112,G__G__STEERBase_455_0_6, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 1, 1, 1, 8, "u 'TString' - 0 - rubric", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Count",521,G__G__STEERBase_455_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - externalKey i - 'Int_t' 0 '1' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Count",521,G__G__STEERBase_455_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - externalKey d - 'Double_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSum",597,G__G__STEERBase_455_0_9, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 '\"\"' selections G - 'Bool_t' 0 '0x0' longCounters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G__G__STEERBase_455_0_10, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH1D), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - rubric1 u 'TString' - 0 - selections", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G__G__STEERBase_455_0_11, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH2D), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - rubric1 u 'TString' - 0 - rubric2 "
"u 'TString' - 0 - selections", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintKeyWords",1349,G__G__STEERBase_455_0_13, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintValue",1034,G__G__STEERBase_455_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - selections", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__G__STEERBase_455_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - rubrics u 'TString' - 0 - selections "
"g - 'Bool_t' 0 'kFALSE' removeEmpty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintSum",834,G__G__STEERBase_455_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' selections", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,G__G__STEERBase_455_0_18, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH1D), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - rubric1 u 'TString' - 0 - selections", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,G__G__STEERBase_455_0_19, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH2D), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - rubric1 u 'TString' - 0 - rubric2 "
"u 'TString' - 0 - selections", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__G__STEERBase_455_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliCounterCollection' - 10 - counter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__G__STEERBase_455_0_21, 110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sort",424,G__G__STEERBase_455_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Option_t' 10 '\"\"' opt g - 'Bool_t' 0 'kFALSE' asInt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SortRubric",1039,G__G__STEERBase_455_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - rubric g - 'Bool_t' 0 'kFALSE' asInt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliCounterCollection",2050,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCounterCollection), -1, 0, 1, 1, 4, 0, "u 'AliCounterCollection' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCounterCollection), -1, 1, 1, 1, 4, 0, "u 'AliCounterCollection' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNActiveBins",1366,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ContainsAny",1127,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindBins",781,(G__InterfaceMethod) NULL, 73, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 1, 
"u 'TString' - 11 - externalKey g - 'Bool_t' 0 - allocate "
"i - 'Int_t' 1 - nEmptySlots", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindDim",667,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "u 'TString' - 11 - rubricName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindBin",666,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - dim u 'TString' - 11 - keyWord "
"g - 'Bool_t' 0 - allocate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DecodeSelection",1514,(G__InterfaceMethod) NULL, 83, -1, G__defined_typename("Short_t"), 2, 2, 1, 4, 0, 
"u 'TString' - 11 - selections u 'TObjArray' - 11 - displayedRubrics", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Select",608,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 4, 0, 
"g - 'Bool_t' 0 - include u 'TString' - 11 - rubric "
"u 'TString' - 11 - keywords g - 'Bool_t' 0 - displayed "
"S - 'Short_t' 2 - selectBins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanListOfStrings",1822,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TObjArray' - 0 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CountAsDouble",1304,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'TString' - 0 - externalKey d - 'Double_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintList",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 8, 
"U 'TH1D' - 10 - hist g - 'Bool_t' 0 - removeEmpty "
"g - 'Bool_t' 0 - longCounters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintArray",1036,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 8, 
"U 'TH2D' - 10 - hist g - 'Bool_t' 0 - removeEmpty "
"g - 'Bool_t' 0 - longCounters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintListOfArrays",1744,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 8, 
"U 'THnSparse' - 10 - hist g - 'Bool_t' 0 - removeEmpty "
"g - 'Bool_t' 0 - longCounters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxLabelSize",1473,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "U 'THashList' - 0 - labels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Projection",1053,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 3, 1, 4, 0, 
"u 'TObjArray' - 11 - data u 'TString' - 11 - selections "
"g - 'Bool_t' 1 - longCounters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckConsistency",1648,(G__InterfaceMethod) NULL, 73, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'AliCounterCollection' - 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sort",424,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"G - 'Bool_t' 10 - rubricsToSort g - 'Bool_t' 0 - asInt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SortAsInt",903,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_THashList), -1, 0, 1, 1, 4, 0, "U 'THashList' - 10 - labels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConvertToTHnSparseL",1896,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'THnSparse' - 1 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_455_0_44, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliCounterCollection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_455_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCounterCollection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_455_0_46, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliCounterCollection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_455_0_47, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliCounterCollection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_455_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_455_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCounterCollection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_455_0_53, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCounterCollection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_455_0_54, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCounterCollection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_455_0_55, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCounterCollection::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliCounterCollection", 2176, G__G__STEERBase_455_0_56, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliDAQ(void) {
   /* AliDAQ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQ));
   G__memfunc_setup("AliDAQ",492,G__G__STEERBase_456_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQ), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliDAQ",492,G__G__STEERBase_456_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQ), -1, 0, 1, 1, 1, 0, "u 'AliDAQ' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_456_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDAQ), -1, 1, 1, 1, 1, 0, "u 'AliDAQ' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DetectorID",967,G__G__STEERBase_456_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "C - - 10 - detectorName", (char*)NULL, (void*) G__func2void( (Int_t (*)(const char*))(&AliDAQ::DetectorID) ), 0);
   G__memfunc_setup("DetectorName",1211,G__G__STEERBase_456_0_5, 67, -1, -1, 0, 1, 3, 1, 1, "i - 'Int_t' 0 - detectorID", (char*)NULL, (void*) G__func2void( (const char* (*)(Int_t))(&AliDAQ::DetectorName) ), 0);
   G__memfunc_setup("DdlIDOffset",1032,G__G__STEERBase_456_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "C - - 10 - detectorName", (char*)NULL, (void*) G__func2void( (Int_t (*)(const char*))(&AliDAQ::DdlIDOffset) ), 0);
   G__memfunc_setup("DdlIDOffset",1032,G__G__STEERBase_456_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - detectorID", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t))(&AliDAQ::DdlIDOffset) ), 0);
   G__memfunc_setup("DetectorNameFromDdlID",2032,G__G__STEERBase_456_0_8, 67, -1, -1, 0, 2, 3, 1, 1, 
"i - 'Int_t' 0 - ddlID i - 'Int_t' 1 - ddlIndex", (char*)NULL, (void*) G__func2void( (const char* (*)(Int_t, Int_t&))(&AliDAQ::DetectorNameFromDdlID) ), 0);
   G__memfunc_setup("DetectorIDFromDdlID",1788,G__G__STEERBase_456_0_9, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - ddlID i - 'Int_t' 1 - ddlIndex", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, Int_t&))(&AliDAQ::DetectorIDFromDdlID) ), 0);
   G__memfunc_setup("DdlID",417,G__G__STEERBase_456_0_10, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"C - - 10 - detectorName i - 'Int_t' 0 - ddlIndex", (char*)NULL, (void*) G__func2void( (Int_t (*)(const char*, Int_t))(&AliDAQ::DdlID) ), 0);
   G__memfunc_setup("DdlID",417,G__G__STEERBase_456_0_11, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - detectorID i - 'Int_t' 0 - ddlIndex", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, Int_t))(&AliDAQ::DdlID) ), 0);
   G__memfunc_setup("DdlFileName",1045,G__G__STEERBase_456_0_12, 67, -1, -1, 0, 2, 3, 1, 1, 
"C - - 10 - detectorName i - 'Int_t' 0 - ddlIndex", (char*)NULL, (void*) G__func2void( (const char* (*)(const char*, Int_t))(&AliDAQ::DdlFileName) ), 0);
   G__memfunc_setup("DdlFileName",1045,G__G__STEERBase_456_0_13, 67, -1, -1, 0, 2, 3, 1, 1, 
"i - 'Int_t' 0 - detectorID i - 'Int_t' 0 - ddlIndex", (char*)NULL, (void*) G__func2void( (const char* (*)(Int_t, Int_t))(&AliDAQ::DdlFileName) ), 0);
   G__memfunc_setup("NumberOfDdls",1189,G__G__STEERBase_456_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "C - - 10 - detectorName", (char*)NULL, (void*) G__func2void( (Int_t (*)(const char*))(&AliDAQ::NumberOfDdls) ), 0);
   G__memfunc_setup("NumberOfDdls",1189,G__G__STEERBase_456_0_15, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - detectorID", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t))(&AliDAQ::NumberOfDdls) ), 0);
   G__memfunc_setup("NumberOfLdcs",1188,G__G__STEERBase_456_0_16, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "C - - 10 - detectorName", (char*)NULL, (void*) G__func2void( (Float_t (*)(const char*))(&AliDAQ::NumberOfLdcs) ), 0);
   G__memfunc_setup("NumberOfLdcs",1188,G__G__STEERBase_456_0_17, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - detectorID", (char*)NULL, (void*) G__func2void( (Float_t (*)(Int_t))(&AliDAQ::NumberOfLdcs) ), 0);
   G__memfunc_setup("PrintConfig",1123,G__G__STEERBase_456_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliDAQ::PrintConfig) ), 0);
   G__memfunc_setup("ListOfTriggeredDetectors",2459,G__G__STEERBase_456_0_19, 67, -1, -1, 0, 1, 3, 1, 1, "h - 'UInt_t' 0 - detectorPattern", (char*)NULL, (void*) G__func2void( (const char* (*)(UInt_t))(&AliDAQ::ListOfTriggeredDetectors) ), 0);
   G__memfunc_setup("DetectorPattern",1560,G__G__STEERBase_456_0_20, 104, -1, G__defined_typename("UInt_t"), 0, 1, 3, 1, 0, "C - - 10 - detectorList", (char*)NULL, (void*) G__func2void( (UInt_t (*)(const char*))(&AliDAQ::DetectorPattern) ), 0);
   G__memfunc_setup("DetectorPatternOffline",2267,G__G__STEERBase_456_0_21, 104, -1, G__defined_typename("UInt_t"), 0, 1, 3, 1, 0, "C - - 10 - detectorList", (char*)NULL, (void*) G__func2void( (UInt_t (*)(const char*))(&AliDAQ::DetectorPatternOffline) ), 0);
   G__memfunc_setup("OfflineModuleName",1706,G__G__STEERBase_456_0_22, 67, -1, -1, 0, 1, 3, 1, 1, "C - - 10 - detectorName", (char*)NULL, (void*) G__func2void( (const char* (*)(const char*))(&AliDAQ::OfflineModuleName) ), 0);
   G__memfunc_setup("OfflineModuleName",1706,G__G__STEERBase_456_0_23, 67, -1, -1, 0, 1, 3, 1, 1, "i - 'Int_t' 0 - detectorID", (char*)NULL, (void*) G__func2void( (const char* (*)(Int_t))(&AliDAQ::OfflineModuleName) ), 0);
   G__memfunc_setup("OnlineName",998,G__G__STEERBase_456_0_24, 67, -1, -1, 0, 1, 3, 1, 1, "C - - 10 - detectorName", (char*)NULL, (void*) G__func2void( (const char* (*)(const char*))(&AliDAQ::OnlineName) ), 0);
   G__memfunc_setup("OnlineName",998,G__G__STEERBase_456_0_25, 67, -1, -1, 0, 1, 3, 1, 1, "i - 'Int_t' 0 - detectorID", (char*)NULL, (void*) G__func2void( (const char* (*)(Int_t))(&AliDAQ::OnlineName) ), 0);
   G__memfunc_setup("SetRun1",658,G__G__STEERBase_456_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliDAQ::SetRun1) ), 0);
   G__memfunc_setup("SetRun2",659,G__G__STEERBase_456_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliDAQ::SetRun2) ), 0);
   G__memfunc_setup("GetRunPeriod",1208,G__G__STEERBase_456_0_28, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&AliDAQ::GetRunPeriod) ), 0);
   G__memfunc_setup("GetFirstSTUDDL",1272,G__G__STEERBase_456_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&AliDAQ::GetFirstSTUDDL) ), 0);
   G__memfunc_setup("GetLastSTUDDL",1156,G__G__STEERBase_456_0_30, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&AliDAQ::GetLastSTUDDL) ), 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_456_0_31, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliDAQ::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_456_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDAQ::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_456_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliDAQ::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_456_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliDAQ::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_456_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_456_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDAQ::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_456_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliDAQ::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_456_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDAQ::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_456_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliDAQ::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliDAQ", 618, G__G__STEERBase_456_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliDataFile(void) {
   /* AliDataFile */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDataFile));
   G__memfunc_setup("GetFileName",1057,G__G__STEERBase_493_0_1, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_string), -1, 0, 1, 3, 1, 0, "u 'string' - 11 - url", (char*)NULL, (void*) G__func2void( (string (*)(const string&))(&AliDataFile::GetFileName) ), 0);
   G__memfunc_setup("GetFileNameOADB",1335,G__G__STEERBase_493_0_2, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_string), -1, 0, 1, 3, 1, 0, "u 'string' - 11 - url", (char*)NULL, (void*) G__func2void( (string (*)(const string&))(&AliDataFile::GetFileNameOADB) ), 0);
   G__memfunc_setup("Open",402,G__G__STEERBase_493_0_3, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TFile), -1, 0, 2, 3, 1, 0, 
"u 'string' - 11 - url C - 'Option_t' 10 '\"\"' opts", (char*)NULL, (void*) G__func2void( (TFile* (*)(const string&, Option_t*))(&AliDataFile::Open) ), 0);
   G__memfunc_setup("OpenOADB",680,G__G__STEERBase_493_0_4, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TFile), -1, 0, 2, 3, 1, 0, 
"u 'string' - 11 - url C - 'Option_t' 10 '\"\"' opts", (char*)NULL, (void*) G__func2void( (TFile* (*)(const string&, Option_t*))(&AliDataFile::OpenOADB) ), 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_493_0_5, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliDataFile::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_493_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDataFile::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_493_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliDataFile::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_493_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliDataFile::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__STEERBase_493_0_9, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__STEERBase_493_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__STEERBase_493_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_493_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_493_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDataFile::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_493_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliDataFile::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_493_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDataFile::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_493_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliDataFile::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("AliDataFile", 1040, G__G__STEERBase_493_0_17, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliDataFile), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("AliDataFile", 1040, G__G__STEERBase_493_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliDataFile), -1, 0, 1, 1, 1, 0, "u 'AliDataFile' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliDataFile", 1166, G__G__STEERBase_493_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_493_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliDataFile), -1, 1, 1, 1, 1, 0, "u 'AliDataFile' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliDetectorEventHeader(void) {
   /* AliDetectorEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorEventHeader));
   G__memfunc_setup("AliDetectorEventHeader",2203,G__G__STEERBase_494_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorEventHeader), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliDetectorEventHeader",2203,G__G__STEERBase_494_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_494_0_3, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliDetectorEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_494_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDetectorEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_494_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliDetectorEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_494_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliDetectorEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_494_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_494_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDetectorEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_494_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliDetectorEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_494_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDetectorEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_494_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliDetectorEventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliDetectorEventHeader", 2203, G__G__STEERBase_494_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorEventHeader), -1, 0, 1, 1, 1, 0, "u 'AliDetectorEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliDetectorEventHeader", 2329, G__G__STEERBase_494_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_494_0_17, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorEventHeader), -1, 1, 1, 1, 1, 0, "u 'AliDetectorEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliPID(void) {
   /* AliPID */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPID));
   G__memfunc_setup("ParticleCharge",1406,G__G__STEERBase_496_0_1, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - iType", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t))(&AliPID::ParticleCharge) ), 0);
   G__memfunc_setup("ParticleMass",1224,G__G__STEERBase_496_0_2, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - iType", (char*)NULL, (void*) G__func2void( (Float_t (*)(Int_t))(&AliPID::ParticleMass) ), 0);
   G__memfunc_setup("ParticleMassZ",1314,G__G__STEERBase_496_0_3, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - iType", (char*)NULL, (void*) G__func2void( (Float_t (*)(Int_t))(&AliPID::ParticleMassZ) ), 0);
   G__memfunc_setup("ParticleName",1205,G__G__STEERBase_496_0_4, 67, -1, -1, 0, 1, 3, 1, 1, "i - 'Int_t' 0 - iType", (char*)NULL, (void*) G__func2void( (const char* (*)(Int_t))(&AliPID::ParticleName) ), 0);
   G__memfunc_setup("ParticleShortName",1733,G__G__STEERBase_496_0_5, 67, -1, -1, 0, 1, 3, 1, 1, "i - 'Int_t' 0 - iType", (char*)NULL, (void*) G__func2void( (const char* (*)(Int_t))(&AliPID::ParticleShortName) ), 0);
   G__memfunc_setup("ParticleLatexName",1715,G__G__STEERBase_496_0_6, 67, -1, -1, 0, 1, 3, 1, 1, "i - 'Int_t' 0 - iType", (char*)NULL, (void*) G__func2void( (const char* (*)(Int_t))(&AliPID::ParticleLatexName) ), 0);
   G__memfunc_setup("ParticleCode",1199,G__G__STEERBase_496_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - iType", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t))(&AliPID::ParticleCode) ), 0);
   G__memfunc_setup("AliPID",499,G__G__STEERBase_496_0_8, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPID), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliPID",499,G__G__STEERBase_496_0_9, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPID), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - probDensity g - 'Bool_t' 0 'kTRUE' charged", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliPID",499,G__G__STEERBase_496_0_10, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPID), -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 10 - probDensity g - 'Bool_t' 0 'kTRUE' charged", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliPID",499,G__G__STEERBase_496_0_11, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPID), -1, 0, 1, 1, 1, 0, "u 'AliPID' - 11 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_496_0_12, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPID), -1, 1, 1, 1, 1, 0, "u 'AliPID' - 11 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProbability",1441,G__G__STEERBase_496_0_13, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i 'AliPID::EParticleType' - 0 - iType D - 'Double_t' 10 - prior", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProbability",1441,G__G__STEERBase_496_0_14, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i 'AliPID::EParticleType' - 0 - iType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProbabilities",1641,G__G__STEERBase_496_0_15, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 0 - probabilities D - 'Double_t' 10 - prior", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProbabilities",1641,G__G__STEERBase_496_0_16, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - probabilities", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMostProbable",1514,G__G__STEERBase_496_0_17, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType), -1, 0, 1, 1, 1, 8, "D - 'Double_t' 10 - prior", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMostProbable",1514,G__G__STEERBase_496_0_18, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDcLcLEParticleType), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProbabilities",1653,G__G__STEERBase_496_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - probabilities g - 'Bool_t' 0 'kTRUE' charged", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPriors",939,G__G__STEERBase_496_0_20, 121, -1, -1, 0, 2, 3, 1, 0, 
"D - 'Double_t' 10 - prior g - 'Bool_t' 0 'kTRUE' charged", (char*)NULL, (void*) G__func2void( (void (*)(const Double_t*, Bool_t))(&AliPID::SetPriors) ), 0);
   G__memfunc_setup("SetPrior",824,G__G__STEERBase_496_0_21, 121, -1, -1, 0, 2, 3, 1, 0, 
"i 'AliPID::EParticleType' - 0 - iType d - 'Double_t' 0 - prior", (char*)NULL, (void*) G__func2void( (void (*)(AliPID::EParticleType, Double_t))(&AliPID::SetPrior) ), 0);
   G__memfunc_setup("operator*=",979,G__G__STEERBase_496_0_22, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPID), -1, 1, 1, 1, 1, 0, "u 'AliPID' - 11 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 3, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_496_0_24, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliPID::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_496_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliPID::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_496_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliPID::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_496_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliPID::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_496_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_496_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliPID::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_496_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliPID::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_496_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliPID::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_496_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliPID::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliPID", 625, G__G__STEERBase_496_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVParticle(void) {
   /* AliVParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVParticle));
   G__memfunc_setup("operator=",937,G__G__STEERBase_500_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVParticle), -1, 1, 1, 1, 1, 0, "u 'AliVParticle' - 11 - vPart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Px",200,G__G__STEERBase_500_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Py",201,G__G__STEERBase_500_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Pz",202,G__G__STEERBase_500_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Pt",196,G__G__STEERBase_500_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("P",80,G__G__STEERBase_500_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("PxPyPz",603,G__G__STEERBase_500_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Xv",206,G__G__STEERBase_500_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Yv",207,G__G__STEERBase_500_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Zv",208,G__G__STEERBase_500_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("XvYvZv",621,G__G__STEERBase_500_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("OneOverPt",898,G__G__STEERBase_500_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Phi",289,G__G__STEERBase_500_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Theta",502,G__G__STEERBase_500_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("E",69,G__G__STEERBase_500_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("M",77,G__G__STEERBase_500_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Eta",282,G__G__STEERBase_500_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Y",89,G__G__STEERBase_500_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Charge",586,G__G__STEERBase_500_0_22, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetLabel",768,G__G__STEERBase_500_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("PdgCode",662,G__G__STEERBase_500_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("PID",221,G__G__STEERBase_500_0_25, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", "return PID object (to be defined, still)", (void*) NULL, 3);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsPrimary",928,G__G__STEERBase_500_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFlag",678,G__G__STEERBase_500_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFlag",666,G__G__STEERBase_500_0_30, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Local2GlobalMomentum",1984,G__G__STEERBase_500_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"D - 'Double_t' 0 - p d - 'Double_t' 0 - alpha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Local2GlobalPosition",1987,G__G__STEERBase_500_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"D - 'Double_t' 0 - r d - 'Double_t' 0 - alpha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Global2LocalMomentum",1984,G__G__STEERBase_500_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"D - 'Double_t' 0 - p s - 'Short_t' 0 - charge "
"d - 'Double_t' 1 - alpha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Global2LocalPosition",1987,G__G__STEERBase_500_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"D - 'Double_t' 0 - r d - 'Double_t' 0 - alpha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMother",911,G__G__STEERBase_500_0_35, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFirstDaughter",1628,G__G__STEERBase_500_0_36, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLastDaughter",1512,G__G__STEERBase_500_0_37, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetGeneratorIndex",1739,G__G__STEERBase_500_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGeneratorIndex",1727,G__G__STEERBase_500_0_39, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_500_0_40, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_500_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_500_0_42, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_500_0_43, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_500_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_500_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_500_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_500_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_500_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVParticle::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVParticle", 1310, G__G__STEERBase_500_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVEvent(void) {
   /* AliVEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent));
   G__memfunc_setup("operator=",937,G__G__STEERBase_503_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent), -1, 1, 1, 1, 1, 0, "u 'AliVEvent' - 11 - vEvnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddObject",864,G__G__STEERBase_503_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("FindListObject",1396,G__G__STEERBase_503_0_5, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetList",700,G__G__STEERBase_503_0_6, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CreateStdContent",1626,G__G__STEERBase_503_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetStdContent",1318,G__G__STEERBase_503_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ReadFromTree",1184,G__G__STEERBase_503_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("WriteToTree",1118,G__G__STEERBase_503_0_10, 121, -1, -1, 0, 1, 1, 1, 8, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Reset",515,G__G__STEERBase_503_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetStdNames",1099,G__G__STEERBase_503_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetHeader",873,G__G__STEERBase_503_0_14, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVHeader), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("InitMagneticField",1696,G__G__STEERBase_503_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRunNumber",1226,G__G__STEERBase_503_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetPeriodNumber",1528,G__G__STEERBase_503_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetMagneticField",1592,G__G__STEERBase_503_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - mf", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetRunNumber",1214,G__G__STEERBase_503_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetPeriodNumber",1516,G__G__STEERBase_503_0_20, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMagneticField",1580,G__G__STEERBase_503_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetDiamondX",1076,G__G__STEERBase_503_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDiamondY",1077,G__G__STEERBase_503_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDiamondCovXY",1461,G__G__STEERBase_503_0_24, 121, -1, -1, 0, 1, 1, 1, 8, "F - 'Float_t' 0 - cov", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOrbitNumber",1429,G__G__STEERBase_503_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetBunchCrossNumber",1935,G__G__STEERBase_503_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - n", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetEventType",1232,G__G__STEERBase_503_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - eventType", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetTriggerMask",1420,G__G__STEERBase_503_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - n", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetTriggerCluster",1762,G__G__STEERBase_503_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetOrbitNumber",1417,G__G__STEERBase_503_0_30, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetBunchCrossNumber",1923,G__G__STEERBase_503_0_31, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetEventType",1220,G__G__STEERBase_503_0_32, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTriggerMask",1408,G__G__STEERBase_503_0_33, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTriggerMaskNext50",1924,G__G__STEERBase_503_0_34, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerCluster",1750,G__G__STEERBase_503_0_35, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetFiredTriggerClasses",2220,G__G__STEERBase_503_0_36, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("IsTriggerClassFired",1904,G__G__STEERBase_503_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCN1Energy",1258,G__G__STEERBase_503_0_38, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZDCP1Energy",1260,G__G__STEERBase_503_0_39, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZDCN2Energy",1259,G__G__STEERBase_503_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZDCP2Energy",1261,G__G__STEERBase_503_0_41, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZDCEMEnergy",1277,G__G__STEERBase_503_0_42, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTrack",789,G__G__STEERBase_503_0_43, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVParticle), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetVTrack",875,G__G__STEERBase_503_0_44, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfTracks",1702,G__G__STEERBase_503_0_45, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNumberOfV0s",1335,G__G__STEERBase_503_0_46, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNumberOfCascades",1877,G__G__STEERBase_503_0_47, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTOFHeader",1106,G__G__STEERBase_503_0_48, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFHeader), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventTimeSpread",1808,G__G__STEERBase_503_0_49, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFTimeResolution",1996,G__G__STEERBase_503_0_50, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetT0TOF",653,G__G__STEERBase_503_0_51, 100, -1, G__defined_typename("Double32_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - icase", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetT0TOF",653,G__G__STEERBase_503_0_52, 68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetT0spread",1059,G__G__STEERBase_503_0_53, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCaloCluster",1409,G__G__STEERBase_503_0_54, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCluster), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfCaloClusters",2322,G__G__STEERBase_503_0_55, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEMCALClusters",1495,G__G__STEERBase_503_0_56, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TRefArray' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPHOSClusters",1455,G__G__STEERBase_503_0_57, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TRefArray' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEMCALCells",1141,G__G__STEERBase_503_0_58, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCells), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPHOSCells",1101,G__G__STEERBase_503_0_59, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCells), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPHOSMatrix",1231,G__G__STEERBase_503_0_60, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TGeoHMatrix), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEMCALMatrix",1271,G__G__STEERBase_503_0_61, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TGeoHMatrix), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCaloTrigger",1395,G__G__STEERBase_503_0_62, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloTrigger), -1, 0, 1, 1, 1, 8, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsPileupFromSPD",1446,G__G__STEERBase_503_0_63, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMultiplicity",1577,G__G__STEERBase_503_0_64, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMultiplicity), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfITSClusters",2179,G__G__STEERBase_503_0_65, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsPileupFromSPDInMultBins",2443,G__G__STEERBase_503_0_66, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCentrality",1343,G__G__STEERBase_503_0_67, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCentrality), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetEventplane",1330,G__G__STEERBase_503_0_68, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventplane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("EventIndex",1018,G__G__STEERBase_503_0_69, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - itrack", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("EventIndexForCaloCluster",2434,G__G__STEERBase_503_0_70, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - iclu", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("EventIndexForPHOSCell",2011,G__G__STEERBase_503_0_71, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - icell", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("EventIndexForEMCALCell",2051,G__G__STEERBase_503_0_72, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - icell", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetVZEROData",1072,G__G__STEERBase_503_0_73, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZERO), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetVZEROEqFactors",1598,G__G__STEERBase_503_0_74, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVZEROEqMultiplicity",2165,G__G__STEERBase_503_0_75, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVZEROEqFactors",1610,G__G__STEERBase_503_0_76, 121, -1, -1, 0, 1, 1, 1, 8, "F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCData",891,G__G__STEERBase_503_0_77, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVZDC), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetADData",799,G__G__STEERBase_503_0_78, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVAD), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfTrdTracks",2000,G__G__STEERBase_503_0_79, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrdTrack",1087,G__G__STEERBase_503_0_80, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrdTrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfESDTracks",1922,G__G__STEERBase_503_0_81, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventNumberInFile",1986,G__G__STEERBase_503_0_82, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetV0",422,G__G__STEERBase_503_0_83, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"u 'AliESDv0' - 1 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTimeStamp",1204,G__G__STEERBase_503_0_84, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindFriend",985,G__G__STEERBase_503_0_85, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVfriendEvent), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFriendEvent",1414,G__G__STEERBase_503_0_86, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliVfriendEvent' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventSpecie",1403,G__G__STEERBase_503_0_87, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetKink",685,G__G__STEERBase_503_0_88, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliESDkink), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfKinks",1598,G__G__STEERBase_503_0_89, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVZEROData",1072,G__G__STEERBase_503_0_90, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliESDVZERO' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMultiplicity",1577,G__G__STEERBase_503_0_91, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliMultiplicity' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrimaryVertex",1666,G__G__STEERBase_503_0_92, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrimaryVertexSPD",1897,G__G__STEERBase_503_0_93, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrimaryVertexTPC",1897,G__G__STEERBase_503_0_94, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrimaryVertexTracks",2282,G__G__STEERBase_503_0_95, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrimaryVertex",1666,G__G__STEERBase_503_0_96, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliESDVertex' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrimaryVertexTPC",1897,G__G__STEERBase_503_0_97, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliESDVertex' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrimaryVertexSPD",1897,G__G__STEERBase_503_0_98, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliESDVertex' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrimaryVertexTracks",2282,G__G__STEERBase_503_0_99, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliESDVertex' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsIncompleteDAQ",1442,G__G__STEERBase_503_0_100, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConnectTracks",1330,G__G__STEERBase_503_0_101, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDataLayoutType",1722,G__G__STEERBase_503_0_102, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEDataLayoutType), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Whoami",613,G__G__STEERBase_503_0_103, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__G__STEERBase_503_0_104, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_503_0_105, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_503_0_106, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_503_0_107, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_503_0_108, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_503_0_112, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_503_0_113, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_503_0_114, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_503_0_115, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_503_0_116, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVEvent", 1004, G__G__STEERBase_503_0_117, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVVertex(void) {
   /* AliVVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex));
   G__memfunc_setup("operator=",937,G__G__STEERBase_504_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex), -1, 1, 1, 1, 1, 0, "u 'AliVVertex' - 11 - vVert", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXYZ",555,G__G__STEERBase_504_0_4, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - position", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetX",376,G__G__STEERBase_504_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetY",377,G__G__STEERBase_504_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZ",378,G__G__STEERBase_504_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCovarianceMatrix",1936,G__G__STEERBase_504_0_8, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - covmatrix", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetChi2perNDF",1157,G__G__STEERBase_504_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetChi2",614,G__G__STEERBase_504_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNDF",504,G__G__STEERBase_504_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("IsFromVertexer3D",1564,G__G__STEERBase_504_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsFromVertexerZ",1535,G__G__STEERBase_504_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNContributors",1660,G__G__STEERBase_504_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetStatus",932,G__G__STEERBase_504_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintIndices",1228,G__G__STEERBase_504_0_16, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetBC",433,G__G__STEERBase_504_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBC",421,G__G__STEERBase_504_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_504_0_21, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_504_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_504_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_504_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_504_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_504_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_504_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_504_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_504_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVVertex::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVVertex", 1128, G__G__STEERBase_504_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliExternalTrackParam(void) {
   /* AliExternalTrackParam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam));
   G__memfunc_setup("AliExternalTrackParam",2111,G__G__STEERBase_506_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliExternalTrackParam",2111,G__G__STEERBase_506_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam), -1, 0, 1, 1, 1, 0, "u 'AliExternalTrackParam' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_506_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam), -1, 1, 1, 1, 1, 0, "u 'AliExternalTrackParam' - 11 - trkPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliExternalTrackParam",2111,G__G__STEERBase_506_0_4, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam), -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - alpha "
"D - 'Double_t' 10 - param D - 'Double_t' 10 - covar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliExternalTrackParam",2111,G__G__STEERBase_506_0_5, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam), -1, 0, 4, 1, 1, 0, 
"D - 'Double_t' 0 - xyz D - 'Double_t' 0 - pxpypz "
"D - 'Double_t' 0 - cv s - 'Short_t' 0 - sign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliExternalTrackParam",2111,G__G__STEERBase_506_0_6, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam), -1, 0, 1, 1, 1, 0, "u 'AliVConstructorReinitialisationFlag' 'AliVConstructorReinitialisationFlag' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reinitialize",1257,G__G__STEERBase_506_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyFromVTrack",1402,G__G__STEERBase_506_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliVTrack' - 10 - vTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParamOnly",1215,G__G__STEERBase_506_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - x d - - 0 - alpha "
"D - - 10 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__STEERBase_506_0_10, 121, -1, -1, 0, 4, 1, 1, 0, 
"D - 'Double_t' 0 - xyz D - 'Double_t' 0 - pxpypz "
"D - 'Double_t' 0 - cv s - 'Short_t' 0 - sign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMostProbablePt",1722,G__G__STEERBase_506_0_11, 121, -1, -1, 0, 1, 3, 1, 0, "d - 'Double_t' 0 - pt", (char*)NULL, (void*) G__func2void( (void (*)(Double_t))(&AliExternalTrackParam::SetMostProbablePt) ), 0);
   G__memfunc_setup("GetMostProbablePt",1710,G__G__STEERBase_506_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Double_t (*)())(&AliExternalTrackParam::GetMostProbablePt) ), 0);
   G__memfunc_setup("Reset",515,G__G__STEERBase_506_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetCovariance",1534,G__G__STEERBase_506_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCovariance",1284,G__G__STEERBase_506_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameter",1217,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCovariance",1307,G__G__STEERBase_506_0_17, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsStartedTimeIntegral",2136,G__G__STEERBase_506_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddTimeStep",1076,G__G__STEERBase_506_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", "dummy method, real stuff is done in AliKalmanTrack", (void*) NULL, 1);
   G__memfunc_setup("GetAlpha",774,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetX",376,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetY",377,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZ",378,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSnp",593,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTgl",583,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetImpactParameters",1938,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 1 - - f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSigned1Pt",1135,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSigmaY2",924,G__G__STEERBase_506_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaZY",964,G__G__STEERBase_506_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaZ2",925,G__G__STEERBase_506_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaSnpY",1179,G__G__STEERBase_506_0_31, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaSnpZ",1180,G__G__STEERBase_506_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaSnp2",1140,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSigmaTglY",1169,G__G__STEERBase_506_0_34, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaTglZ",1170,G__G__STEERBase_506_0_35, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaTglSnp",1385,G__G__STEERBase_506_0_36, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaTgl2",1130,G__G__STEERBase_506_0_37, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma1PtY",1119,G__G__STEERBase_506_0_38, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma1PtZ",1120,G__G__STEERBase_506_0_39, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma1PtSnp",1335,G__G__STEERBase_506_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma1PtTgl",1325,G__G__STEERBase_506_0_41, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma1Pt2",1080,G__G__STEERBase_506_0_42, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Px",200,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Py",201,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Pz",202,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Pt",196,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("P",80,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PxPyPz",603,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Xv",206,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Yv",207,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Zv",208,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("XvYvZv",621,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OneOverPt",898,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Phi",289,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PhiPos",595,G__G__STEERBase_506_0_55, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Theta",502,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("E",69,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("M",77,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Eta",282,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Y",89,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Charge",586,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PID",221,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetID",429,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetITSClusterMap",1552,(G__InterfaceMethod) NULL,98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStatus",932,(G__InterfaceMethod) NULL,107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSign",689,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetP",368,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSignedPt",1086,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Get1P",417,G__G__STEERBase_506_0_69, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetC",355,G__G__STEERBase_506_0_70, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDZ",446,(G__InterfaceMethod) NULL,121, -1, -1, 0, 5, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z d - 'Double_t' 0 - b "
"F - 'Float_t' 0 - dz", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetD",356,G__G__STEERBase_506_0_72, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - xv d - 'Double_t' 0 - yv "
"d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLinearD",959,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - xv d - 'Double_t' 0 - yv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CorrectForMeanMaterial",2217,G__G__STEERBase_506_0_74, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"d - 'Double_t' 0 - xOverX0 d - 'Double_t' 0 - xTimesRho "
"d - 'Double_t' 0 - mass g - 'Bool_t' 0 'kFALSE' anglecorr "
"1 - 'Double_t (*)(Double_t)' 0 'AliExternalTrackParam::BetheBlochSolid' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectForMeanMaterialdEdx",2606,G__G__STEERBase_506_0_75, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"d - 'Double_t' 0 - xOverX0 d - 'Double_t' 0 - xTimesRho "
"d - 'Double_t' 0 - mass d - 'Double_t' 0 - dEdx "
"g - 'Bool_t' 0 'kFALSE' anglecorr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectForMeanMaterialZA",2372,G__G__STEERBase_506_0_76, 103, -1, G__defined_typename("Bool_t"), 0, 9, 1, 1, 0, 
"d - 'Double_t' 0 - xOverX0 d - 'Double_t' 0 - xTimesRho "
"d - 'Double_t' 0 - mass d - 'Double_t' 0 '0.49848' zOverA "
"d - 'Double_t' 0 '2.33' density d - 'Double_t' 0 '173e-9' exEnergy "
"d - 'Double_t' 0 '0.20' jp1 d - 'Double_t' 0 '3.00' jp2 "
"g - 'Bool_t' 0 'kFALSE' anglecorr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BetheBlochAleph",1466,G__G__STEERBase_506_0_77, 100, -1, G__defined_typename("Double_t"), 0, 6, 3, 1, 0, 
"d - 'Double_t' 0 - bg d - 'Double_t' 0 '0.76176e-1' kp1 "
"d - 'Double_t' 0 '10.632' kp2 d - 'Double_t' 0 '0.13279e-4' kp3 "
"d - 'Double_t' 0 '1.8631' kp4 d - 'Double_t' 0 '1.9479' kp5", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t))(&AliExternalTrackParam::BetheBlochAleph) ), 0);
   G__memfunc_setup("BetheBlochGeant",1471,G__G__STEERBase_506_0_78, 100, -1, G__defined_typename("Double_t"), 0, 6, 3, 1, 0, 
"d - 'Double_t' 0 - bg d - 'Double_t' 0 '2.33' kp0 "
"d - 'Double_t' 0 '0.20' kp1 d - 'Double_t' 0 '3.00' kp2 "
"d - 'Double_t' 0 '173e-9' kp3 d - 'Double_t' 0 '0.49848' kp4", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t))(&AliExternalTrackParam::BetheBlochGeant) ), 0);
   G__memfunc_setup("BetheBlochSolid",1483,G__G__STEERBase_506_0_79, 100, -1, G__defined_typename("Double_t"), 0, 1, 3, 1, 0, "d - 'Double_t' 0 - bg", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t))(&AliExternalTrackParam::BetheBlochSolid) ), 0);
   G__memfunc_setup("BetheBlochGas",1259,G__G__STEERBase_506_0_80, 100, -1, G__defined_typename("Double_t"), 0, 1, 3, 1, 0, "d - 'Double_t' 0 - bg", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t))(&AliExternalTrackParam::BetheBlochGas) ), 0);
   G__memfunc_setup("GetPredictedChi2",1530,G__G__STEERBase_506_0_81, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - p D - 'Double_t' 10 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredictedChi2",1530,G__G__STEERBase_506_0_82, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"D - 'Double_t' 10 - p D - 'Double_t' 10 - covyz "
"D - 'Double_t' 10 - covxyz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredictedChi2",1530,G__G__STEERBase_506_0_83, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "U 'AliExternalTrackParam' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateTo",1126,G__G__STEERBase_506_0_84, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"D - 'Double_t' 0 - p D - 'Double_t' 0 - covyz "
"D - 'Double_t' 0 - covxyz d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResiduals",1228,G__G__STEERBase_506_0_85, 68, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"D - 'Double_t' 0 - p D - 'Double_t' 0 - cov "
"g - 'Bool_t' 0 'kTRUE' updated", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Update",611,G__G__STEERBase_506_0_86, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - p D - 'Double_t' 10 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Rotate",623,G__G__STEERBase_506_0_87, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - alpha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RotateParamOnly",1538,G__G__STEERBase_506_0_88, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - alpha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Invert",632,G__G__STEERBase_506_0_89, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateTo",1126,G__G__STEERBase_506_0_90, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateParamOnlyTo",2041,G__G__STEERBase_506_0_91, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - xk d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Propagate",931,G__G__STEERBase_506_0_92, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - alpha d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateBxByBz",1492,G__G__STEERBase_506_0_93, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - alpha d - 'Double_t' 0 - x "
"D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateParamOnlyBxByBzTo",2602,G__G__STEERBase_506_0_94, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - xk D - 'Double_t' 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Propagate",931,G__G__STEERBase_506_0_95, 121, -1, -1, 0, 4, 1, 1, 8, 
"d - 'Double_t' 0 - len D - 'Double_t' 0 - x "
"D - 'Double_t' 0 - p d - 'Double_t' 0 - bz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Intersect",945,G__G__STEERBase_506_0_96, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"D - 'Double_t' 0 - pnt D - 'Double_t' 0 - norm "
"d - 'Double_t' 0 - bz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("g3helx3",638,G__G__STEERBase_506_0_97, 121, -1, -1, 0, 3, 3, 1, 0, 
"d - 'Double_t' 0 - qfield d - 'Double_t' 0 - step "
"D - 'Double_t' 0 - vect", (char*)NULL, (void*) G__func2void( (void (*)(Double_t, Double_t, Double_t*))(&AliExternalTrackParam::g3helx3) ), 0);
   G__memfunc_setup("PropagateToBxByBz",1687,G__G__STEERBase_506_0_98, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - x D - 'Double_t' 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHelixParameters",1838,G__G__STEERBase_506_0_99, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 0 - h d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDCA",488,G__G__STEERBase_506_0_100, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 8, 
"U 'AliExternalTrackParam' - 10 - p d - 'Double_t' 0 - b "
"d - 'Double_t' 1 - xthis d - 'Double_t' 1 - xp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateToDCA",1326,G__G__STEERBase_506_0_101, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"U 'AliExternalTrackParam' - 0 - p d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateToDCA",1326,G__G__STEERBase_506_0_102, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"U 'AliVVertex' - 10 - vtx d - 'Double_t' 0 - b "
"d - 'Double_t' 0 - maxd D - 'Double_t' 0 '0' dz "
"D - 'Double_t' 0 '0' cov", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PropagateToDCABxByBz",1887,G__G__STEERBase_506_0_103, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"U 'AliVVertex' - 10 - vtx D - 'Double_t' 0 - b "
"d - 'Double_t' 0 - maxd D - 'Double_t' 0 '0' dz "
"D - 'Double_t' 0 '0' cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstrainToVertex",1778,G__G__STEERBase_506_0_104, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'AliVVertex' - 10 - vtx D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDirection",1217,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPxPyPz",891,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXYZ",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCovarianceXYZPxPyPz",2177,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - cv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPxPyPzAt",1072,G__G__STEERBase_506_0_109, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - b "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXYZAt",736,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - b "
"D - 'Double_t' 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetParameterAtRadius",2014,G__G__STEERBase_506_0_111, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - r d - 'Double_t' 0 - bz "
"i - 'Int_t' 0 - parType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYAt",558,G__G__STEERBase_506_0_112, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - b "
"d - 'Double_t' 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZAt",559,G__G__STEERBase_506_0_113, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - b "
"d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYAtFast",956,G__G__STEERBase_506_0_114, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZAtFast",957,G__G__STEERBase_506_0_115, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYZAt",648,G__G__STEERBase_506_0_116, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - b "
"D - 'Double_t' 0 - yz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSnpAt",774,G__G__STEERBase_506_0_118, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXatLabR",942,G__G__STEERBase_506_0_119, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 0 - r d - 'Double_t' 1 - x "
"d - 'Double_t' 0 - bz i - 'Int_t' 0 '0' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXYZatR",850,G__G__STEERBase_506_0_120, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 0 - xr d - 'Double_t' 0 - bz "
"D - 'Double_t' 0 '0' xyz D - 'Double_t' 0 '0' alpSect", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectForMaterial",1832,G__G__STEERBase_506_0_121, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - d d - 'Double_t' 0 - x0 "
"d - 'Double_t' 0 - mass 1 - 'Double_t (*)(Double_t)' 0 'AliExternalTrackParam::BetheBlochSolid' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistance",1099,G__G__STEERBase_506_0_122, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliExternalTrackParam' - 0 - param2 d - 'Double_t' 0 - x "
"D - 'Double_t' 0 - dist d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIndex",792,G__G__STEERBase_506_0_123, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, Int_t))(&AliExternalTrackParam::GetIndex) ), 0);
   G__memfunc_setup("GetLabel",768,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PdgCode",662,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillPolymarker",1453,G__G__STEERBase_506_0_126, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'TPolyMarker3D' - 0 - pol f - 'Float_t' 0 - magf "
"f - 'Float_t' 0 - minR f - 'Float_t' 0 - maxR "
"f - 'Float_t' 0 - stepR", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawTrack",899,G__G__STEERBase_506_0_127, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - magF f - 'Float_t' 0 - minR "
"f - 'Float_t' 0 - maxR f - 'Float_t' 0 - stepR", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Translate",942,G__G__STEERBase_506_0_128, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - vTrasl D - 'Double_t' 0 - covV", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckCovariance",1497,G__G__STEERBase_506_0_129, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUseLogTermMS",1447,G__G__STEERBase_506_0_130, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&AliExternalTrackParam::GetUseLogTermMS) ), 0);
   G__memfunc_setup("SetUseLogTermMS",1459,G__G__STEERBase_506_0_131, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' v", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&AliExternalTrackParam::SetUseLogTermMS) ), 0);
   G__memfunc_setup("GetTrackParam",1286,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamRefitted",2109,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamIp",1471,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamTPCInner",2025,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamOp",1477,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamCp",1465,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamITSOut",1838,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AliExternalTrackParam",2111,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam), -1, 0, 1, 1, 2, 0, "U 'AliVTrack' - 10 - vTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Par",291,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 1, 1, 1, 4, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Cov",296,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 1, 1, 1, 4, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_506_0_142, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliExternalTrackParam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_506_0_143, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliExternalTrackParam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_506_0_144, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliExternalTrackParam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_506_0_145, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliExternalTrackParam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_506_0_149, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_506_0_150, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliExternalTrackParam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_506_0_151, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliExternalTrackParam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_506_0_152, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliExternalTrackParam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_506_0_153, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliExternalTrackParam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliExternalTrackParam", 2237, G__G__STEERBase_506_0_154, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTPCdEdxInfo(void) {
   /* AliTPCdEdxInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCdEdxInfo));
   G__memfunc_setup("AliTPCdEdxInfo",1294,G__G__STEERBase_507_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCdEdxInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTPCdEdxInfo",1294,G__G__STEERBase_507_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCdEdxInfo), -1, 0, 1, 1, 1, 0, "u 'AliTPCdEdxInfo' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_507_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCdEdxInfo), -1, 1, 1, 1, 1, 0, "u 'AliTPCdEdxInfo' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWeightedMean",1490,G__G__STEERBase_507_0_4, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 0 - qType i - 'Int_t' 0 - wType "
"d - 'Double_t' 0 - w0 d - 'Double_t' 0 - w1 "
"d - 'Double_t' 0 - w2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFractionOfClusters",2144,G__G__STEERBase_507_0_5, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iregion", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCSignalRegionInfo",2133,G__G__STEERBase_507_0_6, 121, -1, -1, 0, 3, 1, 1, 8, 
"D - 'Double_t' 0 - signal C - 'Char_t' 0 - ncl "
"C - 'Char_t' 0 - nrows", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCSignals",1240,G__G__STEERBase_507_0_7, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - signal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCSignalRegionInfo",2145,G__G__STEERBase_507_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 0 - signal C - 'Char_t' 0 - ncl "
"C - 'Char_t' 0 - nrows", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCSignals",1252,G__G__STEERBase_507_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - signal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCSignalRegionInfoQmax",2540,G__G__STEERBase_507_0_10, 121, -1, -1, 0, 3, 1, 1, 8, 
"D - 'Double_t' 0 - signal C - 'Char_t' 0 - ncl "
"C - 'Char_t' 0 - nrows", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCSignalsQmax",1647,G__G__STEERBase_507_0_11, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - signal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCSignalRegionInfoQmax",2552,G__G__STEERBase_507_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 0 - signal C - 'Char_t' 0 - ncl "
"C - 'Char_t' 0 - nrows", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCSignalsQmax",1659,G__G__STEERBase_507_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - signal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalTot",1205,G__G__STEERBase_507_0_14, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalMax",1188,G__G__STEERBase_507_0_15, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfClusters",1939,G__G__STEERBase_507_0_16, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfCrossedRows",2236,G__G__STEERBase_507_0_17, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCsignalShortPad",1962,G__G__STEERBase_507_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCsignalMediumPad",2043,G__G__STEERBase_507_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCsignalLongPad",1834,G__G__STEERBase_507_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCsignalOROC",1464,G__G__STEERBase_507_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCsignalShortPadQmax",2369,G__G__STEERBase_507_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCsignalMediumPadQmax",2450,G__G__STEERBase_507_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCsignalLongPadQmax",2241,G__G__STEERBase_507_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCsignalOROCQmax",1871,G__G__STEERBase_507_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegisterSectorCalibration",2589,G__G__STEERBase_507_0_26, 121, -1, -1, 0, 3, 3, 1, 0, 
"U 'TGraphErrors' - 0 - gainSector i - 'Int_t' 0 - regionID "
"i - 'Int_t' 0 - calibID", (char*)NULL, (void*) G__func2void( (void (*)(TGraphErrors*, Int_t, Int_t))(&AliTPCdEdxInfo::RegisterSectorCalibration) ), 0);
   G__memfunc_setup("GetdEdxInfo",1073,G__G__STEERBase_507_0_27, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 0, 
"U 'AliExternalTrackParam' - 0 - param i - 'Int_t' 0 - regionID "
"i - 'Int_t' 0 - calibID i - 'Int_t' 0 - qID "
"i - 'Int_t' 0 - valueID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_507_0_28, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTPCdEdxInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_507_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTPCdEdxInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_507_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTPCdEdxInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_507_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTPCdEdxInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_507_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_507_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTPCdEdxInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_507_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTPCdEdxInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_507_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTPCdEdxInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_507_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTPCdEdxInfo::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTPCdEdxInfo", 1420, G__G__STEERBase_507_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliDetectorPID(void) {
   /* AliDetectorPID */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorPID));
   G__memfunc_setup("AliDetectorPID",1325,G__G__STEERBase_508_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorPID), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliDetectorPID",1325,G__G__STEERBase_508_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorPID), -1, 0, 1, 1, 1, 0, "u 'AliDetectorPID' - 11 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_508_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorPID), -1, 1, 1, 1, 1, 0, "u 'AliDetectorPID' - 11 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRawProbability",1751,G__G__STEERBase_508_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"i 'AliPIDResponse::EDetector' - 0 - det D - 'Double_t' 10 - prob "
"i - 'Int_t' 0 - nspecies i 'AliPIDResponse::EDetPidStatus' - 0 - status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfSigmas",1710,G__G__STEERBase_508_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"i 'AliPIDResponse::EDetector' - 0 - det D - 'Double_t' 10 - nsig "
"i - 'Int_t' 0 - nspecies i 'AliPIDResponse::EDetPidStatus' - 0 'AliPIDResponse::kDetPidOk' status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawProbability",1739,G__G__STEERBase_508_0_6, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 1, 8, 
"i 'AliPIDResponse::EDetector' - 0 - det D - 'Double_t' 0 - prob "
"i - 'Int_t' 0 - nspecies", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmas",1698,G__G__STEERBase_508_0_7, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 1, 8, 
"i 'AliPIDResponse::EDetector' - 0 - det D - 'Double_t' 0 - nsig "
"i - 'Int_t' 0 - nspecies", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawProbability",1739,G__G__STEERBase_508_0_8, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i 'AliPIDResponse::EDetector' - 0 - det i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmas",1698,G__G__STEERBase_508_0_9, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i 'AliPIDResponse::EDetector' - 0 - det i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawProbability",1739,G__G__STEERBase_508_0_10, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 1, 8, 
"i 'AliPIDResponse::EDetector' - 0 - det i 'AliPID::EParticleType' - 0 - type "
"d - 'Double_t' 1 - prob", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmas",1698,G__G__STEERBase_508_0_11, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 1, 8, 
"i 'AliPIDResponse::EDetector' - 0 - det i 'AliPID::EParticleType' - 0 - type "
"d - 'Double_t' 1 - nsig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasRawProbability",1735,G__G__STEERBase_508_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i 'AliPIDResponse::EDetector' - 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasNumberOfSigmas",1694,G__G__STEERBase_508_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i 'AliPIDResponse::EDetector' - 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPIDStatus",1153,G__G__STEERBase_508_0_14, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 1, 1, 1, 8, "i 'AliPIDResponse::EDetector' - 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_508_0_15, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliDetectorPID::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_508_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDetectorPID::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_508_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliDetectorPID::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_508_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliDetectorPID::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_508_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_508_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDetectorPID::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_508_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliDetectorPID::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_508_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDetectorPID::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_508_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliDetectorPID::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliDetectorPID", 1451, G__G__STEERBase_508_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTOFHeader(void) {
   /* AliTOFHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFHeader));
   G__memfunc_setup("AliTOFHeader",1096,G__G__STEERBase_509_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTOFHeader",1096,G__G__STEERBase_509_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFHeader), -1, 0, 8, 1, 1, 0, 
"f - 'Float_t' 0 - defEvTime f - 'Float_t' 0 - defResEvTime "
"i - 'Int_t' 0 - nDifPbins F - 'Float_t' 0 - times "
"F - 'Float_t' 0 - res I - 'Int_t' 0 - nPbin "
"f - 'Float_t' 0 - tofTimeRes f - 'Float_t' 0 - t0spread", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTOFHeader",1096,G__G__STEERBase_509_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFHeader), -1, 0, 1, 1, 1, 0, "u 'AliTOFHeader' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_509_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFHeader), -1, 1, 1, 1, 1, 0, "u 'AliTOFHeader' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTOFResolution",1609,G__G__STEERBase_509_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFResolution",1597,G__G__STEERBase_509_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0spread",1071,G__G__STEERBase_509_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0spread",1059,G__G__STEERBase_509_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDefaultEventTimeVal",2201,G__G__STEERBase_509_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDefaultEventTimeRes",2208,G__G__STEERBase_509_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventTimeValues",1825,G__G__STEERBase_509_0_12, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventTimeRes",1499,G__G__STEERBase_509_0_13, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNvalues",1022,G__G__STEERBase_509_0_14, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayI), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbins",794,G__G__STEERBase_509_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfTOFclusters",2204,G__G__STEERBase_509_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfTOFtrgPads",2044,G__G__STEERBase_509_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfTOFmaxipad",2059,G__G__STEERBase_509_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerMask",1408,G__G__STEERBase_509_0_19, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFTriggerMask), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefaultEventTimeVal",2213,G__G__STEERBase_509_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefaultEventTimeRes",2220,G__G__STEERBase_509_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventTimeValues",1837,G__G__STEERBase_509_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArrayF' - 0 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventTimeRes",1511,G__G__STEERBase_509_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArrayF' - 0 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNvalues",1034,G__G__STEERBase_509_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArrayI' - 0 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNbins",806,G__G__STEERBase_509_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nbins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfTOFclusters",2216,G__G__STEERBase_509_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfTOFtrgPads",2056,G__G__STEERBase_509_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerMask",1420,G__G__STEERBase_509_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTOFTriggerMask' - 0 - trigmask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_509_0_29, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTOFHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_509_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTOFHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_509_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTOFHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_509_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTOFHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_509_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_509_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTOFHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_509_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTOFHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_509_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTOFHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_509_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTOFHeader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTOFHeader", 1222, G__G__STEERBase_509_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVTrack(void) {
   /* AliVTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrack));
   G__memfunc_setup("operator=",937,G__G__STEERBase_510_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrack), -1, 1, 1, 1, 1, 0, "u 'AliVTrack' - 11 - vTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPureITSStandalone",1873,G__G__STEERBase_510_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEvent",802,G__G__STEERBase_510_0_6, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetID",429,G__G__STEERBase_510_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetITSClusterMap",1552,G__G__STEERBase_510_0_8, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetITSSharedClusterMap",2151,G__G__STEERBase_510_0_9, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HasPointOnITSLayer",1744,G__G__STEERBase_510_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HasSharedPointOnITSLayer",2343,G__G__STEERBase_510_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetITSdEdxSamples",1642,G__G__STEERBase_510_0_12, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCClusterMapPtr",1853,G__G__STEERBase_510_0_13, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TBits), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCFitMapPtr",1406,G__G__STEERBase_510_0_14, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TBits), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCSharedMapPtr",1714,G__G__STEERBase_510_0_15, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TBits), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCClusterInfo",1653,G__G__STEERBase_510_0_16, 102, -1, G__defined_typename("Float_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 '0' - i - 'Int_t' 0 '159' - "
"i - 'Int_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCdEdxInfo",1304,G__G__STEERBase_510_0_17, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCdEdxInfo), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCNcls",919,G__G__STEERBase_510_0_18, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCNclsF",989,G__G__STEERBase_510_0_19, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCchi2",877,G__G__STEERBase_510_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDslice",1050,G__G__STEERBase_510_0_21, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfTRDslices",1963,G__G__STEERBase_510_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDncls",954,G__G__STEERBase_510_0_23, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDntrackletsPID",1826,G__G__STEERBase_510_0_24, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDetectorPID",1347,G__G__STEERBase_510_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliDetectorPID' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDetectorPID",1335,G__G__STEERBase_510_0_26, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorPID), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDchi2",880,G__G__STEERBase_510_0_27, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfClusters",1939,G__G__STEERBase_510_0_28, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetITSchi2",886,G__G__STEERBase_510_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCCrossedRows",1669,G__G__STEERBase_510_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RelateToVVertex",1524,G__G__STEERBase_510_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliVVertex' - 10 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - U 'AliExternalTrackParam' - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RelateToVVertexTPC",1755,G__G__STEERBase_510_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliVVertex' - 10 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - U 'AliExternalTrackParam' - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RelateToVVertexBxByBz",2085,G__G__STEERBase_510_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliVVertex' - 10 - - D - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - U 'AliExternalTrackParam' - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RelateToVVertexTPCBxByBz",2316,G__G__STEERBase_510_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliVVertex' - 10 - - D - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - U 'AliExternalTrackParam' - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RelateToVertex",1438,G__G__STEERBase_510_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliESDVertex' - 10 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - U 'AliExternalTrackParam' - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RelateToVertexTPC",1669,G__G__STEERBase_510_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliESDVertex' - 10 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - U 'AliExternalTrackParam' - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RelateToVertexBxByBz",1999,G__G__STEERBase_510_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliESDVertex' - 10 - - D - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - U 'AliExternalTrackParam' - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RelateToVertexTPCBxByBz",2230,G__G__STEERBase_510_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliESDVertex' - 10 - - D - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - U 'AliExternalTrackParam' - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetImpactParameters",1938,G__G__STEERBase_510_0_39, 121, -1, -1, 0, 2, 1, 1, 8, 
"F - 'Float_t' 0 - - F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetImpactParameters",1938,G__G__STEERBase_510_0_40, 121, -1, -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 1 - - f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetImpactParametersTPC",2169,G__G__STEERBase_510_0_41, 121, -1, -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 1 - - f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetImpactParametersTPC",2169,G__G__STEERBase_510_0_42, 121, -1, -1, 0, 2, 1, 1, 8, 
"F - 'Float_t' 0 - - F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEMCALcluster",1412,G__G__STEERBase_510_0_43, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEMCALcluster",1424,G__G__STEERBase_510_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEMCAL",542,G__G__STEERBase_510_0_45, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackPhiOnEMCal",1685,G__G__STEERBase_510_0_46, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackEtaOnEMCal",1678,G__G__STEERBase_510_0_47, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackPtOnEMCal",1592,G__G__STEERBase_510_0_48, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackPOnEMCal",1476,G__G__STEERBase_510_0_49, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsExtrapolatedToEMCAL",1998,G__G__STEERBase_510_0_50, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTrackPhiEtaPtOnEMCal",2175,G__G__STEERBase_510_0_51, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 '-999' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPHOScluster",1372,G__G__STEERBase_510_0_52, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPHOScluster",1384,G__G__STEERBase_510_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsPHOS",502,G__G__STEERBase_510_0_54, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPIDForTracking",1635,G__G__STEERBase_510_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPIDForTracking",1623,G__G__STEERBase_510_0_56, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetStatus",944,G__G__STEERBase_510_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetStatus",1159,G__G__STEERBase_510_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetITSsignal",1166,G__G__STEERBase_510_0_59, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetITSsignalTunedOnData",2245,G__G__STEERBase_510_0_60, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetITSsignalTunedOnData",2257,G__G__STEERBase_510_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCsignal",1157,G__G__STEERBase_510_0_62, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCsignalTunedOnData",2236,G__G__STEERBase_510_0_63, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTPCsignalTunedOnData",2248,G__G__STEERBase_510_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCsignalN",1235,G__G__STEERBase_510_0_65, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCmomentum",1401,G__G__STEERBase_510_0_66, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCTgl",814,G__G__STEERBase_510_0_67, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCLabel",999,G__G__STEERBase_510_0_68, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTgl",583,G__G__STEERBase_510_0_69, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFsignal",1159,G__G__STEERBase_510_0_70, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFsignalTunedOnData",2238,G__G__STEERBase_510_0_71, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTOFsignalTunedOnData",2250,G__G__STEERBase_510_0_72, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHMPIDsignal",1296,G__G__STEERBase_510_0_73, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDsignal",1160,G__G__STEERBase_510_0_74, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDNchamberdEdx",1711,G__G__STEERBase_510_0_75, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDNclusterdEdx",1759,G__G__STEERBase_510_0_76, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHMPIDoccupancy",1623,G__G__STEERBase_510_0_77, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHMPIDcluIdx",1275,G__G__STEERBase_510_0_78, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHMPIDtrk",995,G__G__STEERBase_510_0_79, 121, -1, -1, 0, 4, 1, 1, 8, 
"f - 'Float_t' 1 - - f - 'Float_t' 1 - - "
"f - 'Float_t' 1 - - f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHMPIDmip",984,G__G__STEERBase_510_0_80, 121, -1, -1, 0, 4, 1, 1, 8, 
"f - 'Float_t' 1 - - f - 'Float_t' 1 - - "
"i - 'Int_t' 1 - - i - 'Int_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOuterHmpPxPyPz",1711,G__G__STEERBase_510_0_81, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetInnerParam",1293,G__G__STEERBase_510_0_82, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOuterParam",1312,G__G__STEERBase_510_0_83, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCInnerParam",1524,G__G__STEERBase_510_0_84, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetConstrainedParam",1931,G__G__STEERBase_510_0_85, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIntegratedTimes",1833,G__G__STEERBase_510_0_86, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 0 - - i - 'Int_t' 0 'AliPID::kSPECIESC' nspec", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDmomentum",1404,G__G__STEERBase_510_0_87, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - D - 'Double_t' 0 '0x0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHMPIDpid",975,G__G__STEERBase_510_0_88, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIntegratedLength",1929,G__G__STEERBase_510_0_89, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStatus",932,G__G__STEERBase_510_0_90, 107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetXYZ",555,G__G__STEERBase_510_0_91, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetXYZAt",736,G__G__STEERBase_510_0_92, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBz",476,G__G__STEERBase_510_0_93, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBxByBz",849,G__G__STEERBase_510_0_94, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCovarianceXYZPxPyPz",2177,G__G__STEERBase_510_0_95, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - cv", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("PropagateToDCA",1326,G__G__STEERBase_510_0_96, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"U 'AliVVertex' - 10 - vtx d - 'Double_t' 0 - b "
"d - 'Double_t' 0 - maxd D - 'Double_t' 0 - dz "
"D - 'Double_t' 0 - covar", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNcls",688,G__G__STEERBase_510_0_97, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPxPyPz",891,G__G__STEERBase_510_0_98, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetID",441,G__G__STEERBase_510_0_99, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFBunchCrossing",1857,G__G__STEERBase_510_0_100, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 '0' - g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFExpTDiff",1283,G__G__STEERBase_510_0_101, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 '0' - g - 'Bool_t' 0 'kTRUE' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFHeader",1106,G__G__STEERBase_510_0_102, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFHeader), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParam",1286,G__G__STEERBase_510_0_103, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamRefitted",2109,G__G__STEERBase_510_0_104, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamIp",1471,G__G__STEERBase_510_0_105, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamTPCInner",2025,G__G__STEERBase_510_0_106, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamOp",1477,G__G__STEERBase_510_0_107, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamCp",1465,G__G__STEERBase_510_0_108, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamITSOut",1838,G__G__STEERBase_510_0_109, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetTrackParamIp",1698,G__G__STEERBase_510_0_110, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliExternalTrackParam' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetTrackParamOp",1704,G__G__STEERBase_510_0_111, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliExternalTrackParam' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetTrackParamTPCInner",2252,G__G__STEERBase_510_0_112, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliExternalTrackParam' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfTPCClusters",2170,G__G__STEERBase_510_0_113, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfITSClusters",2179,G__G__STEERBase_510_0_114, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfTRDClusters",2173,G__G__STEERBase_510_0_115, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetKinkIndex",1189,G__G__STEERBase_510_0_116, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSigned1Pt",1135,G__G__STEERBase_510_0_117, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsOn",377,G__G__STEERBase_510_0_118, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetX",376,G__G__STEERBase_510_0_119, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetY",377,G__G__STEERBase_510_0_120, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZ",378,G__G__STEERBase_510_0_121, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetParameter",1217,G__G__STEERBase_510_0_122, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAlpha",774,G__G__STEERBase_510_0_123, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSnp",593,G__G__STEERBase_510_0_124, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSigmaSnp2",1140,G__G__STEERBase_510_0_125, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCncls",951,G__G__STEERBase_510_0_126, 114, -1, G__defined_typename("UShort_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 '0' - i - 'Int_t' 0 '159' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFsignalDz",1349,G__G__STEERBase_510_0_127, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetP",368,G__G__STEERBase_510_0_128, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSignedPt",1086,G__G__STEERBase_510_0_129, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSign",689,G__G__STEERBase_510_0_130, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDirection",1217,G__G__STEERBase_510_0_131, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLinearD",959,G__G__STEERBase_510_0_132, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDZ",446,G__G__STEERBase_510_0_133, 121, -1, -1, 0, 5, 1, 1, 8, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetITSclusters",1413,G__G__STEERBase_510_0_134, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 8, "I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDclusters",1407,G__G__STEERBase_510_0_135, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_510_0_136, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_510_0_137, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_510_0_138, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_510_0_139, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_510_0_143, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_510_0_144, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_510_0_145, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_510_0_146, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_510_0_147, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVTrack", 991, G__G__STEERBase_510_0_148, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliITSPidParams(void) {
   /* AliITSPidParams */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPidParams));
   G__memfunc_setup("AliITSPidParams",1415,G__G__STEERBase_512_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPidParams), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' isMC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliITSPidParams",1415,G__G__STEERBase_512_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPidParams), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 0 - name g - 'Bool_t' 0 'kFALSE' isMC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMC",548,G__G__STEERBase_512_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitData",782,G__G__STEERBase_512_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLandauGausNormPdgCode",2359,G__G__STEERBase_512_0_5, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 0 - dedx i - 'Int_t' 0 - pdgCode "
"d - 'Double_t' 0 - mom i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLandauGausNorm",1697,G__G__STEERBase_512_0_6, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 0 - dedx i - 'Int_t' 0 - partType "
"d - 'Double_t' 0 - mom i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSDDElecMPV",1139,G__G__STEERBase_512_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSDDElecLandauWidth",2005,G__G__STEERBase_512_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSDDElecGaussWidth",1923,G__G__STEERBase_512_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSSDElecMPV",1154,G__G__STEERBase_512_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSSDElecLandauWidth",2020,G__G__STEERBase_512_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSSDElecGaussWidth",1938,G__G__STEERBase_512_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSDDPionMPV",1168,G__G__STEERBase_512_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSDDPionLandauWidth",2034,G__G__STEERBase_512_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSDDPionGaussWidth",1952,G__G__STEERBase_512_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSSDPionMPV",1183,G__G__STEERBase_512_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSSDPionLandauWidth",2049,G__G__STEERBase_512_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSSDPionGaussWidth",1967,G__G__STEERBase_512_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSDDKaonMPV",1155,G__G__STEERBase_512_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSDDKaonLandauWidth",2021,G__G__STEERBase_512_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSDDKaonGaussWidth",1939,G__G__STEERBase_512_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSSDKaonMPV",1170,G__G__STEERBase_512_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSSDKaonLandauWidth",2036,G__G__STEERBase_512_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSSDKaonGaussWidth",1954,G__G__STEERBase_512_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSDDProtMPV",1183,G__G__STEERBase_512_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSDDProtLandauWidth",2049,G__G__STEERBase_512_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSDDProtGaussWidth",1967,G__G__STEERBase_512_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSSDProtMPV",1198,G__G__STEERBase_512_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSSDProtLandauWidth",2064,G__G__STEERBase_512_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSSDProtGaussWidth",1982,G__G__STEERBase_512_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFormula' - 10 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSDDElecMPV",1127,G__G__STEERBase_512_0_31, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSDDElecLandauWidth",1993,G__G__STEERBase_512_0_32, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSDDElecGaussWidth",1911,G__G__STEERBase_512_0_33, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSSDElecMPV",1142,G__G__STEERBase_512_0_34, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSSDElecLandauWidth",2008,G__G__STEERBase_512_0_35, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSSDElecGaussWidth",1926,G__G__STEERBase_512_0_36, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSDDPionMPV",1156,G__G__STEERBase_512_0_37, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSDDPionLandauWidth",2022,G__G__STEERBase_512_0_38, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSDDPionGaussWidth",1940,G__G__STEERBase_512_0_39, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSSDPionMPV",1171,G__G__STEERBase_512_0_40, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSSDPionLandauWidth",2037,G__G__STEERBase_512_0_41, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSSDPionGaussWidth",1955,G__G__STEERBase_512_0_42, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSDDKaonMPV",1143,G__G__STEERBase_512_0_43, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSDDKaonLandauWidth",2009,G__G__STEERBase_512_0_44, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSDDKaonGaussWidth",1927,G__G__STEERBase_512_0_45, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSSDKaonMPV",1158,G__G__STEERBase_512_0_46, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSSDKaonLandauWidth",2024,G__G__STEERBase_512_0_47, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSSDKaonGaussWidth",1942,G__G__STEERBase_512_0_48, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSDDProtMPV",1171,G__G__STEERBase_512_0_49, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSDDProtLandauWidth",2037,G__G__STEERBase_512_0_50, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSDDProtGaussWidth",1955,G__G__STEERBase_512_0_51, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSSDProtMPV",1186,G__G__STEERBase_512_0_52, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSSDProtLandauWidth",2052,G__G__STEERBase_512_0_53, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSSDProtGaussWidth",1970,G__G__STEERBase_512_0_54, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliITSPidParams",1415,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPidParams), -1, 0, 1, 1, 4, 0, "u 'AliITSPidParams' - 11 - rec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPidParams), -1, 1, 1, 1, 4, 0, "u 'AliITSPidParams' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_512_0_57, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliITSPidParams::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_512_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliITSPidParams::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_512_0_59, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliITSPidParams::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_512_0_60, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliITSPidParams::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_512_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_512_0_65, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliITSPidParams::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_512_0_66, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliITSPidParams::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_512_0_67, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliITSPidParams::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_512_0_68, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliITSPidParams::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliITSPidParams", 1541, G__G__STEERBase_512_0_69, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliITSPIDResponse(void) {
   /* AliITSPIDResponse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPIDResponse));
   G__memfunc_setup("AliITSPIDResponse",1586,G__G__STEERBase_513_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPIDResponse), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' isMC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBetheBlochParamsITSTPC",2359,G__G__STEERBase_513_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBetheBlochParamsITSTPCDeuteron",3197,G__G__STEERBase_513_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBetheBlochParamsITSTPCTriton",2999,G__G__STEERBase_513_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBetheBlochParamsITSsa",2340,G__G__STEERBase_513_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBetheBlochHybridParamsITSsa",2950,G__G__STEERBase_513_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetElectronBetheBlochParamsITSsa",3168,G__G__STEERBase_513_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BetheAleph",978,G__G__STEERBase_513_0_8, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - p d - 'Double_t' 0 - mass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Bethe",488,G__G__STEERBase_513_0_9, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - p d - 'Double_t' 0 - mass "
"g - 'Bool_t' 0 'kFALSE' isSA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Bethe",488,G__G__STEERBase_513_0_10, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - p i 'AliPID::EParticleType' - 0 - species "
"g - 'Bool_t' 0 'kFALSE' isSA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BetheITSsaHybrid",1550,G__G__STEERBase_513_0_11, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - p d - 'Double_t' 0 - mass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResolution",1364,G__G__STEERBase_513_0_12, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 8, 
"d - 'Double_t' 0 - bethe i - 'Int_t' 0 '4' nPtsForPid "
"g - 'Bool_t' 0 'kFALSE' isSA d - 'Double_t' 0 '0.' p "
"i 'AliPID::EParticleType' - 0 'AliPID::kPion' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSProbabilities",1881,G__G__STEERBase_513_0_13, 121, -1, -1, 0, 4, 1, 1, 8, 
"f - 'Float_t' 0 - mom D - 'Double_t' 0 - qclu "
"D - 'Double_t' 0 - condprobfun g - 'Bool_t' 0 'kFALSE' isMC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSProbabilities",1881,G__G__STEERBase_513_0_14, 121, -1, -1, 0, 4, 1, 1, 8, 
"f - 'Float_t' 0 - mom D - 'Double_t' 0 - qclu "
"D - 'Double_t' 0 - condprobfun U 'AliITSPidParams' - 0 - pars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmas",1698,G__G__STEERBase_513_0_15, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalDelta",1384,G__G__STEERBase_513_0_16, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"g - 'Bool_t' 0 'kFALSE' ratio", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmas",1698,G__G__STEERBase_513_0_17, 102, -1, G__defined_typename("Float_t"), 0, 5, 1, 1, 8, 
"f - 'Float_t' 0 - mom f - 'Float_t' 0 - signal "
"i 'AliPID::EParticleType' - 0 - type i - 'Int_t' 0 '4' nPtsForPid "
"g - 'Bool_t' 0 'kFALSE' isSA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParticleIdFromdEdxVsP",2355,G__G__STEERBase_513_0_18, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"f - 'Float_t' 0 - mom f - 'Float_t' 0 - signal "
"g - 'Bool_t' 0 'kFALSE' isSA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Bethe",488,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 4, 8, 
"d - 'Double_t' 0 - bg D - 'Double_t' 50 - par "
"g - 'Bool_t' 0 - isNuclei", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_513_0_20, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliITSPIDResponse::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_513_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliITSPIDResponse::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_513_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliITSPIDResponse::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_513_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliITSPIDResponse::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_513_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_513_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliITSPIDResponse::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_513_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliITSPIDResponse::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_513_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliITSPIDResponse::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_513_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliITSPIDResponse::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliITSPIDResponse", 1586, G__G__STEERBase_513_0_32, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPIDResponse), -1, 0, 1, 1, 1, 0, "u 'AliITSPIDResponse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliITSPIDResponse", 1712, G__G__STEERBase_513_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_513_0_34, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPIDResponse), -1, 1, 1, 1, 1, 0, "u 'AliITSPIDResponse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliOADBContainer(void) {
   /* AliOADBContainer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliOADBContainer));
   G__memfunc_setup("AliOADBContainer",1487,G__G__STEERBase_598_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliOADBContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliOADBContainer",1487,G__G__STEERBase_598_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliOADBContainer), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliOADBContainer",1487,G__G__STEERBase_598_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliOADBContainer), -1, 0, 1, 1, 1, 0, "u 'AliOADBContainer' - 11 - cont", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_598_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliOADBContainer), -1, 1, 1, 1, 1, 0, "u 'AliOADBContainer' - 11 - cont", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AppendObject",1199,G__G__STEERBase_598_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TObject' - 0 - obj i - 'Int_t' 0 - lower "
"i - 'Int_t' 0 - upper u 'TString' - 0 '\"\"' passName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateObject",1210,G__G__STEERBase_598_0_6, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - index U 'TObject' - 0 - obj "
"i - 'Int_t' 0 - lower i - 'Int_t' 0 - upper "
"u 'TString' - 0 '\"\"' passName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveObject",1221,G__G__STEERBase_598_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddDefaultObject",1573,G__G__STEERBase_598_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanDefaultList",1604,G__G__STEERBase_598_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDefaultList",1409,G__G__STEERBase_598_0_10, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteToFile",1102,G__G__STEERBase_598_0_11, 121, -1, -1, 0, 1, 1, 1, 8, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitFromFile",1192,G__G__STEERBase_598_0_12, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - - 10 - fname C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfEntries",1816,G__G__STEERBase_598_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LowerLimit",1032,G__G__STEERBase_598_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpperLimit",1035,G__G__STEERBase_598_0_15, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjArray",1082,G__G__STEERBase_598_0_16, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetToZeroObjArray",1705,G__G__STEERBase_598_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObject",887,G__G__STEERBase_598_0_18, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - run C - - 10 '\"\"' def "
"u 'TString' - 0 '\"\"' passName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjectFromFile",1675,G__G__STEERBase_598_0_19, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 4, 1, 1, 8, 
"U 'TFile' - 0 - file i - 'Int_t' 0 - run "
"C - - 10 '\"\"' def u 'TString' - 0 '\"\"' passName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjectByIndex",1578,G__G__STEERBase_598_0_20, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPassNameByIndex",1771,G__G__STEERBase_598_0_21, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDefaultObject",1596,G__G__STEERBase_598_0_22, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 0, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("List",412,G__G__STEERBase_598_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFolder",792,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIndexForRun",1396,G__G__STEERBase_598_0_26, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - run u 'TString' - 0 '\"\"' passName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOADBPath",963,G__G__STEERBase_598_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliOADBContainer::GetOADBPath) ), 0);
   G__memfunc_setup("HasOverlap",1013,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 8, 
"i - 'Int_t' 0 - lower i - 'Int_t' 0 - upper "
"u 'TString' - 0 - passName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_598_0_29, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliOADBContainer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_598_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliOADBContainer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_598_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliOADBContainer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_598_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliOADBContainer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_598_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_598_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliOADBContainer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_598_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliOADBContainer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_598_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliOADBContainer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_598_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliOADBContainer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliOADBContainer", 1613, G__G__STEERBase_598_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTPCPIDResponse(void) {
   /* AliTPCPIDResponse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponse));
   G__memfunc_setup("AliTPCPIDResponse",1577,G__G__STEERBase_599_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponse), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTPCPIDResponse",1577,G__G__STEERBase_599_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponse), -1, 0, 1, 1, 1, 0, "u 'AliTPCPIDResponse' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_599_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponse), -1, 1, 1, 1, 1, 0, "u 'AliTPCPIDResponse' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigma",797,G__G__STEERBase_599_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - res0 f - 'Float_t' 0 - resN2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBetheBlochParameters",2320,G__G__STEERBase_599_0_5, 121, -1, -1, 0, 5, 1, 1, 0, 
"d - 'Double_t' 0 - kp1 d - 'Double_t' 0 - kp2 "
"d - 'Double_t' 0 - kp3 d - 'Double_t' 0 - kp4 "
"d - 'Double_t' 0 - kp5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMip",594,G__G__STEERBase_599_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - mip", "Set overall normalisation; mean dE/dx for MIP", (void*) NULL, 0);
   G__memfunc_setup("Bethe",488,G__G__STEERBase_599_0_7, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - bg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseDatabase",1390,G__G__STEERBase_599_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - useDatabase", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUseDatabase",1378,G__G__STEERBase_599_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetResponseFunction",1985,G__G__STEERBase_599_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"i 'AliPID::EParticleType' - 0 - type U 'TObject' - 40 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResponseFunction",1973,G__G__STEERBase_599_0_11, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 9, "i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVoltage",1022,G__G__STEERBase_599_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVoltageMap",1308,G__G__STEERBase_599_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVectorT<float>' 'TVectorF' 11 - a", "resets ownership, ~ will not delete contents", (void*) NULL, 0);
   G__memfunc_setup("GetVoltage",1010,G__G__STEERBase_599_0_14, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLowGainIROCthreshold",2263,G__G__STEERBase_599_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBadIROCthreshold",1837,G__G__STEERBase_599_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLowGainOROCthreshold",2269,G__G__STEERBase_599_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBadOROCthreshold",1843,G__G__STEERBase_599_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxBadLengthFraction",2289,G__G__STEERBase_599_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMagField",1061,G__G__STEERBase_599_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - mf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEtaCorrMap",1262,G__G__STEERBase_599_0_21, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH2D), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEtaCorrMap",1274,G__G__STEERBase_599_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TH2D' - 0 - hMap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackTanTheta",1582,G__G__STEERBase_599_0_23, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "U 'AliVTrack' - 10 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEtaCorrection",1618,G__G__STEERBase_599_0_24, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"i 'AliTPCPIDResponse::ETPCdEdxSource' - 0 'kdEdxDefault' dedxSource", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEtaCorrectedTrackdEdx",2383,G__G__STEERBase_599_0_25, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"i 'AliTPCPIDResponse::ETPCdEdxSource' - 0 'kdEdxDefault' dedxSource", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaPar1Map",1411,G__G__STEERBase_599_0_26, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH2D), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaPar0",1124,G__G__STEERBase_599_0_27, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigmaParams",1409,G__G__STEERBase_599_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TH2D' - 0 - hSigmaPar1Map d - 'Double_t' 0 - sigmaPar0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaPar1",1125,G__G__STEERBase_599_0_29, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"i 'AliTPCPIDResponse::ETPCdEdxSource' - 0 'kdEdxDefault' dedxSource", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultiplicityCorrectionFunction",3463,G__G__STEERBase_599_0_30, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TF1), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameterMultiplicityCorrection",3566,G__G__STEERBase_599_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - parIndex d - 'Double_t' 0 - parValue", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultiplicityCorrectionFunctionTanTheta",4256,G__G__STEERBase_599_0_32, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TF1), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameterMultiplicityCorrectionTanTheta",4359,G__G__STEERBase_599_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - parIndex d - 'Double_t' 0 - parValue", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultiplicitySigmaCorrectionFunction",3960,G__G__STEERBase_599_0_34, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TF1), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameterMultiplicitySigmaCorrection",4063,G__G__STEERBase_599_0_35, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - parIndex d - 'Double_t' 0 - parValue", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetMultiplicityCorrectionFunctions",3805,G__G__STEERBase_599_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrentEventMultiplicity",2842,G__G__STEERBase_599_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentEventMultiplicity",2830,G__G__STEERBase_599_0_38, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultiplicityCorrection",2625,G__G__STEERBase_599_0_39, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"i 'AliTPCPIDResponse::ETPCdEdxSource' - 0 'kdEdxDefault' dedxSource", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultiplicitySigmaCorrection",3122,G__G__STEERBase_599_0_40, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"i 'AliTPCPIDResponse::ETPCdEdxSource' - 0 'kdEdxDefault' dedxSource", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultiplicityCorrectedTrackdEdx",3390,G__G__STEERBase_599_0_41, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"i 'AliTPCPIDResponse::ETPCdEdxSource' - 0 'kdEdxDefault' dedxSource", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEtaAndMultiplicityCorrectedTrackdEdx",3947,G__G__STEERBase_599_0_42, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"i 'AliTPCPIDResponse::ETPCdEdxSource' - 0 'kdEdxDefault' dedxSource", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEtaCorrectionFast",2016,G__G__STEERBase_599_0_43, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"U 'AliVTrack' - 10 - track d - 'Double_t' 0 - dEdxSplines", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultiplicityCorrectionFast",3023,G__G__STEERBase_599_0_44, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track d - 'Double_t' 0 - dEdxExpected "
"i - 'Int_t' 0 - multiplicity", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultiplicitySigmaCorrectionFast",3520,G__G__STEERBase_599_0_45, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - dEdxExpected i - 'Int_t' 0 - multiplicity", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaPar1Fast",1523,G__G__STEERBase_599_0_46, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"d - 'Double_t' 0 - dEdx U 'TSpline3' - 10 - responseFunction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigma",797,G__G__STEERBase_599_0_47, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - res0 f - 'Float_t' 0 - resN2 "
"i 'AliTPCPIDResponse::ETPCgainScenario' - 0 - gainScenario", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExpectedSignal",1712,G__G__STEERBase_599_0_48, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"i 'AliTPCPIDResponse::ETPCdEdxSource' - 0 'kdEdxDefault' dedxSource g - 'Bool_t' 0 'kFALSE' correctEta "
"g - 'Bool_t' 0 'kFALSE' correctMultiplicity", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExpectedSigma",1603,G__G__STEERBase_599_0_49, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"i 'AliTPCPIDResponse::ETPCdEdxSource' - 0 'kdEdxDefault' dedxSource g - 'Bool_t' 0 'kFALSE' correctEta "
"g - 'Bool_t' 0 'kFALSE' correctMultiplicity", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmas",1698,G__G__STEERBase_599_0_50, 102, -1, G__defined_typename("Float_t"), 0, 5, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"i 'AliTPCPIDResponse::ETPCdEdxSource' - 0 'kdEdxDefault' dedxSource g - 'Bool_t' 0 'kFALSE' correctEta "
"g - 'Bool_t' 0 'kFALSE' correctMultiplicity", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalDelta",1384,G__G__STEERBase_599_0_51, 102, -1, G__defined_typename("Float_t"), 0, 6, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"i 'AliTPCPIDResponse::ETPCdEdxSource' - 0 'kdEdxDefault' dedxSource g - 'Bool_t' 0 'kFALSE' correctEta "
"g - 'Bool_t' 0 'kFALSE' correctMultiplicity g - 'Bool_t' 0 'kFALSE' ratio", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetResponseFunction",1985,G__G__STEERBase_599_0_52, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TObject' - 0 - o i 'AliPID::EParticleType' - 0 - type "
"i 'AliTPCPIDResponse::ETPCgainScenario' - 0 - gainScenario", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetResponseFunction",1973,G__G__STEERBase_599_0_54, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TSpline3), -1, 0, 2, 1, 1, 8, 
"i 'AliPID::EParticleType' - 0 - species i 'AliTPCPIDResponse::ETPCgainScenario' - 0 - gainScenario", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResponseFunction",1973,G__G__STEERBase_599_0_55, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TSpline3), -1, 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"i 'AliTPCPIDResponse::ETPCdEdxSource' - 0 'kdEdxDefault' dedxSource", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResponseFunctiondEdxN",2152,G__G__STEERBase_599_0_56, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"i 'AliTPCPIDResponse::ETPCdEdxSource' - 0 - dedxSource d - 'Double_t' 1 - dEdx "
"i - 'Int_t' 1 - nPoints i 'AliTPCPIDResponse::ETPCgainScenario' - 1 - gainScenario "
"U 'TSpline3' - 2 - responseFunction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sectorNumbersInOut",1883,G__G__STEERBase_599_0_57, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 8, 
"D - 'Double_t' 0 - trackPositionInner D - 'Double_t' 0 - trackPositionOuter "
"f - 'Float_t' 1 - phiIn f - 'Float_t' 1 - phiOut "
"i - 'Int_t' 1 - in i - 'Int_t' 1 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackStatus",1145,G__G__STEERBase_599_0_58, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLEChamberStatus), -1, 0, 2, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxClusterRadius",1648,G__G__STEERBase_599_0_59, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "U 'AliVTrack' - 10 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackApex",899,G__G__STEERBase_599_0_60, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track f - 'Float_t' 0 - magField "
"D - 'Double_t' 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GainScenarioName",1588,G__G__STEERBase_599_0_61, 67, -1, -1, 0, 1, 3, 1, 1, "i - 'Int_t' 0 - n", (char*)NULL, (void*) G__func2void( (const char* (*)(Int_t))(&AliTPCPIDResponse::GainScenarioName) ), 0);
   G__memfunc_setup("ResponseFunctionIndex",2189,G__G__STEERBase_599_0_62, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i 'AliPID::EParticleType' - 0 - species i 'AliTPCPIDResponse::ETPCgainScenario' - 0 - gainScenario", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetSplines",1249,G__G__STEERBase_599_0_63, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExpectedSignal",1712,G__G__STEERBase_599_0_64, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - mom i 'AliPID::EParticleType' - 0 'AliPID::kKaon' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExpectedSigma",1603,G__G__STEERBase_599_0_65, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"f - 'Float_t' 0 - mom i - 'Int_t' 0 - nPoints "
"i 'AliPID::EParticleType' - 0 'AliPID::kKaon' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmas",1698,G__G__STEERBase_599_0_66, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 8, 
"f - 'Float_t' 0 - mom f - 'Float_t' 0 - dEdx "
"i - 'Int_t' 0 - nPoints i 'AliPID::EParticleType' - 0 'AliPID::kKaon' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMIP",518,G__G__STEERBase_599_0_67, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRes0",634,G__G__STEERBase_599_0_68, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResN2",714,G__G__STEERBase_599_0_69, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRes0",634,G__G__STEERBase_599_0_70, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'AliTPCPIDResponse::ETPCgainScenario' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResN2",714,G__G__STEERBase_599_0_71, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'AliTPCPIDResponse::ETPCgainScenario' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegisterSpline",1456,G__G__STEERBase_599_0_72, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvaldEdxSpline",1400,G__G__STEERBase_599_0_73, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - bg i - 'Int_t' 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SEvaldEdx",864,G__G__STEERBase_599_0_74, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"d - 'Double_t' 0 - bg i - 'Int_t' 0 - entry", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t, Int_t))(&AliTPCPIDResponse::SEvaldEdx) ), 0);
   G__memfunc_setup("SetdEdxType",1107,G__G__STEERBase_599_0_75, 121, -1, -1, 0, 6, 1, 1, 0, 
"i 'AliTPCPIDResponse::ETPCdEdxType' - 0 - dEdxType i - 'Int_t' 0 '0' dEdxChargeType "
"i - 'Int_t' 0 '0' dEdxWeightType d - 'Double_t' 0 '1.' dEdxIROCweight "
"d - 'Double_t' 0 '1.' dEdxOROCmedWeight d - 'Double_t' 0 '1.' dEdxOROClongWeight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetdEdxType",1095,G__G__STEERBase_599_0_76, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCdEdxType), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetdEdxChargeType",1681,G__G__STEERBase_599_0_77, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetdEdxWeightType",1711,G__G__STEERBase_599_0_78, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIROCweight",1237,G__G__STEERBase_599_0_79, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOROCmedWeight",1521,G__G__STEERBase_599_0_80, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOROClongWeight",1643,G__G__STEERBase_599_0_81, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackdEdx",1178,G__G__STEERBase_599_0_82, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "U 'AliVTrack' - 10 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitFromOADB",1086,G__G__STEERBase_599_0_83, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 10 - run i - 'Int_t' 0 - pass "
"u 'TString' - 0 - passName C - - 10 '\"$ALICE_PHYSICS/OADB/COMMON/PID/data/TPCPIDResponseOADB.root\"' oadbFile "
"g - 'Bool_t' 0 'kTRUE' initMultiplicityCorrection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSplinesFromArray",1949,G__G__STEERBase_599_0_84, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObjArray' - 10 - arrSplines", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMultiplicityCorrectionFromString",3672,G__G__STEERBase_599_0_85, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - multiplicityData", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetdEdxTypeFromString",2142,G__G__STEERBase_599_0_86, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - dEdxTypeSet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetdEdxResolutionFromString",2800,G__G__STEERBase_599_0_87, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - dEdxTypeSet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRecoPassNameUsed",1874,G__G__STEERBase_599_0_88, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChecksum",1107,G__G__STEERBase_599_0_89, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 1, 3, 1, 0, "U 'TObject' - 10 - obj", (char*)NULL, (void*) G__func2void( (TString (*)(const TObject*))(&AliTPCPIDResponse::GetChecksum) ), 0);
   G__memfunc_setup("GetMultiplicityCorrectionArrayFromString",4171,G__G__STEERBase_599_0_90, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray), -1, 0, 1, 3, 1, 0, "u 'TString' - 11 - corrections", (char*)NULL, (void*) G__func2void( (TObjArray* (*)(const TString&))(&AliTPCPIDResponse::GetMultiplicityCorrectionArrayFromString) ), 0);
   G__memfunc_setup("GetExpectedSignal",1712,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 2, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"d - 'Double_t' 0 - dEdx U 'TSpline3' - 10 - responseFunction "
"g - 'Bool_t' 0 - correctEta g - 'Bool_t' 0 - correctMultiplicity", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExpectedSigma",1603,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 8, 1, 2, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - species "
"i 'AliTPCPIDResponse::ETPCgainScenario' - 0 - gainScenario d - 'Double_t' 0 - dEdx "
"i - 'Int_t' 0 - nPoints U 'TSpline3' - 10 - responseFunction "
"g - 'Bool_t' 0 - correctEta g - 'Bool_t' 0 - correctMultiplicity", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sectorNumber",1273,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "d - 'Double_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_599_0_94, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTPCPIDResponse::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_599_0_95, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTPCPIDResponse::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_599_0_96, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTPCPIDResponse::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_599_0_97, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTPCPIDResponse::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_599_0_101, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_599_0_102, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTPCPIDResponse::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_599_0_103, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTPCPIDResponse::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_599_0_104, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTPCPIDResponse::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_599_0_105, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTPCPIDResponse::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTPCPIDResponse", 1703, G__G__STEERBase_599_0_106, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTRDPIDResponseObject(void) {
   /* AliTRDPIDResponseObject */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponseObject));
   G__memfunc_setup("AliTRDPIDResponseObject",2179,G__G__STEERBase_604_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponseObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDPIDResponseObject",2179,G__G__STEERBase_604_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponseObject), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDPIDResponseObject",2179,G__G__STEERBase_604_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponseObject), -1, 0, 1, 1, 1, 0, "u 'AliTRDPIDResponseObject' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_604_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponseObject), -1, 1, 1, 1, 1, 0, "u 'AliTRDPIDResponseObject' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPIDParams",1133,G__G__STEERBase_604_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'AliTRDPIDParams' - 0 - params i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 'AliTRDPIDResponse::kLQ1D' method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPIDReference",1432,G__G__STEERBase_604_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'AliTRDPIDReference' - 0 - params i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 'AliTRDPIDResponse::kLQ1D' method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLowerReference",1720,G__G__STEERBase_604_0_8, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 4, 1, 1, 8, 
"i 'AliPID::EParticleType' - 0 - spec f - 'Float_t' 0 - p "
"f - 'Float_t' 1 - pLower i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 'AliTRDPIDResponse::kLQ1D' method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUpperReference",1723,G__G__STEERBase_604_0_9, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 4, 1, 1, 8, 
"i 'AliPID::EParticleType' - 0 - spec f - 'Float_t' 0 - p "
"f - 'Float_t' 1 - pUpper i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 'AliTRDPIDResponse::kLQ1D' method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfMomentumBins",2332,G__G__STEERBase_604_0_10, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 'AliTRDPIDResponse::kLQ1D' method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThresholdParameters",2273,G__G__STEERBase_604_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 0 - ntracklets d - 'Double_t' 0 - efficiency "
"D - 'Double_t' 0 - params d - 'Double_t' 0 '-1' centrality "
"i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 'AliTRDPIDResponse::kLQ1D' method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNSlicesQ0",1106,G__G__STEERBase_604_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNSlicesQ0",1118,G__G__STEERBase_604_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nsl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_604_0_14, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTRDPIDResponseObject::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_604_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDResponseObject::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_604_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTRDPIDResponseObject::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_604_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTRDPIDResponseObject::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_604_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_604_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDResponseObject::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_604_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDPIDResponseObject::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_604_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDResponseObject::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_604_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDPIDResponseObject::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTRDPIDResponseObject", 2305, G__G__STEERBase_604_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTRDdEdxParams(void) {
   /* AliTRDdEdxParams */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDdEdxParams));
   G__memfunc_setup("AliTRDdEdxParams",1513,G__G__STEERBase_605_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDdEdxParams), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 10 '\"name\"' name u 'TString' - 10 '\"title\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMeanParameter",1602,G__G__STEERBase_605_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TVectorTlEfloatgR), G__defined_typename("TVectorF"), 1, 4, 1, 1, 9, 
"i - 'Int_t' 10 - itype i - 'Int_t' 10 - nch "
"i - 'Int_t' 10 - ncls g - 'Bool_t' 10 - etaCorrection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaParameter",1714,G__G__STEERBase_605_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TVectorTlEfloatgR), G__defined_typename("TVectorF"), 1, 4, 1, 1, 9, 
"i - 'Int_t' 10 - itype i - 'Int_t' 10 - nch "
"i - 'Int_t' 10 - ncls g - 'Bool_t' 10 - etaCorrection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeanParameter",1614,G__G__STEERBase_605_0_5, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 10 - itype i - 'Int_t' 10 - nch "
"i - 'Int_t' 10 - ncls i - 'Int_t' 10 - npar "
"F - 'Float_t' 10 - vals g - 'Bool_t' 10 - etaCorrection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigmaParameter",1726,G__G__STEERBase_605_0_6, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 10 - itype i - 'Int_t' 10 - nch "
"i - 'Int_t' 10 - ncls i - 'Int_t' 10 - npar "
"F - 'Float_t' 10 - vals g - 'Bool_t' 10 - etaCorrection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameter",1217,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TVectorTlEfloatgR), G__defined_typename("TVectorF"), 1, 5, 1, 4, 9, 
"U 'TVectorT<float>' 'TVectorF' 10 - par i - 'Int_t' 10 - itype "
"i - 'Int_t' 10 - nch i - 'Int_t' 10 - ncls "
"g - 'Bool_t' 10 - etaCorrection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameter",1229,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 7, 1, 4, 0, 
"U 'TVectorT<float>' 'TVectorF' 0 - par i - 'Int_t' 10 - itype "
"i - 'Int_t' 10 - nch i - 'Int_t' 10 - ncls "
"i - 'Int_t' 10 - npar F - 'Float_t' 10 - vals "
"g - 'Bool_t' 10 - etaCorrection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIter",692,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 4, 8, 
"i - 'Int_t' 10 - itype i - 'Int_t' 10 - nch "
"i - 'Int_t' 10 - ncls g - 'Bool_t' 10 - etaCorrection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_605_0_10, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTRDdEdxParams::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_605_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDdEdxParams::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_605_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTRDdEdxParams::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_605_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTRDdEdxParams::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_605_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_605_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDdEdxParams::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_605_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDdEdxParams::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_605_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDdEdxParams::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_605_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDdEdxParams::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliTRDdEdxParams", 1513, G__G__STEERBase_605_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDdEdxParams), -1, 0, 1, 1, 1, 0, "u 'AliTRDdEdxParams' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliTRDdEdxParams", 1639, G__G__STEERBase_605_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_605_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDdEdxParams), -1, 1, 1, 1, 1, 0, "u 'AliTRDdEdxParams' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTRDPIDResponse(void) {
   /* AliTRDPIDResponse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponse));
   G__memfunc_setup("AliTRDPIDResponse",1580,G__G__STEERBase_607_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponse), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDPIDResponse",1580,G__G__STEERBase_607_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponse), -1, 0, 1, 1, 1, 0, "u 'AliTRDPIDResponse' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_607_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponse), -1, 1, 1, 1, 1, 0, "u 'AliTRDPIDResponse' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmas",1698,G__G__STEERBase_607_0_4, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - type "
"g - 'Bool_t' 0 - fCorrectEta g - 'Bool_t' 0 - fCorrectCluster "
"g - 'Bool_t' 0 - fCorrectCentrality", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalDelta",1384,G__G__STEERBase_607_0_5, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - type "
"g - 'Bool_t' 0 'kFALSE' ratio g - 'Bool_t' 0 'kFALSE' fCorrectEta "
"g - 'Bool_t' 0 'kFALSE' fCorrectCluster g - 'Bool_t' 0 'kFALSE' fCorrectCentrality "
"D - 'Double_t' 0 '0x0' info", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MeandEdx",774,G__G__STEERBase_607_0_6, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"D - 'Double_t' 10 - xx F - 'Float_t' 10 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(const Double_t*, const Float_t*))(&AliTRDPIDResponse::MeandEdx) ), 0);
   G__memfunc_setup("MeanTR",551,G__G__STEERBase_607_0_7, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"D - 'Double_t' 10 - xx F - 'Float_t' 10 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(const Double_t*, const Float_t*))(&AliTRDPIDResponse::MeanTR) ), 0);
   G__memfunc_setup("MeandEdxTR",940,G__G__STEERBase_607_0_8, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"D - 'Double_t' 10 - xx F - 'Float_t' 10 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(const Double_t*, const Float_t*))(&AliTRDPIDResponse::MeandEdxTR) ), 0);
   G__memfunc_setup("ResolutiondEdxTR",1631,G__G__STEERBase_607_0_9, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"D - 'Double_t' 10 - xx F - 'Float_t' 10 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(const Double_t*, const Float_t*))(&AliTRDPIDResponse::ResolutiondEdxTR) ), 0);
   G__memfunc_setup("GetResponse",1135,G__G__STEERBase_607_0_10, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 1, 8, 
"i - 'Int_t' 0 - n D - 'Double_t' 50 - dedx "
"F - 'Float_t' 50 - p D - 'Double_t' 0 - prob "
"i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 'kLQ1D' PIDmethod g - 'Bool_t' 0 'kTRUE' kNorm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSlices",1697,G__G__STEERBase_607_0_11, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNslices), -1, 0, 1, 1, 1, 8, "i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 'kLQ1D' PIDmethod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOwner",711,G__G__STEERBase_607_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOwner",823,G__G__STEERBase_607_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGainNormalisationFactor",2666,G__G__STEERBase_607_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - gainFactor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPIDResponseObject",1967,G__G__STEERBase_607_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'AliTRDPIDResponseObject' - 10 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetdEdxParams",1301,G__G__STEERBase_607_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'AliTRDdEdxParams' - 10 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEtaCorrMap",1262,G__G__STEERBase_607_0_17, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH2D), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEtaCorrMap",1274,G__G__STEERBase_607_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n U 'TH2D' - 0 - hMapn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterCorrMap",1718,G__G__STEERBase_607_0_19, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH2D), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClusterCorrMap",1730,G__G__STEERBase_607_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n U 'TH2D' - 0 - hMapn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCentralityCorrMap",2035,G__G__STEERBase_607_0_21, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH2D), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentralityCorrMap",2047,G__G__STEERBase_607_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n U 'TH2D' - 0 - hMapn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentrality",1355,G__G__STEERBase_607_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - currentCentrality", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Load",384,G__G__STEERBase_607_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 '0' filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IdentifiedAsElectron",2021,G__G__STEERBase_607_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 8, 
"i - 'Int_t' 0 - nTracklets D - 'Double_t' 10 - like "
"d - 'Double_t' 0 - p d - 'Double_t' 0 - level "
"d - 'Double_t' 0 '-1' centrality i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 'kLQ1D' PIDmethod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEtaCorrection",1618,G__G__STEERBase_607_0_26, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"U 'AliVTrack' - 10 - track d - 'Double_t' 0 - bg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterCorrection",2074,G__G__STEERBase_607_0_27, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"U 'AliVTrack' - 10 - track d - 'Double_t' 0 - bg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCentralityCorrection",2391,G__G__STEERBase_607_0_28, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"U 'AliVTrack' - 10 - track d - 'Double_t' 0 - bg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMagField",1061,G__G__STEERBase_607_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - mf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CookdEdx",785,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 4, 8, 
"i - 'Int_t' 0 - nSlice D - 'Double_t' 50 - in "
"D - 'Double_t' 0 - out i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 'kLQ1D' PIDmethod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProbabilitySingleLayer",2560,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 4, 8, 
"i - 'Int_t' 0 - species d - 'Double_t' 0 - plocal "
"D - 'Double_t' 0 - dEdx i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 'kLQ1D' PIDmethod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_607_0_32, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTRDPIDResponse::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_607_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDResponse::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_607_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTRDPIDResponse::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_607_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTRDPIDResponse::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_607_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_607_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDResponse::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_607_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDPIDResponse::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_607_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDResponse::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_607_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDPIDResponse::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTRDPIDResponse", 1706, G__G__STEERBase_607_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTOFPIDParams(void) {
   /* AliTOFPIDParams */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDParams));
   G__memfunc_setup("AliTOFPIDParams",1344,G__G__STEERBase_614_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDParams), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTOFPIDParams",1344,G__G__STEERBase_614_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDParams), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFresolution",1629,G__G__STEERBase_614_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStartTimeMethod",1822,G__G__STEERBase_614_0_4, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEStartTimeType_t), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigParams",1191,G__G__STEERBase_614_0_5, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFtail",947,G__G__STEERBase_614_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFmatchingLossMC",1925,G__G__STEERBase_614_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFadditionalMismForMC",2415,G__G__STEERBase_614_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFtimeOffset",1567,G__G__STEERBase_614_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOADBentryTag",1412,G__G__STEERBase_614_0_10, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOADBentryTag",1424,G__G__STEERBase_614_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFresolution",1641,G__G__STEERBase_614_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStartTimeMethod",1834,G__G__STEERBase_614_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i 'AliPIDResponse::EStartTimeType_t' - 0 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigPparams",1315,G__G__STEERBase_614_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFtail",959,G__G__STEERBase_614_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - tail", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFmatchingLossMC",1937,G__G__STEERBase_614_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - lossMC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFadditionalMismForMC",2427,G__G__STEERBase_614_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - misMC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFtimeOffset",1579,G__G__STEERBase_614_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - timeOffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_614_0_19, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTOFPIDParams::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_614_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTOFPIDParams::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_614_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTOFPIDParams::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_614_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTOFPIDParams::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_614_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_614_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTOFPIDParams::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_614_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTOFPIDParams::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_614_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTOFPIDParams::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_614_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTOFPIDParams::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliTOFPIDParams", 1344, G__G__STEERBase_614_0_31, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDParams), -1, 0, 1, 1, 1, 0, "u 'AliTOFPIDParams' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliTOFPIDParams", 1470, G__G__STEERBase_614_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_614_0_33, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDParams), -1, 1, 1, 1, 1, 0, "u 'AliTOFPIDParams' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTOFPIDResponse(void) {
   /* AliTOFPIDResponse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDResponse));
   G__memfunc_setup("AliTOFPIDResponse",1579,G__G__STEERBase_616_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDResponse), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTOFPIDResponse",1579,G__G__STEERBase_616_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDResponse), -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeResolution",1775,G__G__STEERBase_616_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeZero",1115,G__G__STEERBase_616_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - t0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeZero",1103,G__G__STEERBase_616_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeResolution",1763,G__G__STEERBase_616_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxMismatchProbability",2569,G__G__STEERBase_616_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxMismatchProbability",2557,G__G__STEERBase_616_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExpectedSigma",1603,G__G__STEERBase_616_0_9, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"f - 'Float_t' 0 - mom f - 'Float_t' 0 - tof "
"f - 'Float_t' 0 - massZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExpectedSigma",1603,G__G__STEERBase_616_0_10, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"f - 'Float_t' 0 - mom f - 'Float_t' 0 - tof "
"i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExpectedSignal",1712,G__G__STEERBase_616_0_11, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMismatchProbability",2263,G__G__STEERBase_616_0_12, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - time d - 'Double_t' 0 - eta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTailRandomValue",1800,G__G__STEERBase_616_0_13, 100, -1, G__defined_typename("Double_t"), 0, 4, 3, 1, 0, 
"f - 'Float_t' 0 '1.0' pt f - 'Float_t' 0 '0.0' eta "
"f - 'Float_t' 0 '0.0' time f - 'Float_t' 0 '0.0' addmism", "generate a random value to add a tail to TOF time (for MC analyses), addmism = additional mismatch in percentile", (void*) G__func2void( (Double_t (*)(Float_t, Float_t, Float_t, Float_t))(&AliTOFPIDResponse::GetTailRandomValue) ), 0);
   G__memfunc_setup("GetMismatchRandomValue",2228,G__G__STEERBase_616_0_14, 100, -1, G__defined_typename("Double_t"), 0, 1, 3, 1, 0, "f - 'Float_t' 0 - eta", "generate a random value for mismatched tracks (for MC analyses)", (void*) G__func2void( (Double_t (*)(Float_t))(&AliTOFPIDResponse::GetMismatchRandomValue) ), 0);
   G__memfunc_setup("SetT0event",978,G__G__STEERBase_616_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - t0event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0resolution",1540,G__G__STEERBase_616_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - t0resolution", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetT0info",1075,G__G__STEERBase_616_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMomBoundary",1433,G__G__STEERBase_616_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMomBin",866,G__G__STEERBase_616_0_19, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "f - 'Float_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNmomBins",1091,G__G__STEERBase_616_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinMom",877,G__G__STEERBase_616_0_21, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ibin", "overrun static array - coverity", (void*) NULL, 0);
   G__memfunc_setup("GetMaxMom",879,G__G__STEERBase_616_0_22, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ibin", "overrun static array - coverity", (void*) NULL, 0);
   G__memfunc_setup("SetT0bin",745,G__G__STEERBase_616_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ibin f - 'Float_t' 0 - t0bin", "overrun static array - coverity", (void*) NULL, 0);
   G__memfunc_setup("SetT0binRes",1043,G__G__STEERBase_616_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ibin f - 'Float_t' 0 - t0binRes", "overrun static array - coverity", (void*) NULL, 0);
   G__memfunc_setup("SetT0binMask",1141,G__G__STEERBase_616_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ibin i - 'Int_t' 0 - t0binMask", "overrun static array - coverity", (void*) NULL, 0);
   G__memfunc_setup("GetT0bin",733,G__G__STEERBase_616_0_26, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ibin", "overrun static array - coverity", (void*) NULL, 0);
   G__memfunc_setup("GetT0binRes",1031,G__G__STEERBase_616_0_27, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ibin", "overrun static array - coverity", (void*) NULL, 0);
   G__memfunc_setup("GetT0binMask",1129,G__G__STEERBase_616_0_28, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ibin", "overrun static array - coverity", (void*) NULL, 0);
   G__memfunc_setup("GetStartTime",1213,G__G__STEERBase_616_0_29, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "f - 'Float_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStartTimeRes",1511,G__G__STEERBase_616_0_30, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "f - 'Float_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStartTimeMask",1609,G__G__STEERBase_616_0_31, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "f - 'Float_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrackParameter",1730,G__G__STEERBase_616_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ip f - 'Float_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackParameter",1718,G__G__STEERBase_616_0_33, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFchannel",1250,G__G__STEERBase_616_0_34, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'AliVParticle' - 0 - trk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFtail",947,G__G__STEERBase_616_0_35, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFtail",959,G__G__STEERBase_616_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - tail", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFtailAllPara",1628,G__G__STEERBase_616_0_37, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - mean f - 'Float_t' 0 - tail", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadTOFtailHisto",1562,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_616_0_39, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTOFPIDResponse::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_616_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTOFPIDResponse::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_616_0_41, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTOFPIDResponse::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_616_0_42, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTOFPIDResponse::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_616_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_616_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTOFPIDResponse::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_616_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTOFPIDResponse::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_616_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTOFPIDResponse::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_616_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTOFPIDResponse::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliTOFPIDResponse", 1579, G__G__STEERBase_616_0_51, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDResponse), -1, 0, 1, 1, 1, 0, "u 'AliTOFPIDResponse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliTOFPIDResponse", 1705, G__G__STEERBase_616_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_616_0_53, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDResponse), -1, 1, 1, 1, 1, 0, "u 'AliTOFPIDResponse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliHMPIDPIDResponse(void) {
   /* AliHMPIDPIDResponse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponse));
   G__memfunc_setup("AliHMPIDPIDResponse",1716,G__G__STEERBase_630_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponse), -1, 0, 0, 1, 1, 0, "", "ctor", (void*) NULL, 0);
   G__memfunc_setup("AliHMPIDPIDResponse",1716,G__G__STEERBase_630_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponse), -1, 0, 1, 1, 1, 0, "u 'AliHMPIDPIDResponse' - 11 - c", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_630_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDResponse), -1, 1, 1, 1, 1, 0, "u 'AliHMPIDPIDResponse' - 11 - c", "dummy assignment operator", (void*) NULL, 0);
   G__memfunc_setup("GetExpectedSignal",1712,G__G__STEERBase_630_0_4, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"U 'AliVTrack' - 10 - vTrk i 'AliPID::EParticleType' - 0 - specie", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExpectedSigma",1603,G__G__STEERBase_630_0_5, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"U 'AliVTrack' - 10 - vTrk i 'AliPID::EParticleType' - 0 - specie", "Find the sigma for a given ThetaCerTh", (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmas",1698,G__G__STEERBase_630_0_6, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"U 'AliVTrack' - 10 - vTrk i 'AliPID::EParticleType' - 0 - specie", "Find the expected Cherenkov angle for a given track", (void*) NULL, 0);
   G__memfunc_setup("GetProbability",1441,G__G__STEERBase_630_0_7, 121, -1, -1, 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - vTrk i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - prob", "Find the PID probability array", (void*) NULL, 0);
   G__memfunc_setup("GetSignalDelta",1384,G__G__STEERBase_630_0_8, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - vTrk i 'AliPID::EParticleType' - 0 - specie "
"g - 'Bool_t' 0 'kFALSE' ratio", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Propagate",931,G__G__STEERBase_630_0_9, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TVector3' - 10 - dir u 'TVector3' - 1 - pos "
"d - 'Double_t' 0 - z", "propagate photon alogn the line  ", (void*) NULL, 0);
   G__memfunc_setup("Refract",711,G__G__STEERBase_630_0_10, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TVector3' - 1 - dir d - 'Double_t' 0 - n1 "
"d - 'Double_t' 0 - n2", "refract photon on the boundary", (void*) NULL, 0);
   G__memfunc_setup("TracePhot",906,G__G__STEERBase_630_0_11, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TVector2), -1, 0, 6, 1, 1, 8, 
"d - 'Double_t' 0 - xRa d - 'Double_t' 0 - yRa "
"d - 'Double_t' 0 - thRa d - 'Double_t' 0 - phRa "
"d - 'Double_t' 0 - ckovThe d - 'Double_t' 0 - ckovPhi", "trace photon created by track to PC ", (void*) NULL, 0);
   G__memfunc_setup("Trs2Lors",779,G__G__STEERBase_630_0_12, 121, -1, -1, 0, 5, 1, 1, 8, 
"d - 'Double_t' 0 - thRa d - 'Double_t' 0 - phRa "
"u 'TVector3' - 0 - dirCkov d - 'Double_t' 1 - thetaCer "
"d - 'Double_t' 1 - phiCer", "TRS to LORS", (void*) NULL, 0);
   G__memfunc_setup("TraceForward",1220,G__G__STEERBase_630_0_13, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TVector2), -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - xRa d - 'Double_t' 0 - yRa "
"u 'TVector3' - 0 - dirCkov", "tracing forward a photon from (x,y) to PC", (void*) NULL, 0);
   G__memfunc_setup("SetTrack",801,G__G__STEERBase_630_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - xRad d - 'Double_t' 0 - yRad "
"d - 'Double_t' 0 - theta d - 'Double_t' 0 - phi", "set track parameter at RAD", (void*) NULL, 0);
   G__memfunc_setup("RadThick",778,G__G__STEERBase_630_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Radiator thickness", (void*) NULL, 0);
   G__memfunc_setup("WinThick",801,G__G__STEERBase_630_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Window thickness", (void*) NULL, 0);
   G__memfunc_setup("GapThick",779,G__G__STEERBase_630_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Proximity gap thicknes", (void*) NULL, 0);
   G__memfunc_setup("GetRefIdx",866,G__G__STEERBase_630_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "running refractive index", (void*) NULL, 0);
   G__memfunc_setup("WinIdx",595,G__G__STEERBase_630_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Mean refractive index of WIN material (SiO2) ", (void*) NULL, 0);
   G__memfunc_setup("GapIdx",573,G__G__STEERBase_630_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Mean refractive index of GAP material (CH4)", (void*) NULL, 0);
   G__memfunc_setup("IsInside",792,G__G__STEERBase_630_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 '0' d", "is point inside chamber boundaries?", (void*) G__func2void( (Bool_t (*)(Float_t, Float_t, Float_t))(&AliHMPIDPIDResponse::IsInside) ), 0);
   G__memfunc_setup("IsInDead",737,G__G__STEERBase_630_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", "is the point in a dead area?", (void*) G__func2void( (Bool_t (*)(Float_t, Float_t))(&AliHMPIDPIDResponse::IsInDead) ), 0);
   G__memfunc_setup("SizeAllX",780,G__G__STEERBase_630_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 3, 1, 0, "", "all PCs size x, [cm]        ", (void*) G__func2void( (Float_t (*)())(&AliHMPIDPIDResponse::SizeAllX) ), 0);
   G__memfunc_setup("SizeAllY",781,G__G__STEERBase_630_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 3, 1, 0, "", "all PCs size y, [cm]    ", (void*) G__func2void( (Float_t (*)())(&AliHMPIDPIDResponse::SizeAllY) ), 0);
   G__memfunc_setup("IdealPosition",1332,G__G__STEERBase_630_0_25, 121, -1, -1, 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - iCh U 'TGeoHMatrix' - 0 - m", "ideal position of given chamber ", (void*) G__func2void( (void (*)(Int_t, TGeoHMatrix*))(&AliHMPIDPIDResponse::IdealPosition) ), 0);
   G__memfunc_setup("SigLoc",577,G__G__STEERBase_630_0_26, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 8, 
"d - 'Double_t' 0 - trkTheta d - 'Double_t' 0 - trkPhi "
"d - 'Double_t' 0 - ckovTh d - 'Double_t' 0 - ckovPh "
"d - 'Double_t' 0 - beta", "error due to cathode segmetation", (void*) NULL, 0);
   G__memfunc_setup("SigGeom",683,G__G__STEERBase_630_0_27, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 8, 
"d - 'Double_t' 0 - trkTheta d - 'Double_t' 0 - trkPhi "
"d - 'Double_t' 0 - ckovTh d - 'Double_t' 0 - ckovPh "
"d - 'Double_t' 0 - beta", "error due to unknown photon origin", (void*) NULL, 0);
   G__memfunc_setup("SigCrom",692,G__G__STEERBase_630_0_28, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 0 - trkTheta d - 'Double_t' 0 - ckovTh "
"d - 'Double_t' 0 - ckovPh d - 'Double_t' 0 - beta", "error due to unknonw photon energy", (void*) NULL, 0);
   G__memfunc_setup("Sigma2",547,G__G__STEERBase_630_0_29, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 0 - trkTheta d - 'Double_t' 0 - trkPhi "
"d - 'Double_t' 0 - ckovTh d - 'Double_t' 0 - ckovPh", "photon candidate sigma^2  ", (void*) NULL, 0);
   G__memfunc_setup("GetNMean",751,G__G__STEERBase_630_0_30, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "U 'AliVTrack' - 10 - vTrk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SigmaCorrFact",1285,G__G__STEERBase_630_0_31, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - iPart d - 'Double_t' 0 - occupancy", "correction factor for theoretical resolution", (void*) G__func2void( (Double_t (*)(Int_t, Double_t))(&AliHMPIDPIDResponse::SigmaCorrFact) ), 0);
   G__memfunc_setup("SetRefIndexArray",1600,G__G__STEERBase_630_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRefIndexArray",1588,G__G__STEERBase_630_0_33, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExpectedSignal",1424,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 4, 8, 
"U 'AliVTrack' - 10 - vTrk d - 'Double_t' 0 - nmean "
"i 'AliPID::EParticleType' - 0 - specie", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExpectedSigma",1315,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 4, 8, 
"U 'AliVTrack' - 10 - vTrk d - 'Double_t' 0 - nmean "
"i 'AliPID::EParticleType' - 0 - specie", "Find the sigma for a given ThetaCerTh", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_630_0_36, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliHMPIDPIDResponse::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_630_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliHMPIDPIDResponse::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_630_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliHMPIDPIDResponse::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_630_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliHMPIDPIDResponse::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_630_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_630_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliHMPIDPIDResponse::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_630_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliHMPIDPIDResponse::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_630_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliHMPIDPIDResponse::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_630_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliHMPIDPIDResponse::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliHMPIDPIDResponse", 1842, G__G__STEERBase_630_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliEMCALPIDResponse(void) {
   /* AliEMCALPIDResponse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEMCALPIDResponse));
   G__memfunc_setup("AliEMCALPIDResponse",1700,G__G__STEERBase_634_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEMCALPIDResponse), -1, 0, 0, 1, 1, 0, "", "ctor", (void*) NULL, 0);
   G__memfunc_setup("AliEMCALPIDResponse",1700,G__G__STEERBase_634_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEMCALPIDResponse), -1, 0, 1, 1, 1, 0, "u 'AliEMCALPIDResponse' - 11 - other", "copy ructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_634_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEMCALPIDResponse), -1, 1, 1, 1, 1, 0, "u 'AliEMCALPIDResponse' - 11 - other", "assignment operator", (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmas",1698,G__G__STEERBase_634_0_4, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 8, 
"f - 'Float_t' 0 - pt f - 'Float_t' 0 - eop "
"i 'AliPID::EParticleType' - 0 - n i - 'Int_t' 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExpectedNorm",1518,G__G__STEERBase_634_0_5, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"f - 'Float_t' 0 - pt i 'AliPID::EParticleType' - 0 - n "
"i - 'Int_t' 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPIDParams",1133,G__G__STEERBase_634_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObjArray' - 10 - params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentrality",1355,G__G__STEERBase_634_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - currentCentrality", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComputeEMCALProbability",2240,G__G__STEERBase_634_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 0 - nSpecies f - 'Float_t' 0 - pt "
"f - 'Float_t' 0 - eop i - 'Int_t' 0 - charge "
"D - 'Double_t' 0 - pEMCAL", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParams",900,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 3, 1, 4, 9, 
"i - 'Int_t' 0 - nParticle f - 'Float_t' 0 - fPt "
"i - 'Int_t' 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_634_0_10, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliEMCALPIDResponse::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_634_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliEMCALPIDResponse::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_634_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliEMCALPIDResponse::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_634_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliEMCALPIDResponse::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_634_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_634_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliEMCALPIDResponse::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_634_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliEMCALPIDResponse::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_634_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliEMCALPIDResponse::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_634_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliEMCALPIDResponse::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliEMCALPIDResponse", 1826, G__G__STEERBase_634_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliMCEvent(void) {
   /* AliMCEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEvent));
   G__memfunc_setup("AliMCEvent",936,G__G__STEERBase_636_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMCEvent",936,G__G__STEERBase_636_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEvent), -1, 0, 1, 1, 1, 0, "u 'AliMCEvent' - 11 - mcEvnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_636_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEvent), -1, 1, 1, 1, 1, 0, "u 'AliMCEvent' - 11 - mcEvnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddObject",864,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindListObject",1396,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetList",700,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateStdContent",1626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStdContent",1318,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadFromTree",1184,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - - C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteToTree",1118,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "U 'TTree' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetStdNames",1099,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreReadAll",956,G__G__STEERBase_636_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHeader",873,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVHeader), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRunNumber",1226,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPeriodNumber",1528,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMagneticField",1592,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRunNumber",1214,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPeriodNumber",1516,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMagneticField",1580,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOrbitNumber",1429,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetBunchCrossNumber",1935,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEventType",1232,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTriggerMask",1420,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTriggerCluster",1762,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOrbitNumber",1417,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBunchCrossNumber",1923,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventType",1220,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerMask",1408,(G__InterfaceMethod) NULL,109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerCluster",1750,(G__InterfaceMethod) NULL,98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFiredTriggerClasses",2220,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCN1Energy",1258,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCP1Energy",1260,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCN2Energy",1259,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCP2Energy",1261,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCEMEnergy",1277,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrack",789,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVParticle), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfTracks",1702,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfV0s",1335,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfCascades",1877,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrimaryVertex",1666,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Stack",502,G__G__STEERBase_636_0_43, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Header",585,G__G__STEERBase_636_0_44, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenEventHeader",1381,G__G__STEERBase_636_0_45, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConnectTreeE",1183,G__G__STEERBase_636_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConnectTreeK",1189,G__G__STEERBase_636_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConnectHeaderAndStack",2076,G__G__STEERBase_636_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliHeader' - 0 - header", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConnectTreeTR",1280,G__G__STEERBase_636_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clean",483,G__G__STEERBase_636_0_50, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitEvent",918,G__G__STEERBase_636_0_51, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishEvent",1123,G__G__STEERBase_636_0_52, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetParticleAndTR",1549,G__G__STEERBase_636_0_53, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i U 'TParticle' - 1 - particle "
"U 'TClonesArray' - 1 - trefs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawCheck",876,G__G__STEERBase_636_0_54, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - search", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddSubsidiaryEvent",1834,G__G__STEERBase_636_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliMCEvent' - 0 - event", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfPrimaries",2026,G__G__STEERBase_636_0_56, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrimaryOffset",1643,G__G__STEERBase_636_0_57, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSecondaryOffset",1839,G__G__STEERBase_636_0_58, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPrimaryOffset",1655,G__G__STEERBase_636_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ioff", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSecondaryOffset",1851,G__G__STEERBase_636_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ioff", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsPhysicalPrimary",1757,G__G__STEERBase_636_0_61, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BgLabelToIndex",1348,G__G__STEERBase_636_0_62, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - label", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BgLabelOffset",1264,G__G__STEERBase_636_0_63, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&AliMCEvent::BgLabelOffset) ), 0);
   G__memfunc_setup("IsFromBGEvent",1243,G__G__STEERBase_636_0_64, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCocktailList",1510,G__G__STEERBase_636_0_65, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGenerator",1223,G__G__STEERBase_636_0_66, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCocktailGenerator",2033,G__G__STEERBase_636_0_67, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - index u 'TString' - 1 - nameGen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSecondaryFromWeakDecay",2406,G__G__STEERBase_636_0_68, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSecondaryFromMaterial",2343,G__G__STEERBase_636_0_69, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParticleArray",1631,G__G__STEERBase_636_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TClonesArray' - 0 - mcParticles", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetExternalHeader",1720,G__G__STEERBase_636_0_71, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliVHeader' - 0 - aodmcHeader", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindHeader",970,G__G__STEERBase_636_0_72, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ipart", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EventIndex",1018,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EventIndexForCaloCluster",2434,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EventIndexForPHOSCell",2011,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EventIndexForEMCALCell",2051,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCentrality",1343,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCentrality), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventplane",1330,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventplane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVZEROData",1072,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZERO), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCData",891,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVZDC), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDataLayoutType",1722,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEDataLayoutType), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReorderAndExpandTreeTR",2172,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindIndexAndEvent",1678,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 8, 
"i - 'Int_t' 0 - oldidx U 'AliMCEvent' - 1 - event", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UpdateEventInformation",2283,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssignGeneratorIndex",2052,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AssignGeneratorIndex",2052,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - index i - 'Int_t' 0 - dmin "
"i - 'Int_t' 0 - dmax", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_636_0_87, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliMCEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_636_0_88, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMCEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_636_0_89, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliMCEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_636_0_90, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliMCEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_636_0_94, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_636_0_95, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMCEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_636_0_96, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMCEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_636_0_97, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMCEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_636_0_98, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMCEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliMCEvent", 1062, G__G__STEERBase_636_0_99, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliHMPIDPIDParams(void) {
   /* AliHMPIDPIDParams */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDParams));
   G__memfunc_setup("AliHMPIDPIDParams",1481,G__G__STEERBase_637_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDParams), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliHMPIDPIDParams",1481,G__G__STEERBase_637_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDParams), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_637_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDParams), -1, 1, 1, 1, 1, 0, "u 'AliHMPIDPIDParams' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliHMPIDPIDParams",1481,G__G__STEERBase_637_0_4, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliHMPIDPIDParams), -1, 0, 1, 1, 1, 0, "u 'AliHMPIDPIDParams' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHMPIDrefIndex",1479,G__G__STEERBase_637_0_5, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHMPIDrefIndex",1491,G__G__STEERBase_637_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_637_0_7, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliHMPIDPIDParams::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_637_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliHMPIDPIDParams::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_637_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliHMPIDPIDParams::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_637_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliHMPIDPIDParams::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_637_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_637_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliHMPIDPIDParams::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_637_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliHMPIDPIDParams::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_637_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliHMPIDPIDParams::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_637_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliHMPIDPIDParams::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliHMPIDPIDParams", 1607, G__G__STEERBase_637_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliPIDResponse(void) {
   /* AliPIDResponse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponse));
   G__memfunc_setup("AliPIDResponse",1346,G__G__STEERBase_638_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponse), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' isMC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSResponse",1375,G__G__STEERBase_638_0_2, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliITSPIDResponse), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCResponse",1366,G__G__STEERBase_638_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTPCPIDResponse), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFResponse",1368,G__G__STEERBase_638_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDResponse), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDResponse",1369,G__G__STEERBase_638_0_5, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDResponse), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEMCALResponse",1489,G__G__STEERBase_638_0_6, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEMCALPIDResponse), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NumberOfSigmas",1410,G__G__STEERBase_638_0_7, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 4, 1, 1, 8, 
"i 'AliPIDResponse::EDetector' - 0 - detCode U 'AliVParticle' - 10 - track "
"i 'AliPID::EParticleType' - 0 - type d - 'Double_t' 1 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NumberOfSigmas",1410,G__G__STEERBase_638_0_8, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 8, 
"i 'AliPIDResponse::EDetector' - 0 - detCode U 'AliVParticle' - 10 - track "
"i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NumberOfSigmasITS",1650,G__G__STEERBase_638_0_9, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NumberOfSigmasTPC",1641,G__G__STEERBase_638_0_10, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NumberOfSigmasTPC",1641,G__G__STEERBase_638_0_11, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type "
"i 'AliTPCPIDResponse::ETPCdEdxSource' - 0 - dedxSource", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NumberOfSigmasTRD",1644,G__G__STEERBase_638_0_12, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NumberOfSigmasEMCAL",1764,G__G__STEERBase_638_0_13, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type "
"d - 'Double_t' 1 - eop D - 'Double_t' 0 - showershape", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NumberOfSigmasTOF",1643,G__G__STEERBase_638_0_14, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NumberOfSigmasTOF",1643,G__G__STEERBase_638_0_15, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type "
"f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NumberOfSigmasHMPID",1780,G__G__STEERBase_638_0_16, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NumberOfSigmasEMCAL",1764,G__G__STEERBase_638_0_17, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IdentifiedAsElectronTRD",2255,G__G__STEERBase_638_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"U 'AliVTrack' - 10 - track d - 'Double_t' 0 - efficiencyLevel "
"d - 'Double_t' 0 '-1' centrality i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 'AliTRDPIDResponse::kLQ1D' PIDmethod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IdentifiedAsElectronTRD",2255,G__G__STEERBase_638_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 1 - ntracklets "
"d - 'Double_t' 0 - efficiencyLevel d - 'Double_t' 0 '-1' centrality "
"i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 'AliTRDPIDResponse::kLQ1D' PIDmethod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalDelta",1384,G__G__STEERBase_638_0_20, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 5, 1, 1, 8, 
"i 'AliPIDResponse::EDetector' - 0 - detCode U 'AliVParticle' - 10 - track "
"i 'AliPID::EParticleType' - 0 - type d - 'Double_t' 1 - val "
"g - 'Bool_t' 0 'kFALSE' ratio", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalDelta",1384,G__G__STEERBase_638_0_21, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 8, 
"i 'AliPIDResponse::EDetector' - 0 - detCode U 'AliVParticle' - 10 - track "
"i 'AliPID::EParticleType' - 0 - type g - 'Bool_t' 0 'kFALSE' ratio", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComputePIDProbability",2107,G__G__STEERBase_638_0_22, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 4, 1, 1, 8, 
"i 'AliPIDResponse::EDetCode' - 0 - detCode U 'AliVTrack' - 10 - track "
"i - 'Int_t' 0 - nSpecies D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComputePIDProbability",2107,G__G__STEERBase_638_0_23, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 4, 1, 1, 8, 
"i 'AliPIDResponse::EDetector' - 0 - detCode U 'AliVTrack' - 10 - track "
"i - 'Int_t' 0 - nSpecies D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComputeITSProbability",2126,G__G__STEERBase_638_0_24, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ComputeTPCProbability",2117,G__G__STEERBase_638_0_25, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ComputeTOFProbability",2119,G__G__STEERBase_638_0_26, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ComputeTRDProbability",2120,G__G__STEERBase_638_0_27, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ComputeEMCALProbability",2240,G__G__STEERBase_638_0_28, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ComputePHOSProbability",2200,G__G__STEERBase_638_0_29, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ComputeHMPIDProbability",2256,G__G__STEERBase_638_0_30, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ComputeTRDProbability",2120,G__G__STEERBase_638_0_31, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 4, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - p i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 - PIDmethod", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckPIDStatus",1343,G__G__STEERBase_638_0_32, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 2, 1, 1, 8, 
"i 'AliPIDResponse::EDetector' - 0 - detCode U 'AliVTrack' - 10 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFPIDParams",1354,G__G__STEERBase_638_0_33, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFPIDParams), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFMismatchProbability",2496,G__G__STEERBase_638_0_34, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "U 'AliVTrack' - 10 '0' track", "if empty argument return the value stored during TOF probability computation", (void*) NULL, 0);
   G__memfunc_setup("SetITSPIDmethod",1402,G__G__STEERBase_638_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "i 'AliPIDResponse::ITSPIDmethod' - 0 - pmeth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOADBPath",975,G__G__STEERBase_638_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOADBPath",963,G__G__STEERBase_638_0_37, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCustomTPCpidResponse",2330,G__G__STEERBase_638_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - tpcpid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCustomTPCpidResponse",2318,G__G__STEERBase_638_0_39, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCustomTPCpidResponseOADBFile",2992,G__G__STEERBase_638_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - tpcpid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCustomTPCpidResponseOADBFile",2980,G__G__STEERBase_638_0_41, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCustomTPCetaMaps",1881,G__G__STEERBase_638_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - tpcEtaMaps", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCustomTPCetaMaps",1869,G__G__STEERBase_638_0_43, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitialiseEvent",1549,G__G__STEERBase_638_0_44, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'AliVEvent' - 0 - event i - 'Int_t' 0 - pass "
"u 'TString' - 0 '\"\"' recoPassName i - 'Int_t' 0 '-1' run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrentFile",1423,G__G__STEERBase_638_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrentAliRootRev",2038,G__G__STEERBase_638_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - alirootRev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentAliRootRev",2026,G__G__STEERBase_638_0_47, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCachePID",989,G__G__STEERBase_638_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - cache", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCachePID",977,G__G__STEERBase_638_0_49, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillTrackDetectorPID",1939,G__G__STEERBase_638_0_50, 121, -1, -1, 0, 2, 1, 1, 8, 
"U 'AliVTrack' - 10 - track i 'AliPIDResponse::EDetector' - 0 - detector", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillTrackDetectorPID",1939,G__G__STEERBase_638_0_51, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentEvent",1541,G__G__STEERBase_638_0_52, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentMCEvent",1685,G__G__STEERBase_638_0_53, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEvent), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrentMCEvent",1697,G__G__STEERBase_638_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliMCEvent' - 0 - mcEvent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMCperiod",1087,G__G__STEERBase_638_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - mcPeriod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRecoPass",1100,G__G__STEERBase_638_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - recoPass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRecoPassName",1485,G__G__STEERBase_638_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - recoPassName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentCentrality",2082,G__G__STEERBase_638_0_58, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrentCentrality",2094,G__G__STEERBase_638_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - centrality", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseTPCEtaCorrection",2162,G__G__STEERBase_638_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' useEtaCorrection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseTPCEtaCorrection",1862,G__G__STEERBase_638_0_61, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseTPCMultiplicityCorrection",3169,G__G__STEERBase_638_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' useMultiplicityCorrection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseTPCMultiplicityCorrection",2869,G__G__STEERBase_638_0_63, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseTRDEtaCorrection",2165,G__G__STEERBase_638_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' useTRDEtaCorrection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseTRDEtaCorrection",1865,G__G__STEERBase_638_0_65, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseTRDClusterCorrection",2621,G__G__STEERBase_638_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' useTRDClusterCorrection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseTRDClusterCorrection",2321,G__G__STEERBase_638_0_67, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseTRDCentralityCorrection",2938,G__G__STEERBase_638_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' useTRDCentralityCorrection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseTRDCentralityCorrection",2638,G__G__STEERBase_638_0_69, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFtail",959,G__G__STEERBase_638_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.9' tail", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFResponse",1380,G__G__STEERBase_638_0_71, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'AliVEvent' - 0 - vevent i 'AliPIDResponse::EStartTimeType_t' - 0 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSsignalTunedOnData",2245,G__G__STEERBase_638_0_72, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "U 'AliVTrack' - 10 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCsignalTunedOnData",2236,G__G__STEERBase_638_0_73, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "U 'AliVTrack' - 10 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFsignalTunedOnData",2238,G__G__STEERBase_638_0_74, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "U 'AliVTrack' - 10 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsTunedOnData",1267,G__G__STEERBase_638_0_75, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTunedOnData",1379,G__G__STEERBase_638_0_76, 121, -1, -1, 0, 3, 1, 1, 0, 
"g - 'Bool_t' 0 'kTRUE' flag i - 'Int_t' 0 '0' recoPass "
"u 'TString' - 0 '\"\"' recoPassName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTunedOnDataMask",1763,G__G__STEERBase_638_0_77, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTunedOnDataMask",1775,G__G__STEERBase_638_0_78, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - detMask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliPIDResponse",1346,G__G__STEERBase_638_0_79, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponse), -1, 0, 1, 1, 1, 0, "u 'AliPIDResponse' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_638_0_80, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponse), -1, 1, 1, 1, 1, 0, "u 'AliPIDResponse' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamType",1079,G__G__STEERBase_638_0_81, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEBeamType), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNoTOFmism",1160,G__G__STEERBase_638_0_82, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProbabilityRangeNsigma",2553,G__G__STEERBase_638_0_83, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - range", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProbabilityRangeNsigma",2541,G__G__STEERBase_638_0_84, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmasTOFold",2250,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 2, 8, 
"U 'AliVParticle' - 10 - - i 'AliPID::EParticleType' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSignalDeltaTOFold",1936,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 2, 8, 
"U 'AliVParticle' - 10 - - i 'AliPID::EParticleType' - 0 - - "
"g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalculateTRDResponse",1991,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 8, 
"U 'AliVTrack' - 10 - track D - 'Double_t' 0 - p "
"i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 - PIDmethod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetComputeTRDProbability",2408,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 4, 1, 2, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - p i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 'AliTRDPIDResponse::kLQ1D' PIDmethod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFPIDStatus",1386,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 1, 1, 2, 8, "U 'AliVTrack' - 10 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExecNewRun",996,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSParametrisation",2127,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCEtaMaps",1214,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"d - 'Double_t' 0 '6.0' refineFactorMapX d - 'Double_t' 0 '6.0' refineFactorMapY "
"d - 'Double_t' 0 '6.0' refineFactorSigmaMapX d - 'Double_t' 0 '6.0' refineFactorSigmaMapY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitializeTPCResponse",2120,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCPidResponseMaster",2283,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCParametrisation",2118,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCMultiplicityBin",2089,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 0, "U 'AliVEvent' - 50 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPointToHyperplane",2030,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"U 'TH2D' - 0 - h U 'TLinearFitter' - 0 - linExtrapolation "
"i - 'Int_t' 0 - binX i - 'Int_t' 0 - binY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RefineHistoViaLinearInterpolation",3395,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH2D), -1, 0, 3, 1, 4, 0, 
"U 'TH2D' - 0 - h d - 'Double_t' 0 '6.0' refineFactorX "
"d - 'Double_t' 0 '6.0' refineFactorY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDPidResponseMaster",2286,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitializeTRDResponse",2123,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDSlices",1145,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"H - 'UInt_t' 0 - TRDslicesForPID i 'AliTRDPIDResponse::ETRDPIDMethod' - 0 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDdEdxParams",1535,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDEtaMaps",1217,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDClusterMaps",1673,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDCentralityMaps",1990,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFPidResponseMaster",2285,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitializeTOFResponse",2122,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHMPIDPidResponseMaster",2422,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitializeHMPIDResponse",2259,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEMCALPidResponseMaster",2406,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitializeEMCALResponse",2243,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRecoInfo",1089,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmas",1698,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 4, 8, 
"i 'AliPIDResponse::EDetector' - 0 - detCode U 'AliVParticle' - 10 - track "
"i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmasITS",1938,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmasTPC",1929,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmasTRD",1932,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmasTOF",1931,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmasHMPID",2068,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmasEMCAL",2052,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 4, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type "
"d - 'Double_t' 1 - eop D - 'Double_t' 0 - showershape", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSigmasEMCAL",2052,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBufferedNumberOfSigmas",2501,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 4, 8, 
"i 'AliPIDResponse::EDetector' - 0 - detCode U 'AliVParticle' - 10 - track "
"i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalDeltaITS",1624,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 4, 1, 4, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type "
"d - 'Double_t' 1 - val g - 'Bool_t' 0 'kFALSE' ratio", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalDeltaTPC",1615,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 4, 1, 4, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type "
"d - 'Double_t' 1 - val g - 'Bool_t' 0 'kFALSE' ratio", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalDeltaTRD",1618,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 4, 1, 4, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type "
"d - 'Double_t' 1 - val g - 'Bool_t' 0 'kFALSE' ratio", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalDeltaTOF",1617,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 4, 1, 4, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type "
"d - 'Double_t' 1 - val g - 'Bool_t' 0 'kFALSE' ratio", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalDeltaHMPID",1754,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 4, 1, 4, 8, 
"U 'AliVParticle' - 10 - vtrack i 'AliPID::EParticleType' - 0 - type "
"d - 'Double_t' 1 - val g - 'Bool_t' 0 'kFALSE' ratio", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetComputePIDProbability",2395,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 4, 1, 4, 8, 
"i 'AliPIDResponse::EDetector' - 0 - detCode U 'AliVTrack' - 10 - track "
"i - 'Int_t' 0 - nSpecies D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetComputeITSProbability",2414,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 4, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetComputeTPCProbability",2405,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 4, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetComputeTOFProbability",2407,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 4, 1, 4, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - p g - 'Bool_t' 0 'kFALSE' kNoMism", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetComputeEMCALProbability",2528,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 4, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetComputePHOSProbability",2488,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 4, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetComputeHMPIDProbability",2544,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 3, 1, 4, 8, 
"U 'AliVTrack' - 10 - track i - 'Int_t' 0 - nSpecies "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPIDStatus",1153,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 2, 1, 4, 8, 
"i 'AliPIDResponse::EDetector' - 0 - det U 'AliVTrack' - 10 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSPIDStatus",1393,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 1, 1, 4, 8, "U 'AliVTrack' - 10 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCPIDStatus",1384,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 1, 1, 4, 8, "U 'AliVTrack' - 10 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDPIDStatus",1387,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 1, 1, 4, 8, "U 'AliVTrack' - 10 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHMPIDPIDStatus",1523,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 1, 1, 4, 8, "U 'AliVTrack' - 10 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPHOSPIDStatus",1467,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 1, 1, 4, 8, "U 'AliVTrack' - 10 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEMCALPIDStatus",1507,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 1, 1, 4, 8, "U 'AliVTrack' - 10 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_638_0_141, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliPIDResponse::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_638_0_142, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliPIDResponse::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_638_0_143, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliPIDResponse::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_638_0_144, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliPIDResponse::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_638_0_148, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_638_0_149, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliPIDResponse::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_638_0_150, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliPIDResponse::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_638_0_151, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliPIDResponse::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_638_0_152, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliPIDResponse::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliPIDResponse", 1472, G__G__STEERBase_638_0_153, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliDetectorTag(void) {
   /* AliDetectorTag */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTag));
   G__memfunc_setup("AliDetectorTag",1388,G__G__STEERBase_645_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTag), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliDetectorTag",1388,G__G__STEERBase_645_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTag), -1, 0, 1, 1, 1, 0, "u 'AliDetectorTag' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_645_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTag), -1, 1, 1, 1, 1, 0, "u 'AliDetectorTag' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateFromRunTable",1812,G__G__STEERBase_645_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliDetectorTag' - 1 - detTag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorMask",1522,G__G__STEERBase_645_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorMaskDAQ",1736,G__G__STEERBase_645_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorMaskReco",1915,G__G__STEERBase_645_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorValidityRange",2457,G__G__STEERBase_645_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - idet r - 'UShort_t' 0 - vr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorStatus",1770,G__G__STEERBase_645_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - idet u 'TString' - 0 - co", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorMask",1510,G__G__STEERBase_645_0_10, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray), -1, 0, 0, 1, 1, 0, "", "{return fDetectorArray;}", (void*) NULL, 0);
   G__memfunc_setup("GetIntDetectorMask",1809,G__G__STEERBase_645_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntDetectorMaskDAQ",2023,G__G__STEERBase_645_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntDetectorMaskReco",2202,G__G__STEERBase_645_0_13, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorValidityRange",2445,G__G__STEERBase_645_0_14, 114, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - idet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorStatus",1758,G__G__STEERBase_645_0_15, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - idet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorMaskDAQ",1724,G__G__STEERBase_645_0_16, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorMaskReco",1903,G__G__STEERBase_645_0_17, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintDetectorMask",1747,G__G__STEERBase_645_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSSPD",759,G__G__STEERBase_645_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSSDD",747,G__G__STEERBase_645_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSSSD",762,G__G__STEERBase_645_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPC",519,G__G__STEERBase_645_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRD",522,G__G__STEERBase_645_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOF",521,G__G__STEERBase_645_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHMPID",658,G__G__STEERBase_645_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPHOS",602,G__G__STEERBase_645_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPMD",513,G__G__STEERBase_645_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMUON",607,G__G__STEERBase_645_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFMD",503,G__G__STEERBase_645_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTZERO",692,G__G__STEERBase_645_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVZERO",694,G__G__STEERBase_645_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDC",513,G__G__STEERBase_645_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEMCAL",642,G__G__STEERBase_645_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSSPD",771,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSSDD",759,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSSSD",774,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPC",531,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRD",534,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOF",533,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHMPID",670,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPHOS",614,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPMD",525,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMUON",619,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFMD",515,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTZERO",704,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVZERO",706,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDC",525,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEMCAL",654,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_645_0_49, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliDetectorTag::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_645_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDetectorTag::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_645_0_51, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliDetectorTag::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_645_0_52, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliDetectorTag::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_645_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_645_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDetectorTag::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_645_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliDetectorTag::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_645_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDetectorTag::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_645_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliDetectorTag::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliDetectorTag", 1514, G__G__STEERBase_645_0_61, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliDetectorTagCuts(void) {
   /* AliDetectorTagCuts */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTagCuts));
   G__memfunc_setup("AliDetectorTagCuts",1803,G__G__STEERBase_646_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTagCuts), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetListOfDetectors",1834,G__G__STEERBase_646_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - detectors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetListOfDetectorsDAQ",2048,G__G__STEERBase_646_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - detectors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetListOfDetectorsReco",2227,G__G__STEERBase_646_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - detectors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorValidityValue",2473,G__G__STEERBase_646_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - det r - 'UShort_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAccepted",981,G__G__STEERBase_646_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'AliDetectorTag' - 0 - detTag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_646_0_7, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliDetectorTagCuts::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_646_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDetectorTagCuts::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_646_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliDetectorTagCuts::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_646_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliDetectorTagCuts::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_646_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_646_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDetectorTagCuts::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_646_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliDetectorTagCuts::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_646_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDetectorTagCuts::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_646_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliDetectorTagCuts::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliDetectorTagCuts", 1803, G__G__STEERBase_646_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTagCuts), -1, 0, 1, 1, 1, 0, "u 'AliDetectorTagCuts' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliDetectorTagCuts", 1929, G__G__STEERBase_646_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_646_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTagCuts), -1, 1, 1, 1, 1, 0, "u 'AliDetectorTagCuts' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVfriendEvent(void) {
   /* AliVfriendEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVfriendEvent));
   G__memfunc_setup("Reinitialize",1257,G__G__STEERBase_648_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "do nothing", (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfTracks",1702,G__G__STEERBase_648_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTrack",789,G__G__STEERBase_648_0_6, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVfriendTrack), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetEntriesInTracks",1817,G__G__STEERBase_648_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetVVZEROfriend",1412,G__G__STEERBase_648_0_8, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROfriend), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetESDVZEROfriend",1546,G__G__STEERBase_648_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliESDVZEROfriend' - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Ls",191,G__G__STEERBase_648_0_10, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Reset",515,G__G__STEERBase_648_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetSkipBit",994,G__G__STEERBase_648_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - skip", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("TestSkipBit",1110,G__G__STEERBase_648_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNclustersTPC",1482,G__G__STEERBase_648_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNclustersTPCused",1915,G__G__STEERBase_648_0_15, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetSize",699,G__G__STEERBase_648_0_16, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVfriendEvent), -1, 1, 1, 1, 4, 0, "u 'AliVfriendEvent' - 11 - esd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_648_0_18, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVfriendEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_648_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVfriendEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_648_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVfriendEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_648_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVfriendEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_648_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_648_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVfriendEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_648_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVfriendEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_648_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVfriendEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_648_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVfriendEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVfriendEvent", 1636, G__G__STEERBase_648_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVEventHandler(void) {
   /* AliVEventHandler */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventHandler));
   G__memfunc_setup("GetTree",688,G__G__STEERBase_649_0_3, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TTree), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDataType",1084,G__G__STEERBase_649_0_4, 67, -1, G__defined_typename("Option_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFillAOD",891,G__G__STEERBase_649_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFillExtension",1636,G__G__STEERBase_649_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFillAOD",903,G__G__STEERBase_649_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFillExtension",1648,G__G__STEERBase_649_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetInputFileName",1597,G__G__STEERBase_649_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetInputFileName",1585,G__G__STEERBase_649_0_10, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOutputFileName",1726,G__G__STEERBase_649_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetOutputFileName",1714,G__G__STEERBase_649_0_12, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetExtraOutputs",1576,G__G__STEERBase_649_0_13, 67, -1, -1, 0, 1, 1, 1, 9, "g - 'Bool_t' 0 'kFALSE' merge", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetInputTree",1228,G__G__STEERBase_649_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Init",404,G__G__STEERBase_649_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Init",404,G__G__STEERBase_649_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("BeginEvent",999,G__G__STEERBase_649_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetEntry",818,G__G__STEERBase_649_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Notify",633,G__G__STEERBase_649_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - path", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("FinishEvent",1123,G__G__STEERBase_649_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Terminate",937,G__G__STEERBase_649_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("TerminateIO",1089,G__G__STEERBase_649_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsLocked",782,G__G__STEERBase_649_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Lock",393,G__G__STEERBase_649_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnLock",588,G__G__STEERBase_649_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Changed",682,G__G__STEERBase_649_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCacheSize",1179,G__G__STEERBase_649_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetUserInfo",1099,G__G__STEERBase_649_0_29, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitTaskInputData",1713,G__G__STEERBase_649_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'AliVEvent' - 0 - - U 'AliVfriendEvent' - 0 - - "
"U 'TObjArray' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEvent",802,G__G__STEERBase_649_0_31, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVfriendEvent",1520,G__G__STEERBase_649_0_32, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVfriendEvent), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_649_0_33, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVEventHandler::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_649_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVEventHandler::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_649_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVEventHandler::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_649_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVEventHandler::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_649_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_649_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVEventHandler::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_649_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVEventHandler::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_649_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVEventHandler::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_649_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVEventHandler::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVEventHandler", 1706, G__G__STEERBase_649_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_649_0_46, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventHandler), -1, 1, 1, 1, 1, 0, "u 'AliVEventHandler' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVCuts(void) {
   /* AliVCuts */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCuts));
   G__memfunc_setup("operator=",937,G__G__STEERBase_683_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCuts), -1, 1, 1, 1, 1, 0, "u 'AliVCuts' - 11 - evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSelected",997,G__G__STEERBase_683_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetSelectionMask",1618,G__G__STEERBase_683_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "U 'TObject' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStatistics",1355,G__G__STEERBase_683_0_7, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_683_0_8, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVCuts::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_683_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVCuts::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_683_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVCuts::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_683_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVCuts::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_683_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_683_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVCuts::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_683_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVCuts::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_683_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVCuts::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_683_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVCuts::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVCuts", 905, G__G__STEERBase_683_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliRunTag(void) {
   /* AliRunTag */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTag));
   G__memfunc_setup("AliRunTag",871,G__G__STEERBase_684_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTag), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliRunTag",871,G__G__STEERBase_684_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTag), -1, 0, 1, 1, 1, 0, "u 'AliRunTag' - 11 - qa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_684_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTag), -1, 1, 1, 1, 1, 0, "u 'AliRunTag' - 11 - tag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__G__STEERBase_684_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'AliRunTag' - 10 - tag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunId",782,G__G__STEERBase_684_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMagneticField",1592,G__G__STEERBase_684_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Pmag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDipoleField",1389,G__G__STEERBase_684_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Pmag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunStartTime",1534,G__G__STEERBase_684_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Pt0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunStopTime",1430,G__G__STEERBase_684_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Pt1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAlirootVersion",1772,G__G__STEERBase_684_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRootVersion",1462,G__G__STEERBase_684_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGeant3Version",1588,G__G__STEERBase_684_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLHCPeriod",1126,G__G__STEERBase_684_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetReconstructionPass",2213,G__G__STEERBase_684_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProductionName",1748,G__G__STEERBase_684_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunValidation",1644,G__G__STEERBase_684_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunQuality",1354,G__G__STEERBase_684_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Pn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamEnergy",1291,G__G__STEERBase_684_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - PE", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamType",1091,G__G__STEERBase_684_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - Ptype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalibVersion",1517,G__G__STEERBase_684_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Pn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDataType",1096,G__G__STEERBase_684_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamTriggers",1512,G__G__STEERBase_684_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - bt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCollisionTriggers",2079,G__G__STEERBase_684_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - ct", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEmptyTriggers",1666,G__G__STEERBase_684_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - et", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetASideTriggers",1593,G__G__STEERBase_684_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - at", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCSideTriggers",1595,G__G__STEERBase_684_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - ct", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHMTriggers",1288,G__G__STEERBase_684_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - ht", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMuonTriggers",1554,G__G__STEERBase_684_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - mt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCollisionRate",1636,G__G__STEERBase_684_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - rate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeanVertex",1323,G__G__STEERBase_684_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - mv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertexQuality",1683,G__G__STEERBase_684_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - vq", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLHCTag",799,G__G__STEERBase_684_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - Plumin u 'TString' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorTag",1410,G__G__STEERBase_684_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - mask h - 'UInt_t' 0 '0' maskReco", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQA",446,G__G__STEERBase_684_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliQA' - 11 - qa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQAArray",957,G__G__STEERBase_684_0_35, 121, -1, -1, 0, 2, 1, 1, 0, 
"K - 'ULong_t' 0 - qa i - 'Int_t' 0 - qalength", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventSpecies",1530,G__G__STEERBase_684_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"G - 'Bool_t' 0 - es i - 'Int_t' 0 - eslength", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEventTag",1063,G__G__STEERBase_684_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliEventTag' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddFileTag",933,G__G__STEERBase_684_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliFileTag' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetActiveTriggerClasses",2346,G__G__STEERBase_684_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyStandardContent",1959,G__G__STEERBase_684_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliRunTag' - 0 - oldtag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateFromRunTable",1812,G__G__STEERBase_684_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliRunTag' - 0 - tabtag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunId",770,G__G__STEERBase_684_0_43, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMagneticField",1580,G__G__STEERBase_684_0_44, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDipoleField",1377,G__G__STEERBase_684_0_45, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunStartTime",1522,G__G__STEERBase_684_0_46, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunStopTime",1418,G__G__STEERBase_684_0_47, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlirootVersion",1760,G__G__STEERBase_684_0_48, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRootVersion",1450,G__G__STEERBase_684_0_49, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGeant3Version",1576,G__G__STEERBase_684_0_50, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLHCPeriod",1114,G__G__STEERBase_684_0_51, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReconstructionPass",2201,G__G__STEERBase_684_0_52, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProductionName",1736,G__G__STEERBase_684_0_53, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunValidation",1632,G__G__STEERBase_684_0_54, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunQuality",1342,G__G__STEERBase_684_0_55, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamEnergy",1279,G__G__STEERBase_684_0_56, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamType",1079,G__G__STEERBase_684_0_57, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibVersion",1505,G__G__STEERBase_684_0_58, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataType",1084,G__G__STEERBase_684_0_59, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNEvents",995,G__G__STEERBase_684_0_60, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamTriggers",1500,G__G__STEERBase_684_0_61, 107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCollisionTriggers",2067,G__G__STEERBase_684_0_62, 107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEmptyTriggers",1654,G__G__STEERBase_684_0_63, 107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetASideTriggers",1581,G__G__STEERBase_684_0_64, 107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCSideTriggers",1583,G__G__STEERBase_684_0_65, 107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHMTriggers",1276,G__G__STEERBase_684_0_66, 107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMuonTriggers",1542,G__G__STEERBase_684_0_67, 107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCollisionRate",1624,G__G__STEERBase_684_0_68, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanVertex",1311,G__G__STEERBase_684_0_69, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertexQuality",1671,G__G__STEERBase_684_0_70, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLHCTag",787,G__G__STEERBase_684_0_71, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTag), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorTags",1513,G__G__STEERBase_684_0_72, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorTag), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventTag",1086,G__G__STEERBase_684_0_73, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTag), -1, 0, 1, 1, 1, 9, "i - - 0 - evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFileTagForEvent",1765,G__G__STEERBase_684_0_74, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliFileTag), -1, 0, 1, 1, 1, 0, "i - - 0 - evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNFiles",865,G__G__STEERBase_684_0_75, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFileTag",956,G__G__STEERBase_684_0_76, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliFileTag), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ifile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQA",434,G__G__STEERBase_684_0_77, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQAArray",945,G__G__STEERBase_684_0_78, 75, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQALength",1044,G__G__STEERBase_684_0_79, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventSpecies",1518,G__G__STEERBase_684_0_80, 71, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESLength",1050,G__G__STEERBase_684_0_81, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFileId",845,G__G__STEERBase_684_0_82, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - guid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumFiles",1091,G__G__STEERBase_684_0_83, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetActiveTriggerClasses",2334,G__G__STEERBase_684_0_84, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_684_0_85, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliRunTag::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_684_0_86, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliRunTag::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_684_0_87, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliRunTag::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_684_0_88, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliRunTag::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_684_0_92, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_684_0_93, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliRunTag::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_684_0_94, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliRunTag::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_684_0_95, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliRunTag::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_684_0_96, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliRunTag::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliRunTag", 997, G__G__STEERBase_684_0_97, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliEventTag(void) {
   /* AliEventTag */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTag));
   G__memfunc_setup("AliEventTag",1076,G__G__STEERBase_685_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTag), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliEventTag",1076,G__G__STEERBase_685_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTag), -1, 0, 1, 1, 1, 0, "u 'AliEventTag' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_685_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTag), -1, 1, 1, 1, 1, 0, "u 'AliEventTag' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPeriodNumber",1528,G__G__STEERBase_685_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOrbitNumber",1429,G__G__STEERBase_685_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBunchCrossNumber",1935,G__G__STEERBase_685_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventType",1232,G__G__STEERBase_685_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - ntype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhysicsFlag",1417,G__G__STEERBase_685_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - nflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBackgroungFlag",1705,G__G__STEERBase_685_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - nflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfParticipants",2051,G__G__STEERBase_685_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - P", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfParticipants2",2101,G__G__STEERBase_685_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - P2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImpactParameter",1835,G__G__STEERBase_685_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Pimpact", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertexX",1026,G__G__STEERBase_685_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Pvx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertexY",1027,G__G__STEERBase_685_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Pvy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertexZ",1028,G__G__STEERBase_685_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Pvz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertexFlag",1316,G__G__STEERBase_685_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertexZError",1550,G__G__STEERBase_685_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerMask",1420,G__G__STEERBase_685_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerMaskNext50",1936,G__G__STEERBase_685_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerCluster",1762,G__G__STEERBase_685_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDCNeutron1Energy",1939,G__G__STEERBase_685_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Pen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDCProton1Energy",1834,G__G__STEERBase_685_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Pen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDCNeutron2Energy",1940,G__G__STEERBase_685_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Pen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDCProton2Energy",1835,G__G__STEERBase_685_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Pen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDCEMEnergy",1289,G__G__STEERBase_685_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - Pen1 f - 'Float_t' 0 - Pen2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0VertexZ",1160,G__G__STEERBase_685_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Pvz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfTracks",1401,G__G__STEERBase_685_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfPosTracks",1707,G__G__STEERBase_685_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfNegTracks",1683,G__G__STEERBase_685_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfNeutrTracks",1927,G__G__STEERBase_685_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfV0s",1034,G__G__STEERBase_685_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfCascades",1576,G__G__STEERBase_685_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfKinks",1297,G__G__STEERBase_685_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfPMDTracks",1626,G__G__STEERBase_685_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfFMDTracks",1616,G__G__STEERBase_685_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfPHOSClusters",1952,G__G__STEERBase_685_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfEMCALClusters",1992,G__G__STEERBase_685_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfJetCandidates",2084,G__G__STEERBase_685_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfHardPhotonsCandidates",2923,G__G__STEERBase_685_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxJetEnergy",1503,G__G__STEERBase_685_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxNeutralEnergy",1943,G__G__STEERBase_685_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfChargedAbove1GeV",2271,G__G__STEERBase_685_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfChargedAbove3GeV",2273,G__G__STEERBase_685_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfChargedAbove10GeV",2319,G__G__STEERBase_685_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfMuonsAbove1GeV",2115,G__G__STEERBase_685_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfMuonsAbove3GeV",2117,G__G__STEERBase_685_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfMuonsAbove10GeV",2163,G__G__STEERBase_685_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfElectronsAbove1GeV",2528,G__G__STEERBase_685_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfElectronsAbove3GeV",2530,G__G__STEERBase_685_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfElectronsAbove10GeV",2576,G__G__STEERBase_685_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfElectrons",1728,G__G__STEERBase_685_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfFWMuons",1472,G__G__STEERBase_685_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfFWMatchedMuons",2166,G__G__STEERBase_685_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfMuons",1315,G__G__STEERBase_685_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfPions",1306,G__G__STEERBase_685_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfKaons",1293,G__G__STEERBase_685_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfProtons",1542,G__G__STEERBase_685_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfLambdas",1477,G__G__STEERBase_685_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfPhotons",1532,G__G__STEERBase_685_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfPi0s",1133,G__G__STEERBase_685_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfNeutrons",1647,G__G__STEERBase_685_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOfKaon0s",1341,G__G__STEERBase_685_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTotalMomentum",1666,G__G__STEERBase_685_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - P", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeanPt",881,G__G__STEERBase_685_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Pt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxPt",790,G__G__STEERBase_685_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Pt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEtaMaxPt",1072,G__G__STEERBase_685_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - eta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhiMaxPt",1079,G__G__STEERBase_685_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNeutralTotalMomentum",2397,G__G__STEERBase_685_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNeutralMeanPt",1612,G__G__STEERBase_685_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNeutralMaxPt",1521,G__G__STEERBase_685_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventPlaneAngle",1797,G__G__STEERBase_685_0_71, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHBTRadii",1011,G__G__STEERBase_685_0_72, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfFiredChipsLayer1",2649,G__G__STEERBase_685_0_73, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfFiredChipsLayer2",2650,G__G__STEERBase_685_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfSPDTracklets",2270,G__G__STEERBase_685_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMTotV0A",887,G__G__STEERBase_685_0_76, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - mult", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMTotV0C",889,G__G__STEERBase_685_0_77, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - mult", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNbPMV0A",832,G__G__STEERBase_685_0_78, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - npmt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNbPMV0C",834,G__G__STEERBase_685_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - npmt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventId",987,G__G__STEERBase_685_0_80, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPeriodNumber",1516,G__G__STEERBase_685_0_81, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOrbitNumber",1417,G__G__STEERBase_685_0_82, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBunchCrossNumber",1923,G__G__STEERBase_685_0_83, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFiredTriggerClasses",2220,G__G__STEERBase_685_0_84, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 1, 1, 1, 8, "u 'TString' - 0 - actclass", "*T* {return fFiredTriggerClasses;}", (void*) NULL, 0);
   G__memfunc_setup("GetEventType",1220,G__G__STEERBase_685_0_85, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysicsFlag",1405,G__G__STEERBase_685_0_86, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBackgroundFlag",1690,G__G__STEERBase_685_0_87, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfParticipants",2039,G__G__STEERBase_685_0_88, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfParticipants2",2089,G__G__STEERBase_685_0_89, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImpactParameter",1823,G__G__STEERBase_685_0_90, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertexX",1014,G__G__STEERBase_685_0_91, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertexY",1015,G__G__STEERBase_685_0_92, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertexZ",1016,G__G__STEERBase_685_0_93, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertexFlag",1304,G__G__STEERBase_685_0_94, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertexZError",1538,G__G__STEERBase_685_0_95, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerMask",1408,G__G__STEERBase_685_0_96, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerMaskNext50",1924,G__G__STEERBase_685_0_97, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerCluster",1750,G__G__STEERBase_685_0_98, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCNeutron1Energy",1927,G__G__STEERBase_685_0_99, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCProton1Energy",1822,G__G__STEERBase_685_0_100, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCNeutron2Energy",1928,G__G__STEERBase_685_0_101, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCProton2Energy",1823,G__G__STEERBase_685_0_102, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCEMEnergy",1277,G__G__STEERBase_685_0_103, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0VertexZ",1148,G__G__STEERBase_685_0_104, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfTracks",1389,G__G__STEERBase_685_0_105, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfPosTracks",1695,G__G__STEERBase_685_0_106, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfNegTracks",1671,G__G__STEERBase_685_0_107, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfNeutrTracks",1915,G__G__STEERBase_685_0_108, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfV0s",1022,G__G__STEERBase_685_0_109, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfCascades",1564,G__G__STEERBase_685_0_110, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfKinks",1285,G__G__STEERBase_685_0_111, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfPMDTracks",1614,G__G__STEERBase_685_0_112, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfFMDTracks",1604,G__G__STEERBase_685_0_113, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfPHOSClusters",1940,G__G__STEERBase_685_0_114, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfEMCALClusters",1980,G__G__STEERBase_685_0_115, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfJetCandidates",2072,G__G__STEERBase_685_0_116, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfHardPhotonsCandidates",2911,G__G__STEERBase_685_0_117, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxJetEnergy",1491,G__G__STEERBase_685_0_118, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxNeutralEnergy",1931,G__G__STEERBase_685_0_119, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfChargedAbove1GeV",2259,G__G__STEERBase_685_0_120, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfChargedAbove3GeV",2261,G__G__STEERBase_685_0_121, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfChargedAbove10GeV",2307,G__G__STEERBase_685_0_122, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfMuonsAbove1GeV",2103,G__G__STEERBase_685_0_123, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfMuonsAbove3GeV",2105,G__G__STEERBase_685_0_124, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfMuonsAbove10GeV",2151,G__G__STEERBase_685_0_125, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfElectronsAbove1GeV",2516,G__G__STEERBase_685_0_126, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfElectronsAbove3GeV",2518,G__G__STEERBase_685_0_127, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfElectronsAbove10GeV",2564,G__G__STEERBase_685_0_128, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfElectrons",1716,G__G__STEERBase_685_0_129, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfFWMuons",1460,G__G__STEERBase_685_0_130, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfFWMatchedMuons",2154,G__G__STEERBase_685_0_131, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfMuons",1303,G__G__STEERBase_685_0_132, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfPions",1294,G__G__STEERBase_685_0_133, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfKaons",1281,G__G__STEERBase_685_0_134, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfProtons",1530,G__G__STEERBase_685_0_135, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfLambdas",1465,G__G__STEERBase_685_0_136, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfPhotons",1520,G__G__STEERBase_685_0_137, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfPi0s",1121,G__G__STEERBase_685_0_138, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfNeutrons",1635,G__G__STEERBase_685_0_139, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumOfKaon0s",1329,G__G__STEERBase_685_0_140, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTotalMomentum",1654,G__G__STEERBase_685_0_141, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanPt",869,G__G__STEERBase_685_0_142, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxPt",778,G__G__STEERBase_685_0_143, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEtaMaxPt",1060,G__G__STEERBase_685_0_144, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhiMaxPt",1067,G__G__STEERBase_685_0_145, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNeutralTotalMomentum",2385,G__G__STEERBase_685_0_146, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNeutralMeanPt",1600,G__G__STEERBase_685_0_147, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNeutralMaxPt",1509,G__G__STEERBase_685_0_148, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventPlaneAngle",1785,G__G__STEERBase_685_0_149, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHBTRadii",999,G__G__STEERBase_685_0_150, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfFiredChipsLayer1",2637,G__G__STEERBase_685_0_151, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfFiredChipsLayer2",2638,G__G__STEERBase_685_0_152, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSPDTracklets",2258,G__G__STEERBase_685_0_153, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMTotV0A",875,G__G__STEERBase_685_0_154, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMTotV0C",877,G__G__STEERBase_685_0_155, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbPMV0A",820,G__G__STEERBase_685_0_156, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbPMV0C",822,G__G__STEERBase_685_0_157, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_685_0_158, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliEventTag::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_685_0_159, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliEventTag::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_685_0_160, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliEventTag::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_685_0_161, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliEventTag::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_685_0_165, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_685_0_166, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliEventTag::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_685_0_167, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliEventTag::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_685_0_168, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliEventTag::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_685_0_169, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliEventTag::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliEventTag", 1202, G__G__STEERBase_685_0_170, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliInputEventHandler(void) {
   /* AliInputEventHandler */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler));
   G__memfunc_setup("AliInputEventHandler",2022,G__G__STEERBase_686_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliInputEventHandler",2022,G__G__STEERBase_686_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetInputFileName",1597,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetInputFileName",1585,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOutputFileName",1726,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOutputFileName",1714,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntry",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginEvent",999,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NeedField",864,G__G__STEERBase_686_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - path", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishEvent",1123,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TerminateIO",1089,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetInputTree",1228,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEventSelection",1748,G__G__STEERBase_686_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliVCuts' - 0 - cuts", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUserCallSelectionMask",2425,G__G__STEERBase_686_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCheckStatistics",1845,G__G__STEERBase_686_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNeedField",1164,G__G__STEERBase_686_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetInactiveBranches",1925,G__G__STEERBase_686_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - branches", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetActiveBranches",1710,G__G__STEERBase_686_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - branches", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvent",802,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventTag",1086,G__G__STEERBase_686_0_25, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTag), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRunTag",881,G__G__STEERBase_686_0_26, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTag), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStatistics",1355,G__G__STEERBase_686_0_27, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAnalysisType",1542,G__G__STEERBase_686_0_28, 67, -1, G__defined_typename("Option_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTree",688,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TTree), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventSelection",1736,G__G__STEERBase_686_0_30, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCuts), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetReadEntry",1198,G__G__STEERBase_686_0_31, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsCheckStatistics",1733,G__G__STEERBase_686_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsUserCallSelectionMask",2313,G__G__STEERBase_686_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NewEvent",812,G__G__STEERBase_686_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEventSelected",1511,G__G__STEERBase_686_0_35, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCEvent",658,G__G__STEERBase_686_0_36, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEvent), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetUserInfo",1099,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMixingHandler",1622,G__G__STEERBase_686_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliInputEventHandler' - 0 - mixing", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MixingHandler",1322,G__G__STEERBase_686_0_39, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParentHandler",1620,G__G__STEERBase_686_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliInputEventHandler' - 0 - parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParentHandler",1320,G__G__STEERBase_686_0_41, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPIDResponse",1356,G__G__STEERBase_686_0_42, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponse), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreatePIDResponse",1664,G__G__STEERBase_686_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SwitchOffBranches",1715,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SwitchOnBranches",1621,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliInputEventHandler",2022,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler), -1, 0, 1, 1, 4, 0, "u 'AliInputEventHandler' - 11 - handler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliInputEventHandler), -1, 1, 1, 1, 4, 0, "u 'AliInputEventHandler' - 11 - handler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_686_0_48, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliInputEventHandler::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_686_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliInputEventHandler::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_686_0_50, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliInputEventHandler::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_686_0_51, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliInputEventHandler::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_686_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_686_0_56, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliInputEventHandler::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_686_0_57, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliInputEventHandler::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_686_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliInputEventHandler::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_686_0_59, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliInputEventHandler::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliInputEventHandler", 2148, G__G__STEERBase_686_0_60, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliDummyHandler(void) {
   /* AliDummyHandler */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliDummyHandler));
   G__memfunc_setup("AliDummyHandler",1504,G__G__STEERBase_688_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDummyHandler), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliDummyHandler",1504,G__G__STEERBase_688_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDummyHandler), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDataType",1084,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Option_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEvent",814,G__G__STEERBase_688_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliVEvent' - 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvent",802,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AliDummyHandler",1504,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDummyHandler), -1, 0, 1, 1, 4, 0, "u 'AliDummyHandler' - 11 - handler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDummyHandler), -1, 1, 1, 1, 4, 0, "u 'AliDummyHandler' - 11 - handler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_688_0_10, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliDummyHandler::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_688_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDummyHandler::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_688_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliDummyHandler::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_688_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliDummyHandler::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_688_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_688_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDummyHandler::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_688_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliDummyHandler::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_688_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliDummyHandler::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_688_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliDummyHandler::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliDummyHandler", 1630, G__G__STEERBase_688_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliEventplane(void) {
   /* AliEventplane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventplane));
   G__memfunc_setup("AliEventplane",1320,G__G__STEERBase_690_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventplane), -1, 0, 0, 1, 1, 0, "", "/ constructor", (void*) NULL, 0);
   G__memfunc_setup("AliEventplane",1320,G__G__STEERBase_690_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventplane), -1, 0, 1, 1, 1, 0, "u 'AliEventplane' - 11 - ep", "/ copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_690_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventplane), -1, 1, 1, 1, 1, 0, "u 'AliEventplane' - 11 - ep", "/ assignment operator", (void*) NULL, 0);
   G__memfunc_setup("CopyEP",560,G__G__STEERBase_690_0_4, 121, -1, -1, 0, 1, 1, 1, 8, "u 'AliEventplane' - 1 - ep", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetQVector",1008,G__G__STEERBase_690_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TVector2' - 0 - qvector", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventplaneQ",1423,G__G__STEERBase_690_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - evp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQsub",711,G__G__STEERBase_690_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TVector2' - 0 - qs1 U 'TVector2' - 0 - qs2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQsubRes",1009,G__G__STEERBase_690_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - qsr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQVector",996,G__G__STEERBase_690_0_9, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TVector2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQContributionX",1737,G__G__STEERBase_690_0_10, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "U 'AliVTrack' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQContributionY",1738,G__G__STEERBase_690_0_11, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "U 'AliVTrack' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQContributionXsub1",2116,G__G__STEERBase_690_0_12, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "U 'AliVTrack' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQContributionYsub1",2117,G__G__STEERBase_690_0_13, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "U 'AliVTrack' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQContributionXsub2",2117,G__G__STEERBase_690_0_14, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "U 'AliVTrack' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQContributionYsub2",2118,G__G__STEERBase_690_0_15, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "U 'AliVTrack' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQContributionXArray",2248,G__G__STEERBase_690_0_16, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQContributionYArray",2249,G__G__STEERBase_690_0_17, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQContributionXArraysub1",2627,G__G__STEERBase_690_0_18, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQContributionYArraysub1",2628,G__G__STEERBase_690_0_19, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQContributionXArraysub2",2628,G__G__STEERBase_690_0_20, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQContributionYArraysub2",2629,G__G__STEERBase_690_0_21, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TArrayF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventplane",1330,G__G__STEERBase_690_0_22, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"C - - 10 - x U 'AliVEvent' - 10 '0' event "
"i - 'Int_t' 0 '2' harmonic", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQsub1",748,G__G__STEERBase_690_0_23, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TVector2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQsub2",749,G__G__STEERBase_690_0_24, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TVector2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQsubRes",997,G__G__STEERBase_690_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEventInEventplaneClass",2429,G__G__STEERBase_690_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - b "
"C - - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateVZEROEventPlane",2326,G__G__STEERBase_690_0_27, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 1, 8, 
"U 'AliVEvent' - 10 - event i - 'Int_t' 0 - firstRing "
"i - 'Int_t' 0 - lastRing i - 'Int_t' 0 - harmonic "
"d - 'Double_t' 1 - qxTot d - 'Double_t' 1 - qyTot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateVZEROEventPlane",2326,G__G__STEERBase_690_0_28, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 8, 
"U 'AliVEvent' - 10 - event i - 'Int_t' 0 - ring "
"i - 'Int_t' 0 - harmonic d - 'Double_t' 1 - qx "
"d - 'Double_t' 1 - qy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVZEROEPParams",1467,G__G__STEERBase_690_0_29, 121, -1, -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - ring d - 'Double_t' 0 - meanX2 "
"d - 'Double_t' 0 - meanY2 d - 'Double_t' 0 - aPlus "
"d - 'Double_t' 0 - aMinus d - 'Double_t' 0 - lambdaPlus "
"d - 'Double_t' 0 - lambdaMinus d - 'Double_t' 0 - cos8Psi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__STEERBase_690_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_690_0_31, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliEventplane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_690_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliEventplane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_690_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliEventplane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_690_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliEventplane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_690_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_690_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliEventplane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_690_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliEventplane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_690_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliEventplane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_690_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliEventplane::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliEventplane", 1446, G__G__STEERBase_690_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliEventTagCuts(void) {
   /* AliEventTagCuts */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTagCuts));
   G__memfunc_setup("AliEventTagCuts",1491,G__G__STEERBase_691_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTagCuts), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__STEERBase_691_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPeriodNumberRange",2021,G__G__STEERBase_691_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - n1 h - 'UInt_t' 0 - n2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOrbitNumberRange",1922,G__G__STEERBase_691_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - n1 h - 'UInt_t' 0 - n2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBunchCrossNumberRange",2428,G__G__STEERBase_691_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"r - 'UShort_t' 0 - n1 r - 'UShort_t' 0 - n2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventType",1232,G__G__STEERBase_691_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - ntype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNParticipantsRange",2137,G__G__STEERBase_691_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImpactParamRange",1896,G__G__STEERBase_691_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEtaLeadingParticleRange",2587,G__G__STEERBase_691_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhiLeadingParticleRange",2594,G__G__STEERBase_691_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrimaryVertexXRange",2259,G__G__STEERBase_691_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrimaryVertexYRange",2260,G__G__STEERBase_691_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrimaryVertexZRange",2261,G__G__STEERBase_691_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrimaryVertexFlag",2056,G__G__STEERBase_691_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrimaryVertexZErrorRange",2783,G__G__STEERBase_691_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerMask",1420,G__G__STEERBase_691_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - trmask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerCluster",1762,G__G__STEERBase_691_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - trcluster", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDCNeutron1Range",1814,G__G__STEERBase_691_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDCProton1Range",1709,G__G__STEERBase_691_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDCEMRange",1164,G__G__STEERBase_691_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDCNeutron2Range",1815,G__G__STEERBase_691_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDCProton2Range",1710,G__G__STEERBase_691_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0VertexZRange",1653,G__G__STEERBase_691_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMultiplicityRange",2082,G__G__STEERBase_691_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPosMultiplicityRange",2388,G__G__STEERBase_691_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNegMultiplicityRange",2364,G__G__STEERBase_691_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNeutrMultiplicityRange",2608,G__G__STEERBase_691_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNV0sRange",1120,G__G__STEERBase_691_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNCascadesRange",1662,G__G__STEERBase_691_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNKinksRange",1383,G__G__STEERBase_691_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNPMDTracksRange",1712,G__G__STEERBase_691_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNFMDTracksRange",1702,G__G__STEERBase_691_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNPHOSClustersRange",2038,G__G__STEERBase_691_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNEMCALClustersRange",2078,G__G__STEERBase_691_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNJetCandidatesRange",2170,G__G__STEERBase_691_0_35, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTopJetEnergyMin",1808,G__G__STEERBase_691_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - low", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTopNeutralEnergyMin",2248,G__G__STEERBase_691_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - low", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNHardPhotonsRange",2001,G__G__STEERBase_691_0_38, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNChargedAbove1GeVRange",2357,G__G__STEERBase_691_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNChargedAbove3GeVRange",2359,G__G__STEERBase_691_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNChargedAbove10GeVRange",2405,G__G__STEERBase_691_0_41, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNMuonsAbove1GeVRange",2201,G__G__STEERBase_691_0_42, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNMuonsAbove3GeVRange",2203,G__G__STEERBase_691_0_43, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNMuonsAbove10GeVRange",2249,G__G__STEERBase_691_0_44, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNElectronsAbove1GeVRange",2614,G__G__STEERBase_691_0_45, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNElectronsAbove3GeVRange",2616,G__G__STEERBase_691_0_46, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNElectronsAbove10GeVRange",2662,G__G__STEERBase_691_0_47, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNElectronRange",1699,G__G__STEERBase_691_0_48, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNFWMuonRange",1443,G__G__STEERBase_691_0_49, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNFWMatchedMuonRange",2137,G__G__STEERBase_691_0_50, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNMuonRange",1286,G__G__STEERBase_691_0_51, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNPionRange",1277,G__G__STEERBase_691_0_52, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNKaonRange",1264,G__G__STEERBase_691_0_53, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNProtonRange",1513,G__G__STEERBase_691_0_54, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNLambdaRange",1448,G__G__STEERBase_691_0_55, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNPhotonRange",1503,G__G__STEERBase_691_0_56, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNPi0Range",1104,G__G__STEERBase_691_0_57, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNNeutronRange",1618,G__G__STEERBase_691_0_58, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNKaon0Range",1312,G__G__STEERBase_691_0_59, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTotalPRange",1389,G__G__STEERBase_691_0_60, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeanPtRange",1374,G__G__STEERBase_691_0_61, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTopPtMin",1095,G__G__STEERBase_691_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - low", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTotalNeutralPRange",2120,G__G__STEERBase_691_0_63, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeanNeutralPtPRange",2185,G__G__STEERBase_691_0_64, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTopNeutralPtMin",1826,G__G__STEERBase_691_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - low", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventPlaneAngleRange",2290,G__G__STEERBase_691_0_66, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHBTRadiiRange",1504,G__G__STEERBase_691_0_67, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfFiredChipsLayer1Range",3142,G__G__STEERBase_691_0_68, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfFiredChipsLayer2Range",3143,G__G__STEERBase_691_0_69, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfSPDTrackletsRange",2763,G__G__STEERBase_691_0_70, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - low i - 'Int_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetTriggerClasses",1957,G__G__STEERBase_691_0_71, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRequiredFiredTriggerClass",2814,G__G__STEERBase_691_0_72, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - aclass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitializeTriggerClasses",2484,G__G__STEERBase_691_0_73, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - aclass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAccepted",981,G__G__STEERBase_691_0_74, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'AliEventTag' - 0 - EvTag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAccepted",981,G__G__STEERBase_691_0_75, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'AliEventTag' - 10 - EvTag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_691_0_76, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliEventTagCuts::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_691_0_77, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliEventTagCuts::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_691_0_78, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliEventTagCuts::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_691_0_79, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliEventTagCuts::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_691_0_83, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_691_0_84, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliEventTagCuts::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_691_0_85, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliEventTagCuts::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_691_0_86, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliEventTagCuts::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_691_0_87, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliEventTagCuts::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliEventTagCuts", 1491, G__G__STEERBase_691_0_88, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTagCuts), -1, 0, 1, 1, 1, 0, "u 'AliEventTagCuts' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliEventTagCuts", 1617, G__G__STEERBase_691_0_89, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_691_0_90, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTagCuts), -1, 1, 1, 1, 1, 0, "u 'AliEventTagCuts' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliFileTag(void) {
   /* AliFileTag */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliFileTag));
   G__memfunc_setup("AliFileTag",946,G__G__STEERBase_693_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliFileTag), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliFileTag",946,G__G__STEERBase_693_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliFileTag), -1, 0, 1, 1, 1, 0, "u 'AliFileTag' - 11 - tag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_693_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliFileTag), -1, 1, 1, 1, 1, 0, "u 'AliFileTag' - 11 - tag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGUID",597,G__G__STEERBase_693_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - Pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPath",697,G__G__STEERBase_693_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - Pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMD5",498,G__G__STEERBase_693_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - Pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTURL",627,G__G__STEERBase_693_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - Pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSize",711,G__G__STEERBase_693_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEventTag",1063,G__G__STEERBase_693_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliEventTag' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyFileInfo",1191,G__G__STEERBase_693_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliFileTag' - 11 - tag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGUID",585,G__G__STEERBase_693_0_11, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPath",685,G__G__STEERBase_693_0_12, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMD5",486,G__G__STEERBase_693_0_13, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTURL",615,G__G__STEERBase_693_0_14, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__G__STEERBase_693_0_15, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNEvents",995,G__G__STEERBase_693_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventTag",1086,G__G__STEERBase_693_0_17, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventTag), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - iev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_693_0_18, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliFileTag::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_693_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliFileTag::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_693_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliFileTag::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_693_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliFileTag::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_693_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_693_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliFileTag::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_693_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliFileTag::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_693_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliFileTag::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_693_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliFileTag::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliFileTag", 1072, G__G__STEERBase_693_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliGenEventHeader(void) {
   /* AliGenEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader));
   G__memfunc_setup("AliGenEventHeader",1659,G__G__STEERBase_699_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliGenEventHeader",1659,G__G__STEERBase_699_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NProduced",900,G__G__STEERBase_699_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InteractionTime",1551,G__G__STEERBase_699_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EventWeight",1130,G__G__STEERBase_699_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrimaryVertex",1378,G__G__STEERBase_699_0_6, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TArrayF' - 1 - o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNProduced",1200,G__G__STEERBase_699_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nprod", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPrimaryVertex",1678,G__G__STEERBase_699_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayF' - 11 - o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetInteractionTime",1851,G__G__STEERBase_699_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEventWeight",1430,G__G__STEERBase_699_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddEventWeight",1395,G__G__STEERBase_699_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - name f - 'Float_t' 0 - w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventWeight",1418,G__G__STEERBase_699_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventWeights",1533,G__G__STEERBase_699_0_13, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR), G__defined_typename("map<std::string,Float_t>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_699_0_14, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliGenEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_699_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_699_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliGenEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_699_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliGenEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_699_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_699_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_699_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_699_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_699_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenEventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliGenEventHeader", 1659, G__G__STEERBase_699_0_26, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader), -1, 0, 1, 1, 1, 0, "u 'AliGenEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliGenEventHeader", 1785, G__G__STEERBase_699_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliGenCocktailEventHeader(void) {
   /* AliGenCocktailEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenCocktailEventHeader));
   G__memfunc_setup("AliGenCocktailEventHeader",2469,G__G__STEERBase_700_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenCocktailEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliGenCocktailEventHeader",2469,G__G__STEERBase_700_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenCocktailEventHeader), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliGenCocktailEventHeader",2469,G__G__STEERBase_700_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenCocktailEventHeader), -1, 0, 1, 1, 1, 0, "u 'AliGenCocktailEventHeader' - 11 - header", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddHeader",850,G__G__STEERBase_700_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliGenEventHeader' - 10 - header", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHeaders",988,G__G__STEERBase_700_0_5, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalcNProduced",1271,G__G__STEERBase_700_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__G__STEERBase_700_0_7, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenCocktailEventHeader), -1, 1, 1, 1, 1, 0, "u 'AliGenCocktailEventHeader' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_700_0_8, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliGenCocktailEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_700_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenCocktailEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_700_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliGenCocktailEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_700_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliGenCocktailEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_700_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_700_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenCocktailEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_700_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenCocktailEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_700_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenCocktailEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_700_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenCocktailEventHeader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliGenCocktailEventHeader", 2595, G__G__STEERBase_700_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliGenDPMjetEventHeader(void) {
   /* AliGenDPMjetEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenDPMjetEventHeader));
   G__memfunc_setup("AliGenDPMjetEventHeader",2207,G__G__STEERBase_705_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenDPMjetEventHeader), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliGenDPMjetEventHeader",2207,G__G__STEERBase_705_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenDPMjetEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TotalEnergy",1134,G__G__STEERBase_705_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Trials",623,G__G__STEERBase_705_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessType",1153,G__G__STEERBase_705_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTotalEnergy",1434,G__G__STEERBase_705_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrials",923,G__G__STEERBase_705_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trials", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProcessType",1453,G__G__STEERBase_705_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_705_0_9, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliGenDPMjetEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_705_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenDPMjetEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_705_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliGenDPMjetEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_705_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliGenDPMjetEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_705_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_705_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenDPMjetEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_705_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenDPMjetEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_705_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenDPMjetEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_705_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenDPMjetEventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliGenDPMjetEventHeader", 2207, G__G__STEERBase_705_0_21, (int) ('i'), 
G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenDPMjetEventHeader), -1, 0, 1, 1, 1, 0, "u 'AliGenDPMjetEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliGenDPMjetEventHeader", 2333, G__G__STEERBase_705_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliGenEpos3EventHeader(void) {
   /* AliGenEpos3EventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEpos3EventHeader));
   G__memfunc_setup("AliGenEpos3EventHeader",2117,G__G__STEERBase_707_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEpos3EventHeader), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliGenEpos3EventHeader",2117,G__G__STEERBase_707_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEpos3EventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIversn",919,G__G__STEERBase_707_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLaproj",904,G__G__STEERBase_707_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaproj",905,G__G__STEERBase_707_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLatarg",891,G__G__STEERBase_707_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMatarg",892,G__G__STEERBase_707_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEngy",691,G__G__STEERBase_707_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNfull",801,G__G__STEERBase_707_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNfreeze",1007,G__G__STEERBase_707_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBim",568,G__G__STEERBase_707_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIversn",931,G__G__STEERBase_707_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iversn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLaproj",916,G__G__STEERBase_707_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - laproj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaproj",917,G__G__STEERBase_707_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - maproj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLatarg",903,G__G__STEERBase_707_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - latarg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMatarg",904,G__G__STEERBase_707_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - matarg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEngy",703,G__G__STEERBase_707_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - engy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNfull",813,G__G__STEERBase_707_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nfull", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNfreeze",1019,G__G__STEERBase_707_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nfreeze", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBim",580,G__G__STEERBase_707_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - bim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_707_0_21, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliGenEpos3EventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_707_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenEpos3EventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_707_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliGenEpos3EventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_707_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliGenEpos3EventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_707_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_707_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenEpos3EventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_707_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenEpos3EventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_707_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenEpos3EventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_707_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenEpos3EventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliGenEpos3EventHeader", 2117, G__G__STEERBase_707_0_33, (int) ('i'), 
G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEpos3EventHeader), -1, 0, 1, 1, 1, 0, "u 'AliGenEpos3EventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliGenEpos3EventHeader", 2243, G__G__STEERBase_707_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliGenEposEventHeader(void) {
   /* AliGenEposEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEposEventHeader));
   G__memfunc_setup("AliGenEposEventHeader",2066,G__G__STEERBase_708_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEposEventHeader), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliGenEposEventHeader",2066,G__G__STEERBase_708_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEposEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBimevt",903,G__G__STEERBase_708_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhievt",912,G__G__STEERBase_708_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKolevt",917,G__G__STEERBase_708_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKoievt",914,G__G__STEERBase_708_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPmxevt",932,G__G__STEERBase_708_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEgyevt",916,G__G__STEERBase_708_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNpjevt",919,G__G__STEERBase_708_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNtgevt",920,G__G__STEERBase_708_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNpnevt",923,G__G__STEERBase_708_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNppevt",925,G__G__STEERBase_708_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNtnevt",927,G__G__STEERBase_708_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNtpevt",929,G__G__STEERBase_708_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetJpnevt",919,G__G__STEERBase_708_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetJppevt",921,G__G__STEERBase_708_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetJtnevt",923,G__G__STEERBase_708_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetJtpevt",925,G__G__STEERBase_708_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXbjevt",915,G__G__STEERBase_708_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQsqevt",932,G__G__STEERBase_708_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNglevt",912,G__G__STEERBase_708_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZppevt",937,G__G__STEERBase_708_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZptevt",941,G__G__STEERBase_708_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBimevt",915,G__G__STEERBase_708_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhievt",924,G__G__STEERBase_708_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetKolevt",929,G__G__STEERBase_708_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetKoievt",926,G__G__STEERBase_708_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPmxevt",944,G__G__STEERBase_708_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEgyevt",928,G__G__STEERBase_708_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNpjevt",931,G__G__STEERBase_708_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNtgevt",932,G__G__STEERBase_708_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNpnevt",935,G__G__STEERBase_708_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNppevt",937,G__G__STEERBase_708_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNtnevt",939,G__G__STEERBase_708_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNtpevt",941,G__G__STEERBase_708_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetJpnevt",931,G__G__STEERBase_708_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetJppevt",933,G__G__STEERBase_708_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetJtnevt",935,G__G__STEERBase_708_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetJtpevt",937,G__G__STEERBase_708_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXbjevt",927,G__G__STEERBase_708_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQsqevt",944,G__G__STEERBase_708_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNglevt",924,G__G__STEERBase_708_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZppevt",949,G__G__STEERBase_708_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZptevt",953,G__G__STEERBase_708_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_708_0_45, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliGenEposEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_708_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenEposEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_708_0_47, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliGenEposEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_708_0_48, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliGenEposEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_708_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_708_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenEposEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_708_0_54, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenEposEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_708_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenEposEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_708_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenEposEventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliGenEposEventHeader", 2066, G__G__STEERBase_708_0_57, (int) ('i'), 
G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEposEventHeader), -1, 0, 1, 1, 1, 0, "u 'AliGenEposEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliGenEposEventHeader", 2192, G__G__STEERBase_708_0_58, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliGenEventHeaderTunedPbPb(void) {
   /* AliGenEventHeaderTunedPbPb */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeaderTunedPbPb));
   G__memfunc_setup("AliGenEventHeaderTunedPbPb",2527,G__G__STEERBase_709_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeaderTunedPbPb), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliGenEventHeaderTunedPbPb",2527,G__G__STEERBase_709_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeaderTunedPbPb), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCentrality",1343,G__G__STEERBase_709_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPsi2",638,G__G__STEERBase_709_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPsi3",639,G__G__STEERBase_709_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPsi4",640,G__G__STEERBase_709_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentrality",1355,G__G__STEERBase_709_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - centrality", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPsi2",650,G__G__STEERBase_709_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - psi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPsi3",651,G__G__STEERBase_709_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - psi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPsi4",652,G__G__STEERBase_709_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - psi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_709_0_11, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliGenEventHeaderTunedPbPb::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_709_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenEventHeaderTunedPbPb::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_709_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliGenEventHeaderTunedPbPb::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_709_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliGenEventHeaderTunedPbPb::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_709_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_709_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenEventHeaderTunedPbPb::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_709_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenEventHeaderTunedPbPb::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_709_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenEventHeaderTunedPbPb::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_709_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenEventHeaderTunedPbPb::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliGenEventHeaderTunedPbPb", 2527, G__G__STEERBase_709_0_23, (int) ('i'), 
G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeaderTunedPbPb), -1, 0, 1, 1, 1, 0, "u 'AliGenEventHeaderTunedPbPb' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliGenEventHeaderTunedPbPb", 2653, G__G__STEERBase_709_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliGenGeVSimEventHeader(void) {
   /* AliGenGeVSimEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenGeVSimEventHeader));
   G__memfunc_setup("AliGenGeVSimEventHeader",2214,G__G__STEERBase_710_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenGeVSimEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliGenGeVSimEventHeader",2214,G__G__STEERBase_710_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenGeVSimEventHeader), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventPlane",1298,G__G__STEERBase_710_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEllipticFlow",1518,G__G__STEERBase_710_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventPlane",1310,G__G__STEERBase_710_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - psi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEllipticFlow",1530,G__G__STEERBase_710_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_710_0_7, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliGenGeVSimEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_710_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenGeVSimEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_710_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliGenGeVSimEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_710_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliGenGeVSimEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_710_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_710_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenGeVSimEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_710_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenGeVSimEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_710_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenGeVSimEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_710_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenGeVSimEventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliGenGeVSimEventHeader", 2214, G__G__STEERBase_710_0_19, (int) ('i'), 
G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenGeVSimEventHeader), -1, 0, 1, 1, 1, 0, "u 'AliGenGeVSimEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliGenGeVSimEventHeader", 2340, G__G__STEERBase_710_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliGenHepMCEventHeader(void) {
   /* AliGenHepMCEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHepMCEventHeader));
   G__memfunc_setup("AliGenHepMCEventHeader",2088,G__G__STEERBase_711_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHepMCEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliGenHepMCEventHeader",2088,G__G__STEERBase_711_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHepMCEventHeader), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliGenHepMCEventHeader",2088,G__G__STEERBase_711_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHepMCEventHeader), -1, 0, 22, 1, 1, 0, 
"i - 'Int_t' 0 - Ncoll_hard i - 'Int_t' 0 - Npart_proj "
"i - 'Int_t' 0 - Npart_targ i - 'Int_t' 0 - Ncoll "
"i - 'Int_t' 0 - spectator_neutrons i - 'Int_t' 0 - spectator_protons "
"i - 'Int_t' 0 - N_Nwounded_collisions i - 'Int_t' 0 - Nwounded_N_collisions "
"i - 'Int_t' 0 - Nwounded_Nwounded_collisions f - 'Float_t' 0 - impact_parameter "
"f - 'Float_t' 0 - event_plane_angle f - 'Float_t' 0 - eccentricity "
"f - 'Float_t' 0 - sigma_inel_NN i - 'Int_t' 0 - id1 "
"i - 'Int_t' 0 - id2 i - 'Int_t' 0 - pdf_id1 "
"i - 'Int_t' 0 - pdf_id2 d - 'Double_t' 0 - x1 "
"d - 'Double_t' 0 - x2 d - 'Double_t' 0 - scalePDF "
"d - 'Double_t' 0 - pdf1 d - 'Double_t' 0 - pdf2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ncoll_hard",1014,G__G__STEERBase_711_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Number of hard scatterings", (void*) NULL, 0);
   G__memfunc_setup("Npart_proj",1055,G__G__STEERBase_711_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Number of projectile participants", (void*) NULL, 0);
   G__memfunc_setup("Npart_targ",1042,G__G__STEERBase_711_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Number of target participants", (void*) NULL, 0);
   G__memfunc_setup("Ncoll",504,G__G__STEERBase_711_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Number of NN (nucleon-nucleon) collisions", (void*) NULL, 0);
   G__memfunc_setup("spectator_neutrons",1970,G__G__STEERBase_711_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Number of spectator neutrons", (void*) NULL, 0);
   G__memfunc_setup("spectator_protons",1865,G__G__STEERBase_711_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Number of spectator protons", (void*) NULL, 0);
   G__memfunc_setup("N_Nwounded_collisions",2191,G__G__STEERBase_711_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Number of N-Nwounded collisions", (void*) NULL, 0);
   G__memfunc_setup("Nwounded_N_collisions",2191,G__G__STEERBase_711_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Number of Nwounded-N collisons", (void*) NULL, 0);
   G__memfunc_setup("Nwounded_Nwounded_collisions",2949,G__G__STEERBase_711_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Number of Nwounded-Nwounded collisions", (void*) NULL, 0);
   G__memfunc_setup("impact_parameter",1694,G__G__STEERBase_711_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "Impact Parameter(in fm) of collision", (void*) NULL, 0);
   G__memfunc_setup("event_plane_angle",1783,G__G__STEERBase_711_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "Azimuthal angle of event plane", (void*) NULL, 0);
   G__memfunc_setup("eccentricity",1286,G__G__STEERBase_711_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "eccentricity of participating nucleons in the transverse plane (as in phobos nucl-ex/0510031)", (void*) NULL, 0);
   G__memfunc_setup("sigma_inel_NN",1299,G__G__STEERBase_711_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "nucleon-nucleon inelastic (including diffractive) cross-section", (void*) NULL, 0);
   G__memfunc_setup("id1",254,G__G__STEERBase_711_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "flavour code of first parton", (void*) NULL, 0);
   G__memfunc_setup("id2",255,G__G__STEERBase_711_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "flavour code of second parton", (void*) NULL, 0);
   G__memfunc_setup("pdf_id1",663,G__G__STEERBase_711_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "LHAPDF set id of first parton", (void*) NULL, 0);
   G__memfunc_setup("pdf_id2",664,G__G__STEERBase_711_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "LHAPDF set id of second parton", (void*) NULL, 0);
   G__memfunc_setup("x1",169,G__G__STEERBase_711_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "fraction of beam momentum carried by first parton (\"beam side\")", (void*) NULL, 0);
   G__memfunc_setup("x2",170,G__G__STEERBase_711_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "fraction of beam momentum carried by second parton (\"target side\")", (void*) NULL, 0);
   G__memfunc_setup("scalePDF",738,G__G__STEERBase_711_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Q-scale used in evaluation of PDF's   (in GeV)", (void*) NULL, 0);
   G__memfunc_setup("pdf1",363,G__G__STEERBase_711_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "PDF (id1, x1, Q) - x*f(x)", (void*) NULL, 0);
   G__memfunc_setup("pdf2",364,G__G__STEERBase_711_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "PDF (id2, x2, Q) - x*f(x)", (void*) NULL, 0);
   G__memfunc_setup("HeavyIonInfoValid",1695,G__G__STEERBase_711_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PDFValid",714,G__G__STEERBase_711_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_711_0_28, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliGenHepMCEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_711_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenHepMCEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_711_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliGenHepMCEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_711_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliGenHepMCEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_711_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_711_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenHepMCEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_711_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenHepMCEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_711_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenHepMCEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_711_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenHepMCEventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliGenHepMCEventHeader", 2088, G__G__STEERBase_711_0_40, (int) ('i'), 
G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHepMCEventHeader), -1, 0, 1, 1, 1, 0, "u 'AliGenHepMCEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliGenHepMCEventHeader", 2214, G__G__STEERBase_711_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliGenHerwigEventHeader(void) {
   /* AliGenHerwigEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHerwigEventHeader));
   G__memfunc_setup("AliGenHerwigEventHeader",2273,G__G__STEERBase_712_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHerwigEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliGenHerwigEventHeader",2273,G__G__STEERBase_712_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHerwigEventHeader), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessType",1153,G__G__STEERBase_712_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProcessType",1453,G__G__STEERBase_712_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Trials",623,G__G__STEERBase_712_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrials",923,G__G__STEERBase_712_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trials", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Weight",616,G__G__STEERBase_712_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWeight",916,G__G__STEERBase_712_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPtHard",867,G__G__STEERBase_712_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPtHardGen",1161,G__G__STEERBase_712_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - pthard", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_712_0_11, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliGenHerwigEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_712_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenHerwigEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_712_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliGenHerwigEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_712_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliGenHerwigEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_712_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_712_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenHerwigEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_712_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenHerwigEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_712_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenHerwigEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_712_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenHerwigEventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliGenHerwigEventHeader", 2273, G__G__STEERBase_712_0_23, (int) ('i'), 
G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHerwigEventHeader), -1, 0, 1, 1, 1, 0, "u 'AliGenHerwigEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliGenHerwigEventHeader", 2399, G__G__STEERBase_712_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliGenHijingEventHeader(void) {
   /* AliGenHijingEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHijingEventHeader));
   G__memfunc_setup("AliGenHijingEventHeader",2260,G__G__STEERBase_713_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHijingEventHeader), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliGenHijingEventHeader",2260,G__G__STEERBase_713_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHijingEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TotalEnergy",1134,G__G__STEERBase_713_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Trials",623,G__G__STEERBase_713_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrueNPart",1189,G__G__STEERBase_713_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpectatorsInTheStack",2326,G__G__STEERBase_713_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFragmentationFromData",2429,G__G__STEERBase_713_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFreeProjSpecn",1590,G__G__STEERBase_713_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFreeProjSpecp",1592,G__G__STEERBase_713_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFreeTargSpecn",1577,G__G__STEERBase_713_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFreeTargSpecp",1579,G__G__STEERBase_713_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTotalEnergy",1434,G__G__STEERBase_713_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetJets",706,G__G__STEERBase_713_0_13, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TLorentzVector' - 10 - jet1 U 'TLorentzVector' - 10 - jet2 "
"U 'TLorentzVector' - 10 - jet3 U 'TLorentzVector' - 10 - jet4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetJets",694,G__G__STEERBase_713_0_14, 121, -1, -1, 0, 4, 1, 1, 8, 
"u 'TLorentzVector' - 1 - jet1 u 'TLorentzVector' - 1 - jet2 "
"u 'TLorentzVector' - 1 - jet3 u 'TLorentzVector' - 1 - jet4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrials",923,G__G__STEERBase_713_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trials", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrueNPart",1201,G__G__STEERBase_713_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - npart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpectatorsInTheStack",2338,G__G__STEERBase_713_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDataFromFragmentation",2441,G__G__STEERBase_713_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFreeSpectators",1750,G__G__STEERBase_713_0_19, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - specnproj i - 'Int_t' 0 - specpproj "
"i - 'Int_t' 0 - specntarg i - 'Int_t' 0 - specptarg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_713_0_20, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliGenHijingEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_713_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenHijingEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_713_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliGenHijingEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_713_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliGenHijingEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_713_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_713_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenHijingEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_713_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenHijingEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_713_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenHijingEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_713_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenHijingEventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliGenHijingEventHeader", 2260, G__G__STEERBase_713_0_32, (int) ('i'), 
G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenHijingEventHeader), -1, 0, 1, 1, 1, 0, "u 'AliGenHijingEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliGenHijingEventHeader", 2386, G__G__STEERBase_713_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliGenPythiaEventHeader(void) {
   /* AliGenPythiaEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenPythiaEventHeader));
   G__memfunc_setup("AliGenPythiaEventHeader",2282,G__G__STEERBase_714_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenPythiaEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliGenPythiaEventHeader",2282,G__G__STEERBase_714_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenPythiaEventHeader), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessType",1153,G__G__STEERBase_714_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNMPI",608,G__G__STEERBase_714_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mpi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNSuperpositions",1905,G__G__STEERBase_714_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProcessType",1453,G__G__STEERBase_714_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Trials",623,G__G__STEERBase_714_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrials",923,G__G__STEERBase_714_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trials", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddJet",556,G__G__STEERBase_714_0_9, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - px f - 'Float_t' 0 - py "
"f - 'Float_t' 0 - pz f - 'Float_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddUQJet",722,G__G__STEERBase_714_0_10, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - px f - 'Float_t' 0 - py "
"f - 'Float_t' 0 - pz f - 'Float_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NTriggerJets",1208,G__G__STEERBase_714_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NUQTriggerJets",1374,G__G__STEERBase_714_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TriggerJet",1015,G__G__STEERBase_714_0_13, 121, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i F - 'Float_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UQJet",457,G__G__STEERBase_714_0_14, 121, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i F - 'Float_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXJet",667,G__G__STEERBase_714_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYJet",668,G__G__STEERBase_714_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInMediumLength",1690,G__G__STEERBase_714_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImpactParameter",1823,G__G__STEERBase_714_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXYJet",768,G__G__STEERBase_714_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImpactParameter",1835,G__G__STEERBase_714_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetInMe",661,G__G__STEERBase_714_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZQuench",1002,G__G__STEERBase_714_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZQuench",990,G__G__STEERBase_714_0_23, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPtHard",879,G__G__STEERBase_714_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - pthard", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPtHard",867,G__G__STEERBase_714_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXsection",1145,G__G__STEERBase_714_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - xsec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXsection",1133,G__G__STEERBase_714_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNMPI",596,G__G__STEERBase_714_0_28, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNSuperpositions",1893,G__G__STEERBase_714_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_714_0_30, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliGenPythiaEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_714_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenPythiaEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_714_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliGenPythiaEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_714_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliGenPythiaEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_714_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_714_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenPythiaEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_714_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenPythiaEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_714_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenPythiaEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_714_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenPythiaEventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliGenPythiaEventHeader", 2282, G__G__STEERBase_714_0_42, (int) ('i'), 
G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenPythiaEventHeader), -1, 0, 1, 1, 1, 0, "u 'AliGenPythiaEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliGenPythiaEventHeader", 2408, G__G__STEERBase_714_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliGenToyEventHeader(void) {
   /* AliGenToyEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenToyEventHeader));
   G__memfunc_setup("AliGenToyEventHeader",1975,G__G__STEERBase_715_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenToyEventHeader), -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliGenToyEventHeader",1975,G__G__STEERBase_715_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenToyEventHeader), -1, 0, 1, 1, 1, 0, "u 'AliGenToyEventHeader' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_715_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenToyEventHeader), -1, 1, 1, 1, 1, 0, "u 'AliGenToyEventHeader' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentrality",1355,G__G__STEERBase_715_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - cent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetValue",809,G__G__STEERBase_715_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - key d - 'Double_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCentrality",1343,G__G__STEERBase_715_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameter",1217,G__G__STEERBase_715_0_7, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'string' - 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_715_0_8, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliGenToyEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_715_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenToyEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_715_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliGenToyEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_715_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliGenToyEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_715_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_715_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenToyEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_715_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenToyEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_715_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliGenToyEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_715_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliGenToyEventHeader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliGenToyEventHeader", 2101, G__G__STEERBase_715_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliStack(void) {
   /* AliStack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack));
   G__memfunc_setup("AliStack",780,G__G__STEERBase_716_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - size C - - 10 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliStack",780,G__G__STEERBase_716_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliStack",780,G__G__STEERBase_716_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack), -1, 0, 1, 1, 1, 0, "u 'AliStack' - 11 - st", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_716_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack), -1, 1, 1, 1, 1, 0, "u 'AliStack' - 11 - st", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PushTrack",917,G__G__STEERBase_716_0_5, 121, -1, -1, 0, 11, 1, 1, 0, 
"i - 'Int_t' 0 - done i - 'Int_t' 0 - parent "
"i - 'Int_t' 0 - pdg F - 'Float_t' 10 - pmom "
"F - 'Float_t' 10 - vpos F - 'Float_t' 10 - polar "
"f - 'Float_t' 0 - tof i 'TMCProcess' - 0 - mech "
"i - 'Int_t' 1 - ntr f - 'Float_t' 0 - weight "
"i - 'Int_t' 0 - is", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PushTrack",917,(G__InterfaceMethod) NULL,121, -1, -1, 0, 18, 1, 1, 0, 
"i - 'Int_t' 0 - done i - 'Int_t' 0 - parent "
"i - 'Int_t' 0 - pdg d - 'Double_t' 0 - px "
"d - 'Double_t' 0 - py d - 'Double_t' 0 - pz "
"d - 'Double_t' 0 - e d - 'Double_t' 0 - vx "
"d - 'Double_t' 0 - vy d - 'Double_t' 0 - vz "
"d - 'Double_t' 0 - tof d - 'Double_t' 0 - polx "
"d - 'Double_t' 0 - poly d - 'Double_t' 0 - polz "
"i 'TMCProcess' - 0 - mech i - 'Int_t' 1 - ntr "
"d - 'Double_t' 0 - weight i - 'Int_t' 0 - is", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PopNextTrack",1219,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TParticle), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - track", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCurrentTrack",1528,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TParticle), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PopPrimaryForTracking",2157,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TParticle), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConnectTree",1114,G__G__STEERBase_716_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvent",802,G__G__STEERBase_716_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PurifyKine",1030,G__G__STEERBase_716_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReorderKine",1114,G__G__STEERBase_716_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinishEvent",1123,G__G__STEERBase_716_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FlagTrack",879,G__G__STEERBase_716_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KeepTrack",890,G__G__STEERBase_716_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - itrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clean",483,G__G__STEERBase_716_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__STEERBase_716_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpPart",813,G__G__STEERBase_716_0_19, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpPStack",988,G__G__STEERBase_716_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpLoadedStack",1493,G__G__STEERBase_716_0_21, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNtrack",911,G__G__STEERBase_716_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ntrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrentTrack",1540,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - track", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetHighWaterMark",1594,G__G__STEERBase_716_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - hgwmk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNtrack",899,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNprimary",1138,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNtransported",1572,G__G__STEERBase_716_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentTrackNumber",2145,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCurrentParentTrackNumber",2763,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Particle",820,G__G__STEERBase_716_0_30, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TParticle), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrimary",1028,G__G__STEERBase_716_0_31, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TreeK",475,G__G__STEERBase_716_0_32, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TTree), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParticleFromTreeK",1699,G__G__STEERBase_716_0_33, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TParticle), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TreeKEntry",1005,G__G__STEERBase_716_0_34, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPhysicalPrimary",1757,G__G__STEERBase_716_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSecondaryFromWeakDecay",2406,G__G__STEERBase_716_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSecondaryFromMaterial",2343,G__G__STEERBase_716_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackLabel",981,G__G__STEERBase_716_0_38, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackLabelMap",1267,G__G__STEERBase_716_0_39, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Particles",935,G__G__STEERBase_716_0_40, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanParents",1216,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetArrays",1141,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParticleMapEntry",1924,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TParticle), -1, 0, 1, 1, 2, 8, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNextParticle",1523,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TParticle), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KeepPhysics",1128,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "U 'TParticle' - 10 - part", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsStable",791,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - pdg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'TObject' - 1 - st", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_716_0_48, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliStack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_716_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliStack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_716_0_50, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliStack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_716_0_51, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliStack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_716_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_716_0_56, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliStack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_716_0_57, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliStack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_716_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliStack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_716_0_59, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliStack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliStack", 906, G__G__STEERBase_716_0_60, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliHeader(void) {
   /* AliHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliHeader));
   G__memfunc_setup("AliHeader",863,G__G__STEERBase_717_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliHeader",863,G__G__STEERBase_717_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliHeader), -1, 0, 1, 1, 1, 0, "u 'AliHeader' - 11 - head", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliHeader",863,G__G__STEERBase_717_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliHeader), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - run i - 'Int_t' 0 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliHeader",863,G__G__STEERBase_717_0_4, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliHeader), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - run i - 'Int_t' 0 - eventSerialNr "
"i - 'Int_t' 0 - evNrInRun", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__STEERBase_717_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - run i - 'Int_t' 0 - event", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,G__G__STEERBase_717_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - run i - 'Int_t' 0 - eventSerialNr "
"i - 'Int_t' 0 - evNrInRun", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRun",609,G__G__STEERBase_717_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - run", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRun",597,G__G__STEERBase_717_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNprimary",1150,G__G__STEERBase_717_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nprimary", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNprimary",1138,G__G__STEERBase_717_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNsecondary",1334,G__G__STEERBase_717_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNvertex",1048,G__G__STEERBase_717_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - vertex", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNvertex",1036,G__G__STEERBase_717_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNtrack",911,G__G__STEERBase_717_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ntrack", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNtrack",899,G__G__STEERBase_717_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEvent",814,G__G__STEERBase_717_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - event", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEvent",802,G__G__STEERBase_717_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEventNrInRun",1498,G__G__STEERBase_717_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - event", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventNrInRun",1486,G__G__STEERBase_717_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Stack",502,G__G__STEERBase_717_0_20, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliStack), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetStack",802,G__G__STEERBase_717_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliStack' - 0 - stack", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetGenEventHeader",1681,G__G__STEERBase_717_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliGenEventHeader' - 0 - header", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenEventHeader",1381,G__G__STEERBase_717_0_23, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliGenEventHeader), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddDetectorEventHeader",2190,G__G__STEERBase_717_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliDetectorEventHeader' - 0 - header", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDetectorEventHeader",2213,G__G__STEERBase_717_0_25, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliDetectorEventHeader), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTimeStamp",1216,G__G__STEERBase_717_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'time_t' 0 - timeStamp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTimeStamp",1204,G__G__STEERBase_717_0_27, 108, -1, G__defined_typename("time_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - - 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__G__STEERBase_717_0_29, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliHeader), -1, 1, 1, 1, 1, 0, "u 'AliHeader' - 11 - head", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "u 'TObject' - 1 - head", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_717_0_31, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_717_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_717_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_717_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_717_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_717_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_717_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_717_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_717_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliHeader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliHeader", 989, G__G__STEERBase_717_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliLHCTag(void) {
   /* AliLHCTag */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTag));
   G__memfunc_setup("AliLHCTag",777,G__G__STEERBase_719_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTag), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliLHCTag",777,G__G__STEERBase_719_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTag), -1, 0, 1, 1, 1, 0, "u 'AliLHCTag' - 11 - tag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_719_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTag), -1, 1, 1, 1, 1, 0, "u 'AliLHCTag' - 11 - tag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateFromRunTable",1812,G__G__STEERBase_719_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliLHCTag' - 1 - tag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLHCState",1028,G__G__STEERBase_719_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLuminosity",1385,G__G__STEERBase_719_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - lumin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNBunches",1090,G__G__STEERBase_719_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - nb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFillingScheme",1606,G__G__STEERBase_719_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - sch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFillNo",880,G__G__STEERBase_719_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - fill", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamEnergy",1291,G__G__STEERBase_719_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - be", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBunchIntensity",1763,G__G__STEERBase_719_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - bi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLHCState",1016,G__G__STEERBase_719_0_12, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLuminosity",1373,G__G__STEERBase_719_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNBunches",1078,G__G__STEERBase_719_0_14, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFillingScheme",1594,G__G__STEERBase_719_0_15, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFillNo",868,G__G__STEERBase_719_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamEnergy",1279,G__G__STEERBase_719_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBunchIntensity",1751,G__G__STEERBase_719_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_719_0_19, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliLHCTag::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_719_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliLHCTag::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_719_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliLHCTag::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_719_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliLHCTag::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_719_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_719_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliLHCTag::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_719_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliLHCTag::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_719_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliLHCTag::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_719_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliLHCTag::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliLHCTag", 903, G__G__STEERBase_719_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliLHCTagCuts(void) {
   /* AliLHCTagCuts */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTagCuts));
   G__memfunc_setup("AliLHCTagCuts",1192,G__G__STEERBase_720_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTagCuts), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__STEERBase_720_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLHCState",1028,G__G__STEERBase_720_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - state", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLHCLuminosityRange",2093,G__G__STEERBase_720_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - low f - 'Float_t' 0 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNBunchesRange",1583,G__G__STEERBase_720_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"r - 'UShort_t' 0 - nbm r - 'UShort_t' 0 - nbx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFillingScheme",1606,G__G__STEERBase_720_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - sch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFillNoRange",1373,G__G__STEERBase_720_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - fmin i - 'Int_t' 0 - fmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamEnergyRange",1784,G__G__STEERBase_720_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - bemin f - 'Float_t' 0 - bemax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBunchIntensityRange",2256,G__G__STEERBase_720_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - bimin f - 'Float_t' 0 - bimax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAccepted",981,G__G__STEERBase_720_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'AliLHCTag' - 0 - lhcTag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_720_0_11, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliLHCTagCuts::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_720_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliLHCTagCuts::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_720_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliLHCTagCuts::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_720_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliLHCTagCuts::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_720_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_720_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliLHCTagCuts::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_720_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliLHCTagCuts::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_720_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliLHCTagCuts::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_720_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliLHCTagCuts::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliLHCTagCuts", 1192, G__G__STEERBase_720_0_23, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTagCuts), -1, 0, 1, 1, 1, 0, "u 'AliLHCTagCuts' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliLHCTagCuts", 1318, G__G__STEERBase_720_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_720_0_25, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliLHCTagCuts), -1, 1, 1, 1, 1, 0, "u 'AliLHCTagCuts' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliMagWrapCheb(void) {
   /* AliMagWrapCheb */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagWrapCheb));
   G__memfunc_setup("AliMagWrapCheb",1335,G__G__STEERBase_723_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagWrapCheb), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMagWrapCheb",1335,G__G__STEERBase_723_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagWrapCheb), -1, 0, 1, 1, 1, 0, "u 'AliMagWrapCheb' - 11 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyFrom",815,G__G__STEERBase_723_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliMagWrapCheb' - 11 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_723_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagWrapCheb), -1, 1, 1, 1, 1, 0, "u 'AliMagWrapCheb' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNParamsSol",1280,G__G__STEERBase_723_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNSegZSol",1045,G__G__STEERBase_723_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegZSol",967,G__G__STEERBase_723_0_8, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNParamsTPCInt",1508,G__G__STEERBase_723_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNSegZTPCInt",1273,G__G__STEERBase_723_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNParamsTPCRatInt",1803,G__G__STEERBase_723_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNSegZTPCRatInt",1568,G__G__STEERBase_723_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNParamsDip",1263,G__G__STEERBase_723_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNSegZDip",1028,G__G__STEERBase_723_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxZ",672,G__G__STEERBase_723_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinZ",670,G__G__STEERBase_723_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinZSol",972,G__G__STEERBase_723_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxZSol",974,G__G__STEERBase_723_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxRSol",966,G__G__STEERBase_723_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinZDip",955,G__G__STEERBase_723_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxZDip",957,G__G__STEERBase_723_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinZTPCInt",1200,G__G__STEERBase_723_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxZTPCInt",1202,G__G__STEERBase_723_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxRTPCInt",1194,G__G__STEERBase_723_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinZTPCRatInt",1495,G__G__STEERBase_723_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxZTPCRatInt",1497,G__G__STEERBase_723_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxRTPCRatInt",1489,G__G__STEERBase_723_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParamSol",1087,G__G__STEERBase_723_0_28, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ipar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParamTPCRatInt",1610,G__G__STEERBase_723_0_29, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ipar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParamTPCInt",1315,G__G__STEERBase_723_0_30, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ipar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParamDip",1070,G__G__STEERBase_723_0_31, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCheb3D), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ipar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Field",484,G__G__STEERBase_723_0_33, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - xyz D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBz",476,G__G__STEERBase_723_0_34, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - xyz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FieldCyl",780,G__G__STEERBase_723_0_35, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - rphiz D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCInt",818,G__G__STEERBase_723_0_36, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - xyz D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCIntCyl",1114,G__G__STEERBase_723_0_37, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - rphiz D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCRatInt",1113,G__G__STEERBase_723_0_38, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - xyz D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCRatIntCyl",1409,G__G__STEERBase_723_0_39, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - rphiz D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindSolSegment",1410,G__G__STEERBase_723_0_40, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - xyz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTPCSegment",1339,G__G__STEERBase_723_0_41, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - xyz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTPCRatSegment",1634,G__G__STEERBase_723_0_42, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - xyz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindDipSegment",1393,G__G__STEERBase_723_0_43, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - xyz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CylToCartCylB",1247,G__G__STEERBase_723_0_44, 121, -1, -1, 0, 3, 3, 1, 0, 
"D - 'Double_t' 10 - rphiz D - 'Double_t' 10 - brphiz "
"D - 'Double_t' 0 - bxyz", (char*)NULL, (void*) G__func2void( (void (*)(const Double_t*, const Double_t*, Double_t*))(&AliMagWrapCheb::CylToCartCylB) ), 0);
   G__memfunc_setup("CylToCartCartB",1345,G__G__STEERBase_723_0_45, 121, -1, -1, 0, 3, 3, 1, 0, 
"D - 'Double_t' 10 - xyz D - 'Double_t' 10 - brphiz "
"D - 'Double_t' 0 - bxyz", (char*)NULL, (void*) G__func2void( (void (*)(const Double_t*, const Double_t*, Double_t*))(&AliMagWrapCheb::CylToCartCartB) ), 0);
   G__memfunc_setup("CartToCylCartB",1345,G__G__STEERBase_723_0_46, 121, -1, -1, 0, 3, 3, 1, 0, 
"D - 'Double_t' 10 - xyz D - 'Double_t' 10 - bxyz "
"D - 'Double_t' 0 - brphiz", (char*)NULL, (void*) G__func2void( (void (*)(const Double_t*, const Double_t*, Double_t*))(&AliMagWrapCheb::CartToCylCartB) ), 0);
   G__memfunc_setup("CartToCylCylB",1247,G__G__STEERBase_723_0_47, 121, -1, -1, 0, 3, 3, 1, 0, 
"D - 'Double_t' 10 - rphiz D - 'Double_t' 10 - bxyz "
"D - 'Double_t' 0 - brphiz", (char*)NULL, (void*) G__func2void( (void (*)(const Double_t*, const Double_t*, Double_t*))(&AliMagWrapCheb::CartToCylCylB) ), 0);
   G__memfunc_setup("CartToCyl",885,G__G__STEERBase_723_0_48, 121, -1, -1, 0, 2, 3, 1, 0, 
"D - 'Double_t' 10 - xyz D - 'Double_t' 0 - rphiz", (char*)NULL, (void*) G__func2void( (void (*)(const Double_t*, Double_t*))(&AliMagWrapCheb::CartToCyl) ), 0);
   G__memfunc_setup("CylToCart",885,G__G__STEERBase_723_0_49, 121, -1, -1, 0, 2, 3, 1, 0, 
"D - 'Double_t' 10 - rphiz D - 'Double_t' 0 - xyz", (char*)NULL, (void*) G__func2void( (void (*)(const Double_t*, Double_t*))(&AliMagWrapCheb::CylToCart) ), 0);
   G__memfunc_setup("LoadData",762,G__G__STEERBase_723_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - inpfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMagWrapCheb",1335,G__G__STEERBase_723_0_51, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagWrapCheb), -1, 0, 1, 1, 1, 0, "C - - 10 - inputFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveData",777,G__G__STEERBase_723_0_52, 121, -1, -1, 0, 1, 1, 1, 8, "C - - 10 - outfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SegmentDimension",1657,G__G__STEERBase_723_0_53, 105, -1, G__defined_typename("Int_t"), 0, 10, 1, 1, 0, 
"F - 'Float_t' 2 - seg U 'TObjArray' - 10 - par "
"i - - 0 - npar i - - 0 - dim "
"f - 'Float_t' 0 - xmn f - 'Float_t' 0 - xmx "
"f - 'Float_t' 0 - ymn f - 'Float_t' 0 - ymx "
"f - 'Float_t' 0 - zmn f - 'Float_t' 0 - zmx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddParamSol",1064,G__G__STEERBase_723_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliCheb3D' - 10 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddParamTPCInt",1292,G__G__STEERBase_723_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliCheb3D' - 10 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddParamTPCRatInt",1587,G__G__STEERBase_723_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliCheb3D' - 10 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddParamDip",1047,G__G__STEERBase_723_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliCheb3D' - 10 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildTable",984,G__G__STEERBase_723_0_58, 121, -1, -1, 0, 15, 1, 1, 0, 
"i - 'Int_t' 0 - npar U 'TObjArray' - 0 - parArr "
"i - 'Int_t' 1 - nZSeg i - 'Int_t' 1 - nYSeg "
"i - 'Int_t' 1 - nXSeg f - 'Float_t' 1 - minZ "
"f - 'Float_t' 1 - maxZ F - 'Float_t' 2 - segZ "
"F - 'Float_t' 2 - segY F - 'Float_t' 2 - segX "
"I - 'Int_t' 2 - begSegY I - 'Int_t' 2 - nSegY "
"I - 'Int_t' 2 - begSegX I - 'Int_t' 2 - nSegX "
"I - 'Int_t' 2 - segID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildTableSol",1286,G__G__STEERBase_723_0_59, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildTableDip",1269,G__G__STEERBase_723_0_60, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildTableTPCInt",1514,G__G__STEERBase_723_0_61, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildTableTPCRatInt",1809,G__G__STEERBase_723_0_62, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetTPCInt",1045,G__G__STEERBase_723_0_63, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetTPCRatInt",1340,G__G__STEERBase_723_0_64, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetSol",817,G__G__STEERBase_723_0_65, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetDip",800,G__G__STEERBase_723_0_66, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FieldCylSol",1082,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 8, 
"D - 'Double_t' 10 - rphiz D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FieldCylSolBz",1270,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 2, 8, "D - 'Double_t' 10 - rphiz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_723_0_69, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliMagWrapCheb::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_723_0_70, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMagWrapCheb::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_723_0_71, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliMagWrapCheb::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_723_0_72, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliMagWrapCheb::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_723_0_76, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_723_0_77, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMagWrapCheb::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_723_0_78, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMagWrapCheb::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_723_0_79, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMagWrapCheb::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_723_0_80, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMagWrapCheb::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliMagWrapCheb", 1461, G__G__STEERBase_723_0_81, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliMagF(void) {
   /* AliMagF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagF));
   G__memfunc_setup("AliMagF",625,G__G__STEERBase_724_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMagF",625,G__G__STEERBase_724_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagF), -1, 0, 10, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"d - 'Double_t' 0 '1.' factorSol d - 'Double_t' 0 '1.' factorDip "
"i 'AliMagF::BMap_t' - 0 'k5kG' maptype i 'AliMagF::BeamType_t' - 0 'kBeamTypepp' btype "
"d - 'Double_t' 0 '-1' benergy i - 'Int_t' 0 '2' integ "
"d - 'Double_t' 0 '15' fmax C - - 10 '\"$(ALICE_ROOT)/data/maps/mfchebKGI_sym.root\"' path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMagF",625,G__G__STEERBase_724_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagF), -1, 0, 1, 1, 1, 0, "u 'AliMagF' - 11 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_724_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagF), -1, 1, 1, 1, 1, 0, "u 'AliMagF' - 11 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Field",484,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - x D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCInt",818,G__G__STEERBase_724_0_6, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - xyz D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCRatInt",1113,G__G__STEERBase_724_0_7, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - xyz D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCIntCyl",1114,G__G__STEERBase_724_0_8, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - rphiz D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCRatIntCyl",1409,G__G__STEERBase_724_0_9, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - rphiz D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBz",476,G__G__STEERBase_724_0_10, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - xyz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeasuredMap",1396,G__G__STEERBase_724_0_11, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagWrapCheb), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFactorSol",1209,G__G__STEERBase_724_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1.' fc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFactorDip",1192,G__G__STEERBase_724_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1.' fc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFactorSol",1197,G__G__STEERBase_724_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFactorDip",1180,G__G__STEERBase_724_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Factor",607,G__G__STEERBase_724_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentSol",1329,G__G__STEERBase_724_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentDip",1312,G__G__STEERBase_724_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsUniform",924,G__G__STEERBase_724_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MachineField",1177,G__G__STEERBase_724_0_20, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - x D - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMapType",992,G__G__STEERBase_724_0_21, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLBMap_t), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamType",1079,G__G__STEERBase_724_0_22, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagFcLcLBeamType_t), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamTypeText",1500,G__G__STEERBase_724_0_23, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamEnergy",1279,G__G__STEERBase_724_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Max",294,G__G__STEERBase_724_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Integ",503,G__G__STEERBase_724_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrecInteg",897,G__G__STEERBase_724_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SolenoidField",1313,G__G__STEERBase_724_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataFileName",1435,G__G__STEERBase_724_0_29, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParamName",1170,G__G__STEERBase_724_0_30, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDataFileName",1447,G__G__STEERBase_724_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - nm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParamName",1182,G__G__STEERBase_724_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - nm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadParameterization",2079,G__G__STEERBase_724_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPolarityConvention",2199,G__G__STEERBase_724_0_35, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&AliMagF::GetPolarityConvention) ), 0);
   G__memfunc_setup("CreateFieldMap",1366,G__G__STEERBase_724_0_36, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMagF), -1, 0, 8, 3, 1, 0, 
"f - 'Float_t' 0 '-30000.' l3Current f - 'Float_t' 0 '-6000.' diCurrent "
"i - 'Int_t' 0 '0' convention g - 'Bool_t' 0 'kFALSE' uniform "
"f - 'Float_t' 0 '7000' beamenergy C - 'Char_t' 10 '\"pp\"' btype "
"C - 'Char_t' 10 '\"$(ALICE_ROOT)/data/maps/mfchebKGI_sym.root\"' path g - 'Bool_t' 0 'kFALSE' returnNullOnInvalidCurrent", (char*)NULL, (void*) G__func2void( (AliMagF* (*)(Float_t, Float_t, Int_t, Bool_t, Float_t, const Char_t*, const Char_t*, Bool_t))(&AliMagF::CreateFieldMap) ), 0);
   G__memfunc_setup("InitMachineField",1581,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i 'AliMagF::BeamType_t' - 0 - btype d - 'Double_t' 0 - benergy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamType",1091,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i 'AliMagF::BeamType_t' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamEnergy",1291,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_724_0_40, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliMagF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_724_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMagF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_724_0_42, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliMagF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_724_0_43, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliMagF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_724_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_724_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMagF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_724_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMagF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_724_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMagF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_724_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMagF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliMagF", 751, G__G__STEERBase_724_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliMathBase(void) {
   /* AliMathBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMathBase));
   G__memfunc_setup("AliMathBase",1051,G__G__STEERBase_740_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMathBase), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvaluateUni",1123,G__G__STEERBase_740_0_2, 121, -1, -1, 0, 5, 3, 1, 0, 
"i - 'Int_t' 10 - nvectors D - 'Double_t' 10 - data "
"d - 'Double_t' 1 - mean d - 'Double_t' 1 - sigma "
"i - 'Int_t' 10 - hSub", (char*)NULL, (void*) G__func2void( (void (*)(const Int_t, const Double_t*, Double_t&, Double_t&, const Int_t))(&AliMathBase::EvaluateUni) ), 0);
   G__memfunc_setup("EvaluateUniExternal",1958,G__G__STEERBase_740_0_3, 121, -1, -1, 0, 6, 3, 1, 0, 
"i - 'Int_t' 0 - nvectors D - 'Double_t' 0 - data "
"d - 'Double_t' 1 - mean d - 'Double_t' 1 - sigma "
"i - 'Int_t' 0 - hh f - 'Float_t' 0 '1' externalfactor", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Double_t*, Double_t&, Double_t&, Int_t, Float_t))(&AliMathBase::EvaluateUniExternal) ), 0);
   G__memfunc_setup("Freq",398,G__G__STEERBase_740_0_4, 105, -1, G__defined_typename("Int_t"), 0, 4, 3, 1, 0, 
"i - 'Int_t' 0 - n I - 'Int_t' 10 - inlist "
"I - 'Int_t' 0 - outlist g - 'Bool_t' 0 - down", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, const Int_t*, Int_t*, Bool_t))(&AliMathBase::Freq) ), 0);
   G__memfunc_setup("TruncatedMean",1323,G__G__STEERBase_740_0_5, 121, -1, -1, 0, 5, 3, 1, 0, 
"U 'TH1F' - 0 - his U 'TVectorT<double>' 'TVectorD' 0 - param "
"f - 'Float_t' 0 '0' down f - 'Float_t' 0 '1.0' up "
"g - 'Bool_t' 0 'kFALSE' verbose", (char*)NULL, (void*) G__func2void( (void (*)(TH1F*, TVectorD*, Float_t, Float_t, Bool_t))(&AliMathBase::TruncatedMean) ), 0);
   G__memfunc_setup("LTM",237,G__G__STEERBase_740_0_6, 121, -1, -1, 0, 4, 3, 1, 0, 
"U 'TH1F' - 0 - his U 'TVectorT<double>' 'TVectorD' 0 '0' param "
"f - 'Float_t' 0 '1' fraction g - 'Bool_t' 0 'kFALSE' verbose", (char*)NULL, (void*) G__func2void( (void (*)(TH1F*, TVectorD*, Float_t, Bool_t))(&AliMathBase::LTM) ), 0);
   G__memfunc_setup("FitGaus",691,G__G__STEERBase_740_0_7, 100, -1, G__defined_typename("Double_t"), 0, 6, 3, 1, 0, 
"U 'TH1F' - 0 - his U 'TVectorT<double>' 'TVectorD' 0 '0' param "
"U 'TMatrixT<double>' 'TMatrixD' 0 '0' matrix f - 'Float_t' 0 '0' xmin "
"f - 'Float_t' 0 '0' xmax g - 'Bool_t' 0 'kFALSE' verbose", (char*)NULL, (void*) G__func2void( (Double_t (*)(TH1F*, TVectorD*, TMatrixD*, Float_t, Float_t, Bool_t))(&AliMathBase::FitGaus) ), 0);
   G__memfunc_setup("FitGaus",691,G__G__STEERBase_740_0_8, 100, -1, G__defined_typename("Double_t"), 0, 7, 3, 1, 0, 
"F - 'Float_t' 0 - arr i - 'Int_t' 0 - nBins "
"f - 'Float_t' 0 - xMin f - 'Float_t' 0 - xMax "
"U 'TVectorT<double>' 'TVectorD' 0 '0' param U 'TMatrixT<double>' 'TMatrixD' 0 '0' matrix "
"g - 'Bool_t' 0 'kFALSE' verbose", (char*)NULL, (void*) G__func2void( (Double_t (*)(Float_t*, Int_t, Float_t, Float_t, TVectorD*, TMatrixD*, Bool_t))(&AliMathBase::FitGaus) ), 0);
   G__memfunc_setup("GetCOG",505,G__G__STEERBase_740_0_9, 102, -1, G__defined_typename("Float_t"), 0, 6, 3, 1, 0, 
"S - 'Short_t' 0 - arr i - 'Int_t' 0 - nBins "
"f - 'Float_t' 0 - xMin f - 'Float_t' 0 - xMax "
"F - 'Float_t' 0 '0' rms F - 'Float_t' 0 '0' sum", (char*)NULL, (void*) G__func2void( (Float_t (*)(Short_t*, Int_t, Float_t, Float_t, Float_t*, Float_t*))(&AliMathBase::GetCOG) ), 0);
   G__memfunc_setup("TruncatedGaus",1338,G__G__STEERBase_740_0_10, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"d - 'Double_t' 0 - mean d - 'Double_t' 0 - sigma "
"d - 'Double_t' 0 - cutat", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t, Double_t, Double_t))(&AliMathBase::TruncatedGaus) ), 0);
   G__memfunc_setup("TruncatedGaus",1338,G__G__STEERBase_740_0_11, 100, -1, G__defined_typename("Double_t"), 0, 4, 3, 1, 0, 
"d - 'Double_t' 0 - mean d - 'Double_t' 0 - sigma "
"d - 'Double_t' 0 - leftCut d - 'Double_t' 0 - rightCut", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t, Double_t, Double_t, Double_t))(&AliMathBase::TruncatedGaus) ), 0);
   G__memfunc_setup("MakeStat2D",912,G__G__STEERBase_740_0_12, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TGraph2D), -1, 0, 4, 3, 1, 0, 
"U 'TH3' - 0 - his i - 'Int_t' 0 - delta0 "
"i - 'Int_t' 0 - delta1 i - 'Int_t' 0 - type", (char*)NULL, (void*) G__func2void( (TGraph2D* (*)(TH3*, Int_t, Int_t, Int_t))(&AliMathBase::MakeStat2D) ), 0);
   G__memfunc_setup("MakeStat1D",911,G__G__STEERBase_740_0_13, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TGraph), -1, 0, 3, 3, 1, 0, 
"U 'TH3' - 0 - his i - 'Int_t' 0 - delta1 "
"i - 'Int_t' 0 - type", (char*)NULL, (void*) G__func2void( (TGraph* (*)(TH3*, Int_t, Int_t))(&AliMathBase::MakeStat1D) ), 0);
   G__memfunc_setup("ErfcFast",782,G__G__STEERBase_740_0_14, 100, -1, G__defined_typename("Double_t"), 0, 1, 3, 1, 0, "d - 'Double_t' 0 - x", "Complementary error function erfc(x)", (void*) G__func2void( (Double_t (*)(Double_t))(&AliMathBase::ErfcFast) ), 0);
   G__memfunc_setup("ErfFast",683,G__G__STEERBase_740_0_15, 100, -1, G__defined_typename("Double_t"), 0, 1, 3, 1, 0, "d - 'Double_t' 0 - x", "Error function erf(x)", (void*) G__func2void( (Double_t (*)(Double_t))(&AliMathBase::ErfFast) ), 0);
   G__memfunc_setup("TestGausFit",1107,G__G__STEERBase_740_0_16, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 '5000' nhistos", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&AliMathBase::TestGausFit) ), 0);
   G__memfunc_setup("BetheBlochAleph",1466,G__G__STEERBase_740_0_17, 100, -1, G__defined_typename("Double_t"), 0, 6, 3, 1, 0, 
"d - 'Double_t' 0 - bg d - 'Double_t' 0 '0.76176e-1' kp1 "
"d - 'Double_t' 0 '10.632' kp2 d - 'Double_t' 0 '0.13279e-4' kp3 "
"d - 'Double_t' 0 '1.8631' kp4 d - 'Double_t' 0 '1.9479' kp5", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t))(&AliMathBase::BetheBlochAleph) ), 0);
   G__memfunc_setup("Gamma",483,G__G__STEERBase_740_0_18, 100, -1, G__defined_typename("Double_t"), 0, 1, 3, 1, 0, "d - 'Double_t' 0 '0' k", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t))(&AliMathBase::Gamma) ), 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_740_0_19, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliMathBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_740_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMathBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_740_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliMathBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_740_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliMathBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_740_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_740_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMathBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_740_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMathBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_740_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMathBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_740_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMathBase::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliMathBase", 1051, G__G__STEERBase_740_0_31, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliMathBase), -1, 0, 1, 1, 1, 0, "u 'AliMathBase' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliMathBase", 1177, G__G__STEERBase_740_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_740_0_33, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliMathBase), -1, 1, 1, 1, 1, 0, "u 'AliMathBase' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVHeader(void) {
   /* AliVHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVHeader));
   G__memfunc_setup("operator=",937,G__G__STEERBase_752_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVHeader), -1, 1, 1, 1, 1, 0, "u 'AliVHeader' - 11 - evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBunchCrossNumber",1923,G__G__STEERBase_752_0_4, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetOrbitNumber",1417,G__G__STEERBase_752_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetPeriodNumber",1516,G__G__STEERBase_752_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTimeStamp",1204,G__G__STEERBase_752_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTriggerMask",1408,G__G__STEERBase_752_0_8, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTriggerCluster",1750,G__G__STEERBase_752_0_9, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetEventType",1220,G__G__STEERBase_752_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCocktailHeaders",1798,G__G__STEERBase_752_0_11, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventIdAsLong",1555,G__G__STEERBase_752_0_12, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTriggerInputFired",1930,G__G__STEERBase_752_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL0TriggerInputs",1779,G__G__STEERBase_752_0_14, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL1TriggerInputs",1780,G__G__STEERBase_752_0_15, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL2TriggerInputs",1781,G__G__STEERBase_752_0_16, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIRInt2InteractionMap",2230,G__G__STEERBase_752_0_17, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TBits), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIRInt1InteractionMap",2229,G__G__STEERBase_752_0_18, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TBits), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIRInt2ClosestInteractionMap",2963,G__G__STEERBase_752_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIRInt1ClosestInteractionMap",2962,G__G__STEERBase_752_0_20, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '3' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__STEERBase_752_0_22, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_752_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_752_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_752_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_752_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_752_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_752_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_752_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_752_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVHeader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVHeader", 1075, G__G__STEERBase_752_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVCluster(void) {
   /* AliVCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCluster));
   G__memfunc_setup("AliVCluster",1102,G__G__STEERBase_753_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliVCluster",1102,G__G__STEERBase_753_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCluster), -1, 0, 1, 1, 1, 0, "u 'AliVCluster' - 11 - clus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_753_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCluster), -1, 1, 1, 1, 1, 0, "u 'AliVCluster' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetID",441,G__G__STEERBase_753_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetID",429,G__G__STEERBase_753_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetType",718,G__G__STEERBase_753_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetType",706,G__G__STEERBase_753_0_8, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetE",369,G__G__STEERBase_753_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("E",69,G__G__STEERBase_753_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetChi2",626,G__G__STEERBase_753_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Chi2",326,G__G__STEERBase_753_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPositionAt",1334,G__G__STEERBase_753_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPosition",1153,G__G__STEERBase_753_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPosition",1141,G__G__STEERBase_753_0_15, 121, -1, -1, 0, 1, 1, 1, 8, "F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPIDAt",702,G__G__STEERBase_753_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPID",521,G__G__STEERBase_753_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPID",509,G__G__STEERBase_753_0_18, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEMCAL",542,G__G__STEERBase_753_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsPHOS",502,G__G__STEERBase_753_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDispersion",1356,G__G__STEERBase_753_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDispersion",1344,G__G__STEERBase_753_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetM20",475,G__G__STEERBase_753_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetM20",463,G__G__STEERBase_753_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetM02",475,G__G__STEERBase_753_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetM02",463,G__G__STEERBase_753_0_26, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNExMax",861,G__G__STEERBase_753_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNExMax",849,G__G__STEERBase_753_0_28, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTOF",533,G__G__STEERBase_753_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOF",521,G__G__STEERBase_753_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEmcCpvDistance",1685,G__G__STEERBase_753_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEmcCpvDistance",1673,G__G__STEERBase_753_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTrackDistance",1612,G__G__STEERBase_753_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackDx",977,G__G__STEERBase_753_0_34, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackDz",979,G__G__STEERBase_753_0_35, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDistanceToBadChannel",2266,G__G__STEERBase_753_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDistanceToBadChannel",2254,G__G__STEERBase_753_0_37, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNCells",877,G__G__STEERBase_753_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNCells",865,G__G__STEERBase_753_0_39, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCellsAbsId",1250,G__G__STEERBase_753_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellsAbsId",1238,G__G__STEERBase_753_0_41, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCellsAmplitudeFraction",2554,G__G__STEERBase_753_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double32_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellsAmplitudeFraction",2542,G__G__STEERBase_753_0_43, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellAbsId",1123,G__G__STEERBase_753_0_44, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellAmplitudeFraction",2427,G__G__STEERBase_753_0_45, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabel",768,G__G__STEERBase_753_0_46, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabelAt",949,G__G__STEERBase_753_0_47, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabels",883,G__G__STEERBase_753_0_48, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNLabels",961,G__G__STEERBase_753_0_49, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLabel",780,G__G__STEERBase_753_0_50, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'Int_t' 0 - - h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCellsMCEdepFractionMap",2433,G__G__STEERBase_753_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "H - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellsMCEdepFractionMap",2421,G__G__STEERBase_753_0_52, 72, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellMCEdepFractionArray",2531,G__G__STEERBase_753_0_53, 121, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PackMCEdepFraction",1731,G__G__STEERBase_753_0_54, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetClusterMCEdepFractionFromEdepArray",3683,G__G__STEERBase_753_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetClusterMCEdepFraction",2386,G__G__STEERBase_753_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetClusterMCEdepFraction",2374,G__G__STEERBase_753_0_57, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetClusterMCEdepFraction",2374,G__G__STEERBase_753_0_58, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNTracksMatched",1676,G__G__STEERBase_753_0_59, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackMatched",1483,G__G__STEERBase_753_0_60, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackMatchedIndex",1987,G__G__STEERBase_753_0_61, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCoreEnergy",1299,G__G__STEERBase_753_0_62, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCoreEnergy",1311,G__G__STEERBase_753_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMCEnergyFraction",1872,G__G__STEERBase_753_0_64, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMCEnergyFraction",1884,G__G__STEERBase_753_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIsExotic",1096,G__G__STEERBase_753_0_66, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetIsExotic",1108,G__G__STEERBase_753_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetUserDefEnergy",1592,G__G__STEERBase_753_0_68, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i 'AliVCluster::VCluUserDefEnergy_t' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUserDefEnergy",1604,G__G__STEERBase_753_0_69, 121, -1, -1, 0, 2, 1, 1, 0, 
"i 'AliVCluster::VCluUserDefEnergy_t' - 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetUserDefEnergy",1592,G__G__STEERBase_753_0_70, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUserDefEnergy",1604,G__G__STEERBase_753_0_71, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i d - 'Double_t' 0 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNonLinCorrEnergy",1902,G__G__STEERBase_753_0_72, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNonLinCorrEnergy",1914,G__G__STEERBase_753_0_73, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHadCorrEnergy",1581,G__G__STEERBase_753_0_74, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHadCorrEnergy",1593,G__G__STEERBase_753_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMomentum",1138,G__G__STEERBase_753_0_76, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TLorentzVector' - 1 - - D - 'Double_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMomentum",1138,G__G__STEERBase_753_0_77, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TLorentzVector' - 1 - - D - 'Double_t' 10 - - "
"i 'AliVCluster::VCluUserDefEnergy_t' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_753_0_78, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_753_0_79, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_753_0_80, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_753_0_81, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_753_0_85, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_753_0_86, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_753_0_87, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_753_0_88, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_753_0_89, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVCluster::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVCluster", 1228, G__G__STEERBase_753_0_90, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVCaloCells(void) {
   /* AliVCaloCells */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCells));
   G__memfunc_setup("operator=",937,G__G__STEERBase_757_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCells), -1, 1, 1, 1, 1, 0, "u 'AliVCaloCells' - 11 - cells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEMCAL",542,G__G__STEERBase_757_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("IsPHOS",502,G__G__STEERBase_757_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetType",706,G__G__STEERBase_757_0_8, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetType",718,G__G__STEERBase_757_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - ttype", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CreateContainer",1527,G__G__STEERBase_757_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - nCells", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("DeleteContainer",1526,G__G__STEERBase_757_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Sort",424,G__G__STEERBase_757_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCell",672,G__G__STEERBase_757_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 8, 
"s - 'Short_t' 0 - pos s - 'Short_t' 1 - cellNumber "
"d - 'Double_t' 1 - amplitude d - 'Double_t' 1 - time "
"i - 'Int_t' 1 - mclabel d - 'Double_t' 1 - efrac", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetCell",684,G__G__STEERBase_757_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 0, 
"s - 'Short_t' 0 - pos s - 'Short_t' 0 - cellNumber "
"d - 'Double_t' 0 - amplitude d - 'Double_t' 0 - time "
"i - 'Int_t' 0 '-1' mclabel d - 'Double_t' 0 '0' efrac "
"g - 'Bool_t' 0 'kTRUE' isHG", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNumberOfCells",1585,G__G__STEERBase_757_0_15, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetNumberOfCells",1597,G__G__STEERBase_757_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCellAmplitude",1605,G__G__STEERBase_757_0_17, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cellNumber", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCellHighGain",1439,G__G__STEERBase_757_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cellNumber", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCellTime",1071,G__G__STEERBase_757_0_19, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cellNumber", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCellPosition",1525,G__G__STEERBase_757_0_20, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cellNumber", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetAmplitude",1221,G__G__STEERBase_757_0_21, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 - pos", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetHighGain",1055,G__G__STEERBase_757_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 - pos", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTime",687,G__G__STEERBase_757_0_23, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 - pos", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCellNumber",1289,G__G__STEERBase_757_0_24, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 - pos", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CopyCaloCells",1293,G__G__STEERBase_757_0_26, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCells), -1, 0, 1, 1, 1, 8, "g - 'Bool_t' 0 - all", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCellMCLabel",1296,G__G__STEERBase_757_0_27, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cellNumber", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMCLabel",912,G__G__STEERBase_757_0_28, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 - pos", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCellEFraction",1563,G__G__STEERBase_757_0_29, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cellNumber", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetEFraction",1179,G__G__STEERBase_757_0_30, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 - pos", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetCellEFraction",1575,G__G__STEERBase_757_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"s - 'Short_t' 0 - cellNumber d - 'Double_t' 0 - efrac", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetEFraction",1191,G__G__STEERBase_757_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"s - 'Short_t' 0 - pos d - 'Double_t' 0 - efrac", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__STEERBase_757_0_33, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVCaloCells::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_757_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVCaloCells::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_757_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVCaloCells::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_757_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVCaloCells::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_757_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_757_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVCaloCells::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_757_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVCaloCells::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_757_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVCaloCells::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_757_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVCaloCells::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVCaloCells", 1372, G__G__STEERBase_757_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVCaloTrigger(void) {
   /* AliVCaloTrigger */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloTrigger));
   G__memfunc_setup("operator=",937,G__G__STEERBase_759_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloTrigger), -1, 1, 1, 1, 1, 0, "u 'AliVCaloTrigger' - 11 - ctrig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEmpty",715,G__G__STEERBase_759_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Reset",515,G__G__STEERBase_759_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Allocate",805,G__G__STEERBase_759_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("DeAllocate",974,G__G__STEERBase_759_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Add",265,G__G__STEERBase_759_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"I - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Add",265,G__G__STEERBase_759_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 9, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"I - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetL1Threshold",1366,G__G__STEERBase_759_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetL1Threshold",1366,G__G__STEERBase_759_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetL1V0",559,G__G__STEERBase_759_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetL1V0",559,G__G__STEERBase_759_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - I - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetL1FrameMask",1312,G__G__STEERBase_759_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetL1FrameMask",1312,G__G__STEERBase_759_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetPosition",1141,G__G__STEERBase_759_0_17, 121, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 1 - - i - 'Int_t' 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetAmplitude",1221,G__G__STEERBase_759_0_18, 121, -1, -1, 0, 1, 1, 1, 8, "f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTime",687,G__G__STEERBase_759_0_19, 121, -1, -1, 0, 1, 1, 1, 8, "f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTriggerBits",1414,G__G__STEERBase_759_0_20, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNL0Times",1004,G__G__STEERBase_759_0_21, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetL0Times",926,G__G__STEERBase_759_0_22, 121, -1, -1, 0, 1, 1, 1, 8, "I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetEntries",1018,G__G__STEERBase_759_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetL1TimeSum",1121,G__G__STEERBase_759_0_24, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetL1TimeSum",1121,G__G__STEERBase_759_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetL1SubRegion",1323,G__G__STEERBase_759_0_26, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetL1SubRegion",1323,G__G__STEERBase_759_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetL1Threshold",1354,G__G__STEERBase_759_0_28, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetL1Threshold",1354,G__G__STEERBase_759_0_29, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetL1V0",547,G__G__STEERBase_759_0_30, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetL1V0",547,G__G__STEERBase_759_0_31, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetL1FrameMask",1300,G__G__STEERBase_759_0_32, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetL1FrameMask",1300,G__G__STEERBase_759_0_33, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMedian",878,G__G__STEERBase_759_0_34, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTriggerBitWord",1711,G__G__STEERBase_759_0_35, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTriggerBitWord",1711,G__G__STEERBase_759_0_36, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Next",415,G__G__STEERBase_759_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__STEERBase_759_0_40, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVCaloTrigger::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_759_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVCaloTrigger::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_759_0_42, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVCaloTrigger::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_759_0_43, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVCaloTrigger::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_759_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_759_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVCaloTrigger::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_759_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVCaloTrigger::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_759_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVCaloTrigger::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_759_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVCaloTrigger::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVCaloTrigger", 1597, G__G__STEERBase_759_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTOFTriggerMask(void) {
   /* AliTOFTriggerMask */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFTriggerMask));
   G__memfunc_setup("AliTOFTriggerMask",1631,G__G__STEERBase_775_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFTriggerMask), -1, 0, 0, 1, 1, 0, "", "default constructor", (void*) NULL, 0);
   G__memfunc_setup("AliTOFTriggerMask",1631,G__G__STEERBase_775_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFTriggerMask), -1, 0, 1, 1, 1, 0, "u 'AliTOFTriggerMask' - 11 - source", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_775_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTOFTriggerMask), -1, 1, 1, 1, 1, 0, "u 'AliTOFTriggerMask' - 11 - source", "operator=", (void*) NULL, 0);
   G__memfunc_setup("GetTriggerMask",1408,G__G__STEERBase_775_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - icrate", "get trigger mask", (void*) NULL, 0);
   G__memfunc_setup("GetTriggerMaskArray",1919,G__G__STEERBase_775_0_5, 72, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", "get trigger mask array", (void*) NULL, 0);
   G__memfunc_setup("SetTriggerMaskArray",1931,G__G__STEERBase_775_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "H - 'UInt_t' 0 - array", "set trigger mask array", (void*) NULL, 0);
   G__memfunc_setup("ResetMask",911,G__G__STEERBase_775_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetON",457,G__G__STEERBase_775_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - icrate i - 'Int_t' 0 - ich", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsON",345,G__G__STEERBase_775_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - icrate i - 'Int_t' 0 - ich", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberMaxiPadOn",1770,G__G__STEERBase_775_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "return number of active MP", (void*) NULL, 0);
   G__memfunc_setup("GetHistoMask",1203,G__G__STEERBase_775_0_11, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH2F), -1, 0, 0, 1, 1, 0, "", "return active MP map", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_775_0_12, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTOFTriggerMask::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_775_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTOFTriggerMask::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_775_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTOFTriggerMask::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_775_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTOFTriggerMask::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_775_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_775_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTOFTriggerMask::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_775_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTOFTriggerMask::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_775_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTOFTriggerMask::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_775_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTOFTriggerMask::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTOFTriggerMask", 1757, G__G__STEERBase_775_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVTrdTracklet(void) {
   /* AliVTrdTracklet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrdTracklet));
   G__memfunc_setup("operator=",937,G__G__STEERBase_776_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrdTracklet), -1, 1, 1, 1, 1, 0, "u 'AliVTrdTracklet' - 11 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackletWord",1526,G__G__STEERBase_776_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetBinY",658,G__G__STEERBase_776_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetBinDy",758,G__G__STEERBase_776_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetBinZ",659,G__G__STEERBase_776_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetPID",509,G__G__STEERBase_776_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetLocalY",868,G__G__STEERBase_776_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDyDx",665,G__G__STEERBase_776_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHCId",600,G__G__STEERBase_776_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetDetector",1114,G__G__STEERBase_776_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetLabel",768,G__G__STEERBase_776_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__STEERBase_776_0_15, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVTrdTracklet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_776_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTrdTracklet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_776_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVTrdTracklet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_776_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVTrdTracklet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_776_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_776_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTrdTracklet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_776_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVTrdTracklet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_776_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTrdTracklet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_776_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVTrdTracklet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVTrdTracklet", 1614, G__G__STEERBase_776_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVTrdTrack(void) {
   /* AliVTrdTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrdTrack));
   G__memfunc_setup("operator=",937,G__G__STEERBase_777_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrdTrack), -1, 1, 1, 1, 1, 0, "u 'AliVTrdTrack' - 11 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetA",353,G__G__STEERBase_777_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetLayerMask",1193,G__G__STEERBase_777_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetPID",509,G__G__STEERBase_777_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetPt",484,G__G__STEERBase_777_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetStack",790,G__G__STEERBase_777_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetSector",912,G__G__STEERBase_777_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTrackInTime",1371,G__G__STEERBase_777_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetFlagsTiming",1397,G__G__STEERBase_777_0_12, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetLabel",768,G__G__STEERBase_777_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Pt",196,G__G__STEERBase_777_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNTracklets",1307,G__G__STEERBase_777_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTracklet",1114,G__G__STEERBase_777_0_16, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrdTracklet), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTrackMatch",1282,G__G__STEERBase_777_0_17, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTrack), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetA",365,G__G__STEERBase_777_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetLayerMask",1205,G__G__STEERBase_777_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mask", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetPID",521,G__G__STEERBase_777_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pid", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetLabel",780,G__G__STEERBase_777_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - label", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetSector",924,G__G__STEERBase_777_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sector", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetStack",802,G__G__STEERBase_777_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - stack", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__STEERBase_777_0_26, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVTrdTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_777_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTrdTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_777_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVTrdTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_777_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVTrdTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_777_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_777_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTrdTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_777_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVTrdTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_777_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTrdTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_777_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVTrdTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVTrdTrack", 1289, G__G__STEERBase_777_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVMultiplicity(void) {
   /* AliVMultiplicity */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMultiplicity));
   G__memfunc_setup("operator=",937,G__G__STEERBase_778_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMultiplicity), -1, 1, 1, 1, 1, 0, "u 'AliVMultiplicity' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultTrackRefs",1607,G__G__STEERBase_778_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScaleDThetaBySin2T",1965,G__G__STEERBase_778_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMultTrackRefs",1619,G__G__STEERBase_778_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScaleDThetaBySin2T",1977,G__G__STEERBase_778_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfTracklets",2027,G__G__STEERBase_778_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTheta",790,G__G__STEERBase_778_0_11, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetPhi",577,G__G__STEERBase_778_0_12, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetDeltaPhi",1067,G__G__STEERBase_778_0_13, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetLabel",768,G__G__STEERBase_778_0_14, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - layer", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetLabel",780,G__G__STEERBase_778_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - layer "
"i - 'Int_t' 0 - label", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetEta",570,G__G__STEERBase_778_0_16, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTheta",790,G__G__STEERBase_778_0_17, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetPhi",577,G__G__STEERBase_778_0_18, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetDeltPhi",970,G__G__STEERBase_778_0_19, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetLabels",883,G__G__STEERBase_778_0_20, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetLabels2",933,G__G__STEERBase_778_0_21, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNumberOfFiredChips",2079,G__G__STEERBase_778_0_22, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetFiredChips",1293,G__G__STEERBase_778_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - s - 'Short_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetFastOrFiredChips",1884,G__G__STEERBase_778_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetFastOrFiredChipMap",2055,G__G__STEERBase_778_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBits' - 11 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetFastOrFiredChips",1872,G__G__STEERBase_778_0_26, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TBits), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetFastOrFiredChipMap",2043,G__G__STEERBase_778_0_27, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TBits), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TestFastOrFiredChips",2000,G__G__STEERBase_778_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetFiredChipMap",1464,G__G__STEERBase_778_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBits' - 11 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetFiredChipMap",1464,G__G__STEERBase_778_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetFiredChipMap",1452,G__G__STEERBase_778_0_31, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TBits), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("TestFiredChipMap",1580,G__G__STEERBase_778_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - chipKey", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNumberOfITSClusters",2179,G__G__STEERBase_778_0_34, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfSPDClusters",2170,G__G__STEERBase_778_0_35, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetITSClusters",1393,G__G__STEERBase_778_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_778_0_37, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVMultiplicity::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_778_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVMultiplicity::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_778_0_39, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVMultiplicity::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_778_0_40, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVMultiplicity::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_778_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_778_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVMultiplicity::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_778_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVMultiplicity::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_778_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVMultiplicity::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_778_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVMultiplicity::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVMultiplicity", 1779, G__G__STEERBase_778_0_49, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVVZERO(void) {
   /* AliVVZERO */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZERO));
   G__memfunc_setup("operator=",937,G__G__STEERBase_780_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZERO), -1, 1, 1, 1, 1, 0, "u 'AliVVZERO' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbPMV0A",820,G__G__STEERBase_780_0_4, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNbPMV0C",822,G__G__STEERBase_780_0_5, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMTotV0A",875,G__G__STEERBase_780_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMTotV0C",877,G__G__STEERBase_780_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMRingV0A",964,G__G__STEERBase_780_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ring", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMRingV0C",966,G__G__STEERBase_780_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ring", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMultiplicity",1577,G__G__STEERBase_780_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMultiplicityV0A",1776,G__G__STEERBase_780_0_11, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMultiplicityV0C",1778,G__G__STEERBase_780_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("BBTriggerV0A",1055,G__G__STEERBase_780_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("BGTriggerV0A",1060,G__G__STEERBase_780_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("BBTriggerV0C",1057,G__G__STEERBase_780_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("BGTriggerV0C",1062,G__G__STEERBase_780_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetBBFlag",798,G__G__STEERBase_780_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetBGFlag",803,G__G__STEERBase_780_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetV0ATime",886,G__G__STEERBase_780_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetV0CTime",888,G__G__STEERBase_780_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetV0ADecision",1301,G__G__STEERBase_780_0_21, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLDecision), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetV0CDecision",1303,G__G__STEERBase_780_0_22, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROcLcLDecision), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTriggerChargeA",1663,G__G__STEERBase_780_0_23, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTriggerChargeC",1665,G__G__STEERBase_780_0_24, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTriggerBits",1414,G__G__STEERBase_780_0_25, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetPFBBFlag",948,G__G__STEERBase_780_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - clock", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetPFBGFlag",953,G__G__STEERBase_780_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - clock", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetVZEROAvgPhi",1269,G__G__STEERBase_780_0_28, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - channel", (char*)NULL, (void*) G__func2void( (Float_t (*)(Int_t))(&AliVVZERO::GetVZEROAvgPhi) ), 0);
   G__memfunc_setup("GetVZEROEtaMin",1268,G__G__STEERBase_780_0_29, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - channel", (char*)NULL, (void*) G__func2void( (Float_t (*)(Int_t))(&AliVVZERO::GetVZEROEtaMin) ), 0);
   G__memfunc_setup("GetVZEROEtaMax",1270,G__G__STEERBase_780_0_30, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - channel", (char*)NULL, (void*) G__func2void( (Float_t (*)(Int_t))(&AliVVZERO::GetVZEROEtaMax) ), 0);
   G__memfunc_setup("OutOfRange",986,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 2, 8, 
"i - 'Int_t' 0 - i C - - 10 - s "
"i - 'Int_t' 0 - upper", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_780_0_32, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVVZERO::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_780_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVVZERO::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_780_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVVZERO::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_780_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVVZERO::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_780_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_780_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVVZERO::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_780_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVVZERO::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_780_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVVZERO::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_780_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVVZERO::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVVZERO", 896, G__G__STEERBase_780_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVZDC(void) {
   /* AliVZDC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVZDC));
   G__memfunc_setup("operator=",937,G__G__STEERBase_781_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVZDC), -1, 1, 1, 1, 1, 0, "u 'AliVZDC' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCParticipants",1779,G__G__STEERBase_781_0_4, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZDCPartSideA",1374,G__G__STEERBase_781_0_5, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZDCPartSideC",1376,G__G__STEERBase_781_0_6, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetImpactParameter",1823,G__G__STEERBase_781_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetImpactParamSideA",1845,G__G__STEERBase_781_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetImpactParamSideC",1847,G__G__STEERBase_781_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZNCEnergy",1141,G__G__STEERBase_781_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZNAEnergy",1139,G__G__STEERBase_781_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZPCEnergy",1143,G__G__STEERBase_781_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZPAEnergy",1141,G__G__STEERBase_781_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZEM1Energy",1191,G__G__STEERBase_781_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZEM2Energy",1192,G__G__STEERBase_781_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZNCTowerEnergy",1670,G__G__STEERBase_781_0_16, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZNATowerEnergy",1668,G__G__STEERBase_781_0_17, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZPCTowerEnergy",1672,G__G__STEERBase_781_0_18, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZPATowerEnergy",1670,G__G__STEERBase_781_0_19, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZNCTowerEnergyLR",1828,G__G__STEERBase_781_0_20, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZNATowerEnergyLR",1826,G__G__STEERBase_781_0_21, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZNCentroidInPbPb",1819,G__G__STEERBase_781_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - - D - 'Double_t' 0 - - "
"D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZNCentroidInpp",1687,G__G__STEERBase_781_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCTimeSum",1221,G__G__STEERBase_781_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZDCTimeDiff",1289,G__G__STEERBase_781_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__STEERBase_781_0_26, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVZDC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_781_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVZDC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_781_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVZDC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_781_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVZDC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_781_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_781_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVZDC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_781_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVZDC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_781_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVZDC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_781_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVZDC::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVZDC", 715, G__G__STEERBase_781_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVMFT(void) {
   /* AliVMFT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMFT));
   G__memfunc_setup("AliVMFT",595,G__G__STEERBase_782_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMFT), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliVMFT",595,G__G__STEERBase_782_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMFT), -1, 0, 1, 1, 1, 0, "u 'AliVMFT' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_782_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVMFT), -1, 1, 1, 1, 1, 0, "u 'AliVMFT' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_782_0_4, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVMFT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_782_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVMFT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_782_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVMFT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_782_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVMFT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_782_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_782_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVMFT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_782_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVMFT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_782_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVMFT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_782_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVMFT::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVMFT", 721, G__G__STEERBase_782_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVAD(void) {
   /* AliVAD */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVAD));
   G__memfunc_setup("operator=",937,G__G__STEERBase_787_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVAD), -1, 1, 1, 1, 1, 0, "u 'AliVAD' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbPMADA",819,G__G__STEERBase_787_0_4, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNbPMADC",821,G__G__STEERBase_787_0_5, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMTotADA",874,G__G__STEERBase_787_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMTotADC",876,G__G__STEERBase_787_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMultiplicity",1577,G__G__STEERBase_787_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMultiplicityADA",1775,G__G__STEERBase_787_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMultiplicityADC",1777,G__G__STEERBase_787_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("BBTriggerADA",1054,G__G__STEERBase_787_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("BGTriggerADA",1059,G__G__STEERBase_787_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("BBTriggerADC",1056,G__G__STEERBase_787_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("BGTriggerADC",1061,G__G__STEERBase_787_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetBBFlag",798,G__G__STEERBase_787_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetBGFlag",803,G__G__STEERBase_787_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetADATime",885,G__G__STEERBase_787_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetADCTime",887,G__G__STEERBase_787_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetADADecision",1300,G__G__STEERBase_787_0_19, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLDecision), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetADCDecision",1302,G__G__STEERBase_787_0_20, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVADcLcLDecision), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTriggerChargeA",1663,G__G__STEERBase_787_0_21, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTriggerChargeC",1665,G__G__STEERBase_787_0_22, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTriggerBits",1414,G__G__STEERBase_787_0_23, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetPFBBFlag",948,G__G__STEERBase_787_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - clock", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetPFBGFlag",953,G__G__STEERBase_787_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - clock", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("OutOfRange",986,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 2, 8, 
"i - 'Int_t' 0 - i C - - 10 - s "
"i - 'Int_t' 0 - upper", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_787_0_27, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVAD::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_787_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVAD::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_787_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVAD::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_787_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVAD::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_787_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_787_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVAD::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_787_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVAD::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_787_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVAD::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_787_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVAD::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVAD", 623, G__G__STEERBase_787_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTrackReference(void) {
   /* AliTrackReference */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReference));
   G__memfunc_setup("AliTrackReference",1690,G__G__STEERBase_794_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReference), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTrackReference",1690,G__G__STEERBase_794_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReference), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - label i - 'Int_t' 0 '-999' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTrackReference",1690,G__G__STEERBase_794_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReference), -1, 0, 1, 1, 1, 0, "u 'AliTrackReference' - 11 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrack",789,G__G__STEERBase_794_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTrack",801,G__G__STEERBase_794_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - track", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLength",910,G__G__STEERBase_794_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - length", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTime",699,G__G__STEERBase_794_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLength",898,G__G__STEERBase_794_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTime",687,G__G__STEERBase_794_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Label",480,G__G__STEERBase_794_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLabel",780,G__G__STEERBase_794_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - track", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("R",82,G__G__STEERBase_794_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Pt",196,G__G__STEERBase_794_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Phi",289,G__G__STEERBase_794_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Theta",502,G__G__STEERBase_794_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("X",88,G__G__STEERBase_794_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Y",89,G__G__STEERBase_794_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Z",90,G__G__STEERBase_794_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Px",200,G__G__STEERBase_794_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Py",201,G__G__STEERBase_794_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Pz",202,G__G__STEERBase_794_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("P",80,G__G__STEERBase_794_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UserId",588,G__G__STEERBase_794_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DetectorId",999,G__G__STEERBase_794_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDetectorId",1299,G__G__STEERBase_794_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPosition",1153,G__G__STEERBase_794_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMomentum",1150,G__G__STEERBase_794_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - px f - 'Float_t' 0 - py "
"f - 'Float_t' 0 - pz", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUserId",888,G__G__STEERBase_794_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - userId", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PhiPos",595,G__G__STEERBase_794_0_29, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Alpha",486,G__G__STEERBase_794_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LocalX",579,G__G__STEERBase_794_0_31, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LocalY",580,G__G__STEERBase_794_0_32, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_794_0_36, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTrackReference::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_794_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTrackReference::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_794_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTrackReference::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_794_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTrackReference::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_794_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_794_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTrackReference::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_794_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTrackReference::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_794_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTrackReference::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_794_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTrackReference::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTrackReference", 1816, G__G__STEERBase_794_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_794_0_49, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReference), -1, 1, 1, 1, 1, 0, "u 'AliTrackReference' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliMCParticle(void) {
   /* AliMCParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCParticle));
   G__memfunc_setup("AliMCParticle",1242,G__G__STEERBase_796_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCParticle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMCParticle",1242,G__G__STEERBase_796_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCParticle), -1, 0, 3, 1, 1, 0, 
"U 'TParticle' - 0 - part U 'TObjArray' - 0 '0' rarray "
"i - 'Int_t' 0 '-1' label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMCParticle",1242,G__G__STEERBase_796_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCParticle), -1, 0, 1, 1, 1, 0, "u 'AliMCParticle' - 11 - mcPart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_796_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCParticle), -1, 1, 1, 1, 1, 0, "u 'AliMCParticle' - 11 - mcPart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Px",200,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Py",201,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Pz",202,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Pt",196,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("P",80,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PxPyPz",603,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OneOverPt",898,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Phi",289,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Theta",502,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Xv",206,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Yv",207,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Zv",208,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("XvYvZv",621,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("T",84,G__G__STEERBase_796_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("E",69,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("M",77,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Eta",282,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Y",89,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Charge",586,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Label",480,G__G__STEERBase_796_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabel",768,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PdgCode",662,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Particle",820,G__G__STEERBase_796_0_27, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TParticle), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PID",221,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", "return PID object (to be defined, still)", (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfTrackReferences",2613,G__G__STEERBase_796_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackReference",1700,G__G__STEERBase_796_0_30, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackReference), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCTrackLength",1630,G__G__STEERBase_796_0_31, 102, -1, G__defined_typename("Float_t"), 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 - bz f - 'Float_t' 0 - ptmin "
"i - 'Int_t' 1 - counter f - 'Float_t' 0 - deadWidth "
"f - 'Float_t' 0 '230.' zMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMother",911,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFirstDaughter",1628,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLastDaughter",1512,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMother",923,G__G__STEERBase_796_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFirstDaughter",1640,G__G__STEERBase_796_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLastDaughter",1524,G__G__STEERBase_796_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLabel",780,G__G__STEERBase_796_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGeneratorIndex",1739,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGeneratorIndex",1727,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_796_0_41, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliMCParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_796_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMCParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_796_0_43, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliMCParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_796_0_44, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliMCParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_796_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_796_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMCParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_796_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMCParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_796_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMCParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_796_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMCParticle::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliMCParticle", 1368, G__G__STEERBase_796_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliMCEventHandler(void) {
   /* AliMCEventHandler */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandler));
   G__memfunc_setup("AliMCEventHandler",1638,G__G__STEERBase_799_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandler), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMCEventHandler",1638,G__G__STEERBase_799_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandler), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOutputFileName",1726,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOutputFileName",1714,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetInputPath",1225,G__G__STEERBase_799_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetInputTree",1228,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetInputPath",1213,G__G__STEERBase_799_0_7, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntry",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitIO",556,G__G__STEERBase_799_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - - C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginEvent",999,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - path", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishEvent",1123,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TerminateIO",1089,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetIO",667,G__G__STEERBase_799_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadEvent",898,G__G__STEERBase_799_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iev", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetReadTR",846,G__G__STEERBase_799_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddSubsidiaryHandler",2022,G__G__STEERBase_799_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliMCEventHandler' - 0 - handler", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumberOfEventsInContainer",2841,G__G__STEERBase_799_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nev", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPreReadMode",1364,G__G__STEERBase_799_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i 'AliMCEventHandler::PreReadMode_t' - 0 - mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCacheSize",1179,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - size", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCEvent",658,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEvent), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TreeTR",566,G__G__STEERBase_799_0_26, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TTree), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TreeK",475,G__G__STEERBase_799_0_27, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TTree), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTree",688,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TTree), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetParticleAndTR",1549,G__G__STEERBase_799_0_29, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i U 'TParticle' - 1 - particle "
"U 'TClonesArray' - 1 - trefs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawCheck",876,G__G__STEERBase_799_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 '0' search", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitOk",590,G__G__STEERBase_799_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectParticle",1428,G__G__STEERBase_799_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsParticleSelected",1817,G__G__STEERBase_799_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateLabelMap",1362,G__G__STEERBase_799_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNewLabel",1066,G__G__STEERBase_799_0_35, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpenFile",786,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VerifySelectedParticles",2373,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMCEventHandler",1638,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandler), -1, 0, 1, 1, 4, 0, "u 'AliMCEventHandler' - 11 - handler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCEventHandler), -1, 1, 1, 1, 4, 0, "u 'AliMCEventHandler' - 11 - handler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_799_0_40, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliMCEventHandler::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_799_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMCEventHandler::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_799_0_42, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliMCEventHandler::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_799_0_43, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliMCEventHandler::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_799_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_799_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMCEventHandler::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_799_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMCEventHandler::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_799_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMCEventHandler::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_799_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMCEventHandler::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliMCEventHandler", 1764, G__G__STEERBase_799_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliMCVertex(void) {
   /* AliMCVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCVertex));
   G__memfunc_setup("AliMCVertex",1060,G__G__STEERBase_801_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMCVertex",1060,G__G__STEERBase_801_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCVertex), -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - xv d - 'Double_t' 0 - yv "
"d - 'Double_t' 0 - zv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXYZ",555,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - position", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetX",376,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetY",377,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZ",378,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCovarianceMatrix",1936,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - covmatrix", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetChi2perNDF",1157,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetChi2",614,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNDF",504,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPosition",1153,G__G__STEERBase_801_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - xv d - 'Double_t' 0 - yv "
"d - 'Double_t' 0 - zv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNContributors",1660,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintIndices",1228,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_801_0_16, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliMCVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_801_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMCVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_801_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliMCVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_801_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliMCVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_801_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_801_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMCVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_801_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMCVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_801_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMCVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_801_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMCVertex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliMCVertex", 1060, G__G__STEERBase_801_0_28, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCVertex), -1, 0, 1, 1, 1, 0, "u 'AliMCVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliMCVertex", 1186, G__G__STEERBase_801_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_801_0_30, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliMCVertex), -1, 1, 1, 1, 1, 0, "u 'AliMCVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliMergeableCollectionIterator(void) {
   /* AliMergeableCollectionIterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionIterator));
   G__memfunc_setup("AliMergeableCollectionIterator",3056,G__G__STEERBase_803_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionIterator), -1, 0, 2, 1, 1, 0, 
"U 'AliMergeableCollection' - 10 - hcol g - 'Bool_t' 0 'kIterForward' direction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionIterator), -1, 1, 1, 1, 1, 0, "u 'TIterator' - 11 - rhs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCollection",1324,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TCollection), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Next",415,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AliMergeableCollectionIterator",3056,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionIterator), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionIterator), -1, 1, 1, 1, 4, 0, "u 'AliMergeableCollectionIterator' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMergeableCollectionIterator",3056,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionIterator), -1, 0, 1, 1, 4, 0, "u 'AliMergeableCollectionIterator' - 11 - iter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_803_0_9, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliMergeableCollectionIterator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_803_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMergeableCollectionIterator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_803_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliMergeableCollectionIterator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_803_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliMergeableCollectionIterator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_803_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_803_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMergeableCollectionIterator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_803_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMergeableCollectionIterator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_803_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMergeableCollectionIterator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_803_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMergeableCollectionIterator::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliMergeableCollectionIterator", 3182, G__G__STEERBase_803_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliMergeableCollectionProxy(void) {
   /* AliMergeableCollectionProxy */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionProxy));
   G__memfunc_setup("AliMergeableCollectionProxy",2760,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionProxy), -1, 0, 2, 1, 2, 0, 
"u 'AliMergeableCollection' - 1 - oc u 'THashList' - 1 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObject",887,G__G__STEERBase_804_0_2, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - objectName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Histo",519,G__G__STEERBase_804_0_3, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH1), -1, 0, 1, 1, 1, 8, "C - - 10 - objectName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("H1",121,G__G__STEERBase_804_0_4, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH1), -1, 0, 1, 1, 1, 8, "C - - 10 - objectName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("H2",122,G__G__STEERBase_804_0_5, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH2), -1, 0, 1, 1, 1, 8, "C - - 10 - objectName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Prof",407,G__G__STEERBase_804_0_6, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TProfile), -1, 0, 1, 1, 1, 8, "C - - 10 - objectName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Adopt",504,G__G__STEERBase_804_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Adopt",504,G__G__STEERBase_804_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - identifier U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateIterator",1438,G__G__STEERBase_804_0_10, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TIterator), -1, 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kIterForward' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_804_0_11, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliMergeableCollectionProxy::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_804_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMergeableCollectionProxy::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_804_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliMergeableCollectionProxy::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_804_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliMergeableCollectionProxy::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_804_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_804_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMergeableCollectionProxy::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_804_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMergeableCollectionProxy::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_804_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMergeableCollectionProxy::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_804_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMergeableCollectionProxy::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliMergeableCollectionProxy", 2886, G__G__STEERBase_804_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliMergeableCollection(void) {
   /* AliMergeableCollection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollection));
   G__memfunc_setup("AliMergeableCollection",2214,G__G__STEERBase_805_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollection), -1, 0, 2, 1, 1, 0, 
"C - - 10 '\"\"' name C - - 10 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollection), -1, 0, 1, 1, 1, 8, "C - - 10 '\"\"' name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Attach",597,G__G__STEERBase_805_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'AliMergeableCollection' - 0 - mc C - - 10 - identifier "
"g - 'Bool_t' 0 'kFALSE' pruneFirstIfAlreadyExists", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Adopt",504,G__G__STEERBase_805_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Adopt",504,G__G__STEERBase_805_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - identifier U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - fullIdentifier", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 8, "U 'TObject' - 10 - object", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Delete",595,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NumberOfObjects",1512,G__G__STEERBase_805_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NumberOfKeys",1210,G__G__STEERBase_805_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetObject",887,G__G__STEERBase_805_0_13, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - fullIdentifier", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObject",887,G__G__STEERBase_805_0_14, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 2, 1, 1, 8, 
"C - - 10 - identifier C - - 10 - objectName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Histo",519,G__G__STEERBase_805_0_15, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH1), -1, 0, 1, 1, 1, 8, "C - - 10 - fullIdentifier", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Histo",519,G__G__STEERBase_805_0_16, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH1), -1, 0, 2, 1, 1, 8, 
"C - - 10 - identifier C - - 10 - objectName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("H1",121,G__G__STEERBase_805_0_17, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH1), -1, 0, 1, 1, 1, 8, "C - - 10 - fullIdentifier", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("H1",121,G__G__STEERBase_805_0_18, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH1), -1, 0, 2, 1, 1, 8, 
"C - - 10 - identifier C - - 10 - objectName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("H2",122,G__G__STEERBase_805_0_19, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH2), -1, 0, 1, 1, 1, 8, "C - - 10 - fullIdentifier", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("H2",122,G__G__STEERBase_805_0_20, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH2), -1, 0, 2, 1, 1, 8, 
"C - - 10 - identifier C - - 10 - objectName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Prof",407,G__G__STEERBase_805_0_21, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TProfile), -1, 0, 1, 1, 1, 8, "C - - 10 - fullIdentifier", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Prof",407,G__G__STEERBase_805_0_22, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TProfile), -1, 0, 2, 1, 1, 8, 
"C - - 10 - identifier C - - 10 - objectName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateProxy",1142,G__G__STEERBase_805_0_23, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollectionProxy), -1, 0, 2, 1, 1, 0, 
"C - - 10 - identifier g - 'Bool_t' 0 'kFALSE' createIfNeeded", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateIterator",1438,G__G__STEERBase_805_0_24, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TIterator), -1, 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kIterForward' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateListOfKeys",1601,G__G__STEERBase_805_0_25, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TList), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateListOfObjectNames",2288,G__G__STEERBase_805_0_26, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TList), -1, 0, 1, 1, 1, 8, "C - - 10 - identifier", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Remove",622,G__G__STEERBase_805_0_27, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 0, "C - - 10 - fullIdentifier", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RemoveByType",1227,G__G__STEERBase_805_0_28, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - typeName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKey",585,G__G__STEERBase_805_0_29, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 3, 1, 1, 8, 
"C - - 10 - identifier i - 'Int_t' 0 - index "
"g - 'Bool_t' 0 'kFALSE' idContainsObjName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIdentifier",1315,G__G__STEERBase_805_0_30, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 1, 1, 1, 8, "C - - 10 - fullIdentifier", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjectName",1272,G__G__STEERBase_805_0_31, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 1, 1, 1, 8, "C - - 10 - fullIdentifier", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ClearMessages",1311,G__G__STEERBase_805_0_33, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintMessages",1349,G__G__STEERBase_805_0_34, 121, -1, -1, 0, 1, 1, 1, 8, "C - - 10 '\"\"' prefix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__G__STEERBase_805_0_35, 110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Project",727,G__G__STEERBase_805_0_36, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollection), -1, 0, 1, 1, 1, 8, "C - - 10 - identifier", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EstimateSize",1239,G__G__STEERBase_805_0_37, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kFALSE' show", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowEmptyObjects",1658,G__G__STEERBase_805_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' show", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PruneEmptyObjects",1763,G__G__STEERBase_805_0_39, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Prune",522,G__G__STEERBase_805_0_40, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - identifier", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeObject",1095,G__G__STEERBase_805_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"U 'TObject' - 0 - baseObject U 'TObject' - 0 - objToAdd", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TObject*, TObject*))(&AliMergeableCollection::MergeObject) ), 0);
   G__memfunc_setup("GetSum",597,G__G__STEERBase_805_0_42, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - idPattern", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEmptyObject",1314,G__G__STEERBase_805_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectIdentifier",1749,G__G__STEERBase_805_0_44, 121, -1, -1, 0, 1, 3, 1, 0, "u 'TString' - 1 - sidentifier", (char*)NULL, (void*) G__func2void( (void (*)(TString&))(&AliMergeableCollection::CorrectIdentifier) ), 0);
   G__memfunc_setup("AliMergeableCollection",2214,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollection), -1, 0, 1, 1, 4, 0, "u 'AliMergeableCollection' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMergeableCollection), -1, 1, 1, 1, 4, 0, "u 'AliMergeableCollection' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HistoWithAction",1537,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH1), -1, 0, 3, 1, 4, 8, 
"C - - 10 - identifier U 'TObject' - 0 - o "
"u 'TString' - 11 - action", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InternalAdopt",1333,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"C - - 10 - identifier U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InternalDecode",1409,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 2, 1, 4, 8, 
"C - - 10 - fullIdentifier i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InternalObject",1428,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 2, 1, 4, 8, 
"C - - 10 - identifier C - - 10 - objectName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SortAllIdentifiers",1847,G__G__STEERBase_805_0_51, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NormalizeName",1330,G__G__STEERBase_805_0_52, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 2, 1, 1, 8, 
"C - - 10 - identifier C - - 10 - action", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Map",286,G__G__STEERBase_805_0_53, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TMap), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_805_0_54, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliMergeableCollection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_805_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMergeableCollection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_805_0_56, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliMergeableCollection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_805_0_57, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliMergeableCollection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_805_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_805_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMergeableCollection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_805_0_63, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMergeableCollection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_805_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMergeableCollection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_805_0_65, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMergeableCollection::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliMergeableCollection", 2340, G__G__STEERBase_805_0_66, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliMixedEvent(void) {
   /* AliMixedEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMixedEvent));
   G__memfunc_setup("AliMixedEvent",1295,G__G__STEERBase_806_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMixedEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMixedEvent",1295,G__G__STEERBase_806_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMixedEvent), -1, 0, 1, 1, 1, 0, "u 'AliMixedEvent' - 11 - vEvnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_806_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMixedEvent), -1, 1, 1, 1, 1, 0, "u 'AliMixedEvent' - 11 - vEvnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddObject",864,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindListObject",1396,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetList",700,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateStdContent",1626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStdContent",1318,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadFromTree",1184,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - - C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteToTree",1118,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "U 'TTree' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetStdNames",1099,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddEvent",779,G__G__STEERBase_806_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliVEvent' - 0 - evt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPrimaryVertex",1678,G__G__STEERBase_806_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliVVertex' - 0 - newVertex", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,G__G__STEERBase_806_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventVertex",1440,G__G__STEERBase_806_0_17, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertexOfEvent",1621,G__G__STEERBase_806_0_18, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfEvents",1715,G__G__STEERBase_806_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHeader",873,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVHeader), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRunNumber",1226,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPeriodNumber",1528,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMagneticField",1592,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRunNumber",1214,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPeriodNumber",1516,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMagneticField",1580,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDiamondX",1076,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDiamondY",1077,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDiamondCovXY",1461,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "F - 'Float_t' 0 - cov", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOrbitNumber",1429,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetBunchCrossNumber",1935,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEventType",1232,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTriggerMask",1420,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTriggerCluster",1762,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOrbitNumber",1417,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBunchCrossNumber",1923,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventType",1220,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerMask",1408,(G__InterfaceMethod) NULL,109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerCluster",1750,(G__InterfaceMethod) NULL,98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFiredTriggerClasses",2220,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCN1Energy",1258,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCP1Energy",1260,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCN2Energy",1259,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCP2Energy",1261,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCEMEnergy",1277,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrack",789,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVParticle), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfTracks",1702,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfV0s",1335,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfCascades",1877,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCaloCluster",1409,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCluster), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfCaloClusters",2322,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPHOSCells",1101,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCells), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEMCALCells",1141,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVCaloCells), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfPHOSCells",1899,G__G__STEERBase_806_0_54, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfEMCALCells",1939,G__G__STEERBase_806_0_55, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPHOSCellsCumul",1619,G__G__STEERBase_806_0_56, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEMCALCellsCumul",1659,G__G__STEERBase_806_0_57, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNCaloClustersCumul",2120,G__G__STEERBase_806_0_58, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - iev", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EventIndex",1018,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - itrack", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EventIndexForCaloCluster",2434,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - iclu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EventIndexForPHOSCell",2011,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - icell", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EventIndexForEMCALCell",2051,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - icell", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCentrality",1343,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCentrality), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventplane",1330,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventplane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrimaryVertex",1666,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVertex), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ComputeVtx",1055,G__G__STEERBase_806_0_66, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'TObjArray' - 10 - vertices D - 'Double_t' 0 - pos "
"D - 'Double_t' 0 - sig I - 'Int_t' 0 - nContributors", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVZEROData",1072,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZERO), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCData",891,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVZDC), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDataLayoutType",1722,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventcLcLEDataLayoutType), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_806_0_70, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliMixedEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_806_0_71, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMixedEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_806_0_72, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliMixedEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_806_0_73, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliMixedEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_806_0_77, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_806_0_78, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMixedEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_806_0_79, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMixedEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_806_0_80, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMixedEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_806_0_81, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMixedEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliMixedEvent", 1421, G__G__STEERBase_806_0_82, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliMultSelectionBase(void) {
   /* AliMultSelectionBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliMultSelectionBase));
   G__memfunc_setup("AliMultSelectionBase",2009,G__G__STEERBase_807_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMultSelectionBase), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMultSelectionBase",2009,G__G__STEERBase_807_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliMultSelectionBase), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"Mult Estimator\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' -", "dummy", (void*) NULL, 1);
   G__memfunc_setup("GetMultiplicityPercentileWithFallback",3808,G__G__STEERBase_807_0_4, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"U 'AliVEvent' - 0 - lEvent u 'TString' - 0 - lName", (char*)NULL, (void*) G__func2void( (Float_t (*)(AliVEvent*, TString))(&AliMultSelectionBase::GetMultiplicityPercentileWithFallback) ), 0);
   G__memfunc_setup("GetMultiplicityPercentile",2612,G__G__STEERBase_807_0_5, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - lName g - 'Bool_t' 0 'kFALSE' lEmbedEvSel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEvSelCode",1146,G__G__STEERBase_807_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_807_0_7, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliMultSelectionBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_807_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMultSelectionBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_807_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliMultSelectionBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_807_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliMultSelectionBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_807_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_807_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMultSelectionBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_807_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMultSelectionBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_807_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMultSelectionBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_807_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMultSelectionBase::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliMultSelectionBase", 2009, G__G__STEERBase_807_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliMultSelectionBase), -1, 0, 1, 1, 1, 0, "u 'AliMultSelectionBase' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliMultSelectionBase", 2135, G__G__STEERBase_807_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_807_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliMultSelectionBase), -1, 1, 1, 1, 1, 0, "u 'AliMultSelectionBase' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliNeutralTrackParam(void) {
   /* AliNeutralTrackParam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam));
   G__memfunc_setup("AliNeutralTrackParam",2007,G__G__STEERBase_808_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliNeutralTrackParam",2007,G__G__STEERBase_808_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam), -1, 0, 1, 1, 1, 0, "u 'AliNeutralTrackParam' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_808_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam), -1, 1, 1, 1, 1, 0, "u 'AliNeutralTrackParam' - 11 - trkPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliNeutralTrackParam",2007,G__G__STEERBase_808_0_4, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam), -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - alpha "
"D - 'Double_t' 10 - param D - 'Double_t' 10 - covar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliNeutralTrackParam",2007,G__G__STEERBase_808_0_5, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam), -1, 0, 1, 1, 1, 0, "U 'AliVTrack' - 10 - vTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliNeutralTrackParam",2007,G__G__STEERBase_808_0_6, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliNeutralTrackParam), -1, 0, 4, 1, 1, 0, 
"D - 'Double_t' 0 - xyz D - 'Double_t' 0 - pxpypz "
"D - 'Double_t' 0 - cv s - 'Short_t' 0 - sign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Charge",586,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetC",355,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_808_0_9, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliNeutralTrackParam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_808_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliNeutralTrackParam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_808_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliNeutralTrackParam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_808_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliNeutralTrackParam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_808_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_808_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliNeutralTrackParam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_808_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliNeutralTrackParam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_808_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliNeutralTrackParam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_808_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliNeutralTrackParam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliNeutralTrackParam", 2133, G__G__STEERBase_808_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliPDG(void) {
   /* AliPDG */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPDG));
   G__memfunc_setup("AddParticlesToPdgDataBase",2435,G__G__STEERBase_809_0_1, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliPDG::AddParticlesToPdgDataBase) ), 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_809_0_2, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliPDG::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_809_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliPDG::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_809_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliPDG::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_809_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliPDG::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_809_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_809_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliPDG::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_809_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliPDG::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_809_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliPDG::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_809_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliPDG::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("AliPDG", 497, G__G__STEERBase_809_0_14, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliPDG), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("AliPDG", 497, G__G__STEERBase_809_0_15, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliPDG), -1, 0, 1, 1, 1, 0, "u 'AliPDG' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliPDG", 623, G__G__STEERBase_809_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_809_0_17, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliPDG), -1, 1, 1, 1, 1, 0, "u 'AliPDG' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliPIDCombined(void) {
   /* AliPIDCombined */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDCombined));
   G__memfunc_setup("AliPIDCombined",1300,G__G__STEERBase_810_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDCombined), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliPIDCombined",1300,G__G__STEERBase_810_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDCombined), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - name u 'TString' - 11 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorMask",1522,G__G__STEERBase_810_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorMask",1510,G__G__STEERBase_810_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRejectMismatchMask",2123,G__G__STEERBase_810_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRejectMismatchMask",2111,G__G__STEERBase_810_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnablePriors",1522,G__G__STEERBase_810_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnablePriors",1510,G__G__STEERBase_810_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPriorDistribution",2104,G__G__STEERBase_810_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i 'AliPID::EParticleType' - 0 - type U 'TH1F' - 0 - prior", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPriorDistribution",2092,G__G__STEERBase_810_0_10, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH1), -1, 0, 1, 1, 1, 8, "i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPriors",927,G__G__STEERBase_810_0_11, 121, -1, -1, 0, 4, 1, 1, 8, 
"U 'AliVTrack' - 10 - track D - 'Double_t' 0 - p "
"U 'AliPIDResponse' - 10 - response h - 'UInt_t' 0 - detUsed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefaultTPCPriors",1879,G__G__STEERBase_810_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComputeProbabilities",2086,G__G__STEERBase_810_0_13, 104, -1, G__defined_typename("UInt_t"), 0, 4, 1, 1, 8, 
"U 'AliVTrack' - 10 - track U 'AliPIDResponse' - 10 - response "
"D - 'Double_t' 0 - bayesProbabilities D - 'Double_t' 0 '0' priorsOwn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSelectedSpecies",1825,G__G__STEERBase_810_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - selectedSpecies", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSelectedSpecies",1813,G__G__STEERBase_810_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFmismatchProb",1778,G__G__STEERBase_810_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Float_t (*)())(&AliPIDCombined::GetTOFmismatchProb) ), 0);
   G__memfunc_setup("GetPriors",927,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 8, 
"U 'AliVTrack' - 10 - track D - 'Double_t' 0 - priors "
"f - 'Float_t' 0 '-1' centrality g - 'Bool_t' 0 'kFALSE' isPPB", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComputeBayesProbabilities",2586,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 8, 
"D - 'Double_t' 0 - bayesProbabilities D - 'Double_t' 10 - probDensity "
"D - 'Double_t' 10 - priors D - 'Double_t' 0 '0' probDensityMism", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCombinedStatus",1745,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 8, 
"i 'AliPIDResponse::EDetPidStatus' - 10 - status H - 'UInt_t' 0 - mask "
"i 'AliPIDResponse::EDetCode' - 10 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCombinedStatus",1745,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 8, 
"i 'AliPIDResponse::EDetPidStatus' - 10 - status H - 'UInt_t' 0 - mask "
"i 'AliPIDResponse::EDetCode' - 10 - bit D - 'Double_t' 0 - p "
"f - 'Float_t' 10 - probMis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliPIDCombined",1300,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDCombined), -1, 0, 1, 1, 4, 0, "u 'AliPIDCombined' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDCombined), -1, 1, 1, 1, 4, 0, "u 'AliPIDCombined' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_810_0_23, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliPIDCombined::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_810_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliPIDCombined::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_810_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliPIDCombined::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_810_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliPIDCombined::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_810_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_810_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliPIDCombined::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_810_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliPIDCombined::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_810_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliPIDCombined::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_810_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliPIDCombined::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliPIDCombined", 1426, G__G__STEERBase_810_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliPIDValues(void) {
   /* AliPIDValues */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDValues));
   G__memfunc_setup("AliPIDValues",1123,G__G__STEERBase_811_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDValues), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliPIDValues",1123,G__G__STEERBase_811_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDValues), -1, 0, 1, 1, 1, 0, "u 'AliPIDValues' - 11 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliPIDValues",1123,G__G__STEERBase_811_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDValues), -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 0 - val i - 'Int_t' 0 - nspecies "
"i 'AliPIDResponse::EDetPidStatus' - 0 'AliPIDResponse::kDetPidOk' status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_811_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDValues), -1, 1, 1, 1, 1, 0, "u 'AliPIDValues' - 11 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetValues",924,G__G__STEERBase_811_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 10 - val i - 'Int_t' 0 - nspecies "
"i 'AliPIDResponse::EDetPidStatus' - 0 'AliPIDResponse::kDetPidOk' status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValues",912,G__G__STEERBase_811_0_7, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 0 - val i - 'Int_t' 0 - nspecies", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValue",797,G__G__STEERBase_811_0_8, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPIDStatus",1165,G__G__STEERBase_811_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i 'AliPIDResponse::EDetPidStatus' - 0 - status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPIDStatus",1153,G__G__STEERBase_811_0_10, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_811_0_11, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliPIDValues::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_811_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliPIDValues::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_811_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliPIDValues::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_811_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliPIDValues::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_811_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_811_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliPIDValues::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_811_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliPIDValues::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_811_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliPIDValues::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_811_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliPIDValues::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliPIDValues", 1249, G__G__STEERBase_811_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliProdInfo(void) {
   /* AliProdInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfo));
   G__memfunc_setup("AliProdInfo",1079,G__G__STEERBase_812_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliProdInfo",1079,G__G__STEERBase_812_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfo), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - name u 'TString' - 11 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliProdInfo",1079,G__G__STEERBase_812_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfo), -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - userInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__G__STEERBase_812_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - userInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("List",412,G__G__STEERBase_812_0_5, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTag",572,G__G__STEERBase_812_0_6, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 1, 1, 1, 1, 1, "i 'AliProdInfo::ETagType' - 0 - tag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLHCPeriod",1114,G__G__STEERBase_812_0_7, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlirootVersion",1760,G__G__STEERBase_812_0_8, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlirootSvnVersion",2071,G__G__STEERBase_812_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRootVersion",1450,G__G__STEERBase_812_0_10, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRootSvnVersion",1761,G__G__STEERBase_812_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRecoPass",1088,G__G__STEERBase_812_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRecoPassName",1473,G__G__STEERBase_812_0_13, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsMC",332,G__G__STEERBase_812_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasLPMPass",924,G__G__STEERBase_812_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsParsed",795,G__G__STEERBase_812_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParsed",907,G__G__STEERBase_812_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseProdInfo",1308,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TNamed' - 0 - uList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliProdInfo",1079,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfo), -1, 0, 1, 1, 4, 0, "u 'AliProdInfo' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliProdInfo), -1, 1, 1, 1, 4, 0, "u 'AliProdInfo' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_812_0_21, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliProdInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_812_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliProdInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_812_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliProdInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_812_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliProdInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_812_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_812_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliProdInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_812_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliProdInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_812_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliProdInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_812_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliProdInfo::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliProdInfo", 1205, G__G__STEERBase_812_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliQA(void) {
   /* AliQA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA));
   G__memfunc_setup("AliQA",424,G__G__STEERBase_815_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA), -1, 0, 0, 1, 1, 0, "", "beware singleton, not to be used", (void*) NULL, 0);
   G__memfunc_setup("AliQA",424,G__G__STEERBase_815_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA), -1, 0, 1, 1, 1, 0, "i 'AliQA::ALITASK_t' - 10 - tsk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliQA",424,G__G__STEERBase_815_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA), -1, 0, 1, 1, 1, 0, "i 'AliQA::DETECTORINDEX_t' - 10 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliQA",424,G__G__STEERBase_815_0_4, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA), -1, 0, 1, 1, 1, 0, "u 'AliQA' - 11 - qa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_815_0_5, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA), -1, 1, 1, 1, 1, 0, "u 'AliQA' - 11 - qa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__STEERBase_815_0_6, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (AliQA* (*)())(&AliQA::Instance) ), 0);
   G__memfunc_setup("Instance",821,G__G__STEERBase_815_0_7, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA), -1, 0, 1, 3, 1, 0, "i 'AliQA::DETECTORINDEX_t' - 10 - det", (char*)NULL, (void*) G__func2void( (AliQA* (*)(const AliQA::DETECTORINDEX_t))(&AliQA::Instance) ), 0);
   G__memfunc_setup("Instance",821,G__G__STEERBase_815_0_8, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA), -1, 0, 1, 3, 1, 0, "i 'AliQA::ALITASK_t' - 10 - tsk", (char*)NULL, (void*) G__func2void( (AliQA* (*)(const AliQA::ALITASK_t))(&AliQA::Instance) ), 0);
   G__memfunc_setup("Instance",821,G__G__STEERBase_815_0_9, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliQA), -1, 0, 1, 3, 1, 0, "i 'AliQA::TASKINDEX_t' - 10 - tsk", (char*)NULL, (void*) G__func2void( (AliQA* (*)(const AliQA::TASKINDEX_t))(&AliQA::Instance) ), 0);
   G__memfunc_setup("CheckFatal",966,G__G__STEERBase_815_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Close",502,G__G__STEERBase_815_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliQA::Close) ), 0);
   G__memfunc_setup("GetAliTaskName",1354,G__G__STEERBase_815_0_12, 67, -1, -1, 0, 1, 3, 1, 0, "i 'AliQA::ALITASK_t' - 0 - tsk", (char*)NULL, (void*) G__func2void( (char* (*)(AliQA::ALITASK_t))(&AliQA::GetAliTaskName) ), 0);
   G__memfunc_setup("GetExpert",920,G__G__STEERBase_815_0_13, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const TString (*)())(&AliQA::GetExpert) ), 0);
   G__memfunc_setup("GetExpertBit",1207,G__G__STEERBase_815_0_14, 104, -1, G__defined_typename("UInt_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (UInt_t (*)())(&AliQA::GetExpertBit) ), 0);
   G__memfunc_setup("GetLabLocalFile",1434,G__G__STEERBase_815_0_15, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const TString (*)())(&AliQA::GetLabLocalFile) ), 0);
   G__memfunc_setup("GetLabLocalOCDB",1330,G__G__STEERBase_815_0_16, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const TString (*)())(&AliQA::GetLabLocalOCDB) ), 0);
   G__memfunc_setup("GetLabAliEnOCDB",1296,G__G__STEERBase_815_0_17, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const TString (*)())(&AliQA::GetLabAliEnOCDB) ), 0);
   G__memfunc_setup("GetDetIndex",1077,G__G__STEERBase_815_0_18, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t), -1, 0, 1, 3, 1, 0, "C - - 10 - name", (char*)NULL, (void*) G__func2void( (AliQA::DETECTORINDEX_t (*)(const char*))(&AliQA::GetDetIndex) ), 0);
   G__memfunc_setup("GetDetName",958,G__G__STEERBase_815_0_19, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 1, 3, 1, 1, "i 'AliQA::DETECTORINDEX_t' - 0 - det", (char*)NULL, (void*) G__func2void( (const TString (*)(AliQA::DETECTORINDEX_t))(&AliQA::GetDetName) ), 0);
   G__memfunc_setup("GetDetName",958,G__G__STEERBase_815_0_20, 67, -1, -1, 0, 1, 3, 1, 1, "i - 'Int_t' 0 - det", (char*)NULL, (void*) G__func2void( (const char* (*)(Int_t))(&AliQA::GetDetName) ), 0);
   G__memfunc_setup("GetGRPPath",918,G__G__STEERBase_815_0_21, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const TString (*)())(&AliQA::GetGRPPath) ), 0);
   G__memfunc_setup("GetQABit",721,G__G__STEERBase_815_0_22, 104, -1, G__defined_typename("UInt_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (UInt_t (*)())(&AliQA::GetQABit) ), 0);
   G__memfunc_setup("GetQADataFile",1196,G__G__STEERBase_815_0_23, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TFile), -1, 0, 2, 3, 1, 0, 
"C - - 10 - name i - 'Int_t' 10 - run", (char*)NULL, (void*) G__func2void( (TFile* (*)(const char*, const Int_t))(&AliQA::GetQADataFile) ), 0);
   G__memfunc_setup("GetQADataFile",1196,G__G__STEERBase_815_0_24, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TFile), -1, 0, 1, 3, 1, 0, "C - - 10 - fileName", (char*)NULL, (void*) G__func2void( (TFile* (*)(const char*))(&AliQA::GetQADataFile) ), 0);
   G__memfunc_setup("GetQADataFileName",1581,G__G__STEERBase_815_0_25, 67, -1, -1, 0, 2, 3, 1, 1, 
"C - - 10 - name i - 'Int_t' 10 - run", (char*)NULL, (void*) G__func2void( (const char* (*)(const char*, const Int_t))(&AliQA::GetQADataFileName) ), 0);
   G__memfunc_setup("GetQADataFileName",1581,G__G__STEERBase_815_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliQA::GetQADataFileName) ), 0);
   G__memfunc_setup("GetQAName",819,G__G__STEERBase_815_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliQA::GetQAName) ), 0);
   G__memfunc_setup("GetQACorrName",1225,G__G__STEERBase_815_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliQA::GetQACorrName) ), 0);
   G__memfunc_setup("GetQAResultFile",1457,G__G__STEERBase_815_0_29, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TFile), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TFile* (*)())(&AliQA::GetQAResultFile) ), 0);
   G__memfunc_setup("GetQAResultFileName",1842,G__G__STEERBase_815_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliQA::GetQAResultFileName) ), 0);
   G__memfunc_setup("GetQARefDefaultStorage",2153,G__G__STEERBase_815_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliQA::GetQARefDefaultStorage) ), 0);
   G__memfunc_setup("GetQARefFileName",1488,G__G__STEERBase_815_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliQA::GetQARefFileName) ), 0);
   G__memfunc_setup("GetQARefStorage",1444,G__G__STEERBase_815_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliQA::GetQARefStorage) ), 0);
   G__memfunc_setup("GetRefOCDBDirName",1525,G__G__STEERBase_815_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliQA::GetRefOCDBDirName) ), 0);
   G__memfunc_setup("GetRefDataDirName",1623,G__G__STEERBase_815_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliQA::GetRefDataDirName) ), 0);
   G__memfunc_setup("GetRunTypeName",1400,G__G__STEERBase_815_0_36, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 1, 3, 1, 1, "i 'AliQA::RUNTYPE_t' - 0 'kNULLTYPE' rt", (char*)NULL, (void*) G__func2void( (const TString (*)(AliQA::RUNTYPE_t))(&AliQA::GetRunTypeName) ), 0);
   G__memfunc_setup("GetTaskIndex",1195,G__G__STEERBase_815_0_37, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliQAcLcLTASKINDEX_t), -1, 0, 1, 3, 1, 0, "C - - 10 - name", (char*)NULL, (void*) G__func2void( (AliQA::TASKINDEX_t (*)(const char*))(&AliQA::GetTaskIndex) ), 0);
   G__memfunc_setup("GetTaskName",1076,G__G__STEERBase_815_0_38, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 1, 3, 1, 1, "h - 'UInt_t' 0 - tsk", (char*)NULL, (void*) G__func2void( (const TString (*)(UInt_t))(&AliQA::GetTaskName) ), 0);
   G__memfunc_setup("IsSet",488,G__G__STEERBase_815_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"i 'AliQA::DETECTORINDEX_t' - 0 - det i 'AliQA::ALITASK_t' - 0 - tsk "
"i 'AliQA::QABIT_t' - 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSetAny",784,G__G__STEERBase_815_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i 'AliQA::DETECTORINDEX_t' - 0 - det i 'AliQA::ALITASK_t' - 0 - tsk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSetAny",784,G__G__STEERBase_815_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i 'AliQA::DETECTORINDEX_t' - 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__G__STEERBase_815_0_42, 110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 10 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__STEERBase_815_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "i 'AliQA::QABIT_t' - 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQAResultDirName",1757,G__G__STEERBase_815_0_44, 121, -1, -1, 0, 1, 3, 1, 0, "C - - 10 - name", (char*)NULL, (void*) G__func2void( (void (*)(const char*))(&AliQA::SetQAResultDirName) ), 0);
   G__memfunc_setup("SetQARefStorage",1456,G__G__STEERBase_815_0_45, 121, -1, -1, 0, 1, 3, 1, 0, "C - - 10 - name", (char*)NULL, (void*) G__func2void( (void (*)(const char*))(&AliQA::SetQARefStorage) ), 0);
   G__memfunc_setup("SetQARefDataDirName",1781,G__G__STEERBase_815_0_46, 121, -1, -1, 0, 1, 3, 1, 0, "i 'AliQA::RUNTYPE_t' - 0 - rt", (char*)NULL, (void*) G__func2void( (void (*)(AliQA::RUNTYPE_t))(&AliQA::SetQARefDataDirName) ), 0);
   G__memfunc_setup("SetQARefDataDirName",1781,G__G__STEERBase_815_0_47, 121, -1, -1, 0, 1, 3, 1, 0, "C - - 10 - name", (char*)NULL, (void*) G__func2void( (void (*)(const char*))(&AliQA::SetQARefDataDirName) ), 0);
   G__memfunc_setup("Show",417,G__G__STEERBase_815_0_48, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Show",417,G__G__STEERBase_815_0_49, 121, -1, -1, 0, 1, 1, 1, 8, "i 'AliQA::DETECTORINDEX_t' - 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowAll",698,G__G__STEERBase_815_0_50, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnSet",495,G__G__STEERBase_815_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "i 'AliQA::QABIT_t' - 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckRange",971,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "i 'AliQA::DETECTORINDEX_t' - 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckRange",971,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "i 'AliQA::ALITASK_t' - 0 - tsk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckRange",971,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "i 'AliQA::QABIT_t' - 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBitName",960,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 1, 1, 4, 8, "i 'AliQA::QABIT_t' - 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("ULong_t"), 0, 1, 1, 4, 8, "i 'AliQA::DETECTORINDEX_t' - 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Offset",615,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("ULong_t"), 0, 1, 1, 4, 8, "i 'AliQA::ALITASK_t' - 0 - tsk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowStatus",1061,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"i 'AliQA::DETECTORINDEX_t' - 0 - det i 'AliQA::ALITASK_t' - 0 'kNULLTASK' tsk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowASCIIStatus",1422,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 8, 
"i 'AliQA::DETECTORINDEX_t' - 0 - det i 'AliQA::ALITASK_t' - 0 - tsk "
"k - 'ULong_t' 0 - status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetStatus",1159,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i 'AliQA::DETECTORINDEX_t' - 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i 'AliQA::DETECTORINDEX_t' - 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i 'AliQA::ALITASK_t' - 0 - tsk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStatus",944,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i 'AliQA::DETECTORINDEX_t' - 0 - det r - 'UShort_t' 0 - status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStatusBit",1231,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i 'AliQA::DETECTORINDEX_t' - 0 - det i 'AliQA::ALITASK_t' - 0 - tsk "
"i 'AliQA::QABIT_t' - 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnSetStatusBit",1426,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i 'AliQA::DETECTORINDEX_t' - 0 - det i 'AliQA::ALITASK_t' - 0 - tsk "
"i 'AliQA::QABIT_t' - 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_815_0_67, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliQA::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_815_0_68, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliQA::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_815_0_69, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliQA::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_815_0_70, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliQA::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_815_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_815_0_75, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliQA::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_815_0_76, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliQA::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_815_0_77, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliQA::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_815_0_78, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliQA::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliQA", 550, G__G__STEERBase_815_0_79, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliRefArray(void) {
   /* AliRefArray */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliRefArray));
   G__memfunc_setup("AliRefArray",1074,G__G__STEERBase_821_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliRefArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliRefArray",1074,G__G__STEERBase_821_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliRefArray), -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - nelem h - 'UInt_t' 0 '0' depth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliRefArray",1074,G__G__STEERBase_821_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliRefArray), -1, 0, 1, 1, 1, 0, "u 'AliRefArray' - 11 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_821_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliRefArray), -1, 1, 1, 1, 1, 0, "u 'AliRefArray' - 11 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNElems",868,G__G__STEERBase_821_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Expand",608,G__G__STEERBase_821_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsReferred",1003,G__G__STEERBase_821_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"h - 'UInt_t' 0 - from h - 'UInt_t' 0 - to", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasReference",1195,G__G__STEERBase_821_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - from", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddReference",1176,G__G__STEERBase_821_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - from h - 'UInt_t' 0 - to", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddReferences",1291,G__G__STEERBase_821_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - from H - 'UInt_t' 0 - refs "
"h - 'UInt_t' 0 - nref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReferences",1314,G__G__STEERBase_821_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 3, 1, 1, 8, 
"h - 'UInt_t' 0 - from H - 'UInt_t' 0 - refs "
"h - 'UInt_t' 0 - maxRef", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReference",1199,G__G__STEERBase_821_0_12, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"h - 'UInt_t' 0 - from h - 'UInt_t' 0 - which", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__STEERBase_821_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compactify",1039,G__G__STEERBase_821_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExpandReferences",1634,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - addSize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_821_0_17, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliRefArray::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_821_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliRefArray::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_821_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliRefArray::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_821_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliRefArray::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_821_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_821_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliRefArray::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_821_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliRefArray::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_821_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliRefArray::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_821_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliRefArray::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliRefArray", 1200, G__G__STEERBase_821_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliRunTagCuts(void) {
   /* AliRunTagCuts */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTagCuts));
   G__memfunc_setup("AliRunTagCuts",1286,G__G__STEERBase_822_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTagCuts), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__STEERBase_822_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunId",782,G__G__STEERBase_822_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMagneticField",1592,G__G__STEERBase_822_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Pmag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDipoleField",1389,G__G__STEERBase_822_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Pmag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunStartTimeRange",2027,G__G__STEERBase_822_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - t0 i - 'Int_t' 0 - t1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunStopTimeRange",1923,G__G__STEERBase_822_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - t0 i - 'Int_t' 0 - t1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAlirootVersion",1772,G__G__STEERBase_822_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRootVersion",1462,G__G__STEERBase_822_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGeant3Version",1588,G__G__STEERBase_822_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLHCPeriod",1126,G__G__STEERBase_822_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetReconstructionPass",2213,G__G__STEERBase_822_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProductionName",1748,G__G__STEERBase_822_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunValidation",1644,G__G__STEERBase_822_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Pn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRunQualityValue",1828,G__G__STEERBase_822_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - qval", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamEnergy",1291,G__G__STEERBase_822_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - PE", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamType",1091,G__G__STEERBase_822_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - Ptype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalibVersion",1517,G__G__STEERBase_822_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Pn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDataType",1096,G__G__STEERBase_822_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamTriggersRange",2005,G__G__STEERBase_822_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'ULong_t' 0 - tmin k - 'ULong_t' 0 - tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCollisionTriggersRange",2572,G__G__STEERBase_822_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'ULong_t' 0 - tmin k - 'ULong_t' 0 - tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEmptyTriggersRange",2159,G__G__STEERBase_822_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'ULong_t' 0 - tmin k - 'ULong_t' 0 - tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetASideTriggersRange",2086,G__G__STEERBase_822_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'ULong_t' 0 - tmin k - 'ULong_t' 0 - tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCSideTriggersRange",2088,G__G__STEERBase_822_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'ULong_t' 0 - tmin k - 'ULong_t' 0 - tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHMTriggersRange",1781,G__G__STEERBase_822_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'ULong_t' 0 - tmin k - 'ULong_t' 0 - tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMuonTriggersRange",2047,G__G__STEERBase_822_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'ULong_t' 0 - tmin k - 'ULong_t' 0 - tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCollisionRatesRange",2244,G__G__STEERBase_822_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'ULong_t' 0 - tmin k - 'ULong_t' 0 - tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeanVertexsRange",1931,G__G__STEERBase_822_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'ULong_t' 0 - tmin k - 'ULong_t' 0 - tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertexQualitysRange",2291,G__G__STEERBase_822_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'ULong_t' 0 - tmin k - 'ULong_t' 0 - tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAccepted",981,G__G__STEERBase_822_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'AliRunTag' - 0 - RunTag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_822_0_31, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliRunTagCuts::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_822_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliRunTagCuts::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_822_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliRunTagCuts::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_822_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliRunTagCuts::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_822_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_822_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliRunTagCuts::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_822_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliRunTagCuts::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_822_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliRunTagCuts::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_822_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliRunTagCuts::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliRunTagCuts", 1286, G__G__STEERBase_822_0_43, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTagCuts), -1, 0, 1, 1, 1, 0, "u 'AliRunTagCuts' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliRunTagCuts", 1412, G__G__STEERBase_822_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_822_0_45, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliRunTagCuts), -1, 1, 1, 1, 1, 0, "u 'AliRunTagCuts' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliSysInfo(void) {
   /* AliSysInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliSysInfo));
   G__memfunc_setup("AliSysInfo",993,G__G__STEERBase_827_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliSysInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__STEERBase_827_0_2, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliSysInfo), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (AliSysInfo* (*)())(&AliSysInfo::Instance) ), 0);
   G__memfunc_setup("AddStamp",782,G__G__STEERBase_827_0_3, 121, -1, -1, 0, 5, 3, 1, 0, 
"C - - 10 - sname i - 'Int_t' 0 '-1' id0 "
"i - 'Int_t' 0 '-1' id1 i - 'Int_t' 0 '-1' id2 "
"i - 'Int_t' 0 '-1' id3", (char*)NULL, (void*) G__func2void( (void (*)(const char*, Int_t, Int_t, Int_t, Int_t))(&AliSysInfo::AddStamp) ), 0);
   G__memfunc_setup("MakeTree",782,G__G__STEERBase_827_0_4, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TTree), -1, 0, 2, 3, 1, 0, 
"C - - 10 - lname C - - 10 '0' fout", (char*)NULL, (void*) G__func2void( (TTree* (*)(const char*, const char*))(&AliSysInfo::MakeTree) ), 0);
   G__memfunc_setup("MakeDUTree",935,G__G__STEERBase_827_0_5, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TTree), -1, 0, 2, 3, 1, 0, 
"C - - 10 - lname C - - 10 - fout", (char*)NULL, (void*) G__func2void( (TTree* (*)(const char*, const char*))(&AliSysInfo::MakeDUTree) ), 0);
   G__memfunc_setup("OpenMemStat",1101,G__G__STEERBase_827_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliSysInfo::OpenMemStat) ), 0);
   G__memfunc_setup("CloseMemStat",1201,G__G__STEERBase_827_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliSysInfo::CloseMemStat) ), 0);
   G__memfunc_setup("Contain",716,G__G__STEERBase_827_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"C - - 10 - str1 C - - 10 - str2", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const char*, const char*))(&AliSysInfo::Contain) ), 0);
   G__memfunc_setup("AddCallBack",1014,G__G__STEERBase_827_0_9, 121, -1, -1, 0, 1, 3, 1, 0, "Y - 'AliSysInfo::StampCallback_t' 0 - callback", (char*)NULL, (void*) G__func2void( (void (*)(AliSysInfo::StampCallback_t))(&AliSysInfo::AddCallBack) ), 0);
   G__memfunc_setup("EstimateObjectSize",1838,G__G__STEERBase_827_0_10, 100, -1, G__defined_typename("Double_t"), 0, 1, 3, 1, 0, "U 'TObject' - 0 - object", (char*)NULL, (void*) G__func2void( (Double_t (*)(TObject*))(&AliSysInfo::EstimateObjectSize) ), 0);
   G__memfunc_setup("Test",416,G__G__STEERBase_827_0_11, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TTree), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TTree* (*)())(&AliSysInfo::Test) ), 0);
   G__memfunc_setup("SetVerbose",1026,G__G__STEERBase_827_0_12, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kFALSE' v", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&AliSysInfo::SetVerbose) ), 0);
   G__memfunc_setup("GetVerbose",1014,G__G__STEERBase_827_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&AliSysInfo::GetVerbose) ), 0);
   G__memfunc_setup("SetDisabled",1092,G__G__STEERBase_827_0_14, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' v", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&AliSysInfo::SetDisabled) ), 0);
   G__memfunc_setup("IsDisabled",980,G__G__STEERBase_827_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&AliSysInfo::IsDisabled) ), 0);
   G__memfunc_setup("PrintJiraTable",1403,G__G__STEERBase_827_0_16, 121, -1, -1, 0, 5, 3, 1, 0, 
"U 'TTree' - 0 - tree C - - 10 - var "
"C - - 10 - cut C - - 10 - format "
"C - - 10 '\"syswatch.table\"' output", (char*)NULL, (void*) G__func2void( (void (*)(TTree*, const char*, const char*, const char*, const char*))(&AliSysInfo::PrintJiraTable) ), 0);
   G__memfunc_setup("AliSysInfo",993,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliSysInfo), -1, 0, 1, 1, 4, 0, "u 'AliSysInfo' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliSysInfo), -1, 1, 1, 1, 4, 0, "u 'AliSysInfo' - 11 - rec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_827_0_19, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliSysInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_827_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliSysInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_827_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliSysInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_827_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliSysInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_827_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_827_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliSysInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_827_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliSysInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_827_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliSysInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_827_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliSysInfo::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliSysInfo", 1119, G__G__STEERBase_827_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTagCreator(void) {
   /* AliTagCreator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTagCreator));
   G__memfunc_setup("AliTagCreator",1282,G__G__STEERBase_830_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTagCreator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeTags",895,G__G__STEERBase_830_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeTags",895,G__G__STEERBase_830_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - type U 'TGridResult' - 0 - result", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeTags",895,G__G__STEERBase_830_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - type C - - 10 - inflist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeTagsForRun",1499,G__G__STEERBase_830_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeTagsForRun",1499,G__G__STEERBase_830_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - type U 'TGridResult' - 0 - result", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeTagsForRun",1499,G__G__STEERBase_830_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - type C - - 10 - inflist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSE",452,G__G__STEERBase_830_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - se", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStorage",1025,G__G__STEERBase_830_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - storage", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGridPath",1087,G__G__STEERBase_830_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - gridpath", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeToSingleRunTag",1894,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"U 'TChain' - 0 - chain C - - 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_830_0_12, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTagCreator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_830_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTagCreator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_830_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTagCreator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_830_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTagCreator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_830_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_830_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTagCreator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_830_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTagCreator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_830_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTagCreator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_830_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTagCreator::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliTagCreator", 1282, G__G__STEERBase_830_0_24, (int) ('i'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliTagCreator), -1, 0, 1, 1, 1, 0, "u 'AliTagCreator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliTagCreator", 1408, G__G__STEERBase_830_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_830_0_26, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliTagCreator), -1, 1, 1, 1, 1, 0, "u 'AliTagCreator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTimeStamp(void) {
   /* AliTimeStamp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTimeStamp));
   G__memfunc_setup("AliTimeStamp",1194,G__G__STEERBase_831_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTimeStamp), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTimeStamp",1194,G__G__STEERBase_831_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTimeStamp), -1, 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - orbit h - 'UInt_t' 0 - period "
"m - 'ULong64_t' 0 - bunchCross", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTimeStamp",1194,G__G__STEERBase_831_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTimeStamp), -1, 0, 4, 1, 1, 0, 
"h - 'UInt_t' 0 - orbit h - 'UInt_t' 0 - period "
"h - 'UInt_t' 0 - seconds h - 'UInt_t' 0 - microsecs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTimeStamp",1194,G__G__STEERBase_831_0_4, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTimeStamp), -1, 0, 1, 1, 1, 0, "u 'AliTimeStamp' - 11 - timestamp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_831_0_5, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTimeStamp), -1, 1, 1, 1, 1, 0, "u 'AliTimeStamp' - 11 - timestamp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOrbit",800,G__G__STEERBase_831_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPeriod",899,G__G__STEERBase_831_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBunchCross",1306,G__G__STEERBase_831_0_8, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeconds",1007,G__G__STEERBase_831_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMicroSecs",1192,G__G__STEERBase_831_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTimeStamp",1216,G__G__STEERBase_831_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - orbit h - 'UInt_t' 0 - period "
"m - 'ULong64_t' 0 - bunchcross", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeStamp",1216,G__G__STEERBase_831_0_13, 121, -1, -1, 0, 4, 1, 1, 0, 
"h - 'UInt_t' 0 - orbit h - 'UInt_t' 0 - period "
"h - 'UInt_t' 0 - seconds h - 'UInt_t' 0 - microsecs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_831_0_16, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTimeStamp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_831_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTimeStamp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_831_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTimeStamp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_831_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTimeStamp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_831_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_831_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTimeStamp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_831_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTimeStamp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_831_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTimeStamp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_831_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTimeStamp::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTimeStamp", 1320, G__G__STEERBase_831_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTRDNDFast(void) {
   /* AliTRDNDFast */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDNDFast));
   G__memfunc_setup("AliTRDNDFast",1056,G__G__STEERBase_834_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDNDFast), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDNDFast",1056,G__G__STEERBase_834_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDNDFast), -1, 0, 5, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 - ndim "
"i - 'Int_t' 0 - nbins d - 'Double_t' 0 - xlow "
"d - 'Double_t' 0 - xup", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDNDFast",1056,G__G__STEERBase_834_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDNDFast), -1, 0, 1, 1, 1, 0, "u 'AliTRDNDFast' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_834_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDNDFast), -1, 1, 1, 1, 1, 0, "u 'AliTRDNDFast' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitLandau",888,G__G__STEERBase_834_0_5, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TF1), -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 - name U 'TH1F' - 0 - htemp "
"D - 'Double_t' 0 - range u 'TString' - 0 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Build",496,G__G__STEERBase_834_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH1F' - 2 - hdEdx u 'TString' - 0 '\"\"' path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Build",496,G__G__STEERBase_834_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 2 - pars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,G__G__STEERBase_834_0_8, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Random",609,G__G__STEERBase_834_0_9, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNDim",648,G__G__STEERBase_834_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParam",785,G__G__STEERBase_834_0_11, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - dim i - 'Int_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintPars",931,G__G__STEERBase_834_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Random",609,G__G__STEERBase_834_0_13, 121, -1, -1, 0, 5, 3, 1, 0, 
"D - 'Double_t' 0 - point U 'AliTRDNDFast' - 0 - nd0 "
"U 'AliTRDNDFast' - 0 - nd1 d - 'Double_t' 0 - w0 "
"d - 'Double_t' 0 - w1", (char*)NULL, (void*) G__func2void( (void (*)(Double_t*, AliTRDNDFast*, AliTRDNDFast*, Double_t, Double_t))(&AliTRDNDFast::Random) ), 0);
   G__memfunc_setup("ScaleLangauFun",1385,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'TF1' - 0 - func d - 'Double_t' 0 - mpv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLangauFun",1185,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TF1), -1, 0, 3, 1, 4, 0, 
"u 'TString' - 0 - funcname D - 'Double_t' 0 - range "
"d - 'Double_t' 0 '1' scalefactor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildHistos",1130,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Cleanup",712,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BinarySearchInterpolation",2595,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 7, 3, 4, 0, 
"i - 'Int_t' 0 - start i - 'Int_t' 0 - end "
"D - 'Double_t' 0 - a0 D - 'Double_t' 0 - a1 "
"d - 'Double_t' 0 - w0 d - 'Double_t' 0 - w1 "
"d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRandomInterpolation",2281,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 4, 3, 4, 0, 
"U 'TH1F' - 0 - hist0 U 'TH1F' - 0 - hist1 "
"d - 'Double_t' 0 - w0 d - 'Double_t' 0 - w1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_834_0_21, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTRDNDFast::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_834_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDNDFast::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_834_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTRDNDFast::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_834_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTRDNDFast::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_834_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_834_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDNDFast::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_834_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDNDFast::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_834_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDNDFast::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_834_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDNDFast::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTRDNDFast", 1182, G__G__STEERBase_834_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTRDPIDParams(void) {
   /* AliTRDPIDParams */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParams));
   G__memfunc_setup("AliTRDPIDParams",1345,G__G__STEERBase_836_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParams), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDPIDParams",1345,G__G__STEERBase_836_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParams), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDPIDParams",1345,G__G__STEERBase_836_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParams), -1, 0, 1, 1, 1, 0, "u 'AliTRDPIDParams' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddCentralityClass",1822,G__G__STEERBase_836_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - minCentrality d - 'Double_t' 0 - maxCentrality", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThresholdParameters",2273,G__G__STEERBase_836_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"i - 'Int_t' 0 - ntracklets d - 'Double_t' 0 - efficiency "
"D - 'Double_t' 0 - params d - 'Double_t' 0 '-1' centrality", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThresholdParameters",2285,G__G__STEERBase_836_0_7, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - ntracklets d - 'Double_t' 0 - effMin "
"d - 'Double_t' 0 - effMax D - 'Double_t' 0 - params "
"d - 'Double_t' 0 '-1' centrality", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCentrality",1440,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDCentrality), -1, 0, 1, 1, 4, 8, "d - 'Double_t' 0 - centrality", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParams), -1, 1, 1, 1, 4, 0, "u 'AliTRDPIDParams' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_836_0_10, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTRDPIDParams::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_836_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDParams::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_836_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTRDPIDParams::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_836_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTRDPIDParams::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_836_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_836_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDParams::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_836_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDPIDParams::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_836_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDParams::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_836_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDPIDParams::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTRDPIDParams", 1471, G__G__STEERBase_836_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTRDPIDParamscLcLAliTRDPIDThresholds(void) {
   /* AliTRDPIDParams::AliTRDPIDThresholds */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds));
   G__memfunc_setup("AliTRDPIDThresholds",1789,G__G__STEERBase_837_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDPIDThresholds",1789,G__G__STEERBase_837_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nTracklets d - 'Double_t' 0 - effMin "
"d - 'Double_t' 0 - effMax D - 'Double_t' 0 '0' params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDPIDThresholds",1789,G__G__STEERBase_837_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nTracklets d - 'Double_t' 0 - eff "
"D - 'Double_t' 0 '0' params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDPIDThresholds",1789,G__G__STEERBase_837_0_4, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds), -1, 0, 1, 1, 1, 0, "u 'AliTRDPIDParams::AliTRDPIDThresholds' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_837_0_5, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds), -1, 1, 1, 1, 1, 0, "u 'AliTRDPIDParams::AliTRDPIDThresholds' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNTracklets",1307,G__G__STEERBase_837_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetElectronEfficiency",2129,G__G__STEERBase_837_0_7, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThresholdParams",1841,G__G__STEERBase_837_0_8, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - ref", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEqual",692,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - ref", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_837_0_12, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTRDPIDParams::AliTRDPIDThresholds::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_837_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDParams::AliTRDPIDThresholds::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_837_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTRDPIDParams::AliTRDPIDThresholds::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_837_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTRDPIDParams::AliTRDPIDThresholds::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_837_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_837_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDParams::AliTRDPIDThresholds::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_837_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDPIDParams::AliTRDPIDThresholds::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_837_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDParams::AliTRDPIDThresholds::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_837_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDPIDParams::AliTRDPIDThresholds::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTRDPIDThresholds", 1915, G__G__STEERBase_837_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTRDPIDParamscLcLAliTRDPIDCentrality(void) {
   /* AliTRDPIDParams::AliTRDPIDCentrality */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDCentrality));
   G__memfunc_setup("AliTRDPIDCentrality",1788,G__G__STEERBase_838_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDCentrality), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDPIDCentrality",1788,G__G__STEERBase_838_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDCentrality), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - minCentrality d - 'Double_t' 0 - maxCentrality", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDPIDCentrality",1788,G__G__STEERBase_838_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDCentrality), -1, 0, 1, 1, 1, 0, "u 'AliTRDPIDParams::AliTRDPIDCentrality' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_838_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDCentrality), -1, 1, 1, 1, 1, 0, "u 'AliTRDPIDParams::AliTRDPIDCentrality' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinCentrality",1635,G__G__STEERBase_838_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxCentrality",1637,G__G__STEERBase_838_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThresholdParameters",2285,G__G__STEERBase_838_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - ntracklets d - 'Double_t' 0 - effMin "
"d - 'Double_t' 0 - effMax D - 'Double_t' 0 - params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThresholdParameters",2273,G__G__STEERBase_838_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - ntracklets d - 'Double_t' 0 - efficiency "
"D - 'Double_t' 0 - params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_838_0_10, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTRDPIDParams::AliTRDPIDCentrality::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_838_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDParams::AliTRDPIDCentrality::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_838_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTRDPIDParams::AliTRDPIDCentrality::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_838_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTRDPIDParams::AliTRDPIDCentrality::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_838_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_838_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDParams::AliTRDPIDCentrality::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_838_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDPIDParams::AliTRDPIDCentrality::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_838_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDParams::AliTRDPIDCentrality::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_838_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDPIDParams::AliTRDPIDCentrality::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTRDPIDCentrality", 1914, G__G__STEERBase_838_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTRDPIDReference(void) {
   /* AliTRDPIDReference */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDReference));
   G__memfunc_setup("AliTRDPIDReference",1644,G__G__STEERBase_839_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDReference), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDPIDReference",1644,G__G__STEERBase_839_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDReference), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDPIDReference",1644,G__G__STEERBase_839_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDReference), -1, 0, 1, 1, 1, 0, "u 'AliTRDPIDReference' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_839_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDPIDReference), -1, 1, 1, 1, 1, 0, "u 'AliTRDPIDReference' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfMomentumBins",2344,G__G__STEERBase_839_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nBins F - 'Float_t' 0 - momenta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddReference",1176,G__G__STEERBase_839_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TObject' - 0 - histo i 'AliPID::EParticleType' - 0 - spec "
"i - 'Int_t' 0 - pbin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLowerReference",1720,G__G__STEERBase_839_0_7, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 3, 1, 1, 8, 
"i 'AliPID::EParticleType' - 0 - spec f - 'Float_t' 0 - p "
"f - 'Float_t' 1 - pLower", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUpperReference",1723,G__G__STEERBase_839_0_8, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 3, 1, 1, 8, 
"i 'AliPID::EParticleType' - 0 - spec f - 'Float_t' 0 - p "
"f - 'Float_t' 1 - pUpper", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfMomentumBins",2332,G__G__STEERBase_839_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_839_0_11, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTRDPIDReference::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_839_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDReference::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_839_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTRDPIDReference::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_839_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTRDPIDReference::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_839_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_839_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDReference::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_839_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDPIDReference::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_839_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDPIDReference::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_839_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDPIDReference::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTRDPIDReference", 1770, G__G__STEERBase_839_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTRDTKDInterpolator(void) {
   /* AliTRDTKDInterpolator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolator));
   G__memfunc_setup("AliTRDTKDInterpolator",2022,G__G__STEERBase_852_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDTKDInterpolator",2022,G__G__STEERBase_852_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolator), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - npoints i - 'Int_t' 0 - ndim "
"h - 'UInt_t' 0 - bsize F - 'Float_t' 2 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,G__G__STEERBase_852_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"D - 'Double_t' 10 - point d - 'Double_t' 1 - result "
"d - 'Double_t' 1 - error", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Projection",1053,G__G__STEERBase_852_0_5, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TH2Poly), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - xdim i - 'Int_t' 0 - ydim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNDIM",584,G__G__STEERBase_852_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRange",781,G__G__STEERBase_852_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - idim F - 'Float_t' 0 - range", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNPointsInterpolation",2399,G__G__STEERBase_852_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - np", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPointsInterpolation",2387,G__G__STEERBase_852_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseWeights",1332,G__G__STEERBase_852_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPDFMode",907,G__G__STEERBase_852_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i 'AliTRDTKDInterpolator::TRDTKDMode' - 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStoreCov",1121,G__G__STEERBase_852_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Build",496,G__G__STEERBase_852_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseHelperNodes",1714,G__G__STEERBase_852_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNodeIndex",1182,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "F - 'Float_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNodeInfo",1074,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo), -1, 0, 1, 1, 4, 8, "i - 'Int_t' 0 - inode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNTNodes",955,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildInterpolation",1880,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildBoundaryNodes",1837,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDTKDInterpolator",2022,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolator), -1, 0, 1, 1, 4, 0, "u 'AliTRDTKDInterpolator' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolator), -1, 1, 1, 1, 4, 0, "u 'AliTRDTKDInterpolator' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_852_0_22, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTRDTKDInterpolator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_852_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDTKDInterpolator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_852_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTRDTKDInterpolator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_852_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTRDTKDInterpolator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_852_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_852_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDTKDInterpolator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_852_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDTKDInterpolator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_852_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDTKDInterpolator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_852_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDTKDInterpolator::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTRDTKDInterpolator", 2148, G__G__STEERBase_852_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo(void) {
   /* AliTRDTKDInterpolator::AliTRDTKDNodeInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo));
   G__memfunc_setup("AliTRDTKDNodeInfo",1525,G__G__STEERBase_854_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' ndim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTRDTKDNodeInfo",1525,G__G__STEERBase_854_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo), -1, 0, 1, 1, 1, 0, "u 'AliTRDTKDInterpolator::AliTRDTKDNodeInfo' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_854_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo), -1, 1, 1, 1, 1, 0, "u 'AliTRDTKDInterpolator::AliTRDTKDNodeInfo' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CookPDF",614,G__G__STEERBase_854_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"D - 'Double_t' 10 - point d - 'Double_t' 1 - result "
"d - 'Double_t' 1 - error i 'AliTRDTKDInterpolator::TRDTKDMode' - 0 'kInterpolation' mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Has",284,G__G__STEERBase_854_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "F - 'Float_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Store",525,G__G__STEERBase_854_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TVectorT<double>' 'TVectorD' 40 - par U 'TMatrixT<double>' 'TMatrixD' 40 - cov "
"g - 'Bool_t' 0 - storeCov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_854_0_8, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_854_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_854_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_854_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTRDTKDInterpolator::AliTRDTKDNodeInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_854_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_854_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDTKDInterpolator::AliTRDTKDNodeInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_854_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDTKDInterpolator::AliTRDTKDNodeInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_854_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTRDTKDInterpolator::AliTRDTKDNodeInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_854_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTRDTKDInterpolator::AliTRDTKDNodeInfo::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTRDTKDNodeInfo", 1651, G__G__STEERBase_854_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTriggerScalers(void) {
   /* AliTriggerScalers */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalers));
   G__memfunc_setup("AliTriggerScalers",1719,G__G__STEERBase_855_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalers), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerScalers",1719,G__G__STEERBase_855_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalers), -1, 0, 7, 1, 1, 0, 
"b - 'UChar_t' 0 - classIndex h - 'UInt_t' 0 - LOCB "
"h - 'UInt_t' 0 - LOCA h - 'UInt_t' 0 - L1CB "
"h - 'UInt_t' 0 - L1CA h - 'UInt_t' 0 - L2CB "
"h - 'UInt_t' 0 - L2CA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerScalers",1719,G__G__STEERBase_855_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalers), -1, 0, 9, 1, 1, 0, 
"b - 'UChar_t' 0 - classIndex h - 'UInt_t' 0 - LOCB "
"h - 'UInt_t' 0 - LOCA h - 'UInt_t' 0 - L1CB "
"h - 'UInt_t' 0 - L1CA h - 'UInt_t' 0 - L2CB "
"h - 'UInt_t' 0 - L2CA h - 'UInt_t' 0 - LMCB "
"h - 'UInt_t' 0 - LMCA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLOCB",576,G__G__STEERBase_855_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLOCA",575,G__G__STEERBase_855_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL1CB",546,G__G__STEERBase_855_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL1CA",545,G__G__STEERBase_855_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL2CB",547,G__G__STEERBase_855_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL2CA",546,G__G__STEERBase_855_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLMCB",574,G__G__STEERBase_855_0_13, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLMCA",573,G__G__STEERBase_855_0_14, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAllScalers",1286,G__G__STEERBase_855_0_15, 121, -1, -1, 0, 1, 1, 1, 8, "H - 'UInt_t' 0 - scalers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAllScalersM012",1510,G__G__STEERBase_855_0_16, 121, -1, -1, 0, 1, 1, 1, 8, "H - 'UInt_t' 0 - scalers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClassIndex",1294,G__G__STEERBase_855_0_17, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerScalers",1719,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalers), -1, 0, 1, 1, 4, 0, "u 'AliTriggerScalers' - 11 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalers), -1, 1, 1, 1, 4, 0, "u 'AliTriggerScalers' - 11 - clus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_855_0_20, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTriggerScalers::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_855_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerScalers::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_855_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTriggerScalers::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_855_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTriggerScalers::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_855_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_855_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerScalers::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_855_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerScalers::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_855_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerScalers::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_855_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerScalers::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTriggerScalers", 1845, G__G__STEERBase_855_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTriggerScalersRecord(void) {
   /* AliTriggerScalersRecord */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalersRecord));
   G__memfunc_setup("AliTriggerScalersRecord",2326,G__G__STEERBase_856_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalersRecord), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeStamp",1216,G__G__STEERBase_856_0_2, 121, -1, -1, 0, 4, 1, 1, 0, 
"h - 'UInt_t' 0 - orbit h - 'UInt_t' 0 - period "
"h - 'UInt_t' 0 - seconds h - 'UInt_t' 0 - microsecs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeGroup",1224,G__G__STEERBase_856_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - tgr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTriggerScalers",1706,G__G__STEERBase_856_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTriggerScalers' - 0 - scaler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTriggerScalers",1706,G__G__STEERBase_856_0_5, 121, -1, -1, 0, 7, 1, 1, 0, 
"b - 'UChar_t' 0 - classIndex h - 'UInt_t' 0 - LOCB "
"h - 'UInt_t' 0 - LOCA h - 'UInt_t' 0 - L1CB "
"h - 'UInt_t' 0 - L1CA h - 'UInt_t' 0 - L2CB "
"h - 'UInt_t' 0 - L2CA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTriggerScalers",1706,G__G__STEERBase_856_0_6, 121, -1, -1, 0, 9, 1, 1, 0, 
"b - 'UChar_t' 0 - classIndex h - 'UInt_t' 0 - LOCB "
"h - 'UInt_t' 0 - LOCA h - 'UInt_t' 0 - L1CB "
"h - 'UInt_t' 0 - L1CA h - 'UInt_t' 0 - L2CB "
"h - 'UInt_t' 0 - L2CA h - 'UInt_t' 0 - LMCB "
"h - 'UInt_t' 0 - LMCA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStamp",1204,G__G__STEERBase_856_0_7, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTimeStamp), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerScalers",1729,G__G__STEERBase_856_0_8, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObjArray), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerScalersForClass",2526,G__G__STEERBase_856_0_9, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalers), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 10 - classindex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerScalersForClassBinary",3139,G__G__STEERBase_856_0_10, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalers), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - classindex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeGroup",1212,G__G__STEERBase_856_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AliTriggerScalersRecord",2326,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalersRecord), -1, 0, 1, 1, 4, 0, "u 'AliTriggerScalersRecord' - 11 - rec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTriggerScalersRecord), -1, 1, 1, 1, 4, 0, "u 'AliTriggerScalersRecord' - 11 - rec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_856_0_17, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTriggerScalersRecord::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_856_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerScalersRecord::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_856_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTriggerScalersRecord::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_856_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTriggerScalersRecord::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_856_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_856_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerScalersRecord::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_856_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerScalersRecord::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_856_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerScalersRecord::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_856_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerScalersRecord::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTriggerScalersRecord", 2452, G__G__STEERBase_856_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVAODHeader(void) {
   /* AliVAODHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVAODHeader));
   G__memfunc_setup("SetMagneticField",1592,G__G__STEERBase_860_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - magFld", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetMuonMagFieldScale",1964,G__G__STEERBase_860_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - magFldScl", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetDiamond",1000,G__G__STEERBase_860_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - xy F - 'Float_t' 0 - cov", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetDiamondZ",1090,G__G__STEERBase_860_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - z f - 'Float_t' 0 - sig2z", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetRunNumber",1214,G__G__STEERBase_860_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMagneticField",1580,G__G__STEERBase_860_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMuonMagFieldScale",1952,G__G__STEERBase_860_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetDiamondX",1076,G__G__STEERBase_860_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetDiamondY",1077,G__G__STEERBase_860_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetDiamondZ",1078,G__G__STEERBase_860_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetDiamondCovXY",1461,G__G__STEERBase_860_0_12, 121, -1, -1, 0, 1, 1, 1, 8, "F - 'Float_t' 0 - cov", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetSigma2DiamondX",1623,G__G__STEERBase_860_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetSigma2DiamondY",1624,G__G__STEERBase_860_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetSigma2DiamondZ",1625,G__G__STEERBase_860_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("InitMagneticField",1696,G__G__STEERBase_860_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetRunNumber",1226,G__G__STEERBase_860_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nRun", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetOrbitNumber",1429,G__G__STEERBase_860_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - nOr", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetPeriodNumber",1528,G__G__STEERBase_860_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - nPer", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetBunchCrossNumber",1935,G__G__STEERBase_860_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - nBx", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetTimeStamp",1216,G__G__STEERBase_860_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - t", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetEventType",1232,G__G__STEERBase_860_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - evttype", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetEventType",1220,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetTriggerMask",1420,G__G__STEERBase_860_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - trigMsk", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetTriggerMaskNext50",1936,G__G__STEERBase_860_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - trigMsk", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTriggerMask",1408,(G__InterfaceMethod) NULL,109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTriggerMaskNext50",1924,G__G__STEERBase_860_0_27, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetTriggerCluster",1762,G__G__STEERBase_860_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - trigClus", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetFiredTriggerClasses",2232,G__G__STEERBase_860_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - trig", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetFiredTriggerClasses",2220,G__G__STEERBase_860_0_30, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZDCN1Energy",1258,G__G__STEERBase_860_0_31, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZDCP1Energy",1260,G__G__STEERBase_860_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZDCN2Energy",1259,G__G__STEERBase_860_0_33, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZDCP2Energy",1261,G__G__STEERBase_860_0_34, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetZDCEMEnergy",1277,G__G__STEERBase_860_0_35, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNumberOfESDTracks",1922,G__G__STEERBase_860_0_36, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNumberOfITSClusters",2179,G__G__STEERBase_860_0_37, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetT0spread",1059,G__G__STEERBase_860_0_38, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCentralityP",1423,G__G__STEERBase_860_0_39, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliCentrality), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetEventplaneP",1410,G__G__STEERBase_860_0_40, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliEventplane), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCentrality",1343,G__G__STEERBase_860_0_41, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetVZEROEqFactors",1598,G__G__STEERBase_860_0_42, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetVZEROEqFactors",1598,G__G__STEERBase_860_0_43, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetVZEROEqFactors",1610,G__G__STEERBase_860_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetOfflineTrigger",1719,G__G__STEERBase_860_0_45, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetRefMultiplicity",1862,G__G__STEERBase_860_0_46, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetEventplane",1330,G__G__STEERBase_860_0_47, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetDAQAttributes",1565,G__G__STEERBase_860_0_48, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDAQAttributes",1577,G__G__STEERBase_860_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~AliVAODHeader", 1287, G__G__STEERBase_860_0_50, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_860_0_51, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliVAODHeader), -1, 1, 1, 1, 1, 0, "u 'AliVAODHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVersion(void) {
   /* AliVersion */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVersion));
   G__memfunc_setup("AliVersion",1020,G__G__STEERBase_861_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVersion), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__G__STEERBase_861_0_2, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVersion), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (AliVersion* (*)())(&AliVersion::Instance) ), 0);
   G__memfunc_setup("GetHash",676,G__G__STEERBase_861_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTag",572,G__G__STEERBase_861_0_4, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSerial",896,G__G__STEERBase_861_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - other", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVersion), -1, 1, 1, 1, 2, 0, "u 'AliVersion' - 11 - c", "dummy assignment operator", (void*) NULL, 0);
   G__memfunc_setup("AliVersion",1020,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVersion), -1, 0, 1, 1, 2, 0, "u 'AliVersion' - 11 - c", "dummy copy constructor", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_861_0_11, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVersion::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_861_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVersion::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_861_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVersion::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_861_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVersion::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_861_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_861_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVersion::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_861_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVersion::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_861_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVersion::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_861_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVersion::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVersion", 1146, G__G__STEERBase_861_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVEventPool(void) {
   /* AliVEventPool */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventPool));
   G__memfunc_setup("GetNextChain",1186,G__G__STEERBase_862_0_3, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TChain), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCurrentBin",1308,G__G__STEERBase_862_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetDimension",1222,G__G__STEERBase_862_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Init",404,G__G__STEERBase_862_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("BinNumber",898,G__G__STEERBase_862_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetChain",783,G__G__STEERBase_862_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TChain' - 0 - chain", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__G__STEERBase_862_0_10, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEventPool), -1, 1, 1, 1, 1, 0, "u 'AliVEventPool' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_862_0_11, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVEventPool::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_862_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVEventPool::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_862_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVEventPool::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_862_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVEventPool::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_862_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_862_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVEventPool::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_862_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVEventPool::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_862_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVEventPool::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_862_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVEventPool::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVEventPool", 1414, G__G__STEERBase_862_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVfriendTrack(void) {
   /* AliVfriendTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVfriendTrack));
   G__memfunc_setup("GetTPCseed",936,G__G__STEERBase_863_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliTPCseed' - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCalibObject",1362,G__G__STEERBase_863_0_5, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TObject), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTPCOut",831,G__G__STEERBase_863_0_6, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetITSOut",840,G__G__STEERBase_863_0_7, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetTrackParamTPCOut",1829,G__G__STEERBase_863_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamITSOut",1838,G__G__STEERBase_863_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetTrackParamTPCOut",2056,G__G__STEERBase_863_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliExternalTrackParam' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetTPCseed",1163,G__G__STEERBase_863_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTPCseed' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackPointArray",1822,G__G__STEERBase_863_0_12, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliTrackPointArray), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSkipBit",994,G__G__STEERBase_863_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - skip", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("TestSkipBit",1110,G__G__STEERBase_863_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVfriendTrack), -1, 1, 1, 1, 4, 0, "u 'AliVfriendTrack' - 11 - esd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_863_0_16, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVfriendTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_863_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVfriendTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_863_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVfriendTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_863_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVfriendTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_863_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_863_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVfriendTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_863_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVfriendTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_863_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVfriendTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_863_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVfriendTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVfriendTrack", 1623, G__G__STEERBase_863_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVVZEROfriend(void) {
   /* AliVVZEROfriend */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROfriend));
   G__memfunc_setup("AliVVZEROfriend",1402,G__G__STEERBase_864_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROfriend), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliVVZEROfriend",1402,G__G__STEERBase_864_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROfriend), -1, 0, 1, 1, 1, 0, "u 'AliVVZEROfriend' - 11 - vzerofriend", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_864_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVVZEROfriend), -1, 1, 1, 1, 1, 0, "u 'AliVVZEROfriend' - 11 - vzerofriend", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__STEERBase_864_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBBScalers",1137,G__G__STEERBase_864_0_5, 109, -1, G__defined_typename("ULong64_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBGScalers",1142,G__G__STEERBase_864_0_6, 109, -1, G__defined_typename("ULong64_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerScalers",1729,G__G__STEERBase_864_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBunchNumbersMB",1659,G__G__STEERBase_864_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetChargeMB",1017,G__G__STEERBase_864_0_9, 114, -1, G__defined_typename("UShort_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIntMBFlag",1108,G__G__STEERBase_864_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBBMBFlag",941,G__G__STEERBase_864_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBGMBFlag",946,G__G__STEERBase_864_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetADC",488,G__G__STEERBase_864_0_13, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPedestal",1106,G__G__STEERBase_864_0_14, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIntegratorFlag",1721,G__G__STEERBase_864_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBBFlag",798,G__G__STEERBase_864_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBGFlag",803,G__G__STEERBase_864_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTime",687,G__G__STEERBase_864_0_18, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWidth",800,G__G__STEERBase_864_0_19, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_864_0_20, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVVZEROfriend::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_864_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVVZEROfriend::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_864_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVVZEROfriend::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_864_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVVZEROfriend::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_864_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_864_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVVZEROfriend::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_864_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVVZEROfriend::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_864_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVVZEROfriend::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_864_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVVZEROfriend::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVVZEROfriend", 1528, G__G__STEERBase_864_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVTOFcluster(void) {
   /* AliVTOFcluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFcluster));
   G__memfunc_setup("AliVTOFcluster",1367,G__G__STEERBase_869_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFcluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliVTOFcluster",1367,G__G__STEERBase_869_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFcluster), -1, 0, 1, 1, 1, 0, "u 'AliVTOFcluster' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_869_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFcluster), -1, 1, 1, 1, 1, 0, "u 'AliVTOFcluster' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterIndex",1530,G__G__STEERBase_869_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", "cluster index", (void*) NULL, 1);
   G__memfunc_setup("GetTOFchannel",1250,G__G__STEERBase_869_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", "TOF channel", (void*) NULL, 1);
   G__memfunc_setup("GetTime",687,G__G__STEERBase_869_0_6, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", "TOF time", (void*) NULL, 1);
   G__memfunc_setup("GetTimeRaw",985,G__G__STEERBase_869_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", "TOF raw time", (void*) NULL, 1);
   G__memfunc_setup("GetTOT",535,G__G__STEERBase_869_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", "TOF ToT", (void*) NULL, 1);
   G__memfunc_setup("GetLabel",768,G__G__STEERBase_869_0_9, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDeltaBC",911,G__G__STEERBase_869_0_10, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL0L1Latency",1257,G__G__STEERBase_869_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStatus",932,G__G__STEERBase_869_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZ",378,G__G__STEERBase_869_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPhi",577,G__G__STEERBase_869_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetR",370,G__G__STEERBase_869_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNMatchableTracks",1879,G__G__STEERBase_869_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackIndex",1293,G__G__STEERBase_869_0_17, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDistanceInStripPlane",2308,G__G__STEERBase_869_0_18, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDx",476,G__G__STEERBase_869_0_19, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDy",477,G__G__STEERBase_869_0_20, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDz",478,G__G__STEERBase_869_0_21, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLength",898,G__G__STEERBase_869_0_22, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIntegratedTime",1718,G__G__STEERBase_869_0_23, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNTOFhits",1039,G__G__STEERBase_869_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEvent",814,G__G__STEERBase_869_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliVEvent' - 10 - ev", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEvent",802,G__G__STEERBase_869_0_26, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVEvent), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_869_0_27, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVTOFcluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_869_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTOFcluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_869_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVTOFcluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_869_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVTOFcluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_869_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_869_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTOFcluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_869_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVTOFcluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_869_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTOFcluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_869_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVTOFcluster::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVTOFcluster", 1493, G__G__STEERBase_869_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVTOFHit(void) {
   /* AliVTOFHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFHit));
   G__memfunc_setup("AliVTOFHit",890,G__G__STEERBase_871_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliVTOFHit",890,G__G__STEERBase_871_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFHit), -1, 0, 1, 1, 1, 0, "u 'AliVTOFHit' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_871_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFHit), -1, 1, 1, 1, 1, 0, "u 'AliVTOFHit' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDTOFClusterIndex",1983,G__G__STEERBase_871_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetESDTOFClusterIndex",1995,G__G__STEERBase_871_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTime",699,G__G__STEERBase_871_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLabel",780,G__G__STEERBase_871_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTimeRaw",997,G__G__STEERBase_871_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTOT",547,G__G__STEERBase_871_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetL0L1Latency",1269,G__G__STEERBase_871_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDeltaBC",923,G__G__STEERBase_871_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTOFchannel",1262,G__G__STEERBase_871_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetClusterIndex",1542,G__G__STEERBase_871_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTime",687,G__G__STEERBase_871_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTimeRaw",985,G__G__STEERBase_871_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOT",535,G__G__STEERBase_871_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL0L1Latency",1257,G__G__STEERBase_871_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFLabel",1001,G__G__STEERBase_871_0_18, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDeltaBC",911,G__G__STEERBase_871_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFchannel",1250,G__G__STEERBase_871_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetClusterIndex",1530,G__G__STEERBase_871_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_871_0_22, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVTOFHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_871_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTOFHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_871_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVTOFHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_871_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVTOFHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_871_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_871_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTOFHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_871_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVTOFHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_871_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTOFHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_871_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVTOFHit::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVTOFHit", 1016, G__G__STEERBase_871_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVTOFMatch(void) {
   /* AliVTOFMatch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFMatch));
   G__memfunc_setup("AliVTOFMatch",1090,G__G__STEERBase_872_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFMatch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliVTOFMatch",1090,G__G__STEERBase_872_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFMatch), -1, 0, 1, 1, 1, 0, "u 'AliVTOFMatch' - 1 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__STEERBase_872_0_3, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTOFMatch), -1, 1, 1, 1, 1, 0, "u 'AliVTOFMatch' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackIndex",1293,G__G__STEERBase_872_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTrackIndex",1305,G__G__STEERBase_872_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDx",476,G__G__STEERBase_872_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDy",477,G__G__STEERBase_872_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDz",478,G__G__STEERBase_872_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackLength",1399,G__G__STEERBase_872_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIntegratedTimes",1833,G__G__STEERBase_872_0_10, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIntegratedTimes",1833,G__G__STEERBase_872_0_11, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetIntegratedTimes",1845,G__G__STEERBase_872_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDx",488,G__G__STEERBase_872_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDy",489,G__G__STEERBase_872_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDz",490,G__G__STEERBase_872_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTrackLength",1411,G__G__STEERBase_872_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__STEERBase_872_0_17, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVTOFMatch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_872_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTOFMatch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_872_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVTOFMatch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_872_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVTOFMatch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_872_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_872_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTOFMatch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_872_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVTOFMatch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_872_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVTOFMatch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_872_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVTOFMatch::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVTOFMatch", 1216, G__G__STEERBase_872_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVTPCseed(void) {
   /* AliVTPCseed */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTPCseed));
   G__memfunc_setup("CopyToTPCseed",1254,G__G__STEERBase_873_0_2, 121, -1, -1, 0, 1, 1, 1, 8, "u 'AliTPCseed' - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetFromTPCseed",1352,G__G__STEERBase_873_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTPCseed' - 10 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("TagSuppressSharedClusters",2605,G__G__STEERBase_873_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~AliVTPCseed", 1138, G__G__STEERBase_873_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__STEERBase_873_0_6, (int) ('u'), G__get_linked_tagnum(&G__G__STEERBaseLN_AliVTPCseed), -1, 1, 1, 1, 1, 0, "u 'AliVTPCseed' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTTreeDataElement(void) {
   /* TTreeDataElement */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeDataElement));
   G__memfunc_setup("TTreeDataElement",1576,G__G__STEERBase_879_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeDataElement), -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TTreeDataElement",1576,G__G__STEERBase_879_0_2, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeDataElement), -1, 0, 1, 1, 1, 0, "U 'TDataType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TTreeDataElement",1576,G__G__STEERBase_879_0_3, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeDataElement), -1, 0, 1, 1, 1, 0, "U 'TClass' - 0 - cl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPointer",1037,G__G__STEERBase_879_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "Y - - 0 - pointer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__G__STEERBase_879_0_5, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TTreeDataElement",1576,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeDataElement), -1, 0, 1, 1, 2, 0, "u 'TTreeDataElement' - 11 - tde", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeDataElement), -1, 1, 1, 1, 2, 0, "u 'TTreeDataElement' - 11 - tde", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_879_0_8, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TTreeDataElement::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_879_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTreeDataElement::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_879_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TTreeDataElement::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_879_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TTreeDataElement::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_879_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_879_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTreeDataElement::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_879_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTreeDataElement::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_879_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTreeDataElement::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_879_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTreeDataElement::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TTreeDataElement", 1702, G__G__STEERBase_879_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTTreeStream(void) {
   /* TTreeStream */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream));
   G__memfunc_setup("TTreeStream",1104,G__G__STEERBase_880_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 0, 2, 1, 1, 0, 
"C - - 10 - treename U 'TTree' - 0 '0' externalTree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Close",502,G__G__STEERBase_880_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Test",416,G__G__STEERBase_880_0_3, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TTreeStream::Test) ), 0);
   G__memfunc_setup("CheckIn",661,G__G__STEERBase_880_0_4, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"c - 'Char_t' 0 - type Y - - 0 - pointer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckIn",661,G__G__STEERBase_880_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildTree",896,G__G__STEERBase_880_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__G__STEERBase_880_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__G__STEERBase_880_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Endl",387,G__G__STEERBase_880_0_9, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_880_0_10, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "g - 'Bool_t' 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_880_0_11, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "c - 'Char_t' 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_880_0_12, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "b - 'UChar_t' 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_880_0_13, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "s - 'Short_t' 1 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_880_0_14, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "r - 'UShort_t' 1 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_880_0_15, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 1 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_880_0_16, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 1 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_880_0_17, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "l - 'Long_t' 1 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_880_0_18, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "k - 'ULong_t' 1 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_880_0_19, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "n - 'Long64_t' 1 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_880_0_20, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "m - 'ULong64_t' 1 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_880_0_21, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "f - 'Float_t' 1 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_880_0_22, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 1 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_880_0_23, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "U 'TObject' - 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_880_0_24, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTree",688,G__G__STEERBase_880_0_25, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TTree), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TTreeStream",1104,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 0, 1, 1, 2, 0, "u 'TTreeStream' - 11 - ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 2, 0, "u 'TTreeStream' - 11 - ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_880_0_28, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TTreeStream::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_880_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTreeStream::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_880_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TTreeStream::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_880_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TTreeStream::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_880_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_880_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTreeStream::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_880_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTreeStream::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_880_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTreeStream::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_880_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTreeStream::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TTreeStream", 1230, G__G__STEERBase_880_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTTreeSRedirector(void) {
   /* TTreeSRedirector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeSRedirector));
   G__memfunc_setup("TTreeSRedirector",1610,G__G__STEERBase_881_0_1, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeSRedirector), -1, 0, 2, 1, 1, 0, 
"C - - 10 '\"\"' fname C - - 10 '\"update\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Close",502,G__G__STEERBase_881_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Test",416,G__G__STEERBase_881_0_3, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TTreeSRedirector::Test) ), 0);
   G__memfunc_setup("Test2",466,G__G__STEERBase_881_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TTreeSRedirector::Test2) ), 0);
   G__memfunc_setup("UnitTestSparse",1454,G__G__STEERBase_881_0_5, 121, -1, -1, 0, 2, 3, 1, 0, 
"d - 'Double_t' 0 - scale i - 'Int_t' 0 - testEntries", (char*)NULL, (void*) G__func2void( (void (*)(Double_t, Int_t))(&TTreeSRedirector::UnitTestSparse) ), 0);
   G__memfunc_setup("UnitTest",832,G__G__STEERBase_881_0_6, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 '5000' testEntries", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&TTreeSRedirector::UnitTest) ), 0);
   G__memfunc_setup("StoreObject",1124,G__G__STEERBase_881_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - object", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFile",672,G__G__STEERBase_881_0_8, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDirectory",1237,G__G__STEERBase_881_0_9, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TDirectory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_881_0_10, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator<<",996,G__G__STEERBase_881_0_11, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeStream), -1, 1, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDirectory",1249,G__G__STEERBase_881_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TDirectory' - 0 - sfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFile",684,G__G__STEERBase_881_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFile' - 0 - sfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExternalTree",1535,G__G__STEERBase_881_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - name U 'TTree' - 0 - externalTree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDisabled",1092,G__G__STEERBase_881_0_15, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&TTreeSRedirector::SetDisabled) ), 0);
   G__memfunc_setup("IsDisabled",980,G__G__STEERBase_881_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&TTreeSRedirector::IsDisabled) ), 0);
   G__memfunc_setup("FixLeafNameBug",1342,G__G__STEERBase_881_0_17, 121, -1, -1, 0, 1, 3, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) G__func2void( (void (*)(TTree*))(&TTreeSRedirector::FixLeafNameBug) ), 0);
   G__memfunc_setup("TTreeSRedirector",1610,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeSRedirector), -1, 0, 1, 1, 4, 0, "u 'TTreeSRedirector' - 11 - tsr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__STEERBaseLN_TTreeSRedirector), -1, 1, 1, 1, 4, 0, "u 'TTreeSRedirector' - 11 - tsr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__STEERBase_881_0_20, 85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TTreeSRedirector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__STEERBase_881_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTreeSRedirector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__STEERBase_881_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TTreeSRedirector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__STEERBase_881_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TTreeSRedirector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__STEERBaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__STEERBase_881_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__STEERBase_881_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTreeSRedirector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__STEERBase_881_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTreeSRedirector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__STEERBase_881_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TTreeSRedirector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__STEERBase_881_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TTreeSRedirector::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TTreeSRedirector", 1736, G__G__STEERBase_881_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__STEERBase() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__STEERBase() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__STEERBase() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__STEERBaseLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TDirectory = { "TDirectory" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR = { "basic_fstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TBrowser = { "TBrowser" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliCentrality = { "AliCentrality" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliCheb2DStack = { "AliCheb2DStack" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliCheb2DStackcLcLdA = { "AliCheb2DStack::$" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliCheb2DStackF = { "AliCheb2DStackF" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliCheb2DStackS = { "AliCheb2DStackS" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliCheb3DCalc = { "AliCheb3DCalc" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TIterator = { "TIterator" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMethodCall = { "TMethodCall" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliCheb3D = { "AliCheb3D" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TObjString = { "TObjString" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR = { "map<string,int,less<string>,allocator<pair<const string,int> > >" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR = { "map<string,float,less<string>,allocator<pair<const string,float> > >" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliLog = { "AliLog" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliLogcLcLEType_t = { "AliLog::EType_t" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliLogcLcLdA = { "AliLog::$" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TStopwatch = { "TStopwatch" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMap = { "TMap" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliCodeTimer = { "AliCodeTimer" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliCodeTimercLcLAliPair = { "AliCodeTimer::AliPair" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliCollisionGeometry = { "AliCollisionGeometry" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_THnSparse = { "THnSparse" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_THashList = { "THashList" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliCounterCollection = { "AliCounterCollection" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliDAQ = { "AliDAQ" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliDAQcLcLdA = { "AliDAQ::$" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliDAQcLcLDetectorBits = { "AliDAQ::DetectorBits" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag = { "AliDAQ::DetectorBitsQualityFlag" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TDirectoryFile = { "TDirectoryFile" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliDataFile = { "AliDataFile" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliDetectorEventHeader = { "AliDetectorEventHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliPID = { "AliPID" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliPIDcLcLdA = { "AliPID::$" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliPIDcLcLEParticleType = { "AliPID::EParticleType" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVConstructorReinitialisationFlag = { "AliVConstructorReinitialisationFlag" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVParticle = { "AliVParticle" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TBits = { "TBits" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVEvent = { "AliVEvent" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVVertex = { "AliVVertex" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliESDVertex = { "AliESDVertex" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliExternalTrackParam = { "AliExternalTrackParam" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTPCdEdxInfo = { "AliTPCdEdxInfo" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliDetectorPID = { "AliDetectorPID" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTOFHeader = { "AliTOFHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVTrack = { "AliVTrack" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVTrackcLcLdA = { "AliVTrack::$" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliITSPidParams = { "AliITSPidParams" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliITSPIDResponse = { "AliITSPIDResponse" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTSparselEdoublegR = { "TMatrixTSparse<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TFormula = { "TFormula" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TSpline3 = { "TSpline3" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliOADBContainer = { "AliOADBContainer" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTPCPIDResponse = { "AliTPCPIDResponse" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTPCPIDResponsecLcLEChamberStatus = { "AliTPCPIDResponse::EChamberStatus" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCgainScenario = { "AliTPCPIDResponse::ETPCgainScenario" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCdEdxSource = { "AliTPCPIDResponse::ETPCdEdxSource" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCdEdxType = { "AliTPCPIDResponse::ETPCdEdxType" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDPIDResponseObject = { "AliTRDPIDResponseObject" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDdEdxParams = { "AliTRDdEdxParams" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDPIDResponse = { "AliTRDPIDResponse" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDResponseStatus = { "AliTRDPIDResponse::ETRDPIDResponseStatus" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDResponseDef = { "AliTRDPIDResponse::ETRDPIDResponseDef" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDMethod = { "AliTRDPIDResponse::ETRDPIDMethod" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDNMethod = { "AliTRDPIDResponse::ETRDPIDNMethod" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNslices = { "AliTRDPIDResponse::ETRDNslices" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNsliceQ0 = { "AliTRDPIDResponse::ETRDNsliceQ0" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTOFPIDParams = { "AliTOFPIDParams" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTOFPIDResponse = { "AliTOFPIDResponse" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TVector2 = { "TVector2" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TGeoHMatrix = { "TGeoHMatrix" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliHMPIDPIDResponse = { "AliHMPIDPIDResponse" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEChamberData = { "AliHMPIDPIDResponse::EChamberData" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEPadxData = { "AliHMPIDPIDResponse::EPadxData" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEPadyData = { "AliHMPIDPIDResponse::EPadyData" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliEMCALPIDResponse = { "AliEMCALPIDResponse" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TLinearFitter = { "TLinearFitter" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMCEvent = { "AliMCEvent" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliHMPIDPIDParams = { "AliHMPIDPIDParams" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliPIDResponse = { "AliPIDResponse" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliPIDResponsecLcLEDetector = { "AliPIDResponse::EDetector" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliPIDResponsecLcLEDetCode = { "AliPIDResponse::EDetCode" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliPIDResponsecLcLEBeamType = { "AliPIDResponse::EBeamType" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliPIDResponsecLcLEStartTimeType_t = { "AliPIDResponse::EStartTimeType_t" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliPIDResponsecLcLITSPIDmethod = { "AliPIDResponse::ITSPIDmethod" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus = { "AliPIDResponse::EDetPidStatus" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliDetectorTag = { "AliDetectorTag" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliDetectorTagCuts = { "AliDetectorTagCuts" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVfriendEvent = { "AliVfriendEvent" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVEventHandler = { "AliVEventHandler" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVEventHandlercLcLEEventHandlerFlags = { "AliVEventHandler::EEventHandlerFlags" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TDataType = { "TDataType" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TTreeCache = { "TTreeCache" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVCuts = { "AliVCuts" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliRunTag = { "AliRunTag" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliEventTag = { "AliEventTag" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliInputEventHandler = { "AliInputEventHandler" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliInputEventHandlercLcLEInputHandlerFlags = { "AliInputEventHandler::EInputHandlerFlags" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliDummyHandler = { "AliDummyHandler" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliEventplane = { "AliEventplane" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliEventTagCuts = { "AliEventTagCuts" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TPolyMarker3D = { "TPolyMarker3D" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliFileTag = { "AliFileTag" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliGenEventHeader = { "AliGenEventHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliGenCocktailEventHeader = { "AliGenCocktailEventHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliGenDPMjetEventHeader = { "AliGenDPMjetEventHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliGenEpos3EventHeader = { "AliGenEpos3EventHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliGenEposEventHeader = { "AliGenEposEventHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliGenEventHeaderTunedPbPb = { "AliGenEventHeaderTunedPbPb" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliGenGeVSimEventHeader = { "AliGenGeVSimEventHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliGenHepMCEventHeader = { "AliGenHepMCEventHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliGenHerwigEventHeader = { "AliGenHerwigEventHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliGenHijingEventHeader = { "AliGenHijingEventHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliGenPythiaEventHeader = { "AliGenPythiaEventHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliGenToyEventHeader = { "AliGenToyEventHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliStack = { "AliStack" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliHeader = { "AliHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliLHCTag = { "AliLHCTag" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliLHCTagCuts = { "AliLHCTagCuts" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TVirtualMagField = { "TVirtualMagField" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMagWrapCheb = { "AliMagWrapCheb" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMagF = { "AliMagF" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMagFcLcLBMap_t = { "AliMagF::BMap_t" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMagFcLcLBeamType_t = { "AliMagF::BeamType_t" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMagFcLcLPolarityConvention_t = { "AliMagF::PolarityConvention_t" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMagFcLcLdA = { "AliMagF::$" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TGraph2D = { "TGraph2D" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TH3 = { "TH3" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMathBase = { "AliMathBase" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TExMap = { "TExMap" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TRefArray = { "TRefArray" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVHeader = { "AliVHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVCluster = { "AliVCluster" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVClustercLcLVClu_t = { "AliVCluster::VClu_t" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVClustercLcLVCluPID_t = { "AliVCluster::VCluPID_t" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVClustercLcLVCluUserDefEnergy_t = { "AliVCluster::VCluUserDefEnergy_t" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVCaloCells = { "AliVCaloCells" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVCaloCellscLcLVCells_t = { "AliVCaloCells::VCells_t" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVCaloTrigger = { "AliVCaloTrigger" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TProfile = { "TProfile" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTOFTriggerMask = { "AliTOFTriggerMask" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVTrdTracklet = { "AliVTrdTracklet" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVTrdTrack = { "AliVTrdTrack" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVMultiplicity = { "AliVMultiplicity" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVMultiplicitycLcLdA = { "AliVMultiplicity::$" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVVZERO = { "AliVVZERO" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVZDC = { "AliVZDC" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVMFT = { "AliVMFT" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliESDkink = { "AliESDkink" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliESDv0 = { "AliESDv0" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliESDVZERO = { "AliESDVZERO" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMultiplicity = { "AliMultiplicity" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVAD = { "AliVAD" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVEventcLcLEDataLayoutType = { "AliVEvent::EDataLayoutType" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes = { "AliVEvent::EOfflineTriggerTypes" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TParticle = { "TParticle" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTrackReference = { "AliTrackReference" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTrackReferencecLcLconstants = { "AliTrackReference::constants" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMCParticle = { "AliMCParticle" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMCEventHandler = { "AliMCEventHandler" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMCEventHandlercLcLPreReadMode_t = { "AliMCEventHandler::PreReadMode_t" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMCVertex = { "AliMCVertex" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TFolder = { "TFolder" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMergeableCollectionIterator = { "AliMergeableCollectionIterator" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMergeableCollectionProxy = { "AliMergeableCollectionProxy" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMergeableCollection = { "AliMergeableCollection" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMixedEvent = { "AliMixedEvent" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliMultSelectionBase = { "AliMultSelectionBase" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliNeutralTrackParam = { "AliNeutralTrackParam" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliPDG = { "AliPDG" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliPIDCombined = { "AliPIDCombined" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliPIDValues = { "AliPIDValues" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliProdInfo = { "AliProdInfo" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliProdInfocLcLdA = { "AliProdInfo::$" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliProdInfocLcLETagType = { "AliProdInfo::ETagType" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliQA = { "AliQA" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t = { "AliQA::DETECTORINDEX_t" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliQAcLcLALITASK_t = { "AliQA::ALITASK_t" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliQAcLcLQABIT_t = { "AliQA::QABIT_t" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t = { "AliQA::RUNTYPE_t" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliQAcLcLTASKINDEX_t = { "AliQA::TASKINDEX_t" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliRefArray = { "AliRefArray" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliRunTagCuts = { "AliRunTagCuts" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMCProcess = { "TMCProcess" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TVirtualMCStack = { "TVirtualMCStack" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TMemStatManager = { "TMemStatManager" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliSysInfo = { "AliSysInfo" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TGridResult = { "TGridResult" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TChain = { "TChain" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTagCreator = { "AliTagCreator" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTimeStamp = { "AliTimeStamp" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTOFPIDParamscLcLdA = { "AliTOFPIDParams::$" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDNDFast = { "AliTRDNDFast" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TSortedList = { "TSortedList" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDPIDParams = { "AliTRDPIDParams" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds = { "AliTRDPIDParams::AliTRDPIDThresholds" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDCentrality = { "AliTRDPIDParams::AliTRDPIDCentrality" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDPIDReference = { "AliTRDPIDReference" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDPIDReferencecLcLdA = { "AliTRDPIDReference::$" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDPIDResponseObjectcLcLETRDPIDResponseObjectStatus = { "AliTRDPIDResponseObject::ETRDPIDResponseObjectStatus" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TKDTreelEintcOdoublegR = { "TKDTree<int,double>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TKDTreelEintcOfloatgR = { "TKDTree<int,float>" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TH2Poly = { "TH2Poly" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDTKDInterpolator = { "AliTRDTKDInterpolator" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLTRDTKDMode = { "AliTRDTKDInterpolator::TRDTKDMode" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo = { "AliTRDTKDInterpolator::AliTRDTKDNodeInfo" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTriggerScalers = { "AliTriggerScalers" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTriggerScalersRecord = { "AliTriggerScalersRecord" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVADcLcLdA = { "AliVAD::$" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVADcLcLDecision = { "AliVAD::Decision" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVADcLcLTriggerBits = { "AliVAD::TriggerBits" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVAODHeader = { "AliVAODHeader" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVersion = { "AliVersion" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVEventPool = { "AliVEventPool" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVfriendTrack = { "AliVfriendTrack" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVVZEROfriend = { "AliVVZEROfriend" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliESDVZEROfriend = { "AliESDVZEROfriend" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTPCseed = { "AliTPCseed" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliTrackPointArray = { "AliTrackPointArray" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVTOFcluster = { "AliVTOFcluster" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVTOFclustercLcLdA = { "AliVTOFcluster::$" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVTOFHit = { "AliVTOFHit" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVTOFMatch = { "AliVTOFMatch" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVTPCseed = { "AliVTPCseed" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVVZEROcLcLdA = { "AliVVZERO::$" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVVZEROcLcLDecision = { "AliVVZERO::Decision" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits = { "AliVVZERO::TriggerBits" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVVZEROfriendcLcLEVVZEROfriendParams = { "AliVVZEROfriend::EVVZEROfriendParams" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_AliVZDCcLcLdA = { "AliVZDC::$" , 101 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TTreeDataElement = { "TTreeDataElement" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TTreeStream = { "TTreeStream" , 99 , -1 };
G__linked_taginfo G__G__STEERBaseLN_TTreeSRedirector = { "TTreeSRedirector" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__STEERBase() {
  G__G__STEERBaseLN_TClass.tagnum = -1 ;
  G__G__STEERBaseLN_TBuffer.tagnum = -1 ;
  G__G__STEERBaseLN_TDirectory.tagnum = -1 ;
  G__G__STEERBaseLN_TMemberInspector.tagnum = -1 ;
  G__G__STEERBaseLN_TObject.tagnum = -1 ;
  G__G__STEERBaseLN_TNamed.tagnum = -1 ;
  G__G__STEERBaseLN_TCollection.tagnum = -1 ;
  G__G__STEERBaseLN_TString.tagnum = -1 ;
  G__G__STEERBaseLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__STEERBaseLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__STEERBaseLN_string.tagnum = -1 ;
  G__G__STEERBaseLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__STEERBaseLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__STEERBaseLN_TList.tagnum = -1 ;
  G__G__STEERBaseLN_TBrowser.tagnum = -1 ;
  G__G__STEERBaseLN_TObjArray.tagnum = -1 ;
  G__G__STEERBaseLN_TClonesArray.tagnum = -1 ;
  G__G__STEERBaseLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__STEERBaseLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__STEERBaseLN_AliCentrality.tagnum = -1 ;
  G__G__STEERBaseLN_AliCheb2DStack.tagnum = -1 ;
  G__G__STEERBaseLN_AliCheb2DStackcLcLdA.tagnum = -1 ;
  G__G__STEERBaseLN_AliCheb2DStackF.tagnum = -1 ;
  G__G__STEERBaseLN_AliCheb2DStackS.tagnum = -1 ;
  G__G__STEERBaseLN_AliCheb3DCalc.tagnum = -1 ;
  G__G__STEERBaseLN_TIterator.tagnum = -1 ;
  G__G__STEERBaseLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__STEERBaseLN_TH1.tagnum = -1 ;
  G__G__STEERBaseLN_TMethodCall.tagnum = -1 ;
  G__G__STEERBaseLN_AliCheb3D.tagnum = -1 ;
  G__G__STEERBaseLN_TObjString.tagnum = -1 ;
  G__G__STEERBaseLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR.tagnum = -1 ;
  G__G__STEERBaseLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR.tagnum = -1 ;
  G__G__STEERBaseLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__STEERBaseLN_AliLog.tagnum = -1 ;
  G__G__STEERBaseLN_AliLogcLcLEType_t.tagnum = -1 ;
  G__G__STEERBaseLN_AliLogcLcLdA.tagnum = -1 ;
  G__G__STEERBaseLN_TStopwatch.tagnum = -1 ;
  G__G__STEERBaseLN_TMap.tagnum = -1 ;
  G__G__STEERBaseLN_AliCodeTimer.tagnum = -1 ;
  G__G__STEERBaseLN_AliCodeTimercLcLAliPair.tagnum = -1 ;
  G__G__STEERBaseLN_AliCollisionGeometry.tagnum = -1 ;
  G__G__STEERBaseLN_THnSparse.tagnum = -1 ;
  G__G__STEERBaseLN_THashList.tagnum = -1 ;
  G__G__STEERBaseLN_TArrayI.tagnum = -1 ;
  G__G__STEERBaseLN_TH1D.tagnum = -1 ;
  G__G__STEERBaseLN_TH2D.tagnum = -1 ;
  G__G__STEERBaseLN_AliCounterCollection.tagnum = -1 ;
  G__G__STEERBaseLN_AliDAQ.tagnum = -1 ;
  G__G__STEERBaseLN_AliDAQcLcLdA.tagnum = -1 ;
  G__G__STEERBaseLN_AliDAQcLcLDetectorBits.tagnum = -1 ;
  G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag.tagnum = -1 ;
  G__G__STEERBaseLN_TFile.tagnum = -1 ;
  G__G__STEERBaseLN_TDirectoryFile.tagnum = -1 ;
  G__G__STEERBaseLN_AliDataFile.tagnum = -1 ;
  G__G__STEERBaseLN_AliDetectorEventHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliPID.tagnum = -1 ;
  G__G__STEERBaseLN_AliPIDcLcLdA.tagnum = -1 ;
  G__G__STEERBaseLN_AliPIDcLcLEParticleType.tagnum = -1 ;
  G__G__STEERBaseLN_AliVConstructorReinitialisationFlag.tagnum = -1 ;
  G__G__STEERBaseLN_AliVParticle.tagnum = -1 ;
  G__G__STEERBaseLN_TBits.tagnum = -1 ;
  G__G__STEERBaseLN_AliVEvent.tagnum = -1 ;
  G__G__STEERBaseLN_AliVVertex.tagnum = -1 ;
  G__G__STEERBaseLN_AliESDVertex.tagnum = -1 ;
  G__G__STEERBaseLN_AliExternalTrackParam.tagnum = -1 ;
  G__G__STEERBaseLN_AliTPCdEdxInfo.tagnum = -1 ;
  G__G__STEERBaseLN_AliDetectorPID.tagnum = -1 ;
  G__G__STEERBaseLN_AliTOFHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliVTrack.tagnum = -1 ;
  G__G__STEERBaseLN_AliVTrackcLcLdA.tagnum = -1 ;
  G__G__STEERBaseLN_AliITSPidParams.tagnum = -1 ;
  G__G__STEERBaseLN_AliITSPIDResponse.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTSparselEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_TFormula.tagnum = -1 ;
  G__G__STEERBaseLN_TF1.tagnum = -1 ;
  G__G__STEERBaseLN_TSpline3.tagnum = -1 ;
  G__G__STEERBaseLN_AliOADBContainer.tagnum = -1 ;
  G__G__STEERBaseLN_AliTPCPIDResponse.tagnum = -1 ;
  G__G__STEERBaseLN_AliTPCPIDResponsecLcLEChamberStatus.tagnum = -1 ;
  G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCgainScenario.tagnum = -1 ;
  G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCdEdxSource.tagnum = -1 ;
  G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCdEdxType.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDPIDResponseObject.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDdEdxParams.tagnum = -1 ;
  G__G__STEERBaseLN_TH2.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDPIDResponse.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDResponseStatus.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDResponseDef.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDMethod.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDNMethod.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNslices.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNsliceQ0.tagnum = -1 ;
  G__G__STEERBaseLN_AliTOFPIDParams.tagnum = -1 ;
  G__G__STEERBaseLN_TH1F.tagnum = -1 ;
  G__G__STEERBaseLN_AliTOFPIDResponse.tagnum = -1 ;
  G__G__STEERBaseLN_TVector2.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TVector3.tagnum = -1 ;
  G__G__STEERBaseLN_TLorentzVector.tagnum = -1 ;
  G__G__STEERBaseLN_TGeoHMatrix.tagnum = -1 ;
  G__G__STEERBaseLN_AliHMPIDPIDResponse.tagnum = -1 ;
  G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEChamberData.tagnum = -1 ;
  G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEPadxData.tagnum = -1 ;
  G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEPadyData.tagnum = -1 ;
  G__G__STEERBaseLN_AliEMCALPIDResponse.tagnum = -1 ;
  G__G__STEERBaseLN_TLinearFitter.tagnum = -1 ;
  G__G__STEERBaseLN_AliMCEvent.tagnum = -1 ;
  G__G__STEERBaseLN_AliHMPIDPIDParams.tagnum = -1 ;
  G__G__STEERBaseLN_AliPIDResponse.tagnum = -1 ;
  G__G__STEERBaseLN_AliPIDResponsecLcLEDetector.tagnum = -1 ;
  G__G__STEERBaseLN_AliPIDResponsecLcLEDetCode.tagnum = -1 ;
  G__G__STEERBaseLN_AliPIDResponsecLcLEBeamType.tagnum = -1 ;
  G__G__STEERBaseLN_AliPIDResponsecLcLEStartTimeType_t.tagnum = -1 ;
  G__G__STEERBaseLN_AliPIDResponsecLcLITSPIDmethod.tagnum = -1 ;
  G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus.tagnum = -1 ;
  G__G__STEERBaseLN_AliDetectorTag.tagnum = -1 ;
  G__G__STEERBaseLN_AliDetectorTagCuts.tagnum = -1 ;
  G__G__STEERBaseLN_TTree.tagnum = -1 ;
  G__G__STEERBaseLN_AliVfriendEvent.tagnum = -1 ;
  G__G__STEERBaseLN_AliVEventHandler.tagnum = -1 ;
  G__G__STEERBaseLN_AliVEventHandlercLcLEEventHandlerFlags.tagnum = -1 ;
  G__G__STEERBaseLN_TDataType.tagnum = -1 ;
  G__G__STEERBaseLN_TTreeCache.tagnum = -1 ;
  G__G__STEERBaseLN_AliVCuts.tagnum = -1 ;
  G__G__STEERBaseLN_AliRunTag.tagnum = -1 ;
  G__G__STEERBaseLN_AliEventTag.tagnum = -1 ;
  G__G__STEERBaseLN_AliInputEventHandler.tagnum = -1 ;
  G__G__STEERBaseLN_AliInputEventHandlercLcLEInputHandlerFlags.tagnum = -1 ;
  G__G__STEERBaseLN_AliDummyHandler.tagnum = -1 ;
  G__G__STEERBaseLN_TArrayF.tagnum = -1 ;
  G__G__STEERBaseLN_AliEventplane.tagnum = -1 ;
  G__G__STEERBaseLN_AliEventTagCuts.tagnum = -1 ;
  G__G__STEERBaseLN_TPolyMarker3D.tagnum = -1 ;
  G__G__STEERBaseLN_AliFileTag.tagnum = -1 ;
  G__G__STEERBaseLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__G__STEERBaseLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__STEERBaseLN_AliGenEventHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliGenCocktailEventHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliGenDPMjetEventHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliGenEpos3EventHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliGenEposEventHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliGenEventHeaderTunedPbPb.tagnum = -1 ;
  G__G__STEERBaseLN_AliGenGeVSimEventHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliGenHepMCEventHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliGenHerwigEventHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliGenHijingEventHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliGenPythiaEventHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliGenToyEventHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliStack.tagnum = -1 ;
  G__G__STEERBaseLN_AliHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliLHCTag.tagnum = -1 ;
  G__G__STEERBaseLN_AliLHCTagCuts.tagnum = -1 ;
  G__G__STEERBaseLN_TVirtualMagField.tagnum = -1 ;
  G__G__STEERBaseLN_AliMagWrapCheb.tagnum = -1 ;
  G__G__STEERBaseLN_AliMagF.tagnum = -1 ;
  G__G__STEERBaseLN_AliMagFcLcLBMap_t.tagnum = -1 ;
  G__G__STEERBaseLN_AliMagFcLcLBeamType_t.tagnum = -1 ;
  G__G__STEERBaseLN_AliMagFcLcLPolarityConvention_t.tagnum = -1 ;
  G__G__STEERBaseLN_AliMagFcLcLdA.tagnum = -1 ;
  G__G__STEERBaseLN_TGraph2D.tagnum = -1 ;
  G__G__STEERBaseLN_TGraph.tagnum = -1 ;
  G__G__STEERBaseLN_TH3.tagnum = -1 ;
  G__G__STEERBaseLN_AliMathBase.tagnum = -1 ;
  G__G__STEERBaseLN_TExMap.tagnum = -1 ;
  G__G__STEERBaseLN_TRefArray.tagnum = -1 ;
  G__G__STEERBaseLN_AliVHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliVCluster.tagnum = -1 ;
  G__G__STEERBaseLN_AliVClustercLcLVClu_t.tagnum = -1 ;
  G__G__STEERBaseLN_AliVClustercLcLVCluPID_t.tagnum = -1 ;
  G__G__STEERBaseLN_AliVClustercLcLVCluUserDefEnergy_t.tagnum = -1 ;
  G__G__STEERBaseLN_AliVCaloCells.tagnum = -1 ;
  G__G__STEERBaseLN_AliVCaloCellscLcLVCells_t.tagnum = -1 ;
  G__G__STEERBaseLN_AliVCaloTrigger.tagnum = -1 ;
  G__G__STEERBaseLN_TProfile.tagnum = -1 ;
  G__G__STEERBaseLN_TH2F.tagnum = -1 ;
  G__G__STEERBaseLN_AliTOFTriggerMask.tagnum = -1 ;
  G__G__STEERBaseLN_AliVTrdTracklet.tagnum = -1 ;
  G__G__STEERBaseLN_AliVTrdTrack.tagnum = -1 ;
  G__G__STEERBaseLN_AliVMultiplicity.tagnum = -1 ;
  G__G__STEERBaseLN_AliVMultiplicitycLcLdA.tagnum = -1 ;
  G__G__STEERBaseLN_AliVVZERO.tagnum = -1 ;
  G__G__STEERBaseLN_AliVZDC.tagnum = -1 ;
  G__G__STEERBaseLN_AliVMFT.tagnum = -1 ;
  G__G__STEERBaseLN_AliESDkink.tagnum = -1 ;
  G__G__STEERBaseLN_AliESDv0.tagnum = -1 ;
  G__G__STEERBaseLN_AliESDVZERO.tagnum = -1 ;
  G__G__STEERBaseLN_AliMultiplicity.tagnum = -1 ;
  G__G__STEERBaseLN_AliVAD.tagnum = -1 ;
  G__G__STEERBaseLN_AliVEventcLcLEDataLayoutType.tagnum = -1 ;
  G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes.tagnum = -1 ;
  G__G__STEERBaseLN_TParticle.tagnum = -1 ;
  G__G__STEERBaseLN_AliTrackReference.tagnum = -1 ;
  G__G__STEERBaseLN_AliTrackReferencecLcLconstants.tagnum = -1 ;
  G__G__STEERBaseLN_AliMCParticle.tagnum = -1 ;
  G__G__STEERBaseLN_AliMCEventHandler.tagnum = -1 ;
  G__G__STEERBaseLN_AliMCEventHandlercLcLPreReadMode_t.tagnum = -1 ;
  G__G__STEERBaseLN_AliMCVertex.tagnum = -1 ;
  G__G__STEERBaseLN_TFolder.tagnum = -1 ;
  G__G__STEERBaseLN_AliMergeableCollectionIterator.tagnum = -1 ;
  G__G__STEERBaseLN_AliMergeableCollectionProxy.tagnum = -1 ;
  G__G__STEERBaseLN_AliMergeableCollection.tagnum = -1 ;
  G__G__STEERBaseLN_AliMixedEvent.tagnum = -1 ;
  G__G__STEERBaseLN_AliMultSelectionBase.tagnum = -1 ;
  G__G__STEERBaseLN_AliNeutralTrackParam.tagnum = -1 ;
  G__G__STEERBaseLN_AliPDG.tagnum = -1 ;
  G__G__STEERBaseLN_AliPIDCombined.tagnum = -1 ;
  G__G__STEERBaseLN_AliPIDValues.tagnum = -1 ;
  G__G__STEERBaseLN_AliProdInfo.tagnum = -1 ;
  G__G__STEERBaseLN_AliProdInfocLcLdA.tagnum = -1 ;
  G__G__STEERBaseLN_AliProdInfocLcLETagType.tagnum = -1 ;
  G__G__STEERBaseLN_AliQA.tagnum = -1 ;
  G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t.tagnum = -1 ;
  G__G__STEERBaseLN_AliQAcLcLALITASK_t.tagnum = -1 ;
  G__G__STEERBaseLN_AliQAcLcLQABIT_t.tagnum = -1 ;
  G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t.tagnum = -1 ;
  G__G__STEERBaseLN_AliQAcLcLTASKINDEX_t.tagnum = -1 ;
  G__G__STEERBaseLN_AliRefArray.tagnum = -1 ;
  G__G__STEERBaseLN_AliRunTagCuts.tagnum = -1 ;
  G__G__STEERBaseLN_TMCProcess.tagnum = -1 ;
  G__G__STEERBaseLN_TVirtualMCStack.tagnum = -1 ;
  G__G__STEERBaseLN_TMemStatManager.tagnum = -1 ;
  G__G__STEERBaseLN_AliSysInfo.tagnum = -1 ;
  G__G__STEERBaseLN_TGridResult.tagnum = -1 ;
  G__G__STEERBaseLN_TChain.tagnum = -1 ;
  G__G__STEERBaseLN_AliTagCreator.tagnum = -1 ;
  G__G__STEERBaseLN_AliTimeStamp.tagnum = -1 ;
  G__G__STEERBaseLN_AliTOFPIDParamscLcLdA.tagnum = -1 ;
  G__G__STEERBaseLN_TGraphErrors.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDNDFast.tagnum = -1 ;
  G__G__STEERBaseLN_TSortedList.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDPIDParams.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDCentrality.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDPIDReference.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDPIDReferencecLcLdA.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDPIDResponseObjectcLcLETRDPIDResponseObjectStatus.tagnum = -1 ;
  G__G__STEERBaseLN_TKDTreelEintcOdoublegR.tagnum = -1 ;
  G__G__STEERBaseLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__G__STEERBaseLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__STEERBaseLN_TKDTreelEintcOfloatgR.tagnum = -1 ;
  G__G__STEERBaseLN_TH2Poly.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDTKDInterpolator.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLTRDTKDMode.tagnum = -1 ;
  G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo.tagnum = -1 ;
  G__G__STEERBaseLN_AliTriggerScalers.tagnum = -1 ;
  G__G__STEERBaseLN_AliTriggerScalersRecord.tagnum = -1 ;
  G__G__STEERBaseLN_AliVADcLcLdA.tagnum = -1 ;
  G__G__STEERBaseLN_AliVADcLcLDecision.tagnum = -1 ;
  G__G__STEERBaseLN_AliVADcLcLTriggerBits.tagnum = -1 ;
  G__G__STEERBaseLN_AliVAODHeader.tagnum = -1 ;
  G__G__STEERBaseLN_AliVersion.tagnum = -1 ;
  G__G__STEERBaseLN_AliVEventPool.tagnum = -1 ;
  G__G__STEERBaseLN_AliVfriendTrack.tagnum = -1 ;
  G__G__STEERBaseLN_AliVVZEROfriend.tagnum = -1 ;
  G__G__STEERBaseLN_AliESDVZEROfriend.tagnum = -1 ;
  G__G__STEERBaseLN_AliTPCseed.tagnum = -1 ;
  G__G__STEERBaseLN_AliTrackPointArray.tagnum = -1 ;
  G__G__STEERBaseLN_AliVTOFcluster.tagnum = -1 ;
  G__G__STEERBaseLN_AliVTOFclustercLcLdA.tagnum = -1 ;
  G__G__STEERBaseLN_AliVTOFHit.tagnum = -1 ;
  G__G__STEERBaseLN_AliVTOFMatch.tagnum = -1 ;
  G__G__STEERBaseLN_AliVTPCseed.tagnum = -1 ;
  G__G__STEERBaseLN_AliVVZEROcLcLdA.tagnum = -1 ;
  G__G__STEERBaseLN_AliVVZEROcLcLDecision.tagnum = -1 ;
  G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits.tagnum = -1 ;
  G__G__STEERBaseLN_AliVVZEROfriendcLcLEVVZEROfriendParams.tagnum = -1 ;
  G__G__STEERBaseLN_AliVZDCcLcLdA.tagnum = -1 ;
  G__G__STEERBaseLN_TTreeDataElement.tagnum = -1 ;
  G__G__STEERBaseLN_TTreeStream.tagnum = -1 ;
  G__G__STEERBaseLN_TTreeSRedirector.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__STEERBase() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TDirectory);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TCollection);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TString);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_string);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TList);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TBrowser);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliCentrality),sizeof(AliCentrality),-1,327424,(char*)NULL,G__setup_memvarAliCentrality,G__setup_memfuncAliCentrality);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliCheb2DStack),sizeof(AliCheb2DStack),-1,327428,"stack of 2D->fDimOut Chebyshev parameterization slices",G__setup_memvarAliCheb2DStack,G__setup_memfuncAliCheb2DStack);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliCheb2DStackcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliCheb2DStackF),sizeof(AliCheb2DStackF),-1,327424,"stack of 2D->fDimOut Chebyshev parameterization slices",G__setup_memvarAliCheb2DStackF,G__setup_memfuncAliCheb2DStackF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliCheb2DStackS),sizeof(AliCheb2DStackS),-1,327424,"stack of 2D->fDimOut Chebyshev parameterization slices",G__setup_memvarAliCheb2DStackS,G__setup_memfuncAliCheb2DStackS);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliCheb3DCalc),sizeof(AliCheb3DCalc),-1,327424,"Class for interpolation of 3D->1 function by Chebyshev parametrization ",G__setup_memvarAliCheb3DCalc,G__setup_memfuncAliCheb3DCalc);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TIterator);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TH1);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMethodCall);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliCheb3D),sizeof(AliCheb3D),-1,327424,"Chebyshev parametrization for 3D->N function",G__setup_memvarAliCheb3D,G__setup_memfuncAliCheb3D);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TObjString);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliLog),sizeof(AliLog),-1,294656,"class for logging debug, info and error messages",G__setup_memvarAliLog,G__setup_memfuncAliLog);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliLogcLcLEType_t),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliLogcLcLdA);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TStopwatch);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliCodeTimer),sizeof(AliCodeTimer),-1,294656,"A timer holder",G__setup_memvarAliCodeTimer,G__setup_memfuncAliCodeTimer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliCodeTimercLcLAliPair),sizeof(AliCodeTimer::AliPair),-1,327424,"internal class to hold (string,TStopwatch*) AliPair",G__setup_memvarAliCodeTimercLcLAliPair,G__setup_memfuncAliCodeTimercLcLAliPair);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliCollisionGeometry),sizeof(AliCollisionGeometry),-1,265984,"Collision Geometry",G__setup_memvarAliCollisionGeometry,G__setup_memfuncAliCollisionGeometry);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_THnSparse);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_THashList);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TH1D);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TH2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliCounterCollection),sizeof(AliCounterCollection),-1,327424,"collection of mergeable counters",G__setup_memvarAliCounterCollection,G__setup_memfuncAliCounterCollection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliDAQ),sizeof(AliDAQ),-1,294656,"ALICE DAQ Configuration class",G__setup_memvarAliDAQ,G__setup_memfuncAliDAQ);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliDAQcLcLdA);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliDAQcLcLDetectorBits);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliDAQcLcLDetectorBitsQualityFlag);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TFile);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TDirectoryFile);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliDataFile),sizeof(AliDataFile),-1,263168,(char*)NULL,G__setup_memvarAliDataFile,G__setup_memfuncAliDataFile);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliDetectorEventHeader),sizeof(AliDetectorEventHeader),-1,324864,"Event header for detectors",G__setup_memvarAliDetectorEventHeader,G__setup_memfuncAliDetectorEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliPID),sizeof(AliPID),-1,326400,"particle id probability densities",G__setup_memvarAliPID,G__setup_memfuncAliPID);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliPIDcLcLdA);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliPIDcLcLEParticleType);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVConstructorReinitialisationFlag);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVParticle),sizeof(AliVParticle),-1,327445,"base class for particles",G__setup_memvarAliVParticle,G__setup_memfuncAliVParticle);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TBits);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVEvent),sizeof(AliVEvent),-1,294702,"base class for AliEvent data",G__setup_memvarAliVEvent,G__setup_memfuncAliVEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVVertex),sizeof(AliVVertex),-1,327435,"base class for vertices",G__setup_memvarAliVVertex,G__setup_memfuncAliVVertex);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliESDVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliExternalTrackParam),sizeof(AliExternalTrackParam),-1,327424,(char*)NULL,G__setup_memvarAliExternalTrackParam,G__setup_memfuncAliExternalTrackParam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTPCdEdxInfo),sizeof(AliTPCdEdxInfo),-1,293632,(char*)NULL,G__setup_memvarAliTPCdEdxInfo,G__setup_memfuncAliTPCdEdxInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliDetectorPID),sizeof(AliDetectorPID),-1,294656,"Store raw probabilities and nsigmas for all detectors",G__setup_memvarAliDetectorPID,G__setup_memfuncAliDetectorPID);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTOFHeader),sizeof(AliTOFHeader),-1,327424,"Class for TOF event times and so on",G__setup_memvarAliTOFHeader,G__setup_memfuncAliTOFHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVTrack),sizeof(AliVTrack),-1,327451,"base class for tracks",G__setup_memvarAliVTrack,G__setup_memfuncAliVTrack);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVTrackcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliITSPidParams),sizeof(AliITSPidParams),-1,327424,(char*)NULL,G__setup_memvarAliITSPidParams,G__setup_memfuncAliITSPidParams);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliITSPIDResponse),sizeof(AliITSPIDResponse),-1,292096,"ITS PID class",G__setup_memvarAliITSPIDResponse,G__setup_memfuncAliITSPIDResponse);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTSparselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TFormula);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TF1);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TSpline3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliOADBContainer),sizeof(AliOADBContainer),-1,327424,(char*)NULL,G__setup_memvarAliOADBContainer,G__setup_memfuncAliOADBContainer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTPCPIDResponse),sizeof(AliTPCPIDResponse),-1,327424,"TPC PID class",G__setup_memvarAliTPCPIDResponse,G__setup_memfuncAliTPCPIDResponse);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLEChamberStatus);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCgainScenario);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCdEdxSource);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTPCPIDResponsecLcLETPCdEdxType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDPIDResponseObject),sizeof(AliTRDPIDResponseObject),-1,327424,(char*)NULL,G__setup_memvarAliTRDPIDResponseObject,G__setup_memfuncAliTRDPIDResponseObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDdEdxParams),sizeof(AliTRDdEdxParams),-1,323840,(char*)NULL,G__setup_memvarAliTRDdEdxParams,G__setup_memfuncAliTRDdEdxParams);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TH2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDPIDResponse),sizeof(AliTRDPIDResponse),-1,294656,"Tool for TRD PID",G__setup_memvarAliTRDPIDResponse,G__setup_memfuncAliTRDPIDResponse);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDResponseStatus);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDResponseDef);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDMethod);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDPIDNMethod);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNslices);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDPIDResponsecLcLETRDNsliceQ0);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTOFPIDParams),sizeof(AliTOFPIDParams),-1,324864,(char*)NULL,G__setup_memvarAliTOFPIDParams,G__setup_memfuncAliTOFPIDParams);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TH1F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTOFPIDResponse),sizeof(AliTOFPIDResponse),-1,324864,"TOF PID class",G__setup_memvarAliTOFPIDResponse,G__setup_memfuncAliTOFPIDResponse);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TVector2);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TVector3);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TLorentzVector);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TGeoHMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliHMPIDPIDResponse),sizeof(AliHMPIDPIDResponse),-1,327424,(char*)NULL,G__setup_memvarAliHMPIDPIDResponse,G__setup_memfuncAliHMPIDPIDResponse);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEChamberData);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEPadxData);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliHMPIDPIDResponsecLcLEPadyData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliEMCALPIDResponse),sizeof(AliEMCALPIDResponse),-1,294656,(char*)NULL,G__setup_memvarAliEMCALPIDResponse,G__setup_memfuncAliEMCALPIDResponse);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TLinearFitter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMCEvent),sizeof(AliMCEvent),-1,294656,"AliVEvent realisation for MC data",G__setup_memvarAliMCEvent,G__setup_memfuncAliMCEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliHMPIDPIDParams),sizeof(AliHMPIDPIDParams),-1,327424,(char*)NULL,G__setup_memvarAliHMPIDPIDParams,G__setup_memfuncAliHMPIDPIDParams);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliPIDResponse),sizeof(AliPIDResponse),-1,327424,"PID response handling",G__setup_memvarAliPIDResponse,G__setup_memfuncAliPIDResponse);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetector);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetCode);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliPIDResponsecLcLEBeamType);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliPIDResponsecLcLEStartTimeType_t);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliPIDResponsecLcLITSPIDmethod);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliPIDResponsecLcLEDetPidStatus);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliDetectorTag),sizeof(AliDetectorTag),-1,294656,"(ClassName, ClassVersion)",G__setup_memvarAliDetectorTag,G__setup_memfuncAliDetectorTag);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliDetectorTagCuts),sizeof(AliDetectorTagCuts),-1,292096,(char*)NULL,G__setup_memvarAliDetectorTagCuts,G__setup_memfuncAliDetectorTagCuts);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TTree);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVfriendEvent),sizeof(AliVfriendEvent),-1,327435,"base class for AliEvent data",G__setup_memvarAliVfriendEvent,G__setup_memfuncAliVfriendEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVEventHandler),sizeof(AliVEventHandler),-1,324875,(char*)NULL,G__setup_memvarAliVEventHandler,G__setup_memfuncAliVEventHandler);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVEventHandlercLcLEEventHandlerFlags);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TDataType);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TTreeCache);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVCuts),sizeof(AliVCuts),-1,327425,(char*)NULL,G__setup_memvarAliVCuts,G__setup_memfuncAliVCuts);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliRunTag),sizeof(AliRunTag),-1,294656,"(ClassName, ClassVersion)",G__setup_memvarAliRunTag,G__setup_memfuncAliRunTag);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliEventTag),sizeof(AliEventTag),-1,294656,"(ClassName, ClassVersion)",G__setup_memvarAliEventTag,G__setup_memfuncAliEventTag);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliInputEventHandler),sizeof(AliInputEventHandler),-1,327424,(char*)NULL,G__setup_memvarAliInputEventHandler,G__setup_memfuncAliInputEventHandler);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliInputEventHandlercLcLEInputHandlerFlags);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliDummyHandler),sizeof(AliDummyHandler),-1,327424,(char*)NULL,G__setup_memvarAliDummyHandler,G__setup_memfuncAliDummyHandler);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TArrayF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliEventplane),sizeof(AliEventplane),-1,327424,(char*)NULL,G__setup_memvarAliEventplane,G__setup_memfuncAliEventplane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliEventTagCuts),sizeof(AliEventTagCuts),-1,292096,(char*)NULL,G__setup_memvarAliEventTagCuts,G__setup_memfuncAliEventTagCuts);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TPolyMarker3D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliFileTag),sizeof(AliFileTag),-1,294656,"(ClassName, ClassVersion)",G__setup_memvarAliFileTag,G__setup_memfuncAliFileTag);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliGenEventHeader),sizeof(AliGenEventHeader),-1,324864,"Event header for primary event",G__setup_memvarAliGenEventHeader,G__setup_memfuncAliGenEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliGenCocktailEventHeader),sizeof(AliGenCocktailEventHeader),-1,327424,"Event header for Cocktail event",G__setup_memvarAliGenCocktailEventHeader,G__setup_memfuncAliGenCocktailEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliGenDPMjetEventHeader),sizeof(AliGenDPMjetEventHeader),-1,324864,"Event header for dpmjet event",G__setup_memvarAliGenDPMjetEventHeader,G__setup_memfuncAliGenDPMjetEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliGenEpos3EventHeader),sizeof(AliGenEpos3EventHeader),-1,324864,"event header for EPOS event",G__setup_memvarAliGenEpos3EventHeader,G__setup_memfuncAliGenEpos3EventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliGenEposEventHeader),sizeof(AliGenEposEventHeader),-1,324864,(char*)NULL,G__setup_memvarAliGenEposEventHeader,G__setup_memfuncAliGenEposEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliGenEventHeaderTunedPbPb),sizeof(AliGenEventHeaderTunedPbPb),-1,324864,"Event header for primary event",G__setup_memvarAliGenEventHeaderTunedPbPb,G__setup_memfuncAliGenEventHeaderTunedPbPb);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliGenGeVSimEventHeader),sizeof(AliGenGeVSimEventHeader),-1,324864,"Event Header for GeVSim",G__setup_memvarAliGenGeVSimEventHeader,G__setup_memfuncAliGenGeVSimEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliGenHepMCEventHeader),sizeof(AliGenHepMCEventHeader),-1,324864,"Event header for HepMC event",G__setup_memvarAliGenHepMCEventHeader,G__setup_memfuncAliGenHepMCEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliGenHerwigEventHeader),sizeof(AliGenHerwigEventHeader),-1,324864,"Event header for Herwig event",G__setup_memvarAliGenHerwigEventHeader,G__setup_memfuncAliGenHerwigEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliGenHijingEventHeader),sizeof(AliGenHijingEventHeader),-1,324864,"Event header for hijing event",G__setup_memvarAliGenHijingEventHeader,G__setup_memfuncAliGenHijingEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliGenPythiaEventHeader),sizeof(AliGenPythiaEventHeader),-1,324864,"Event header for Pythia event",G__setup_memvarAliGenPythiaEventHeader,G__setup_memfuncAliGenPythiaEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliGenToyEventHeader),sizeof(AliGenToyEventHeader),-1,327424,(char*)NULL,G__setup_memvarAliGenToyEventHeader,G__setup_memfuncAliGenToyEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliStack),sizeof(AliStack),-1,327424,"Particles stack",G__setup_memvarAliStack,G__setup_memfuncAliStack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliHeader),sizeof(AliHeader),-1,327424,"Alice event header    ",G__setup_memvarAliHeader,G__setup_memfuncAliHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliLHCTag),sizeof(AliLHCTag),-1,294656,"(ClassName, ClassVersion)",G__setup_memvarAliLHCTag,G__setup_memfuncAliLHCTag);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliLHCTagCuts),sizeof(AliLHCTagCuts),-1,292096,(char*)NULL,G__setup_memvarAliLHCTagCuts,G__setup_memfuncAliLHCTagCuts);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TVirtualMagField);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMagWrapCheb),sizeof(AliMagWrapCheb),-1,327424,"Wrapper class for the set of Chebishev parameterizations of Alice mag.field",G__setup_memvarAliMagWrapCheb,G__setup_memfuncAliMagWrapCheb);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMagF),sizeof(AliMagF),-1,327424,"Class for all Alice MagField wrapper for measured data + Tosca parameterization",G__setup_memvarAliMagF,G__setup_memfuncAliMagF);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMagFcLcLBMap_t);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMagFcLcLBeamType_t);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMagFcLcLPolarityConvention_t);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMagFcLcLdA);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TGraph2D);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TGraph);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TH3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMathBase),sizeof(AliMathBase),-1,292096,"Various mathematical tools for physics analysis - which are not included in ROOT TMath",G__setup_memvarAliMathBase,G__setup_memfuncAliMathBase);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TExMap);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TRefArray);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVHeader),sizeof(AliVHeader),-1,327432,(char*)NULL,G__setup_memvarAliVHeader,G__setup_memfuncAliVHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVCluster),sizeof(AliVCluster),-1,294656,"VCluster ",G__setup_memvarAliVCluster,G__setup_memfuncAliVCluster);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVClustercLcLVClu_t);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVClustercLcLVCluPID_t);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVClustercLcLVCluUserDefEnergy_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVCaloCells),sizeof(AliVCaloCells),-1,327451,(char*)NULL,G__setup_memvarAliVCaloCells,G__setup_memfuncAliVCaloCells);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVCaloCellscLcLVCells_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVCaloTrigger),sizeof(AliVCaloTrigger),-1,327458,(char*)NULL,G__setup_memvarAliVCaloTrigger,G__setup_memfuncAliVCaloTrigger);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TProfile);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TH2F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTOFTriggerMask),sizeof(AliTOFTriggerMask),-1,294656,(char*)NULL,G__setup_memvarAliTOFTriggerMask,G__setup_memfuncAliTOFTriggerMask);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVTrdTracklet),sizeof(AliVTrdTracklet),-1,294664,(char*)NULL,G__setup_memvarAliVTrdTracklet,G__setup_memfuncAliVTrdTracklet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVTrdTrack),sizeof(AliVTrdTrack),-1,294677,(char*)NULL,G__setup_memvarAliVTrdTrack,G__setup_memfuncAliVTrdTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVMultiplicity),sizeof(AliVMultiplicity),-1,327446,(char*)NULL,G__setup_memvarAliVMultiplicity,G__setup_memfuncAliVMultiplicity);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVMultiplicitycLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVVZERO),sizeof(AliVVZERO),-1,294680,(char*)NULL,G__setup_memvarAliVVZERO,G__setup_memfuncAliVVZERO);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVZDC),sizeof(AliVZDC),-1,294676,(char*)NULL,G__setup_memvarAliVZDC,G__setup_memfuncAliVZDC);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVMFT),sizeof(AliVMFT),-1,294656,(char*)NULL,G__setup_memvarAliVMFT,G__setup_memfuncAliVMFT);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliESDkink);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliESDv0);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliESDVZERO);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMultiplicity);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVAD),sizeof(AliVAD),-1,294678,(char*)NULL,G__setup_memvarAliVAD,G__setup_memfuncAliVAD);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVEventcLcLEDataLayoutType);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVEventcLcLEOfflineTriggerTypes);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TParticle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTrackReference),sizeof(AliTrackReference),-1,325376,"Base class for all Alice track references",G__setup_memvarAliTrackReference,G__setup_memfuncAliTrackReference);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTrackReferencecLcLconstants);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMCParticle),sizeof(AliMCParticle),-1,327424,"AliVParticle realisation for MCParticles",G__setup_memvarAliMCParticle,G__setup_memfuncAliMCParticle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMCEventHandler),sizeof(AliMCEventHandler),-1,327424,"MC Truth EventHandler class",G__setup_memvarAliMCEventHandler,G__setup_memfuncAliMCEventHandler);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMCEventHandlercLcLPreReadMode_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMCVertex),sizeof(AliMCVertex),-1,324864,(char*)NULL,G__setup_memvarAliMCVertex,G__setup_memfuncAliMCVertex);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TFolder);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMergeableCollectionIterator),sizeof(AliMergeableCollectionIterator),-1,298752,"Mergeable object collection iterator",G__setup_memvarAliMergeableCollectionIterator,G__setup_memfuncAliMergeableCollectionIterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMergeableCollectionProxy),sizeof(AliMergeableCollectionProxy),-1,323584,"Mergeable object collection proxy",G__setup_memvarAliMergeableCollectionProxy,G__setup_memfuncAliMergeableCollectionProxy);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMergeableCollection),sizeof(AliMergeableCollection),-1,327424,"/ A collection of mergeable objects",G__setup_memvarAliMergeableCollection,G__setup_memfuncAliMergeableCollection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMixedEvent),sizeof(AliMixedEvent),-1,294656,"Container for mixed events",G__setup_memvarAliMixedEvent,G__setup_memfuncAliMixedEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliMultSelectionBase),sizeof(AliMultSelectionBase),-1,324864,(char*)NULL,G__setup_memvarAliMultSelectionBase,G__setup_memfuncAliMultSelectionBase);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliNeutralTrackParam),sizeof(AliNeutralTrackParam),-1,327424,"track with zero charge",G__setup_memvarAliNeutralTrackParam,G__setup_memfuncAliNeutralTrackParam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliPDG),sizeof(AliPDG),-1,290816,"PDG database related information",G__setup_memvarAliPDG,G__setup_memfuncAliPDG);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliPIDCombined),sizeof(AliPIDCombined),-1,327424,"Combined PID using priors",G__setup_memvarAliPIDCombined,G__setup_memfuncAliPIDCombined);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliPIDValues),sizeof(AliPIDValues),-1,326400,"Store PID values for each particle type",G__setup_memvarAliPIDValues,G__setup_memfuncAliPIDValues);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliProdInfo),sizeof(AliProdInfo),-1,327424,"Combined PID using priors",G__setup_memvarAliProdInfo,G__setup_memfuncAliProdInfo);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliProdInfocLcLdA);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliProdInfocLcLETagType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliQA),sizeof(AliQA),-1,327424,"ALICE Quality Assurance Object",G__setup_memvarAliQA,G__setup_memfuncAliQA);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliQAcLcLDETECTORINDEX_t);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliQAcLcLALITASK_t);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliQAcLcLQABIT_t);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliQAcLcLRUNTYPE_t);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliQAcLcLTASKINDEX_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliRefArray),sizeof(AliRefArray),-1,327424,(char*)NULL,G__setup_memvarAliRefArray,G__setup_memfuncAliRefArray);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliRunTagCuts),sizeof(AliRunTagCuts),-1,292096,(char*)NULL,G__setup_memvarAliRunTagCuts,G__setup_memfuncAliRunTagCuts);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMCProcess);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TVirtualMCStack);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TMemStatManager);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliSysInfo),sizeof(AliSysInfo),-1,293632,(char*)NULL,G__setup_memvarAliSysInfo,G__setup_memfuncAliSysInfo);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TGridResult);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TChain);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTagCreator),sizeof(AliTagCreator),-1,292096,(char*)NULL,G__setup_memvarAliTagCreator,G__setup_memfuncAliTagCreator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTimeStamp),sizeof(AliTimeStamp),-1,327424,"Define a timestamp",G__setup_memvarAliTimeStamp,G__setup_memfuncAliTimeStamp);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTOFPIDParamscLcLdA);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TGraphErrors);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDNDFast),sizeof(AliTRDNDFast),-1,327424,"Fast TRD ND class",G__setup_memvarAliTRDNDFast,G__setup_memfuncAliTRDNDFast);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TSortedList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDPIDParams),sizeof(AliTRDPIDParams),-1,327424,(char*)NULL,G__setup_memvarAliTRDPIDParams,G__setup_memfuncAliTRDPIDParams);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDThresholds),sizeof(AliTRDPIDParams::AliTRDPIDThresholds),-1,327424,(char*)NULL,G__setup_memvarAliTRDPIDParamscLcLAliTRDPIDThresholds,G__setup_memfuncAliTRDPIDParamscLcLAliTRDPIDThresholds);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDPIDParamscLcLAliTRDPIDCentrality),sizeof(AliTRDPIDParams::AliTRDPIDCentrality),-1,327424,(char*)NULL,G__setup_memvarAliTRDPIDParamscLcLAliTRDPIDCentrality,G__setup_memfuncAliTRDPIDParamscLcLAliTRDPIDCentrality);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDPIDReference),sizeof(AliTRDPIDReference),-1,327424,"Container for TRD references",G__setup_memvarAliTRDPIDReference,G__setup_memfuncAliTRDPIDReference);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDPIDReferencecLcLdA);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDPIDResponseObjectcLcLETRDPIDResponseObjectStatus);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TKDTreelEintcOdoublegR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TKDTreelEintcOfloatgR);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TH2Poly);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDTKDInterpolator),sizeof(AliTRDTKDInterpolator),-1,327424,"data interpolator based on KD tree",G__setup_memvarAliTRDTKDInterpolator,G__setup_memfuncAliTRDTKDInterpolator);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLTRDTKDMode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo),sizeof(AliTRDTKDInterpolator::AliTRDTKDNodeInfo),-1,294656,"node info for interpolator",G__setup_memvarAliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo,G__setup_memfuncAliTRDTKDInterpolatorcLcLAliTRDTKDNodeInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTriggerScalers),sizeof(AliTriggerScalers),-1,327424,"Define a Run Trigger Scalers (Scalers)",G__setup_memvarAliTriggerScalers,G__setup_memfuncAliTriggerScalers);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTriggerScalersRecord),sizeof(AliTriggerScalersRecord),-1,294656,"Define a Record of Trigger Scalers ",G__setup_memvarAliTriggerScalersRecord,G__setup_memfuncAliTriggerScalersRecord);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVADcLcLdA);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVADcLcLDecision);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVADcLcLTriggerBits);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVAODHeader),sizeof(AliVAODHeader),-1,324916,(char*)NULL,G__setup_memvarAliVAODHeader,G__setup_memfuncAliVAODHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVersion),sizeof(AliVersion),-1,327424,(char*)NULL,G__setup_memvarAliVersion,G__setup_memfuncAliVersion);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVEventPool),sizeof(AliVEventPool),-1,327429,(char*)NULL,G__setup_memvarAliVEventPool,G__setup_memfuncAliVEventPool);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVfriendTrack),sizeof(AliVfriendTrack),-1,327430,(char*)NULL,G__setup_memvarAliVfriendTrack,G__setup_memfuncAliVfriendTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVVZEROfriend),sizeof(AliVVZEROfriend),-1,294656,"container class for VZERO DDL raw data",G__setup_memvarAliVVZEROfriend,G__setup_memfuncAliVVZEROfriend);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliESDVZEROfriend);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTPCseed);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliTrackPointArray);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVTOFcluster),sizeof(AliVTOFcluster),-1,294656,"TOF matchable cluster",G__setup_memvarAliVTOFcluster,G__setup_memfuncAliVTOFcluster);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVTOFclustercLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVTOFHit),sizeof(AliVTOFHit),-1,294656,"TOF matchable hit",G__setup_memvarAliVTOFHit,G__setup_memfuncAliVTOFHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVTOFMatch),sizeof(AliVTOFMatch),-1,294656,"TOF matchable hit",G__setup_memvarAliVTOFMatch,G__setup_memfuncAliVTOFMatch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVTPCseed),sizeof(AliVTPCseed),-1,263426,(char*)NULL,G__setup_memvarAliVTPCseed,G__setup_memfuncAliVTPCseed);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVVZEROcLcLdA);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVVZEROcLcLDecision);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVVZEROcLcLTriggerBits);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVVZEROfriendcLcLEVVZEROfriendParams);
   G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_AliVZDCcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TTreeDataElement),sizeof(TTreeDataElement),-1,326144,(char*)NULL,G__setup_memvarTTreeDataElement,G__setup_memfuncTTreeDataElement);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TTreeStream),sizeof(TTreeStream),-1,327168,(char*)NULL,G__setup_memvarTTreeStream,G__setup_memfuncTTreeStream);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__STEERBaseLN_TTreeSRedirector),sizeof(TTreeSRedirector),-1,294656,(char*)NULL,G__setup_memvarTTreeSRedirector,G__setup_memfuncTTreeSRedirector);
}
extern "C" void G__cpp_setupG__STEERBase(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__STEERBase()");
  G__set_cpp_environmentG__STEERBase();
  G__cpp_setup_tagtableG__STEERBase();

  G__cpp_setup_inheritanceG__STEERBase();

  G__cpp_setup_typetableG__STEERBase();

  G__cpp_setup_memvarG__STEERBase();

  G__cpp_setup_memfuncG__STEERBase();
  G__cpp_setup_globalG__STEERBase();
  G__cpp_setup_funcG__STEERBase();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__STEERBase();
  return;
}
class G__cpp_setup_initG__STEERBase {
  public:
    G__cpp_setup_initG__STEERBase() { G__add_setup_func("G__STEERBase",(G__incsetup)(&G__cpp_setupG__STEERBase)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__STEERBase() { G__remove_setup_func("G__STEERBase"); }
};
G__cpp_setup_initG__STEERBase G__cpp_setup_initializerG__STEERBase;

