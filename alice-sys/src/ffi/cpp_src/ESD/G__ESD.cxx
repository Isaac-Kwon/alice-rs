//
// File generated by rootcint at Wed Jun 21 00:44:50 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME G__ESD
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__ESD.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

#include "TBuffer.h"
#include "TVirtualObject.h"
#include <vector>
#include "TSchemaHelper.h"

#include <AliPID.h>

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void AliESDEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDEvent(void *p = 0);
   static void *newArray_AliESDEvent(Long_t size, void *p);
   static void delete_AliESDEvent(void *p);
   static void deleteArray_AliESDEvent(void *p);
   static void destruct_AliESDEvent(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDEvent*)
   {
      ::AliESDEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDEvent", ::AliESDEvent::Class_Version(), "./AliESDEvent.h", 83,
                  typeid(::AliESDEvent), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDEvent::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDEvent) );
      instance.SetNew(&new_AliESDEvent);
      instance.SetNewArray(&newArray_AliESDEvent);
      instance.SetDelete(&delete_AliESDEvent);
      instance.SetDeleteArray(&deleteArray_AliESDEvent);
      instance.SetDestructor(&destruct_AliESDEvent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDEvent*)
   {
      return GenerateInitInstanceLocal((::AliESDEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDv0_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDv0(void *p = 0);
   static void *newArray_AliESDv0(Long_t size, void *p);
   static void delete_AliESDv0(void *p);
   static void deleteArray_AliESDv0(void *p);
   static void destruct_AliESDv0(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDv0*)
   {
      ::AliESDv0 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDv0 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDv0", ::AliESDv0::Class_Version(), "./AliESDv0.h", 24,
                  typeid(::AliESDv0), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDv0::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDv0) );
      instance.SetNew(&new_AliESDv0);
      instance.SetNewArray(&newArray_AliESDv0);
      instance.SetDelete(&delete_AliESDv0);
      instance.SetDeleteArray(&deleteArray_AliESDv0);
      instance.SetDestructor(&destruct_AliESDv0);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDv0*)
   {
      return GenerateInitInstanceLocal((::AliESDv0*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDv0*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliCascadeVertexer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliCascadeVertexer(void *p = 0);
   static void *newArray_AliCascadeVertexer(Long_t size, void *p);
   static void delete_AliCascadeVertexer(void *p);
   static void deleteArray_AliCascadeVertexer(void *p);
   static void destruct_AliCascadeVertexer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliCascadeVertexer*)
   {
      ::AliCascadeVertexer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliCascadeVertexer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliCascadeVertexer", ::AliCascadeVertexer::Class_Version(), "./AliCascadeVertexer.h", 20,
                  typeid(::AliCascadeVertexer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliCascadeVertexer::Dictionary, isa_proxy, 4,
                  sizeof(::AliCascadeVertexer) );
      instance.SetNew(&new_AliCascadeVertexer);
      instance.SetNewArray(&newArray_AliCascadeVertexer);
      instance.SetDelete(&delete_AliCascadeVertexer);
      instance.SetDeleteArray(&deleteArray_AliCascadeVertexer);
      instance.SetDestructor(&destruct_AliCascadeVertexer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliCascadeVertexer*)
   {
      return GenerateInitInstanceLocal((::AliCascadeVertexer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliCascadeVertexer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDACORDE_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDACORDE(void *p = 0);
   static void *newArray_AliESDACORDE(Long_t size, void *p);
   static void delete_AliESDACORDE(void *p);
   static void deleteArray_AliESDACORDE(void *p);
   static void destruct_AliESDACORDE(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDACORDE*)
   {
      ::AliESDACORDE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDACORDE >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDACORDE", ::AliESDACORDE::Class_Version(), "./AliESDACORDE.h", 11,
                  typeid(::AliESDACORDE), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDACORDE::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDACORDE) );
      instance.SetNew(&new_AliESDACORDE);
      instance.SetNewArray(&newArray_AliESDACORDE);
      instance.SetDelete(&delete_AliESDACORDE);
      instance.SetDeleteArray(&deleteArray_AliESDACORDE);
      instance.SetDestructor(&destruct_AliESDACORDE);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDACORDE*)
   {
      return GenerateInitInstanceLocal((::AliESDACORDE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDACORDE*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDAD_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDAD(void *p = 0);
   static void *newArray_AliESDAD(Long_t size, void *p);
   static void delete_AliESDAD(void *p);
   static void deleteArray_AliESDAD(void *p);
   static void destruct_AliESDAD(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDAD*)
   {
      ::AliESDAD *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDAD >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDAD", ::AliESDAD::Class_Version(), "./AliESDAD.h", 13,
                  typeid(::AliESDAD), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDAD::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDAD) );
      instance.SetNew(&new_AliESDAD);
      instance.SetNewArray(&newArray_AliESDAD);
      instance.SetDelete(&delete_AliESDAD);
      instance.SetDeleteArray(&deleteArray_AliESDAD);
      instance.SetDestructor(&destruct_AliESDAD);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDAD*)
   {
      return GenerateInitInstanceLocal((::AliESDAD*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDAD*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDADfriend_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDADfriend(void *p = 0);
   static void *newArray_AliESDADfriend(Long_t size, void *p);
   static void delete_AliESDADfriend(void *p);
   static void deleteArray_AliESDADfriend(void *p);
   static void destruct_AliESDADfriend(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDADfriend*)
   {
      ::AliESDADfriend *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDADfriend >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDADfriend", ::AliESDADfriend::Class_Version(), "./AliESDADfriend.h", 15,
                  typeid(::AliESDADfriend), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDADfriend::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDADfriend) );
      instance.SetNew(&new_AliESDADfriend);
      instance.SetNewArray(&newArray_AliESDADfriend);
      instance.SetDelete(&delete_AliESDADfriend);
      instance.SetDeleteArray(&deleteArray_AliESDADfriend);
      instance.SetDestructor(&destruct_AliESDADfriend);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDADfriend*)
   {
      return GenerateInitInstanceLocal((::AliESDADfriend*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDADfriend*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDCaloCells_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDCaloCells(void *p = 0);
   static void *newArray_AliESDCaloCells(Long_t size, void *p);
   static void delete_AliESDCaloCells(void *p);
   static void deleteArray_AliESDCaloCells(void *p);
   static void destruct_AliESDCaloCells(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDCaloCells*)
   {
      ::AliESDCaloCells *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDCaloCells >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDCaloCells", ::AliESDCaloCells::Class_Version(), "./AliESDCaloCells.h", 25,
                  typeid(::AliESDCaloCells), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDCaloCells::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDCaloCells) );
      instance.SetNew(&new_AliESDCaloCells);
      instance.SetNewArray(&newArray_AliESDCaloCells);
      instance.SetDelete(&delete_AliESDCaloCells);
      instance.SetDeleteArray(&deleteArray_AliESDCaloCells);
      instance.SetDestructor(&destruct_AliESDCaloCells);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDCaloCells*)
   {
      return GenerateInitInstanceLocal((::AliESDCaloCells*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDCaloCells*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDCaloCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDCaloCluster(void *p = 0);
   static void *newArray_AliESDCaloCluster(Long_t size, void *p);
   static void delete_AliESDCaloCluster(void *p);
   static void deleteArray_AliESDCaloCluster(void *p);
   static void destruct_AliESDCaloCluster(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDCaloCluster*)
   {
      ::AliESDCaloCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDCaloCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDCaloCluster", ::AliESDCaloCluster::Class_Version(), "./AliESDCaloCluster.h", 28,
                  typeid(::AliESDCaloCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDCaloCluster::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDCaloCluster) );
      instance.SetNew(&new_AliESDCaloCluster);
      instance.SetNewArray(&newArray_AliESDCaloCluster);
      instance.SetDelete(&delete_AliESDCaloCluster);
      instance.SetDeleteArray(&deleteArray_AliESDCaloCluster);
      instance.SetDestructor(&destruct_AliESDCaloCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDCaloCluster*)
   {
      return GenerateInitInstanceLocal((::AliESDCaloCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDCaloCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDCaloTrigger_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDCaloTrigger(void *p = 0);
   static void *newArray_AliESDCaloTrigger(Long_t size, void *p);
   static void delete_AliESDCaloTrigger(void *p);
   static void deleteArray_AliESDCaloTrigger(void *p);
   static void destruct_AliESDCaloTrigger(void *p);

   // Schema evolution read functions
   static void read_AliESDCaloTrigger_0( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fNEntries = oldObj->GetId("fNEntries");
      static Int_t id_fColumn = oldObj->GetId("fColumn");
      static Int_t id_fRow = oldObj->GetId("fRow");
      static Int_t id_fTriggerBits = oldObj->GetId("fTriggerBits");
#endif
      struct AliESDCaloTrigger_Onfile {
         Int_t &fNEntries;
         Int_t * &fColumn;
         Int_t * &fRow;
         typedef Char_t onfile_fTriggerBits_t[48][64];
         onfile_fTriggerBits_t &fTriggerBits;
         AliESDCaloTrigger_Onfile(Int_t &onfile_fNEntries, Int_t * &onfile_fColumn, Int_t * &onfile_fRow,  onfile_fTriggerBits_t &onfile_fTriggerBits ): fNEntries(onfile_fNEntries), fColumn(onfile_fColumn), fRow(onfile_fRow), fTriggerBits(onfile_fTriggerBits) {}
      };
      static Long_t offset_Onfile_AliESDCaloTrigger_fNEntries = oldObj->GetClass()->GetDataMemberOffset("fNEntries");
      static Long_t offset_Onfile_AliESDCaloTrigger_fColumn = oldObj->GetClass()->GetDataMemberOffset("fColumn");
      static Long_t offset_Onfile_AliESDCaloTrigger_fRow = oldObj->GetClass()->GetDataMemberOffset("fRow");
      static Long_t offset_Onfile_AliESDCaloTrigger_fTriggerBits = oldObj->GetClass()->GetDataMemberOffset("fTriggerBits");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDCaloTrigger_Onfile onfile(
         *(Int_t*)(onfile_add+offset_Onfile_AliESDCaloTrigger_fNEntries),
         *(Int_t **)(onfile_add+offset_Onfile_AliESDCaloTrigger_fColumn),
         *(Int_t **)(onfile_add+offset_Onfile_AliESDCaloTrigger_fRow),
         *(AliESDCaloTrigger_Onfile::onfile_fTriggerBits_t*)(onfile_add+offset_Onfile_AliESDCaloTrigger_fTriggerBits) );

      static TClassRef cls("AliESDCaloTrigger");
      static Long_t offset_fTriggerBits = cls->GetDataMemberOffset("fTriggerBits");
      Int_t*& fTriggerBits = *(Int_t**)(target+offset_fTriggerBits);
      AliESDCaloTrigger* newObj = (AliESDCaloTrigger*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTriggerBits = new Int_t[onfile.fNEntries]; for (Int_t i=0; i<onfile.fNEntries; ++i) fTriggerBits[i]=(onfile.fColumn && onfile.fRow)?onfile.fTriggerBits[onfile.fColumn[i]][onfile.fRow[i]]:0;
   }

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDCaloTrigger*)
   {
      ::AliESDCaloTrigger *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDCaloTrigger >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDCaloTrigger", ::AliESDCaloTrigger::Class_Version(), "./AliESDCaloTrigger.h", 19,
                  typeid(::AliESDCaloTrigger), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDCaloTrigger::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDCaloTrigger) );
      instance.SetNew(&new_AliESDCaloTrigger);
      instance.SetNewArray(&newArray_AliESDCaloTrigger);
      instance.SetDelete(&delete_AliESDCaloTrigger);
      instance.SetDeleteArray(&deleteArray_AliESDCaloTrigger);
      instance.SetDestructor(&destruct_AliESDCaloTrigger);

      ROOT::TSchemaHelper* rule;

      // the io read rules
      std::vector<ROOT::TSchemaHelper> readrules(1);
      rule = &readrules[0];
      rule->fSourceClass = "AliESDCaloTrigger";
      rule->fTarget      = "fTriggerBits";
      rule->fSource      = "Int_t fNEntries; Int_t * fColumn; Int_t * fRow; Char_t fTriggerBits[48][64]";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDCaloTrigger_0);
      rule->fCode        = "fTriggerBits = new Int_t[onfile.fNEntries]; for (Int_t i=0; i<onfile.fNEntries; ++i) fTriggerBits[i]=(onfile.fColumn && onfile.fRow)?onfile.fTriggerBits[onfile.fColumn[i]][onfile.fRow[i]]:0;";
      rule->fVersion     = "[2]";
      instance.SetReadRules( readrules );
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDCaloTrigger*)
   {
      return GenerateInitInstanceLocal((::AliESDCaloTrigger*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDCaloTrigger*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDVertex(void *p = 0);
   static void *newArray_AliESDVertex(Long_t size, void *p);
   static void delete_AliESDVertex(void *p);
   static void deleteArray_AliESDVertex(void *p);
   static void destruct_AliESDVertex(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDVertex*)
   {
      ::AliESDVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDVertex", ::AliESDVertex::Class_Version(), "./AliESDVertex.h", 34,
                  typeid(::AliESDVertex), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDVertex::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDVertex) );
      instance.SetNew(&new_AliESDVertex);
      instance.SetNewArray(&newArray_AliESDVertex);
      instance.SetDelete(&delete_AliESDVertex);
      instance.SetDeleteArray(&deleteArray_AliESDVertex);
      instance.SetDestructor(&destruct_AliESDVertex);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDVertex*)
   {
      return GenerateInitInstanceLocal((::AliESDVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDV0Params_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDV0Params(void *p = 0);
   static void *newArray_AliESDV0Params(Long_t size, void *p);
   static void delete_AliESDV0Params(void *p);
   static void deleteArray_AliESDV0Params(void *p);
   static void destruct_AliESDV0Params(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDV0Params*)
   {
      ::AliESDV0Params *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDV0Params >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDV0Params", ::AliESDV0Params::Class_Version(), "./AliESDV0Params.h", 16,
                  typeid(::AliESDV0Params), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDV0Params::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDV0Params) );
      instance.SetNew(&new_AliESDV0Params);
      instance.SetNewArray(&newArray_AliESDV0Params);
      instance.SetDelete(&delete_AliESDV0Params);
      instance.SetDeleteArray(&deleteArray_AliESDV0Params);
      instance.SetDestructor(&destruct_AliESDV0Params);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDV0Params*)
   {
      return GenerateInitInstanceLocal((::AliESDV0Params*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDV0Params*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDcascade_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDcascade(void *p = 0);
   static void *newArray_AliESDcascade(Long_t size, void *p);
   static void delete_AliESDcascade(void *p);
   static void deleteArray_AliESDcascade(void *p);
   static void destruct_AliESDcascade(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDcascade*)
   {
      ::AliESDcascade *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDcascade >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDcascade", ::AliESDcascade::Class_Version(), "./AliESDcascade.h", 23,
                  typeid(::AliESDcascade), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDcascade::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDcascade) );
      instance.SetNew(&new_AliESDcascade);
      instance.SetNewArray(&newArray_AliESDcascade);
      instance.SetDelete(&delete_AliESDcascade);
      instance.SetDeleteArray(&deleteArray_AliESDcascade);
      instance.SetDestructor(&destruct_AliESDcascade);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDcascade*)
   {
      return GenerateInitInstanceLocal((::AliESDcascade*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDcascade*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDCosmicTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDCosmicTrack(void *p = 0);
   static void *newArray_AliESDCosmicTrack(Long_t size, void *p);
   static void delete_AliESDCosmicTrack(void *p);
   static void deleteArray_AliESDCosmicTrack(void *p);
   static void destruct_AliESDCosmicTrack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDCosmicTrack*)
   {
      ::AliESDCosmicTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDCosmicTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDCosmicTrack", ::AliESDCosmicTrack::Class_Version(), "./AliESDCosmicTrack.h", 37,
                  typeid(::AliESDCosmicTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDCosmicTrack::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDCosmicTrack) );
      instance.SetNew(&new_AliESDCosmicTrack);
      instance.SetNewArray(&newArray_AliESDCosmicTrack);
      instance.SetDelete(&delete_AliESDCosmicTrack);
      instance.SetDeleteArray(&deleteArray_AliESDCosmicTrack);
      instance.SetDestructor(&destruct_AliESDCosmicTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDCosmicTrack*)
   {
      return GenerateInitInstanceLocal((::AliESDCosmicTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDCosmicTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDMuonTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDMuonTrack(void *p = 0);
   static void *newArray_AliESDMuonTrack(Long_t size, void *p);
   static void delete_AliESDMuonTrack(void *p);
   static void deleteArray_AliESDMuonTrack(void *p);
   static void destruct_AliESDMuonTrack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDMuonTrack*)
   {
      ::AliESDMuonTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDMuonTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDMuonTrack", ::AliESDMuonTrack::Class_Version(), "./AliESDMuonTrack.h", 25,
                  typeid(::AliESDMuonTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDMuonTrack::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDMuonTrack) );
      instance.SetNew(&new_AliESDMuonTrack);
      instance.SetNewArray(&newArray_AliESDMuonTrack);
      instance.SetDelete(&delete_AliESDMuonTrack);
      instance.SetDeleteArray(&deleteArray_AliESDMuonTrack);
      instance.SetDestructor(&destruct_AliESDMuonTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDMuonTrack*)
   {
      return GenerateInitInstanceLocal((::AliESDMuonTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDMuonTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDPmdTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDPmdTrack(void *p = 0);
   static void *newArray_AliESDPmdTrack(Long_t size, void *p);
   static void delete_AliESDPmdTrack(void *p);
   static void deleteArray_AliESDPmdTrack(void *p);
   static void destruct_AliESDPmdTrack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDPmdTrack*)
   {
      ::AliESDPmdTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDPmdTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDPmdTrack", ::AliESDPmdTrack::Class_Version(), "./AliESDPmdTrack.h", 15,
                  typeid(::AliESDPmdTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDPmdTrack::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDPmdTrack) );
      instance.SetNew(&new_AliESDPmdTrack);
      instance.SetNewArray(&newArray_AliESDPmdTrack);
      instance.SetDelete(&delete_AliESDPmdTrack);
      instance.SetDeleteArray(&deleteArray_AliESDPmdTrack);
      instance.SetDestructor(&destruct_AliESDPmdTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDPmdTrack*)
   {
      return GenerateInitInstanceLocal((::AliESDPmdTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDPmdTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDTrdTracklet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDTrdTracklet(void *p = 0);
   static void *newArray_AliESDTrdTracklet(Long_t size, void *p);
   static void delete_AliESDTrdTracklet(void *p);
   static void deleteArray_AliESDTrdTracklet(void *p);
   static void destruct_AliESDTrdTracklet(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDTrdTracklet*)
   {
      ::AliESDTrdTracklet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDTrdTracklet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDTrdTracklet", ::AliESDTrdTracklet::Class_Version(), "./AliESDTrdTracklet.h", 12,
                  typeid(::AliESDTrdTracklet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDTrdTracklet::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDTrdTracklet) );
      instance.SetNew(&new_AliESDTrdTracklet);
      instance.SetNewArray(&newArray_AliESDTrdTracklet);
      instance.SetDelete(&delete_AliESDTrdTracklet);
      instance.SetDeleteArray(&deleteArray_AliESDTrdTracklet);
      instance.SetDestructor(&destruct_AliESDTrdTracklet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDTrdTracklet*)
   {
      return GenerateInitInstanceLocal((::AliESDTrdTracklet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDTrdTracklet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDTOFHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDTOFHit(void *p = 0);
   static void *newArray_AliESDTOFHit(Long_t size, void *p);
   static void delete_AliESDTOFHit(void *p);
   static void deleteArray_AliESDTOFHit(void *p);
   static void destruct_AliESDTOFHit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDTOFHit*)
   {
      ::AliESDTOFHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDTOFHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDTOFHit", ::AliESDTOFHit::Class_Version(), "./AliESDTOFHit.h", 18,
                  typeid(::AliESDTOFHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDTOFHit::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDTOFHit) );
      instance.SetNew(&new_AliESDTOFHit);
      instance.SetNewArray(&newArray_AliESDTOFHit);
      instance.SetDelete(&delete_AliESDTOFHit);
      instance.SetDeleteArray(&deleteArray_AliESDTOFHit);
      instance.SetDestructor(&destruct_AliESDTOFHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDTOFHit*)
   {
      return GenerateInitInstanceLocal((::AliESDTOFHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDTOFHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDTOFMatch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDTOFMatch(void *p = 0);
   static void *newArray_AliESDTOFMatch(Long_t size, void *p);
   static void delete_AliESDTOFMatch(void *p);
   static void deleteArray_AliESDTOFMatch(void *p);
   static void destruct_AliESDTOFMatch(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDTOFMatch*)
   {
      ::AliESDTOFMatch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDTOFMatch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDTOFMatch", ::AliESDTOFMatch::Class_Version(), "./AliESDTOFMatch.h", 18,
                  typeid(::AliESDTOFMatch), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDTOFMatch::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDTOFMatch) );
      instance.SetNew(&new_AliESDTOFMatch);
      instance.SetNewArray(&newArray_AliESDTOFMatch);
      instance.SetDelete(&delete_AliESDTOFMatch);
      instance.SetDeleteArray(&deleteArray_AliESDTOFMatch);
      instance.SetDestructor(&destruct_AliESDTOFMatch);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDTOFMatch*)
   {
      return GenerateInitInstanceLocal((::AliESDTOFMatch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDTOFMatch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDTOFCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDTOFCluster(void *p = 0);
   static void *newArray_AliESDTOFCluster(Long_t size, void *p);
   static void delete_AliESDTOFCluster(void *p);
   static void deleteArray_AliESDTOFCluster(void *p);
   static void destruct_AliESDTOFCluster(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDTOFCluster*)
   {
      ::AliESDTOFCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDTOFCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDTOFCluster", ::AliESDTOFCluster::Class_Version(), "./AliESDTOFCluster.h", 21,
                  typeid(::AliESDTOFCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDTOFCluster::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDTOFCluster) );
      instance.SetNew(&new_AliESDTOFCluster);
      instance.SetNewArray(&newArray_AliESDTOFCluster);
      instance.SetDelete(&delete_AliESDTOFCluster);
      instance.SetDeleteArray(&deleteArray_AliESDTOFCluster);
      instance.SetDestructor(&destruct_AliESDTOFCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDTOFCluster*)
   {
      return GenerateInitInstanceLocal((::AliESDTOFCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDTOFCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTrackPointArray_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTrackPointArray(void *p = 0);
   static void *newArray_AliTrackPointArray(Long_t size, void *p);
   static void delete_AliTrackPointArray(void *p);
   static void deleteArray_AliTrackPointArray(void *p);
   static void destruct_AliTrackPointArray(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTrackPointArray*)
   {
      ::AliTrackPointArray *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTrackPointArray >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTrackPointArray", ::AliTrackPointArray::Class_Version(), "./AliTrackPointArray.h", 93,
                  typeid(::AliTrackPointArray), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTrackPointArray::Dictionary, isa_proxy, 4,
                  sizeof(::AliTrackPointArray) );
      instance.SetNew(&new_AliTrackPointArray);
      instance.SetNewArray(&newArray_AliTrackPointArray);
      instance.SetDelete(&delete_AliTrackPointArray);
      instance.SetDeleteArray(&deleteArray_AliTrackPointArray);
      instance.SetDestructor(&destruct_AliTrackPointArray);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTrackPointArray*)
   {
      return GenerateInitInstanceLocal((::AliTrackPointArray*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTrackPointArray*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTrackPoint_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTrackPoint(void *p = 0);
   static void *newArray_AliTrackPoint(Long_t size, void *p);
   static void delete_AliTrackPoint(void *p);
   static void deleteArray_AliTrackPoint(void *p);
   static void destruct_AliTrackPoint(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTrackPoint*)
   {
      ::AliTrackPoint *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTrackPoint >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTrackPoint", ::AliTrackPoint::Class_Version(), "./AliTrackPointArray.h", 21,
                  typeid(::AliTrackPoint), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTrackPoint::Dictionary, isa_proxy, 4,
                  sizeof(::AliTrackPoint) );
      instance.SetNew(&new_AliTrackPoint);
      instance.SetNewArray(&newArray_AliTrackPoint);
      instance.SetDelete(&delete_AliTrackPoint);
      instance.SetDeleteArray(&deleteArray_AliTrackPoint);
      instance.SetDestructor(&destruct_AliTrackPoint);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTrackPoint*)
   {
      return GenerateInitInstanceLocal((::AliTrackPoint*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTrackPoint*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliKalmanTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliKalmanTrack(void *p);
   static void deleteArray_AliKalmanTrack(void *p);
   static void destruct_AliKalmanTrack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliKalmanTrack*)
   {
      ::AliKalmanTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliKalmanTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliKalmanTrack", ::AliKalmanTrack::Class_Version(), "./AliKalmanTrack.h", 21,
                  typeid(::AliKalmanTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliKalmanTrack::Dictionary, isa_proxy, 4,
                  sizeof(::AliKalmanTrack) );
      instance.SetDelete(&delete_AliKalmanTrack);
      instance.SetDeleteArray(&deleteArray_AliKalmanTrack);
      instance.SetDestructor(&destruct_AliKalmanTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliKalmanTrack*)
   {
      return GenerateInitInstanceLocal((::AliKalmanTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliKalmanTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDfriendTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDfriendTrack(void *p = 0);
   static void *newArray_AliESDfriendTrack(Long_t size, void *p);
   static void delete_AliESDfriendTrack(void *p);
   static void deleteArray_AliESDfriendTrack(void *p);
   static void destruct_AliESDfriendTrack(void *p);

   // Schema evolution read functions
   static void read_AliESDfriendTrack_0( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fITSindex = oldObj->GetId("fITSindex");
#endif
      struct AliESDfriendTrack_Onfile {
         Int_t &fITSindex;
         AliESDfriendTrack_Onfile(Int_t &onfile_fITSindex ): fITSindex(onfile_fITSindex) {}
      };
      static Long_t offset_Onfile_AliESDfriendTrack_fITSindex = oldObj->GetClass()->GetDataMemberOffset("fITSindex");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDfriendTrack_Onfile onfile(
         *(Int_t*)(onfile_add+offset_Onfile_AliESDfriendTrack_fITSindex) );

      static TClassRef cls("AliESDfriendTrack");
      static Long_t offset_fnMaxITScluster = cls->GetDataMemberOffset("fnMaxITScluster");
      Int_t& fnMaxITScluster = *(Int_t*)(target+offset_fnMaxITScluster);
      static Long_t offset_fITSindex = cls->GetDataMemberOffset("fITSindex");
      Int_t*& fITSindex = *(Int_t**)(target+offset_fITSindex);
      AliESDfriendTrack* newObj = (AliESDfriendTrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fnMaxITScluster = 12; fITSindex= new Int_t[fnMaxITScluster]; memcpy(fITSindex, &(onfile.fITSindex), fnMaxITScluster*sizeof(Int_t));
   }
   static void read_AliESDfriendTrack_1( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTPCindex = oldObj->GetId("fTPCindex");
#endif
      struct AliESDfriendTrack_Onfile {
         Int_t &fTPCindex;
         AliESDfriendTrack_Onfile(Int_t &onfile_fTPCindex ): fTPCindex(onfile_fTPCindex) {}
      };
      static Long_t offset_Onfile_AliESDfriendTrack_fTPCindex = oldObj->GetClass()->GetDataMemberOffset("fTPCindex");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDfriendTrack_Onfile onfile(
         *(Int_t*)(onfile_add+offset_Onfile_AliESDfriendTrack_fTPCindex) );

      static TClassRef cls("AliESDfriendTrack");
      static Long_t offset_fnMaxTPCcluster = cls->GetDataMemberOffset("fnMaxTPCcluster");
      Int_t& fnMaxTPCcluster = *(Int_t*)(target+offset_fnMaxTPCcluster);
      static Long_t offset_fTPCindex = cls->GetDataMemberOffset("fTPCindex");
      Int_t*& fTPCindex = *(Int_t**)(target+offset_fTPCindex);
      AliESDfriendTrack* newObj = (AliESDfriendTrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fnMaxTPCcluster = 160; fTPCindex= new Int_t[fnMaxTPCcluster]; memcpy(fTPCindex, &(onfile.fTPCindex), fnMaxTPCcluster*sizeof(Int_t));
   }
   static void read_AliESDfriendTrack_2( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTRDindex = oldObj->GetId("fTRDindex");
#endif
      struct AliESDfriendTrack_Onfile {
         Int_t &fTRDindex;
         AliESDfriendTrack_Onfile(Int_t &onfile_fTRDindex ): fTRDindex(onfile_fTRDindex) {}
      };
      static Long_t offset_Onfile_AliESDfriendTrack_fTRDindex = oldObj->GetClass()->GetDataMemberOffset("fTRDindex");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDfriendTrack_Onfile onfile(
         *(Int_t*)(onfile_add+offset_Onfile_AliESDfriendTrack_fTRDindex) );

      static TClassRef cls("AliESDfriendTrack");
      static Long_t offset_fnMaxTRDcluster = cls->GetDataMemberOffset("fnMaxTRDcluster");
      Int_t& fnMaxTRDcluster = *(Int_t*)(target+offset_fnMaxTRDcluster);
      static Long_t offset_fTRDindex = cls->GetDataMemberOffset("fTRDindex");
      Int_t*& fTRDindex = *(Int_t**)(target+offset_fTRDindex);
      AliESDfriendTrack* newObj = (AliESDfriendTrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fnMaxTRDcluster = 180; fTRDindex= new Int_t[fnMaxTRDcluster]; memcpy(fTRDindex, &(onfile.fTRDindex), fnMaxTRDcluster*sizeof(Int_t));
   }

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDfriendTrack*)
   {
      ::AliESDfriendTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDfriendTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDfriendTrack", ::AliESDfriendTrack::Class_Version(), "./AliESDfriendTrack.h", 21,
                  typeid(::AliESDfriendTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDfriendTrack::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDfriendTrack) );
      instance.SetNew(&new_AliESDfriendTrack);
      instance.SetNewArray(&newArray_AliESDfriendTrack);
      instance.SetDelete(&delete_AliESDfriendTrack);
      instance.SetDeleteArray(&deleteArray_AliESDfriendTrack);
      instance.SetDestructor(&destruct_AliESDfriendTrack);

      ROOT::TSchemaHelper* rule;

      // the io read rules
      std::vector<ROOT::TSchemaHelper> readrules(3);
      rule = &readrules[0];
      rule->fSourceClass = "AliESDfriendTrack";
      rule->fTarget      = "fnMaxITScluster, fITSindex";
      rule->fSource      = "Int_t fITSindex";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDfriendTrack_0);
      rule->fCode        = "fnMaxITScluster = 12; fITSindex= new Int_t[fnMaxITScluster]; memcpy(fITSindex, &(onfile.fITSindex), fnMaxITScluster*sizeof(Int_t));";
      rule->fVersion     = "[-3]";
      rule = &readrules[1];
      rule->fSourceClass = "AliESDfriendTrack";
      rule->fTarget      = "fnMaxTPCcluster, fTPCindex";
      rule->fSource      = "Int_t fTPCindex";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDfriendTrack_1);
      rule->fCode        = "fnMaxTPCcluster = 160; fTPCindex= new Int_t[fnMaxTPCcluster]; memcpy(fTPCindex, &(onfile.fTPCindex), fnMaxTPCcluster*sizeof(Int_t));";
      rule->fVersion     = "[-3]";
      rule = &readrules[2];
      rule->fSourceClass = "AliESDfriendTrack";
      rule->fTarget      = "fnMaxTRDcluster, fTRDindex";
      rule->fSource      = "Int_t fTRDindex";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDfriendTrack_2);
      rule->fCode        = "fnMaxTRDcluster = 180; fTRDindex= new Int_t[fnMaxTRDcluster]; memcpy(fTRDindex, &(onfile.fTRDindex), fnMaxTRDcluster*sizeof(Int_t));";
      rule->fVersion     = "[-3]";
      instance.SetReadRules( readrules );
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDfriendTrack*)
   {
      return GenerateInitInstanceLocal((::AliESDfriendTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDfriendTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDtrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDtrack(void *p = 0);
   static void *newArray_AliESDtrack(Long_t size, void *p);
   static void delete_AliESDtrack(void *p);
   static void deleteArray_AliESDtrack(void *p);
   static void destruct_AliESDtrack(void *p);

   // Schema evolution read functions
   static void read_AliESDtrack_0( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTRDpidQuality = oldObj->GetId("fTRDpidQuality");
#endif
      struct AliESDtrack_Onfile {
         UChar_t &fTRDpidQuality;
         AliESDtrack_Onfile(UChar_t &onfile_fTRDpidQuality ): fTRDpidQuality(onfile_fTRDpidQuality) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fTRDpidQuality = oldObj->GetClass()->GetDataMemberOffset("fTRDpidQuality");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(UChar_t*)(onfile_add+offset_Onfile_AliESDtrack_fTRDpidQuality) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fTRDntracklets = cls->GetDataMemberOffset("fTRDntracklets");
      UChar_t& fTRDntracklets = *(UChar_t*)(target+offset_fTRDntracklets);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTRDntracklets=onfile.fTRDpidQuality;
   }
   static void read_AliESDtrack_1( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTOFLabel = oldObj->GetId("fTOFLabel");
#endif
      struct AliESDtrack_Onfile {
         typedef Int_t onfile_fTOFLabel_t[3];
         onfile_fTOFLabel_t &fTOFLabel;
         AliESDtrack_Onfile( onfile_fTOFLabel_t &onfile_fTOFLabel ): fTOFLabel(onfile_fTOFLabel) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fTOFLabel = oldObj->GetClass()->GetDataMemberOffset("fTOFLabel");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(AliESDtrack_Onfile::onfile_fTOFLabel_t*)(onfile_add+offset_Onfile_AliESDtrack_fTOFLabel) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fTOFLabel = cls->GetDataMemberOffset("fTOFLabel");
      Int_t*& fTOFLabel = *(Int_t**)(target+offset_fTOFLabel);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTOFLabel = new Int_t[3];for(Int_t i=0;i < 3;i++) fTOFLabel[i]=onfile.fTOFLabel[i];
   }
   static void read_AliESDtrack_2( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTrackTime = oldObj->GetId("fTrackTime");
#endif
      struct AliESDtrack_Onfile {
         typedef Double32_t onfile_fTrackTime_t[5];
         onfile_fTrackTime_t &fTrackTime;
         AliESDtrack_Onfile( onfile_fTrackTime_t &onfile_fTrackTime ): fTrackTime(onfile_fTrackTime) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fTrackTime = oldObj->GetClass()->GetDataMemberOffset("fTrackTime");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(AliESDtrack_Onfile::onfile_fTrackTime_t*)(onfile_add+offset_Onfile_AliESDtrack_fTrackTime) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fTrackTime = cls->GetDataMemberOffset("fTrackTime");
      Double32_t*& fTrackTime = *(Double32_t**)(target+offset_fTrackTime);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTrackTime = new Double32_t[AliPID::kSPECIESC];for(Int_t isp=AliPID::kSPECIESC;isp--;) fTrackTime[isp]=isp<AliPID::kSPECIES ? onfile.fTrackTime[isp]:0;
   }
   static void read_AliESDtrack_3( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTrackLength = oldObj->GetId("fTrackLength");
#endif
      struct AliESDtrack_Onfile {
         Double32_t &fTrackLength;
         AliESDtrack_Onfile(Double32_t &onfile_fTrackLength ): fTrackLength(onfile_fTrackLength) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fTrackLength = oldObj->GetClass()->GetDataMemberOffset("fTrackLength");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(Double32_t*)(onfile_add+offset_Onfile_AliESDtrack_fTrackLength) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fTrackLength = cls->GetDataMemberOffset("fTrackLength");
      Double32_t& fTrackLength = *(Double32_t*)(target+offset_fTrackLength);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTrackLength=onfile.fTrackLength;
   }
   static void read_AliESDtrack_4( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTOFsignal = oldObj->GetId("fTOFsignal");
#endif
      struct AliESDtrack_Onfile {
         Double32_t &fTOFsignal;
         AliESDtrack_Onfile(Double32_t &onfile_fTOFsignal ): fTOFsignal(onfile_fTOFsignal) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fTOFsignal = oldObj->GetClass()->GetDataMemberOffset("fTOFsignal");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(Double32_t*)(onfile_add+offset_Onfile_AliESDtrack_fTOFsignal) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fTOFsignal = cls->GetDataMemberOffset("fTOFsignal");
      Double32_t& fTOFsignal = *(Double32_t*)(target+offset_fTOFsignal);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTOFsignal=onfile.fTOFsignal;
   }
   static void read_AliESDtrack_5( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTOFsignalToT = oldObj->GetId("fTOFsignalToT");
#endif
      struct AliESDtrack_Onfile {
         Double32_t &fTOFsignalToT;
         AliESDtrack_Onfile(Double32_t &onfile_fTOFsignalToT ): fTOFsignalToT(onfile_fTOFsignalToT) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fTOFsignalToT = oldObj->GetClass()->GetDataMemberOffset("fTOFsignalToT");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(Double32_t*)(onfile_add+offset_Onfile_AliESDtrack_fTOFsignalToT) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fTOFsignalToT = cls->GetDataMemberOffset("fTOFsignalToT");
      Double32_t& fTOFsignalToT = *(Double32_t*)(target+offset_fTOFsignalToT);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTOFsignalToT=onfile.fTOFsignalToT;
   }
   static void read_AliESDtrack_6( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTOFsignalRaw = oldObj->GetId("fTOFsignalRaw");
#endif
      struct AliESDtrack_Onfile {
         Double32_t &fTOFsignalRaw;
         AliESDtrack_Onfile(Double32_t &onfile_fTOFsignalRaw ): fTOFsignalRaw(onfile_fTOFsignalRaw) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fTOFsignalRaw = oldObj->GetClass()->GetDataMemberOffset("fTOFsignalRaw");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(Double32_t*)(onfile_add+offset_Onfile_AliESDtrack_fTOFsignalRaw) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fTOFsignalRaw = cls->GetDataMemberOffset("fTOFsignalRaw");
      Double32_t& fTOFsignalRaw = *(Double32_t*)(target+offset_fTOFsignalRaw);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTOFsignalRaw=onfile.fTOFsignalRaw;
   }
   static void read_AliESDtrack_7( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTOFsignalDx = oldObj->GetId("fTOFsignalDx");
#endif
      struct AliESDtrack_Onfile {
         Double32_t &fTOFsignalDx;
         AliESDtrack_Onfile(Double32_t &onfile_fTOFsignalDx ): fTOFsignalDx(onfile_fTOFsignalDx) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fTOFsignalDx = oldObj->GetClass()->GetDataMemberOffset("fTOFsignalDx");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(Double32_t*)(onfile_add+offset_Onfile_AliESDtrack_fTOFsignalDx) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fTOFsignalDx = cls->GetDataMemberOffset("fTOFsignalDx");
      Double32_t& fTOFsignalDx = *(Double32_t*)(target+offset_fTOFsignalDx);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTOFsignalDx=onfile.fTOFsignalDx;
   }
   static void read_AliESDtrack_8( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTOFsignalDz = oldObj->GetId("fTOFsignalDz");
#endif
      struct AliESDtrack_Onfile {
         Double32_t &fTOFsignalDz;
         AliESDtrack_Onfile(Double32_t &onfile_fTOFsignalDz ): fTOFsignalDz(onfile_fTOFsignalDz) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fTOFsignalDz = oldObj->GetClass()->GetDataMemberOffset("fTOFsignalDz");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(Double32_t*)(onfile_add+offset_Onfile_AliESDtrack_fTOFsignalDz) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fTOFsignalDz = cls->GetDataMemberOffset("fTOFsignalDz");
      Double32_t& fTOFsignalDz = *(Double32_t*)(target+offset_fTOFsignalDz);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTOFsignalDz=onfile.fTOFsignalDz;
   }
   static void read_AliESDtrack_9( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTOFdeltaBC = oldObj->GetId("fTOFdeltaBC");
#endif
      struct AliESDtrack_Onfile {
         Short_t &fTOFdeltaBC;
         AliESDtrack_Onfile(Short_t &onfile_fTOFdeltaBC ): fTOFdeltaBC(onfile_fTOFdeltaBC) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fTOFdeltaBC = oldObj->GetClass()->GetDataMemberOffset("fTOFdeltaBC");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(Short_t*)(onfile_add+offset_Onfile_AliESDtrack_fTOFdeltaBC) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fTOFdeltaBC = cls->GetDataMemberOffset("fTOFdeltaBC");
      Short_t& fTOFdeltaBC = *(Short_t*)(target+offset_fTOFdeltaBC);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTOFdeltaBC=onfile.fTOFdeltaBC;
   }
   static void read_AliESDtrack_10( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTOFl0l1 = oldObj->GetId("fTOFl0l1");
#endif
      struct AliESDtrack_Onfile {
         Short_t &fTOFl0l1;
         AliESDtrack_Onfile(Short_t &onfile_fTOFl0l1 ): fTOFl0l1(onfile_fTOFl0l1) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fTOFl0l1 = oldObj->GetClass()->GetDataMemberOffset("fTOFl0l1");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(Short_t*)(onfile_add+offset_Onfile_AliESDtrack_fTOFl0l1) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fTOFl0l1 = cls->GetDataMemberOffset("fTOFl0l1");
      Short_t& fTOFl0l1 = *(Short_t*)(target+offset_fTOFl0l1);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTOFl0l1=onfile.fTOFl0l1;
   }
   static void read_AliESDtrack_11( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTOFCalChannel = oldObj->GetId("fTOFCalChannel");
#endif
      struct AliESDtrack_Onfile {
         Int_t &fTOFCalChannel;
         AliESDtrack_Onfile(Int_t &onfile_fTOFCalChannel ): fTOFCalChannel(onfile_fTOFCalChannel) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fTOFCalChannel = oldObj->GetClass()->GetDataMemberOffset("fTOFCalChannel");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(Int_t*)(onfile_add+offset_Onfile_AliESDtrack_fTOFCalChannel) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fTOFCalChannel = cls->GetDataMemberOffset("fTOFCalChannel");
      Int_t& fTOFCalChannel = *(Int_t*)(target+offset_fTOFCalChannel);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTOFCalChannel=onfile.fTOFCalChannel;
   }
   static void read_AliESDtrack_12( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fR = oldObj->GetId("fR");
#endif
      struct AliESDtrack_Onfile {
         typedef Double32_t onfile_fR_t[5];
         onfile_fR_t &fR;
         AliESDtrack_Onfile( onfile_fR_t &onfile_fR ): fR(onfile_fR) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fR = oldObj->GetClass()->GetDataMemberOffset("fR");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(AliESDtrack_Onfile::onfile_fR_t*)(onfile_add+offset_Onfile_AliESDtrack_fR) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fR = cls->GetDataMemberOffset("fR");
      Double32_t*& fR = *(Double32_t**)(target+offset_fR);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fR = new Double32_t[AliPID::kSPECIES];for(Int_t isp=5;isp--;) fR[isp]=onfile.fR[isp];
   }
   static void read_AliESDtrack_13( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTPCr = oldObj->GetId("fTPCr");
#endif
      struct AliESDtrack_Onfile {
         typedef Double32_t onfile_fTPCr_t[5];
         onfile_fTPCr_t &fTPCr;
         AliESDtrack_Onfile( onfile_fTPCr_t &onfile_fTPCr ): fTPCr(onfile_fTPCr) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fTPCr = oldObj->GetClass()->GetDataMemberOffset("fTPCr");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(AliESDtrack_Onfile::onfile_fTPCr_t*)(onfile_add+offset_Onfile_AliESDtrack_fTPCr) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fTPCr = cls->GetDataMemberOffset("fTPCr");
      Double32_t*& fTPCr = *(Double32_t**)(target+offset_fTPCr);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTPCr = new Double32_t[AliPID::kSPECIES];for(Int_t isp=5;isp--;) fTPCr[isp]=onfile.fTPCr[isp];
   }
   static void read_AliESDtrack_14( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fITSr = oldObj->GetId("fITSr");
#endif
      struct AliESDtrack_Onfile {
         typedef Double32_t onfile_fITSr_t[5];
         onfile_fITSr_t &fITSr;
         AliESDtrack_Onfile( onfile_fITSr_t &onfile_fITSr ): fITSr(onfile_fITSr) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fITSr = oldObj->GetClass()->GetDataMemberOffset("fITSr");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(AliESDtrack_Onfile::onfile_fITSr_t*)(onfile_add+offset_Onfile_AliESDtrack_fITSr) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fITSr = cls->GetDataMemberOffset("fITSr");
      Double32_t*& fITSr = *(Double32_t**)(target+offset_fITSr);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fITSr = new Double32_t[AliPID::kSPECIES];for(Int_t isp=5;isp--;) fITSr[isp]=onfile.fITSr[isp];
   }
   static void read_AliESDtrack_15( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTRDr = oldObj->GetId("fTRDr");
#endif
      struct AliESDtrack_Onfile {
         typedef Double32_t onfile_fTRDr_t[5];
         onfile_fTRDr_t &fTRDr;
         AliESDtrack_Onfile( onfile_fTRDr_t &onfile_fTRDr ): fTRDr(onfile_fTRDr) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fTRDr = oldObj->GetClass()->GetDataMemberOffset("fTRDr");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(AliESDtrack_Onfile::onfile_fTRDr_t*)(onfile_add+offset_Onfile_AliESDtrack_fTRDr) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fTRDr = cls->GetDataMemberOffset("fTRDr");
      Double32_t*& fTRDr = *(Double32_t**)(target+offset_fTRDr);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTRDr = new Double32_t[AliPID::kSPECIES];for(Int_t isp=5;isp--;) fTRDr[isp]=onfile.fTRDr[isp];
   }
   static void read_AliESDtrack_16( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fTOFr = oldObj->GetId("fTOFr");
#endif
      struct AliESDtrack_Onfile {
         typedef Double32_t onfile_fTOFr_t[5];
         onfile_fTOFr_t &fTOFr;
         AliESDtrack_Onfile( onfile_fTOFr_t &onfile_fTOFr ): fTOFr(onfile_fTOFr) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fTOFr = oldObj->GetClass()->GetDataMemberOffset("fTOFr");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(AliESDtrack_Onfile::onfile_fTOFr_t*)(onfile_add+offset_Onfile_AliESDtrack_fTOFr) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fTOFr = cls->GetDataMemberOffset("fTOFr");
      Double32_t*& fTOFr = *(Double32_t**)(target+offset_fTOFr);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fTOFr = new Double32_t[AliPID::kSPECIES];for(Int_t isp=5;isp--;) fTOFr[isp]=onfile.fTOFr[isp];
   }
   static void read_AliESDtrack_17( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fHMPIDr = oldObj->GetId("fHMPIDr");
#endif
      struct AliESDtrack_Onfile {
         typedef Double32_t onfile_fHMPIDr_t[5];
         onfile_fHMPIDr_t &fHMPIDr;
         AliESDtrack_Onfile( onfile_fHMPIDr_t &onfile_fHMPIDr ): fHMPIDr(onfile_fHMPIDr) {}
      };
      static Long_t offset_Onfile_AliESDtrack_fHMPIDr = oldObj->GetClass()->GetDataMemberOffset("fHMPIDr");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDtrack_Onfile onfile(
         *(AliESDtrack_Onfile::onfile_fHMPIDr_t*)(onfile_add+offset_Onfile_AliESDtrack_fHMPIDr) );

      static TClassRef cls("AliESDtrack");
      static Long_t offset_fHMPIDr = cls->GetDataMemberOffset("fHMPIDr");
      Double32_t*& fHMPIDr = *(Double32_t**)(target+offset_fHMPIDr);
      AliESDtrack* newObj = (AliESDtrack*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fHMPIDr = new Double32_t[AliPID::kSPECIES];for(Int_t isp=5;isp--;) fHMPIDr[isp]=onfile.fHMPIDr[isp];
   }

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDtrack*)
   {
      ::AliESDtrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDtrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDtrack", ::AliESDtrack::Class_Version(), "./AliESDtrack.h", 47,
                  typeid(::AliESDtrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDtrack::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDtrack) );
      instance.SetNew(&new_AliESDtrack);
      instance.SetNewArray(&newArray_AliESDtrack);
      instance.SetDelete(&delete_AliESDtrack);
      instance.SetDeleteArray(&deleteArray_AliESDtrack);
      instance.SetDestructor(&destruct_AliESDtrack);

      ROOT::TSchemaHelper* rule;

      // the io read rules
      std::vector<ROOT::TSchemaHelper> readrules(18);
      rule = &readrules[0];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fTRDntracklets";
      rule->fSource      = "UChar_t fTRDpidQuality";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_0);
      rule->fCode        = "fTRDntracklets=onfile.fTRDpidQuality;";
      rule->fVersion     = "[-47]";
      rule = &readrules[1];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fTOFLabel";
      rule->fSource      = "Int_t fTOFLabel[3]";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_1);
      rule->fCode        = "fTOFLabel = new Int_t[3];for(Int_t i=0;i < 3;i++) fTOFLabel[i]=onfile.fTOFLabel[i];";
      rule->fVersion     = "[-68]";
      rule = &readrules[2];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fTrackTime";
      rule->fSource      = "Double32_t fTrackTime[5]";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_2);
      rule->fCode        = "fTrackTime = new Double32_t[AliPID::kSPECIESC];for(Int_t isp=AliPID::kSPECIESC;isp--;) fTrackTime[isp]=isp<AliPID::kSPECIES ? onfile.fTrackTime[isp]:0;";
      rule->fVersion     = "[-68]";
      rule->fInclude     = "AliPID.h";
      rule = &readrules[3];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fTrackLength";
      rule->fSource      = "Double32_t fTrackLength";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_3);
      rule->fCode        = "fTrackLength=onfile.fTrackLength;";
      rule->fVersion     = "[-68]";
      rule = &readrules[4];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fTOFsignal";
      rule->fSource      = "Double32_t fTOFsignal";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_4);
      rule->fCode        = "fTOFsignal=onfile.fTOFsignal;";
      rule->fVersion     = "[-68]";
      rule = &readrules[5];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fTOFsignalToT";
      rule->fSource      = "Double32_t fTOFsignalToT";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_5);
      rule->fCode        = "fTOFsignalToT=onfile.fTOFsignalToT;";
      rule->fVersion     = "[-68]";
      rule = &readrules[6];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fTOFsignalRaw";
      rule->fSource      = "Double32_t fTOFsignalRaw";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_6);
      rule->fCode        = "fTOFsignalRaw=onfile.fTOFsignalRaw;";
      rule->fVersion     = "[-68]";
      rule = &readrules[7];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fTOFsignalDx";
      rule->fSource      = "Double32_t fTOFsignalDx";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_7);
      rule->fCode        = "fTOFsignalDx=onfile.fTOFsignalDx;";
      rule->fVersion     = "[-68]";
      rule = &readrules[8];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fTOFsignalDz";
      rule->fSource      = "Double32_t fTOFsignalDz";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_8);
      rule->fCode        = "fTOFsignalDz=onfile.fTOFsignalDz;";
      rule->fVersion     = "[-68]";
      rule = &readrules[9];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fTOFdeltaBC";
      rule->fSource      = "Short_t fTOFdeltaBC";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_9);
      rule->fCode        = "fTOFdeltaBC=onfile.fTOFdeltaBC;";
      rule->fVersion     = "[-68]";
      rule = &readrules[10];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fTOFl0l1";
      rule->fSource      = "Short_t fTOFl0l1";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_10);
      rule->fCode        = "fTOFl0l1=onfile.fTOFl0l1;";
      rule->fVersion     = "[-68]";
      rule = &readrules[11];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fTOFCalChannel";
      rule->fSource      = "Int_t fTOFCalChannel";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_11);
      rule->fCode        = "fTOFCalChannel=onfile.fTOFCalChannel;";
      rule->fVersion     = "[-68]";
      rule = &readrules[12];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fR";
      rule->fSource      = "Double32_t fR[5]";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_12);
      rule->fCode        = "fR = new Double32_t[AliPID::kSPECIES];for(Int_t isp=5;isp--;) fR[isp]=onfile.fR[isp];";
      rule->fVersion     = "[-70]";
      rule->fInclude     = "AliPID.h";
      rule = &readrules[13];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fTPCr";
      rule->fSource      = "Double32_t fTPCr[5]";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_13);
      rule->fCode        = "fTPCr = new Double32_t[AliPID::kSPECIES];for(Int_t isp=5;isp--;) fTPCr[isp]=onfile.fTPCr[isp];";
      rule->fVersion     = "[-70]";
      rule->fInclude     = "AliPID.h";
      rule = &readrules[14];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fITSr";
      rule->fSource      = "Double32_t fITSr[5]";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_14);
      rule->fCode        = "fITSr = new Double32_t[AliPID::kSPECIES];for(Int_t isp=5;isp--;) fITSr[isp]=onfile.fITSr[isp];";
      rule->fVersion     = "[-70]";
      rule->fInclude     = "AliPID.h";
      rule = &readrules[15];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fTRDr";
      rule->fSource      = "Double32_t fTRDr[5]";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_15);
      rule->fCode        = "fTRDr = new Double32_t[AliPID::kSPECIES];for(Int_t isp=5;isp--;) fTRDr[isp]=onfile.fTRDr[isp];";
      rule->fVersion     = "[-70]";
      rule->fInclude     = "AliPID.h";
      rule = &readrules[16];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fTOFr";
      rule->fSource      = "Double32_t fTOFr[5]";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_16);
      rule->fCode        = "fTOFr = new Double32_t[AliPID::kSPECIES];for(Int_t isp=5;isp--;) fTOFr[isp]=onfile.fTOFr[isp];";
      rule->fVersion     = "[-70]";
      rule->fInclude     = "AliPID.h";
      rule = &readrules[17];
      rule->fSourceClass = "AliESDtrack";
      rule->fTarget      = "fHMPIDr";
      rule->fSource      = "Double32_t fHMPIDr[5]";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDtrack_17);
      rule->fCode        = "fHMPIDr = new Double32_t[AliPID::kSPECIES];for(Int_t isp=5;isp--;) fHMPIDr[isp]=onfile.fHMPIDr[isp];";
      rule->fVersion     = "[-70]";
      rule->fInclude     = "AliPID.h";
      instance.SetReadRules( readrules );
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDtrack*)
   {
      return GenerateInitInstanceLocal((::AliESDtrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDtrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDTrdTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDTrdTrack(void *p = 0);
   static void *newArray_AliESDTrdTrack(Long_t size, void *p);
   static void delete_AliESDTrdTrack(void *p);
   static void deleteArray_AliESDTrdTrack(void *p);
   static void destruct_AliESDTrdTrack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDTrdTrack*)
   {
      ::AliESDTrdTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDTrdTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDTrdTrack", ::AliESDTrdTrack::Class_Version(), "./AliESDTrdTrack.h", 15,
                  typeid(::AliESDTrdTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDTrdTrack::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDTrdTrack) );
      instance.SetNew(&new_AliESDTrdTrack);
      instance.SetNewArray(&newArray_AliESDTrdTrack);
      instance.SetDelete(&delete_AliESDTrdTrack);
      instance.SetDeleteArray(&deleteArray_AliESDTrdTrack);
      instance.SetDestructor(&destruct_AliESDTrdTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDTrdTrack*)
   {
      return GenerateInitInstanceLocal((::AliESDTrdTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDTrdTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliVertex(void *p = 0);
   static void *newArray_AliVertex(Long_t size, void *p);
   static void delete_AliVertex(void *p);
   static void deleteArray_AliVertex(void *p);
   static void destruct_AliVertex(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVertex*)
   {
      ::AliVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVertex", ::AliVertex::Class_Version(), "./AliVertex.h", 16,
                  typeid(::AliVertex), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVertex::Dictionary, isa_proxy, 4,
                  sizeof(::AliVertex) );
      instance.SetNew(&new_AliVertex);
      instance.SetNewArray(&newArray_AliVertex);
      instance.SetDelete(&delete_AliVertex);
      instance.SetDeleteArray(&deleteArray_AliVertex);
      instance.SetDestructor(&destruct_AliVertex);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVertex*)
   {
      return GenerateInitInstanceLocal((::AliVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDkink_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDkink(void *p = 0);
   static void *newArray_AliESDkink(Long_t size, void *p);
   static void delete_AliESDkink(void *p);
   static void deleteArray_AliESDkink(void *p);
   static void destruct_AliESDkink(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDkink*)
   {
      ::AliESDkink *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDkink >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDkink", ::AliESDkink::Class_Version(), "./AliESDkink.h", 21,
                  typeid(::AliESDkink), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDkink::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDkink) );
      instance.SetNew(&new_AliESDkink);
      instance.SetNewArray(&newArray_AliESDkink);
      instance.SetDelete(&delete_AliESDkink);
      instance.SetDeleteArray(&deleteArray_AliESDkink);
      instance.SetDestructor(&destruct_AliESDkink);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDkink*)
   {
      return GenerateInitInstanceLocal((::AliESDkink*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDkink*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDHLTtrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDHLTtrack(void *p = 0);
   static void *newArray_AliESDHLTtrack(Long_t size, void *p);
   static void delete_AliESDHLTtrack(void *p);
   static void deleteArray_AliESDHLTtrack(void *p);
   static void destruct_AliESDHLTtrack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDHLTtrack*)
   {
      ::AliESDHLTtrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDHLTtrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDHLTtrack", ::AliESDHLTtrack::Class_Version(), "./AliESDHLTtrack.h", 14,
                  typeid(::AliESDHLTtrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDHLTtrack::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDHLTtrack) );
      instance.SetNew(&new_AliESDHLTtrack);
      instance.SetNewArray(&newArray_AliESDHLTtrack);
      instance.SetDelete(&delete_AliESDHLTtrack);
      instance.SetDeleteArray(&deleteArray_AliESDHLTtrack);
      instance.SetDestructor(&destruct_AliESDHLTtrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDHLTtrack*)
   {
      return GenerateInitInstanceLocal((::AliESDHLTtrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDHLTtrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliFMDMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliFMDMap(void *p);
   static void deleteArray_AliFMDMap(void *p);
   static void destruct_AliFMDMap(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliFMDMap*)
   {
      ::AliFMDMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliFMDMap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliFMDMap", ::AliFMDMap::Class_Version(), "./AliFMDMap.h", 20,
                  typeid(::AliFMDMap), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliFMDMap::Dictionary, isa_proxy, 4,
                  sizeof(::AliFMDMap) );
      instance.SetDelete(&delete_AliFMDMap);
      instance.SetDeleteArray(&deleteArray_AliFMDMap);
      instance.SetDestructor(&destruct_AliFMDMap);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliFMDMap*)
   {
      return GenerateInitInstanceLocal((::AliFMDMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliFMDMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliFMDFloatMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliFMDFloatMap(void *p = 0);
   static void *newArray_AliFMDFloatMap(Long_t size, void *p);
   static void delete_AliFMDFloatMap(void *p);
   static void deleteArray_AliFMDFloatMap(void *p);
   static void destruct_AliFMDFloatMap(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliFMDFloatMap*)
   {
      ::AliFMDFloatMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliFMDFloatMap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliFMDFloatMap", ::AliFMDFloatMap::Class_Version(), "./AliFMDFloatMap.h", 21,
                  typeid(::AliFMDFloatMap), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliFMDFloatMap::Dictionary, isa_proxy, 4,
                  sizeof(::AliFMDFloatMap) );
      instance.SetNew(&new_AliFMDFloatMap);
      instance.SetNewArray(&newArray_AliFMDFloatMap);
      instance.SetDelete(&delete_AliFMDFloatMap);
      instance.SetDeleteArray(&deleteArray_AliFMDFloatMap);
      instance.SetDestructor(&destruct_AliFMDFloatMap);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliFMDFloatMap*)
   {
      return GenerateInitInstanceLocal((::AliFMDFloatMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliFMDFloatMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDFMD_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDFMD(void *p = 0);
   static void *newArray_AliESDFMD(Long_t size, void *p);
   static void delete_AliESDFMD(void *p);
   static void deleteArray_AliESDFMD(void *p);
   static void destruct_AliESDFMD(void *p);

   // Schema evolution read functions
   static void read_AliESDFMD_0( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fNoiseFactor = oldObj->GetId("fNoiseFactor");
#endif
      struct AliESDFMD_Onfile {
         float &fNoiseFactor;
         AliESDFMD_Onfile(float &onfile_fNoiseFactor ): fNoiseFactor(onfile_fNoiseFactor) {}
      };
      static Long_t offset_Onfile_AliESDFMD_fNoiseFactor = oldObj->GetClass()->GetDataMemberOffset("fNoiseFactor");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDFMD_Onfile onfile(
         *(float*)(onfile_add+offset_Onfile_AliESDFMD_fNoiseFactor) );

      static TClassRef cls("AliESDFMD");
      static Long_t offset_fNoiseFactor = cls->GetDataMemberOffset("fNoiseFactor");
      Float_t& fNoiseFactor = *(Float_t*)(target+offset_fNoiseFactor);
      AliESDFMD* newObj = (AliESDFMD*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     newObj->SetNoiseFactor(onfile.fNoiseFactor < 1 ? 4 : onfile.fNoiseFactor);newObj->SetBit(AliESDFMD::kNeedNoiseFix);
   }
   static void read_AliESDFMD_1( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fAngleCorrected = oldObj->GetId("fAngleCorrected");
#endif
      struct AliESDFMD_Onfile {
         bool &fAngleCorrected;
         AliESDFMD_Onfile(bool &onfile_fAngleCorrected ): fAngleCorrected(onfile_fAngleCorrected) {}
      };
      static Long_t offset_Onfile_AliESDFMD_fAngleCorrected = oldObj->GetClass()->GetDataMemberOffset("fAngleCorrected");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDFMD_Onfile onfile(
         *(bool*)(onfile_add+offset_Onfile_AliESDFMD_fAngleCorrected) );

      static TClassRef cls("AliESDFMD");
      static Long_t offset_fAngleCorrected = cls->GetDataMemberOffset("fAngleCorrected");
      Bool_t& fAngleCorrected = *(Bool_t*)(target+offset_fAngleCorrected);
      AliESDFMD* newObj = (AliESDFMD*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     newObj->SetAngleCorrected(onfile.fAngleCorrected ? onfile.fAngleCorrected : true);
   }

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDFMD*)
   {
      ::AliESDFMD *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDFMD >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDFMD", ::AliESDFMD::Class_Version(), "./AliESDFMD.h", 31,
                  typeid(::AliESDFMD), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDFMD::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDFMD) );
      instance.SetNew(&new_AliESDFMD);
      instance.SetNewArray(&newArray_AliESDFMD);
      instance.SetDelete(&delete_AliESDFMD);
      instance.SetDeleteArray(&deleteArray_AliESDFMD);
      instance.SetDestructor(&destruct_AliESDFMD);

      ROOT::TSchemaHelper* rule;

      // the io read rules
      std::vector<ROOT::TSchemaHelper> readrules(2);
      rule = &readrules[0];
      rule->fSourceClass = "AliESDFMD";
      rule->fTarget      = "fNoiseFactor";
      rule->fSource      = "float fNoiseFactor";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDFMD_0);
      rule->fCode        = "newObj->SetNoiseFactor(onfile.fNoiseFactor < 1 ? 4 : onfile.fNoiseFactor);newObj->SetBit(AliESDFMD::kNeedNoiseFix);";
      rule->fVersion     = "[-3]";
      rule = &readrules[1];
      rule->fSourceClass = "AliESDFMD";
      rule->fTarget      = "fAngleCorrected";
      rule->fSource      = "bool fAngleCorrected";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDFMD_1);
      rule->fCode        = "newObj->SetAngleCorrected(onfile.fAngleCorrected ? onfile.fAngleCorrected : true);";
      rule->fVersion     = "[-3]";
      instance.SetReadRules( readrules );
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDFMD*)
   {
      return GenerateInitInstanceLocal((::AliESDFMD*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDFMD*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDVZERO_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDVZERO(void *p = 0);
   static void *newArray_AliESDVZERO(Long_t size, void *p);
   static void delete_AliESDVZERO(void *p);
   static void deleteArray_AliESDVZERO(void *p);
   static void destruct_AliESDVZERO(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDVZERO*)
   {
      ::AliESDVZERO *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDVZERO >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDVZERO", ::AliESDVZERO::Class_Version(), "./AliESDVZERO.h", 12,
                  typeid(::AliESDVZERO), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDVZERO::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDVZERO) );
      instance.SetNew(&new_AliESDVZERO);
      instance.SetNewArray(&newArray_AliESDVZERO);
      instance.SetDelete(&delete_AliESDVZERO);
      instance.SetDeleteArray(&deleteArray_AliESDVZERO);
      instance.SetDestructor(&destruct_AliESDVZERO);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDVZERO*)
   {
      return GenerateInitInstanceLocal((::AliESDVZERO*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDVZERO*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliMultiplicity_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliMultiplicity(void *p = 0);
   static void *newArray_AliMultiplicity(Long_t size, void *p);
   static void delete_AliMultiplicity(void *p);
   static void deleteArray_AliMultiplicity(void *p);
   static void destruct_AliMultiplicity(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliMultiplicity*)
   {
      ::AliMultiplicity *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliMultiplicity >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliMultiplicity", ::AliMultiplicity::Class_Version(), "./AliMultiplicity.h", 14,
                  typeid(::AliMultiplicity), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliMultiplicity::Dictionary, isa_proxy, 4,
                  sizeof(::AliMultiplicity) );
      instance.SetNew(&new_AliMultiplicity);
      instance.SetNewArray(&newArray_AliMultiplicity);
      instance.SetDelete(&delete_AliMultiplicity);
      instance.SetDeleteArray(&deleteArray_AliMultiplicity);
      instance.SetDestructor(&destruct_AliMultiplicity);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliMultiplicity*)
   {
      return GenerateInitInstanceLocal((::AliMultiplicity*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliMultiplicity*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliRawDataErrorLog_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliRawDataErrorLog(void *p = 0);
   static void *newArray_AliRawDataErrorLog(Long_t size, void *p);
   static void delete_AliRawDataErrorLog(void *p);
   static void deleteArray_AliRawDataErrorLog(void *p);
   static void destruct_AliRawDataErrorLog(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliRawDataErrorLog*)
   {
      ::AliRawDataErrorLog *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliRawDataErrorLog >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliRawDataErrorLog", ::AliRawDataErrorLog::Class_Version(), "./AliRawDataErrorLog.h", 23,
                  typeid(::AliRawDataErrorLog), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliRawDataErrorLog::Dictionary, isa_proxy, 4,
                  sizeof(::AliRawDataErrorLog) );
      instance.SetNew(&new_AliRawDataErrorLog);
      instance.SetNewArray(&newArray_AliRawDataErrorLog);
      instance.SetDelete(&delete_AliRawDataErrorLog);
      instance.SetDeleteArray(&deleteArray_AliRawDataErrorLog);
      instance.SetDestructor(&destruct_AliRawDataErrorLog);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliRawDataErrorLog*)
   {
      return GenerateInitInstanceLocal((::AliRawDataErrorLog*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliRawDataErrorLog*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDfriend_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDfriend(void *p = 0);
   static void *newArray_AliESDfriend(Long_t size, void *p);
   static void delete_AliESDfriend(void *p);
   static void deleteArray_AliESDfriend(void *p);
   static void destruct_AliESDfriend(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDfriend*)
   {
      ::AliESDfriend *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDfriend >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDfriend", ::AliESDfriend::Class_Version(), "./AliESDfriend.h", 22,
                  typeid(::AliESDfriend), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDfriend::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDfriend) );
      instance.SetNew(&new_AliESDfriend);
      instance.SetNewArray(&newArray_AliESDfriend);
      instance.SetDelete(&delete_AliESDfriend);
      instance.SetDeleteArray(&deleteArray_AliESDfriend);
      instance.SetDestructor(&destruct_AliESDfriend);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDfriend*)
   {
      return GenerateInitInstanceLocal((::AliESDfriend*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDfriend*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESD_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESD(void *p = 0);
   static void *newArray_AliESD(Long_t size, void *p);
   static void delete_AliESD(void *p);
   static void deleteArray_AliESD(void *p);
   static void destruct_AliESD(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESD*)
   {
      ::AliESD *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESD >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESD", ::AliESD::Class_Version(), "./AliESD.h", 40,
                  typeid(::AliESD), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESD::Dictionary, isa_proxy, 4,
                  sizeof(::AliESD) );
      instance.SetNew(&new_AliESD);
      instance.SetNewArray(&newArray_AliESD);
      instance.SetDelete(&delete_AliESD);
      instance.SetDeleteArray(&deleteArray_AliESD);
      instance.SetDestructor(&destruct_AliESD);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESD*)
   {
      return GenerateInitInstanceLocal((::AliESD*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESD*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDRun_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDRun(void *p = 0);
   static void *newArray_AliESDRun(Long_t size, void *p);
   static void delete_AliESDRun(void *p);
   static void deleteArray_AliESDRun(void *p);
   static void destruct_AliESDRun(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDRun*)
   {
      ::AliESDRun *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDRun >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDRun", ::AliESDRun::Class_Version(), "./AliESDRun.h", 22,
                  typeid(::AliESDRun), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDRun::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDRun) );
      instance.SetNew(&new_AliESDRun);
      instance.SetNewArray(&newArray_AliESDRun);
      instance.SetDelete(&delete_AliESDRun);
      instance.SetDeleteArray(&deleteArray_AliESDRun);
      instance.SetDestructor(&destruct_AliESDRun);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDRun*)
   {
      return GenerateInitInstanceLocal((::AliESDRun*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDRun*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTriggerScalersESD_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTriggerScalersESD(void *p = 0);
   static void *newArray_AliTriggerScalersESD(Long_t size, void *p);
   static void delete_AliTriggerScalersESD(void *p);
   static void deleteArray_AliTriggerScalersESD(void *p);
   static void destruct_AliTriggerScalersESD(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTriggerScalersESD*)
   {
      ::AliTriggerScalersESD *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTriggerScalersESD >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTriggerScalersESD", ::AliTriggerScalersESD::Class_Version(), "./AliTriggerScalersESD.h", 25,
                  typeid(::AliTriggerScalersESD), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTriggerScalersESD::Dictionary, isa_proxy, 4,
                  sizeof(::AliTriggerScalersESD) );
      instance.SetNew(&new_AliTriggerScalersESD);
      instance.SetNewArray(&newArray_AliTriggerScalersESD);
      instance.SetDelete(&delete_AliTriggerScalersESD);
      instance.SetDeleteArray(&deleteArray_AliTriggerScalersESD);
      instance.SetDestructor(&destruct_AliTriggerScalersESD);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTriggerScalersESD*)
   {
      return GenerateInitInstanceLocal((::AliTriggerScalersESD*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTriggerScalersESD*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTriggerScalersRecordESD_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTriggerScalersRecordESD(void *p = 0);
   static void *newArray_AliTriggerScalersRecordESD(Long_t size, void *p);
   static void delete_AliTriggerScalersRecordESD(void *p);
   static void deleteArray_AliTriggerScalersRecordESD(void *p);
   static void destruct_AliTriggerScalersRecordESD(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTriggerScalersRecordESD*)
   {
      ::AliTriggerScalersRecordESD *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTriggerScalersRecordESD >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTriggerScalersRecordESD", ::AliTriggerScalersRecordESD::Class_Version(), "./AliTriggerScalersRecordESD.h", 23,
                  typeid(::AliTriggerScalersRecordESD), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTriggerScalersRecordESD::Dictionary, isa_proxy, 4,
                  sizeof(::AliTriggerScalersRecordESD) );
      instance.SetNew(&new_AliTriggerScalersRecordESD);
      instance.SetNewArray(&newArray_AliTriggerScalersRecordESD);
      instance.SetDelete(&delete_AliTriggerScalersRecordESD);
      instance.SetDeleteArray(&deleteArray_AliTriggerScalersRecordESD);
      instance.SetDestructor(&destruct_AliTriggerScalersRecordESD);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTriggerScalersRecordESD*)
   {
      return GenerateInitInstanceLocal((::AliTriggerScalersRecordESD*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTriggerScalersRecordESD*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTriggerIR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTriggerIR(void *p = 0);
   static void *newArray_AliTriggerIR(Long_t size, void *p);
   static void delete_AliTriggerIR(void *p);
   static void deleteArray_AliTriggerIR(void *p);
   static void destruct_AliTriggerIR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTriggerIR*)
   {
      ::AliTriggerIR *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTriggerIR >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTriggerIR", ::AliTriggerIR::Class_Version(), "./AliTriggerIR.h", 25,
                  typeid(::AliTriggerIR), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTriggerIR::Dictionary, isa_proxy, 4,
                  sizeof(::AliTriggerIR) );
      instance.SetNew(&new_AliTriggerIR);
      instance.SetNewArray(&newArray_AliTriggerIR);
      instance.SetDelete(&delete_AliTriggerIR);
      instance.SetDeleteArray(&deleteArray_AliTriggerIR);
      instance.SetDestructor(&destruct_AliTriggerIR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTriggerIR*)
   {
      return GenerateInitInstanceLocal((::AliTriggerIR*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTriggerIR*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTriggerConfiguration_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTriggerConfiguration(void *p = 0);
   static void *newArray_AliTriggerConfiguration(Long_t size, void *p);
   static void delete_AliTriggerConfiguration(void *p);
   static void deleteArray_AliTriggerConfiguration(void *p);
   static void destruct_AliTriggerConfiguration(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTriggerConfiguration*)
   {
      ::AliTriggerConfiguration *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTriggerConfiguration >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTriggerConfiguration", ::AliTriggerConfiguration::Class_Version(), "./AliTriggerConfiguration.h", 34,
                  typeid(::AliTriggerConfiguration), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTriggerConfiguration::Dictionary, isa_proxy, 4,
                  sizeof(::AliTriggerConfiguration) );
      instance.SetNew(&new_AliTriggerConfiguration);
      instance.SetNewArray(&newArray_AliTriggerConfiguration);
      instance.SetDelete(&delete_AliTriggerConfiguration);
      instance.SetDeleteArray(&deleteArray_AliTriggerConfiguration);
      instance.SetDestructor(&destruct_AliTriggerConfiguration);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTriggerConfiguration*)
   {
      return GenerateInitInstanceLocal((::AliTriggerConfiguration*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTriggerConfiguration*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDHeader(void *p = 0);
   static void *newArray_AliESDHeader(Long_t size, void *p);
   static void delete_AliESDHeader(void *p);
   static void deleteArray_AliESDHeader(void *p);
   static void destruct_AliESDHeader(void *p);

   // Schema evolution read functions
   static void read_AliESDHeader_0( char* target, TVirtualObject *oldObj )
   {
      //--- Automatically generated variables ---
#if 0
      static Int_t id_fIRBufferArray = oldObj->GetId("fIRBufferArray");
#endif
      struct AliESDHeader_Onfile {
         TObjArray &fIRBufferArray;
         AliESDHeader_Onfile(TObjArray &onfile_fIRBufferArray ): fIRBufferArray(onfile_fIRBufferArray) {}
      };
      static Long_t offset_Onfile_AliESDHeader_fIRBufferArray = oldObj->GetClass()->GetDataMemberOffset("fIRBufferArray");
      char *onfile_add = (char*)oldObj->GetObject();
      AliESDHeader_Onfile onfile(
         *(TObjArray*)(onfile_add+offset_Onfile_AliESDHeader_fIRBufferArray) );

      static TClassRef cls("AliESDHeader");
      static Long_t offset_fIRBufferArray = cls->GetDataMemberOffset("fIRBufferArray");
      TObjArray& fIRBufferArray = *(TObjArray*)(target+offset_fIRBufferArray);
      AliESDHeader* newObj = (AliESDHeader*)target;
      // Supress warning message.
      if (oldObj) {}

      if (newObj) {}

      //--- User's code ---
     fIRBufferArray=onfile.fIRBufferArray; fIRBufferArray.SetOwner(kTRUE); onfile.fIRBufferArray.SetOwner(kFALSE);onfile.fIRBufferArray.Clear();
   }

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDHeader*)
   {
      ::AliESDHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDHeader", ::AliESDHeader::Class_Version(), "./AliESDHeader.h", 27,
                  typeid(::AliESDHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDHeader::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDHeader) );
      instance.SetNew(&new_AliESDHeader);
      instance.SetNewArray(&newArray_AliESDHeader);
      instance.SetDelete(&delete_AliESDHeader);
      instance.SetDeleteArray(&deleteArray_AliESDHeader);
      instance.SetDestructor(&destruct_AliESDHeader);

      ROOT::TSchemaHelper* rule;

      // the io read rules
      std::vector<ROOT::TSchemaHelper> readrules(1);
      rule = &readrules[0];
      rule->fSourceClass = "AliESDHeader";
      rule->fTarget      = "fIRBufferArray";
      rule->fSource      = "TObjArray fIRBufferArray";
      rule->fFunctionPtr = (void *)G__func2void( read_AliESDHeader_0);
      rule->fCode        = "fIRBufferArray=onfile.fIRBufferArray; fIRBufferArray.SetOwner(kTRUE); onfile.fIRBufferArray.SetOwner(kFALSE);onfile.fIRBufferArray.Clear();";
      rule->fVersion     = "[10-13]";
      instance.SetReadRules( readrules );
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDHeader*)
   {
      return GenerateInitInstanceLocal((::AliESDHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDTZERO_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDTZERO(void *p = 0);
   static void *newArray_AliESDTZERO(Long_t size, void *p);
   static void delete_AliESDTZERO(void *p);
   static void deleteArray_AliESDTZERO(void *p);
   static void destruct_AliESDTZERO(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDTZERO*)
   {
      ::AliESDTZERO *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDTZERO >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDTZERO", ::AliESDTZERO::Class_Version(), "./AliESDTZERO.h", 21,
                  typeid(::AliESDTZERO), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDTZERO::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDTZERO) );
      instance.SetNew(&new_AliESDTZERO);
      instance.SetNewArray(&newArray_AliESDTZERO);
      instance.SetDelete(&delete_AliESDTZERO);
      instance.SetDeleteArray(&deleteArray_AliESDTZERO);
      instance.SetDestructor(&destruct_AliESDTZERO);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDTZERO*)
   {
      return GenerateInitInstanceLocal((::AliESDTZERO*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDTZERO*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDFIT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDFIT(void *p = 0);
   static void *newArray_AliESDFIT(Long_t size, void *p);
   static void delete_AliESDFIT(void *p);
   static void deleteArray_AliESDFIT(void *p);
   static void destruct_AliESDFIT(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDFIT*)
   {
      ::AliESDFIT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDFIT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDFIT", ::AliESDFIT::Class_Version(), "./AliESDFIT.h", 20,
                  typeid(::AliESDFIT), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDFIT::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDFIT) );
      instance.SetNew(&new_AliESDFIT);
      instance.SetNewArray(&newArray_AliESDFIT);
      instance.SetDelete(&delete_AliESDFIT);
      instance.SetDeleteArray(&deleteArray_AliESDFIT);
      instance.SetDestructor(&destruct_AliESDFIT);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDFIT*)
   {
      return GenerateInitInstanceLocal((::AliESDFIT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDFIT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDZDC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDZDC(void *p = 0);
   static void *newArray_AliESDZDC(Long_t size, void *p);
   static void delete_AliESDZDC(void *p);
   static void deleteArray_AliESDZDC(void *p);
   static void destruct_AliESDZDC(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDZDC*)
   {
      ::AliESDZDC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDZDC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDZDC", ::AliESDZDC::Class_Version(), "./AliESDZDC.h", 18,
                  typeid(::AliESDZDC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDZDC::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDZDC) );
      instance.SetNew(&new_AliESDZDC);
      instance.SetNewArray(&newArray_AliESDZDC);
      instance.SetDelete(&delete_AliESDZDC);
      instance.SetDeleteArray(&deleteArray_AliESDZDC);
      instance.SetDestructor(&destruct_AliESDZDC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDZDC*)
   {
      return GenerateInitInstanceLocal((::AliESDZDC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDZDC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDVZEROfriend_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDVZEROfriend(void *p = 0);
   static void *newArray_AliESDVZEROfriend(Long_t size, void *p);
   static void delete_AliESDVZEROfriend(void *p);
   static void deleteArray_AliESDVZEROfriend(void *p);
   static void destruct_AliESDVZEROfriend(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDVZEROfriend*)
   {
      ::AliESDVZEROfriend *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDVZEROfriend >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDVZEROfriend", ::AliESDVZEROfriend::Class_Version(), "./AliESDVZEROfriend.h", 15,
                  typeid(::AliESDVZEROfriend), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDVZEROfriend::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDVZEROfriend) );
      instance.SetNew(&new_AliESDVZEROfriend);
      instance.SetNewArray(&newArray_AliESDVZEROfriend);
      instance.SetDelete(&delete_AliESDVZEROfriend);
      instance.SetDeleteArray(&deleteArray_AliESDVZEROfriend);
      instance.SetDestructor(&destruct_AliESDVZEROfriend);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDVZEROfriend*)
   {
      return GenerateInitInstanceLocal((::AliESDVZEROfriend*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDVZEROfriend*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDTZEROfriend_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDTZEROfriend(void *p = 0);
   static void *newArray_AliESDTZEROfriend(Long_t size, void *p);
   static void delete_AliESDTZEROfriend(void *p);
   static void deleteArray_AliESDTZEROfriend(void *p);
   static void destruct_AliESDTZEROfriend(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDTZEROfriend*)
   {
      ::AliESDTZEROfriend *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDTZEROfriend >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDTZEROfriend", ::AliESDTZEROfriend::Class_Version(), "./AliESDTZEROfriend.h", 17,
                  typeid(::AliESDTZEROfriend), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDTZEROfriend::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDTZEROfriend) );
      instance.SetNew(&new_AliESDTZEROfriend);
      instance.SetNewArray(&newArray_AliESDTZEROfriend);
      instance.SetDelete(&delete_AliESDTZEROfriend);
      instance.SetDeleteArray(&deleteArray_AliESDTZEROfriend);
      instance.SetDestructor(&destruct_AliESDTZEROfriend);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDTZEROfriend*)
   {
      return GenerateInitInstanceLocal((::AliESDTZEROfriend*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDTZEROfriend*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDTrdTrigger_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDTrdTrigger(void *p = 0);
   static void *newArray_AliESDTrdTrigger(Long_t size, void *p);
   static void delete_AliESDTrdTrigger(void *p);
   static void deleteArray_AliESDTrdTrigger(void *p);
   static void destruct_AliESDTrdTrigger(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDTrdTrigger*)
   {
      ::AliESDTrdTrigger *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDTrdTrigger >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDTrdTrigger", ::AliESDTrdTrigger::Class_Version(), "./AliESDTrdTrigger.h", 7,
                  typeid(::AliESDTrdTrigger), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDTrdTrigger::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDTrdTrigger) );
      instance.SetNew(&new_AliESDTrdTrigger);
      instance.SetNewArray(&newArray_AliESDTrdTrigger);
      instance.SetDelete(&delete_AliESDTrdTrigger);
      instance.SetDeleteArray(&deleteArray_AliESDTrdTrigger);
      instance.SetDestructor(&destruct_AliESDTrdTrigger);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDTrdTrigger*)
   {
      return GenerateInitInstanceLocal((::AliESDTrdTrigger*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDTrdTrigger*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDMuonCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDMuonCluster(void *p = 0);
   static void *newArray_AliESDMuonCluster(Long_t size, void *p);
   static void delete_AliESDMuonCluster(void *p);
   static void deleteArray_AliESDMuonCluster(void *p);
   static void destruct_AliESDMuonCluster(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDMuonCluster*)
   {
      ::AliESDMuonCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDMuonCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDMuonCluster", ::AliESDMuonCluster::Class_Version(), "./AliESDMuonCluster.h", 20,
                  typeid(::AliESDMuonCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDMuonCluster::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDMuonCluster) );
      instance.SetNew(&new_AliESDMuonCluster);
      instance.SetNewArray(&newArray_AliESDMuonCluster);
      instance.SetDelete(&delete_AliESDMuonCluster);
      instance.SetDeleteArray(&deleteArray_AliESDMuonCluster);
      instance.SetDestructor(&destruct_AliESDMuonCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDMuonCluster*)
   {
      return GenerateInitInstanceLocal((::AliESDMuonCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDMuonCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDMuonPad_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDMuonPad(void *p = 0);
   static void *newArray_AliESDMuonPad(Long_t size, void *p);
   static void delete_AliESDMuonPad(void *p);
   static void deleteArray_AliESDMuonPad(void *p);
   static void destruct_AliESDMuonPad(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDMuonPad*)
   {
      ::AliESDMuonPad *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDMuonPad >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDMuonPad", ::AliESDMuonPad::Class_Version(), "./AliESDMuonPad.h", 16,
                  typeid(::AliESDMuonPad), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDMuonPad::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDMuonPad) );
      instance.SetNew(&new_AliESDMuonPad);
      instance.SetNewArray(&newArray_AliESDMuonPad);
      instance.SetDelete(&delete_AliESDMuonPad);
      instance.SetDeleteArray(&deleteArray_AliESDMuonPad);
      instance.SetDestructor(&destruct_AliESDMuonPad);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDMuonPad*)
   {
      return GenerateInitInstanceLocal((::AliESDMuonPad*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDMuonPad*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDMuonGlobalTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDMuonGlobalTrack(void *p = 0);
   static void *newArray_AliESDMuonGlobalTrack(Long_t size, void *p);
   static void delete_AliESDMuonGlobalTrack(void *p);
   static void deleteArray_AliESDMuonGlobalTrack(void *p);
   static void destruct_AliESDMuonGlobalTrack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDMuonGlobalTrack*)
   {
      ::AliESDMuonGlobalTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDMuonGlobalTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDMuonGlobalTrack", ::AliESDMuonGlobalTrack::Class_Version(), "./AliESDMuonGlobalTrack.h", 30,
                  typeid(::AliESDMuonGlobalTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDMuonGlobalTrack::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDMuonGlobalTrack) );
      instance.SetNew(&new_AliESDMuonGlobalTrack);
      instance.SetNewArray(&newArray_AliESDMuonGlobalTrack);
      instance.SetDelete(&delete_AliESDMuonGlobalTrack);
      instance.SetDeleteArray(&deleteArray_AliESDMuonGlobalTrack);
      instance.SetDestructor(&destruct_AliESDMuonGlobalTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDMuonGlobalTrack*)
   {
      return GenerateInitInstanceLocal((::AliESDMuonGlobalTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDMuonGlobalTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDHLTDecision_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDHLTDecision(void *p = 0);
   static void *newArray_AliESDHLTDecision(Long_t size, void *p);
   static void delete_AliESDHLTDecision(void *p);
   static void deleteArray_AliESDHLTDecision(void *p);
   static void destruct_AliESDHLTDecision(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDHLTDecision*)
   {
      ::AliESDHLTDecision *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDHLTDecision >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDHLTDecision", ::AliESDHLTDecision::Class_Version(), "./AliESDHLTDecision.h", 20,
                  typeid(::AliESDHLTDecision), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDHLTDecision::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDHLTDecision) );
      instance.SetNew(&new_AliESDHLTDecision);
      instance.SetNewArray(&newArray_AliESDHLTDecision);
      instance.SetDelete(&delete_AliESDHLTDecision);
      instance.SetDeleteArray(&deleteArray_AliESDHLTDecision);
      instance.SetDestructor(&destruct_AliESDHLTDecision);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDHLTDecision*)
   {
      return GenerateInitInstanceLocal((::AliESDHLTDecision*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDHLTDecision*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDHandler_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDHandler(void *p = 0);
   static void *newArray_AliESDHandler(Long_t size, void *p);
   static void delete_AliESDHandler(void *p);
   static void deleteArray_AliESDHandler(void *p);
   static void destruct_AliESDHandler(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDHandler*)
   {
      ::AliESDHandler *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDHandler >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDHandler", ::AliESDHandler::Class_Version(), "./AliESDHandler.h", 21,
                  typeid(::AliESDHandler), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDHandler::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDHandler) );
      instance.SetNew(&new_AliESDHandler);
      instance.SetNewArray(&newArray_AliESDHandler);
      instance.SetDelete(&delete_AliESDHandler);
      instance.SetDeleteArray(&deleteArray_AliESDHandler);
      instance.SetDestructor(&destruct_AliESDHandler);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDHandler*)
   {
      return GenerateInitInstanceLocal((::AliESDHandler*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDHandler*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDpid_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDpid(void *p = 0);
   static void *newArray_AliESDpid(Long_t size, void *p);
   static void delete_AliESDpid(void *p);
   static void deleteArray_AliESDpid(void *p);
   static void destruct_AliESDpid(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDpid*)
   {
      ::AliESDpid *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDpid >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDpid", ::AliESDpid::Class_Version(), "./AliESDpid.h", 27,
                  typeid(::AliESDpid), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDpid::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDpid) );
      instance.SetNew(&new_AliESDpid);
      instance.SetNewArray(&newArray_AliESDpid);
      instance.SetDelete(&delete_AliESDpid);
      instance.SetDeleteArray(&deleteArray_AliESDpid);
      instance.SetDestructor(&destruct_AliESDpid);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDpid*)
   {
      return GenerateInitInstanceLocal((::AliESDpid*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDpid*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDInputHandler_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDInputHandler(void *p = 0);
   static void *newArray_AliESDInputHandler(Long_t size, void *p);
   static void delete_AliESDInputHandler(void *p);
   static void deleteArray_AliESDInputHandler(void *p);
   static void destruct_AliESDInputHandler(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDInputHandler*)
   {
      ::AliESDInputHandler *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDInputHandler >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDInputHandler", ::AliESDInputHandler::Class_Version(), "./AliESDInputHandler.h", 26,
                  typeid(::AliESDInputHandler), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDInputHandler::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDInputHandler) );
      instance.SetNew(&new_AliESDInputHandler);
      instance.SetNewArray(&newArray_AliESDInputHandler);
      instance.SetDelete(&delete_AliESDInputHandler);
      instance.SetDeleteArray(&deleteArray_AliESDInputHandler);
      instance.SetDestructor(&destruct_AliESDInputHandler);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDInputHandler*)
   {
      return GenerateInitInstanceLocal((::AliESDInputHandler*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDInputHandler*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDInputHandlerRP_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDInputHandlerRP(void *p = 0);
   static void *newArray_AliESDInputHandlerRP(Long_t size, void *p);
   static void delete_AliESDInputHandlerRP(void *p);
   static void deleteArray_AliESDInputHandlerRP(void *p);
   static void destruct_AliESDInputHandlerRP(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDInputHandlerRP*)
   {
      ::AliESDInputHandlerRP *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDInputHandlerRP >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDInputHandlerRP", ::AliESDInputHandlerRP::Class_Version(), "./AliESDInputHandlerRP.h", 21,
                  typeid(::AliESDInputHandlerRP), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDInputHandlerRP::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDInputHandlerRP) );
      instance.SetNew(&new_AliESDInputHandlerRP);
      instance.SetNewArray(&newArray_AliESDInputHandlerRP);
      instance.SetDelete(&delete_AliESDInputHandlerRP);
      instance.SetDeleteArray(&deleteArray_AliESDInputHandlerRP);
      instance.SetDestructor(&destruct_AliESDInputHandlerRP);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDInputHandlerRP*)
   {
      return GenerateInitInstanceLocal((::AliESDInputHandlerRP*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDInputHandlerRP*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliESDMultITS_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliESDMultITS(void *p = 0);
   static void *newArray_AliESDMultITS(Long_t size, void *p);
   static void delete_AliESDMultITS(void *p);
   static void deleteArray_AliESDMultITS(void *p);
   static void destruct_AliESDMultITS(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliESDMultITS*)
   {
      ::AliESDMultITS *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliESDMultITS >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliESDMultITS", ::AliESDMultITS::Class_Version(), "./AliESDMultITS.h", 8,
                  typeid(::AliESDMultITS), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliESDMultITS::Dictionary, isa_proxy, 4,
                  sizeof(::AliESDMultITS) );
      instance.SetNew(&new_AliESDMultITS);
      instance.SetNewArray(&newArray_AliESDMultITS);
      instance.SetDelete(&delete_AliESDMultITS);
      instance.SetDeleteArray(&deleteArray_AliESDMultITS);
      instance.SetDestructor(&destruct_AliESDMultITS);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliESDMultITS*)
   {
      return GenerateInitInstanceLocal((::AliESDMultITS*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliESDMultITS*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVertexerTracks_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliVertexerTracks(void *p = 0);
   static void *newArray_AliVertexerTracks(Long_t size, void *p);
   static void delete_AliVertexerTracks(void *p);
   static void deleteArray_AliVertexerTracks(void *p);
   static void destruct_AliVertexerTracks(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVertexerTracks*)
   {
      ::AliVertexerTracks *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVertexerTracks >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVertexerTracks", ::AliVertexerTracks::Class_Version(), "./AliVertexerTracks.h", 36,
                  typeid(::AliVertexerTracks), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVertexerTracks::Dictionary, isa_proxy, 4,
                  sizeof(::AliVertexerTracks) );
      instance.SetNew(&new_AliVertexerTracks);
      instance.SetNewArray(&newArray_AliVertexerTracks);
      instance.SetDelete(&delete_AliVertexerTracks);
      instance.SetDeleteArray(&deleteArray_AliVertexerTracks);
      instance.SetDestructor(&destruct_AliVertexerTracks);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVertexerTracks*)
   {
      return GenerateInitInstanceLocal((::AliVertexerTracks*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVertexerTracks*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace AliESDUtils {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void AliESDUtils_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("AliESDUtils", 0 /*version*/, "./AliESDUtils.h", 29,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &AliESDUtils_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void AliESDUtils_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOTDict {
   void AliExpression_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliExpression(void *p = 0);
   static void *newArray_AliExpression(Long_t size, void *p);
   static void delete_AliExpression(void *p);
   static void deleteArray_AliExpression(void *p);
   static void destruct_AliExpression(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliExpression*)
   {
      ::AliExpression *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliExpression >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliExpression", ::AliExpression::Class_Version(), "./AliExpression.h", 25,
                  typeid(::AliExpression), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliExpression::Dictionary, isa_proxy, 4,
                  sizeof(::AliExpression) );
      instance.SetNew(&new_AliExpression);
      instance.SetNewArray(&newArray_AliExpression);
      instance.SetDelete(&delete_AliExpression);
      instance.SetDeleteArray(&deleteArray_AliExpression);
      instance.SetDestructor(&destruct_AliExpression);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliExpression*)
   {
      return GenerateInitInstanceLocal((::AliExpression*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliExpression*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliVariableExpression_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliVariableExpression(void *p);
   static void deleteArray_AliVariableExpression(void *p);
   static void destruct_AliVariableExpression(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliVariableExpression*)
   {
      ::AliVariableExpression *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliVariableExpression >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliVariableExpression", ::AliVariableExpression::Class_Version(), "./AliExpression.h", 63,
                  typeid(::AliVariableExpression), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliVariableExpression::Dictionary, isa_proxy, 4,
                  sizeof(::AliVariableExpression) );
      instance.SetDelete(&delete_AliVariableExpression);
      instance.SetDeleteArray(&deleteArray_AliVariableExpression);
      instance.SetDestructor(&destruct_AliVariableExpression);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliVariableExpression*)
   {
      return GenerateInitInstanceLocal((::AliVariableExpression*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliVariableExpression*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliKFParticleBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AliKFParticleBase(void *p);
   static void deleteArray_AliKFParticleBase(void *p);
   static void destruct_AliKFParticleBase(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliKFParticleBase*)
   {
      ::AliKFParticleBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliKFParticleBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliKFParticleBase", ::AliKFParticleBase::Class_Version(), "./AliKFParticleBase.h", 25,
                  typeid(::AliKFParticleBase), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliKFParticleBase::Dictionary, isa_proxy, 4,
                  sizeof(::AliKFParticleBase) );
      instance.SetDelete(&delete_AliKFParticleBase);
      instance.SetDeleteArray(&deleteArray_AliKFParticleBase);
      instance.SetDestructor(&destruct_AliKFParticleBase);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliKFParticleBase*)
   {
      return GenerateInitInstanceLocal((::AliKFParticleBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliKFParticleBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliKFParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliKFParticle(void *p = 0);
   static void *newArray_AliKFParticle(Long_t size, void *p);
   static void delete_AliKFParticle(void *p);
   static void deleteArray_AliKFParticle(void *p);
   static void destruct_AliKFParticle(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliKFParticle*)
   {
      ::AliKFParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliKFParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliKFParticle", ::AliKFParticle::Class_Version(), "./AliKFParticle.h", 29,
                  typeid(::AliKFParticle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliKFParticle::Dictionary, isa_proxy, 4,
                  sizeof(::AliKFParticle) );
      instance.SetNew(&new_AliKFParticle);
      instance.SetNewArray(&newArray_AliKFParticle);
      instance.SetDelete(&delete_AliKFParticle);
      instance.SetDeleteArray(&deleteArray_AliKFParticle);
      instance.SetDestructor(&destruct_AliKFParticle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliKFParticle*)
   {
      return GenerateInitInstanceLocal((::AliKFParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliKFParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliKFVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliKFVertex(void *p = 0);
   static void *newArray_AliKFVertex(Long_t size, void *p);
   static void delete_AliKFVertex(void *p);
   static void deleteArray_AliKFVertex(void *p);
   static void destruct_AliKFVertex(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliKFVertex*)
   {
      ::AliKFVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliKFVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliKFVertex", ::AliKFVertex::Class_Version(), "./AliKFVertex.h", 25,
                  typeid(::AliKFVertex), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliKFVertex::Dictionary, isa_proxy, 4,
                  sizeof(::AliKFVertex) );
      instance.SetNew(&new_AliKFVertex);
      instance.SetNewArray(&newArray_AliKFVertex);
      instance.SetDelete(&delete_AliKFVertex);
      instance.SetDeleteArray(&deleteArray_AliKFVertex);
      instance.SetDestructor(&destruct_AliKFVertex);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliKFVertex*)
   {
      return GenerateInitInstanceLocal((::AliKFVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliKFVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliMeanVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliMeanVertex(void *p = 0);
   static void *newArray_AliMeanVertex(Long_t size, void *p);
   static void delete_AliMeanVertex(void *p);
   static void deleteArray_AliMeanVertex(void *p);
   static void destruct_AliMeanVertex(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliMeanVertex*)
   {
      ::AliMeanVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliMeanVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliMeanVertex", ::AliMeanVertex::Class_Version(), "./AliMeanVertex.h", 15,
                  typeid(::AliMeanVertex), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliMeanVertex::Dictionary, isa_proxy, 4,
                  sizeof(::AliMeanVertex) );
      instance.SetNew(&new_AliMeanVertex);
      instance.SetNewArray(&newArray_AliMeanVertex);
      instance.SetDelete(&delete_AliMeanVertex);
      instance.SetDeleteArray(&deleteArray_AliMeanVertex);
      instance.SetDestructor(&destruct_AliMeanVertex);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliMeanVertex*)
   {
      return GenerateInitInstanceLocal((::AliMeanVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliMeanVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliSelector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliSelector(void *p = 0);
   static void *newArray_AliSelector(Long_t size, void *p);
   static void delete_AliSelector(void *p);
   static void deleteArray_AliSelector(void *p);
   static void destruct_AliSelector(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliSelector*)
   {
      ::AliSelector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliSelector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliSelector", ::AliSelector::Class_Version(), "./AliSelector.h", 16,
                  typeid(::AliSelector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliSelector::Dictionary, isa_proxy, 4,
                  sizeof(::AliSelector) );
      instance.SetNew(&new_AliSelector);
      instance.SetNewArray(&newArray_AliSelector);
      instance.SetDelete(&delete_AliSelector);
      instance.SetDeleteArray(&deleteArray_AliSelector);
      instance.SetDestructor(&destruct_AliSelector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliSelector*)
   {
      return GenerateInitInstanceLocal((::AliSelector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliSelector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliStrLine_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliStrLine(void *p = 0);
   static void *newArray_AliStrLine(Long_t size, void *p);
   static void delete_AliStrLine(void *p);
   static void deleteArray_AliStrLine(void *p);
   static void destruct_AliStrLine(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliStrLine*)
   {
      ::AliStrLine *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliStrLine >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliStrLine", ::AliStrLine::Class_Version(), "./AliStrLine.h", 15,
                  typeid(::AliStrLine), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliStrLine::Dictionary, isa_proxy, 4,
                  sizeof(::AliStrLine) );
      instance.SetNew(&new_AliStrLine);
      instance.SetNewArray(&newArray_AliStrLine);
      instance.SetDelete(&delete_AliStrLine);
      instance.SetDeleteArray(&deleteArray_AliStrLine);
      instance.SetDestructor(&destruct_AliStrLine);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliStrLine*)
   {
      return GenerateInitInstanceLocal((::AliStrLine*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliStrLine*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTrackerBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTrackerBase(void *p = 0);
   static void *newArray_AliTrackerBase(Long_t size, void *p);
   static void delete_AliTrackerBase(void *p);
   static void deleteArray_AliTrackerBase(void *p);
   static void destruct_AliTrackerBase(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTrackerBase*)
   {
      ::AliTrackerBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTrackerBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTrackerBase", ::AliTrackerBase::Class_Version(), "./AliTrackerBase.h", 23,
                  typeid(::AliTrackerBase), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTrackerBase::Dictionary, isa_proxy, 4,
                  sizeof(::AliTrackerBase) );
      instance.SetNew(&new_AliTrackerBase);
      instance.SetNewArray(&newArray_AliTrackerBase);
      instance.SetDelete(&delete_AliTrackerBase);
      instance.SetDeleteArray(&deleteArray_AliTrackerBase);
      instance.SetDestructor(&destruct_AliTrackerBase);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTrackerBase*)
   {
      return GenerateInitInstanceLocal((::AliTrackerBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTrackerBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTriggerBCMask_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTriggerBCMask(void *p = 0);
   static void *newArray_AliTriggerBCMask(Long_t size, void *p);
   static void delete_AliTriggerBCMask(void *p);
   static void deleteArray_AliTriggerBCMask(void *p);
   static void destruct_AliTriggerBCMask(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTriggerBCMask*)
   {
      ::AliTriggerBCMask *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTriggerBCMask >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTriggerBCMask", ::AliTriggerBCMask::Class_Version(), "./AliTriggerBCMask.h", 19,
                  typeid(::AliTriggerBCMask), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTriggerBCMask::Dictionary, isa_proxy, 4,
                  sizeof(::AliTriggerBCMask) );
      instance.SetNew(&new_AliTriggerBCMask);
      instance.SetNewArray(&newArray_AliTriggerBCMask);
      instance.SetDelete(&delete_AliTriggerBCMask);
      instance.SetDeleteArray(&deleteArray_AliTriggerBCMask);
      instance.SetDestructor(&destruct_AliTriggerBCMask);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTriggerBCMask*)
   {
      return GenerateInitInstanceLocal((::AliTriggerBCMask*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTriggerBCMask*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTriggerDescriptor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTriggerDescriptor(void *p = 0);
   static void *newArray_AliTriggerDescriptor(Long_t size, void *p);
   static void delete_AliTriggerDescriptor(void *p);
   static void deleteArray_AliTriggerDescriptor(void *p);
   static void destruct_AliTriggerDescriptor(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTriggerDescriptor*)
   {
      ::AliTriggerDescriptor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTriggerDescriptor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTriggerDescriptor", ::AliTriggerDescriptor::Class_Version(), "./AliTriggerDescriptor.h", 20,
                  typeid(::AliTriggerDescriptor), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTriggerDescriptor::Dictionary, isa_proxy, 4,
                  sizeof(::AliTriggerDescriptor) );
      instance.SetNew(&new_AliTriggerDescriptor);
      instance.SetNewArray(&newArray_AliTriggerDescriptor);
      instance.SetDelete(&delete_AliTriggerDescriptor);
      instance.SetDeleteArray(&deleteArray_AliTriggerDescriptor);
      instance.SetDestructor(&destruct_AliTriggerDescriptor);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTriggerDescriptor*)
   {
      return GenerateInitInstanceLocal((::AliTriggerDescriptor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTriggerDescriptor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTriggerCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTriggerCluster(void *p = 0);
   static void *newArray_AliTriggerCluster(Long_t size, void *p);
   static void delete_AliTriggerCluster(void *p);
   static void deleteArray_AliTriggerCluster(void *p);
   static void destruct_AliTriggerCluster(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTriggerCluster*)
   {
      ::AliTriggerCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTriggerCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTriggerCluster", ::AliTriggerCluster::Class_Version(), "./AliTriggerCluster.h", 19,
                  typeid(::AliTriggerCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTriggerCluster::Dictionary, isa_proxy, 4,
                  sizeof(::AliTriggerCluster) );
      instance.SetNew(&new_AliTriggerCluster);
      instance.SetNewArray(&newArray_AliTriggerCluster);
      instance.SetDelete(&delete_AliTriggerCluster);
      instance.SetDeleteArray(&deleteArray_AliTriggerCluster);
      instance.SetDestructor(&destruct_AliTriggerCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTriggerCluster*)
   {
      return GenerateInitInstanceLocal((::AliTriggerCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTriggerCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTriggerPFProtection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTriggerPFProtection(void *p = 0);
   static void *newArray_AliTriggerPFProtection(Long_t size, void *p);
   static void delete_AliTriggerPFProtection(void *p);
   static void deleteArray_AliTriggerPFProtection(void *p);
   static void destruct_AliTriggerPFProtection(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTriggerPFProtection*)
   {
      ::AliTriggerPFProtection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTriggerPFProtection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTriggerPFProtection", ::AliTriggerPFProtection::Class_Version(), "./AliTriggerPFProtection.h", 30,
                  typeid(::AliTriggerPFProtection), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTriggerPFProtection::Dictionary, isa_proxy, 4,
                  sizeof(::AliTriggerPFProtection) );
      instance.SetNew(&new_AliTriggerPFProtection);
      instance.SetNewArray(&newArray_AliTriggerPFProtection);
      instance.SetDelete(&delete_AliTriggerPFProtection);
      instance.SetDeleteArray(&deleteArray_AliTriggerPFProtection);
      instance.SetDestructor(&destruct_AliTriggerPFProtection);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTriggerPFProtection*)
   {
      return GenerateInitInstanceLocal((::AliTriggerPFProtection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTriggerPFProtection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTriggerClass_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTriggerClass(void *p = 0);
   static void *newArray_AliTriggerClass(Long_t size, void *p);
   static void delete_AliTriggerClass(void *p);
   static void deleteArray_AliTriggerClass(void *p);
   static void destruct_AliTriggerClass(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTriggerClass*)
   {
      ::AliTriggerClass *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTriggerClass >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTriggerClass", ::AliTriggerClass::Class_Version(), "./AliTriggerClass.h", 26,
                  typeid(::AliTriggerClass), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTriggerClass::Dictionary, isa_proxy, 4,
                  sizeof(::AliTriggerClass) );
      instance.SetNew(&new_AliTriggerClass);
      instance.SetNewArray(&newArray_AliTriggerClass);
      instance.SetDelete(&delete_AliTriggerClass);
      instance.SetDeleteArray(&deleteArray_AliTriggerClass);
      instance.SetDestructor(&destruct_AliTriggerClass);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTriggerClass*)
   {
      return GenerateInitInstanceLocal((::AliTriggerClass*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTriggerClass*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTriggerInput_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTriggerInput(void *p = 0);
   static void *newArray_AliTriggerInput(Long_t size, void *p);
   static void delete_AliTriggerInput(void *p);
   static void deleteArray_AliTriggerInput(void *p);
   static void destruct_AliTriggerInput(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTriggerInput*)
   {
      ::AliTriggerInput *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTriggerInput >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTriggerInput", ::AliTriggerInput::Class_Version(), "./AliTriggerInput.h", 35,
                  typeid(::AliTriggerInput), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTriggerInput::Dictionary, isa_proxy, 4,
                  sizeof(::AliTriggerInput) );
      instance.SetNew(&new_AliTriggerInput);
      instance.SetNewArray(&newArray_AliTriggerInput);
      instance.SetDelete(&delete_AliTriggerInput);
      instance.SetDeleteArray(&deleteArray_AliTriggerInput);
      instance.SetDestructor(&destruct_AliTriggerInput);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTriggerInput*)
   {
      return GenerateInitInstanceLocal((::AliTriggerInput*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTriggerInput*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliTriggerInteraction_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliTriggerInteraction(void *p = 0);
   static void *newArray_AliTriggerInteraction(Long_t size, void *p);
   static void delete_AliTriggerInteraction(void *p);
   static void deleteArray_AliTriggerInteraction(void *p);
   static void destruct_AliTriggerInteraction(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliTriggerInteraction*)
   {
      ::AliTriggerInteraction *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliTriggerInteraction >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliTriggerInteraction", ::AliTriggerInteraction::Class_Version(), "./AliTriggerInteraction.h", 19,
                  typeid(::AliTriggerInteraction), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliTriggerInteraction::Dictionary, isa_proxy, 4,
                  sizeof(::AliTriggerInteraction) );
      instance.SetNew(&new_AliTriggerInteraction);
      instance.SetNewArray(&newArray_AliTriggerInteraction);
      instance.SetDelete(&delete_AliTriggerInteraction);
      instance.SetDeleteArray(&deleteArray_AliTriggerInteraction);
      instance.SetDestructor(&destruct_AliTriggerInteraction);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliTriggerInteraction*)
   {
      return GenerateInitInstanceLocal((::AliTriggerInteraction*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliTriggerInteraction*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AliV0vertexer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AliV0vertexer(void *p = 0);
   static void *newArray_AliV0vertexer(Long_t size, void *p);
   static void delete_AliV0vertexer(void *p);
   static void deleteArray_AliV0vertexer(void *p);
   static void destruct_AliV0vertexer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AliV0vertexer*)
   {
      ::AliV0vertexer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AliV0vertexer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AliV0vertexer", ::AliV0vertexer::Class_Version(), "./AliV0vertexer.h", 18,
                  typeid(::AliV0vertexer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AliV0vertexer::Dictionary, isa_proxy, 4,
                  sizeof(::AliV0vertexer) );
      instance.SetNew(&new_AliV0vertexer);
      instance.SetNewArray(&newArray_AliV0vertexer);
      instance.SetDelete(&delete_AliV0vertexer);
      instance.SetDeleteArray(&deleteArray_AliV0vertexer);
      instance.SetDestructor(&destruct_AliV0vertexer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AliV0vertexer*)
   {
      return GenerateInitInstanceLocal((::AliV0vertexer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AliV0vertexer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr AliESDEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDEvent::Class_Name()
{
   return "AliESDEvent";
}

//______________________________________________________________________________
const char *AliESDEvent::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDEvent::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDEvent::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDEvent*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDv0::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDv0::Class_Name()
{
   return "AliESDv0";
}

//______________________________________________________________________________
const char *AliESDv0::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDv0*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDv0::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDv0*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDv0::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDv0*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDv0::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDv0*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliCascadeVertexer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliCascadeVertexer::Class_Name()
{
   return "AliCascadeVertexer";
}

//______________________________________________________________________________
const char *AliCascadeVertexer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCascadeVertexer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliCascadeVertexer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliCascadeVertexer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliCascadeVertexer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCascadeVertexer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliCascadeVertexer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliCascadeVertexer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDACORDE::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDACORDE::Class_Name()
{
   return "AliESDACORDE";
}

//______________________________________________________________________________
const char *AliESDACORDE::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDACORDE*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDACORDE::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDACORDE*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDACORDE::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDACORDE*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDACORDE::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDACORDE*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDAD::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDAD::Class_Name()
{
   return "AliESDAD";
}

//______________________________________________________________________________
const char *AliESDAD::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDAD*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDAD::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDAD*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDAD::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDAD*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDAD::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDAD*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDADfriend::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDADfriend::Class_Name()
{
   return "AliESDADfriend";
}

//______________________________________________________________________________
const char *AliESDADfriend::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDADfriend*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDADfriend::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDADfriend*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDADfriend::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDADfriend*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDADfriend::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDADfriend*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDCaloCells::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDCaloCells::Class_Name()
{
   return "AliESDCaloCells";
}

//______________________________________________________________________________
const char *AliESDCaloCells::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCaloCells*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDCaloCells::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCaloCells*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDCaloCells::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCaloCells*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDCaloCells::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCaloCells*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDCaloCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDCaloCluster::Class_Name()
{
   return "AliESDCaloCluster";
}

//______________________________________________________________________________
const char *AliESDCaloCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCaloCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDCaloCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCaloCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDCaloCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCaloCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDCaloCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCaloCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDCaloTrigger::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDCaloTrigger::Class_Name()
{
   return "AliESDCaloTrigger";
}

//______________________________________________________________________________
const char *AliESDCaloTrigger::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCaloTrigger*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDCaloTrigger::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCaloTrigger*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDCaloTrigger::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCaloTrigger*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDCaloTrigger::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCaloTrigger*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDVertex::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDVertex::Class_Name()
{
   return "AliESDVertex";
}

//______________________________________________________________________________
const char *AliESDVertex::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDVertex::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDVertex::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDVertex::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDVertex*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDV0Params::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDV0Params::Class_Name()
{
   return "AliESDV0Params";
}

//______________________________________________________________________________
const char *AliESDV0Params::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDV0Params*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDV0Params::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDV0Params*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDV0Params::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDV0Params*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDV0Params::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDV0Params*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDcascade::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDcascade::Class_Name()
{
   return "AliESDcascade";
}

//______________________________________________________________________________
const char *AliESDcascade::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDcascade*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDcascade::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDcascade*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDcascade::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDcascade*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDcascade::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDcascade*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDCosmicTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDCosmicTrack::Class_Name()
{
   return "AliESDCosmicTrack";
}

//______________________________________________________________________________
const char *AliESDCosmicTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCosmicTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDCosmicTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCosmicTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDCosmicTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCosmicTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDCosmicTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDCosmicTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDMuonTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDMuonTrack::Class_Name()
{
   return "AliESDMuonTrack";
}

//______________________________________________________________________________
const char *AliESDMuonTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDMuonTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDMuonTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDMuonTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDPmdTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDPmdTrack::Class_Name()
{
   return "AliESDPmdTrack";
}

//______________________________________________________________________________
const char *AliESDPmdTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDPmdTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDPmdTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDPmdTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDPmdTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDPmdTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDPmdTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDPmdTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDTrdTracklet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDTrdTracklet::Class_Name()
{
   return "AliESDTrdTracklet";
}

//______________________________________________________________________________
const char *AliESDTrdTracklet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTrdTracklet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDTrdTracklet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTrdTracklet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDTrdTracklet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTrdTracklet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDTrdTracklet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTrdTracklet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDTOFHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDTOFHit::Class_Name()
{
   return "AliESDTOFHit";
}

//______________________________________________________________________________
const char *AliESDTOFHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTOFHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDTOFHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTOFHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDTOFHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTOFHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDTOFHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTOFHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDTOFMatch::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDTOFMatch::Class_Name()
{
   return "AliESDTOFMatch";
}

//______________________________________________________________________________
const char *AliESDTOFMatch::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTOFMatch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDTOFMatch::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTOFMatch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDTOFMatch::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTOFMatch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDTOFMatch::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTOFMatch*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDTOFCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDTOFCluster::Class_Name()
{
   return "AliESDTOFCluster";
}

//______________________________________________________________________________
const char *AliESDTOFCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTOFCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDTOFCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTOFCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDTOFCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTOFCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDTOFCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTOFCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTrackPointArray::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTrackPointArray::Class_Name()
{
   return "AliTrackPointArray";
}

//______________________________________________________________________________
const char *AliTrackPointArray::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackPointArray*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTrackPointArray::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackPointArray*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTrackPointArray::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackPointArray*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTrackPointArray::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackPointArray*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTrackPoint::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTrackPoint::Class_Name()
{
   return "AliTrackPoint";
}

//______________________________________________________________________________
const char *AliTrackPoint::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackPoint*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTrackPoint::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackPoint*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTrackPoint::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackPoint*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTrackPoint::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackPoint*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliKalmanTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliKalmanTrack::Class_Name()
{
   return "AliKalmanTrack";
}

//______________________________________________________________________________
const char *AliKalmanTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliKalmanTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliKalmanTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliKalmanTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliKalmanTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliKalmanTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliKalmanTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliKalmanTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDfriendTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDfriendTrack::Class_Name()
{
   return "AliESDfriendTrack";
}

//______________________________________________________________________________
const char *AliESDfriendTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDfriendTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDfriendTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDfriendTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDfriendTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDfriendTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDfriendTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDfriendTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDtrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDtrack::Class_Name()
{
   return "AliESDtrack";
}

//______________________________________________________________________________
const char *AliESDtrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDtrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDtrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDtrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDtrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDtrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDtrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDtrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDTrdTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDTrdTrack::Class_Name()
{
   return "AliESDTrdTrack";
}

//______________________________________________________________________________
const char *AliESDTrdTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTrdTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDTrdTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTrdTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDTrdTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTrdTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDTrdTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTrdTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVertex::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVertex::Class_Name()
{
   return "AliVertex";
}

//______________________________________________________________________________
const char *AliVertex::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVertex::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVertex::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVertex::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVertex*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDkink::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDkink::Class_Name()
{
   return "AliESDkink";
}

//______________________________________________________________________________
const char *AliESDkink::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDkink*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDkink::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDkink*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDkink::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDkink*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDkink::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDkink*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDHLTtrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDHLTtrack::Class_Name()
{
   return "AliESDHLTtrack";
}

//______________________________________________________________________________
const char *AliESDHLTtrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHLTtrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDHLTtrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHLTtrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDHLTtrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHLTtrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDHLTtrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHLTtrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliFMDMap::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliFMDMap::Class_Name()
{
   return "AliFMDMap";
}

//______________________________________________________________________________
const char *AliFMDMap::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliFMDMap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliFMDMap::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliFMDMap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliFMDMap::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliFMDMap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliFMDMap::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliFMDMap*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliFMDFloatMap::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliFMDFloatMap::Class_Name()
{
   return "AliFMDFloatMap";
}

//______________________________________________________________________________
const char *AliFMDFloatMap::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliFMDFloatMap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliFMDFloatMap::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliFMDFloatMap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliFMDFloatMap::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliFMDFloatMap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliFMDFloatMap::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliFMDFloatMap*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDFMD::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDFMD::Class_Name()
{
   return "AliESDFMD";
}

//______________________________________________________________________________
const char *AliESDFMD::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDFMD*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDFMD::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDFMD*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDFMD::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDFMD*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDFMD::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDFMD*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDVZERO::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDVZERO::Class_Name()
{
   return "AliESDVZERO";
}

//______________________________________________________________________________
const char *AliESDVZERO::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDVZERO*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDVZERO::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDVZERO*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDVZERO::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDVZERO*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDVZERO::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDVZERO*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliMultiplicity::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliMultiplicity::Class_Name()
{
   return "AliMultiplicity";
}

//______________________________________________________________________________
const char *AliMultiplicity::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMultiplicity*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliMultiplicity::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMultiplicity*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliMultiplicity::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMultiplicity*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliMultiplicity::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMultiplicity*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliRawDataErrorLog::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliRawDataErrorLog::Class_Name()
{
   return "AliRawDataErrorLog";
}

//______________________________________________________________________________
const char *AliRawDataErrorLog::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliRawDataErrorLog*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliRawDataErrorLog::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliRawDataErrorLog*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliRawDataErrorLog::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliRawDataErrorLog*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliRawDataErrorLog::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliRawDataErrorLog*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDfriend::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDfriend::Class_Name()
{
   return "AliESDfriend";
}

//______________________________________________________________________________
const char *AliESDfriend::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDfriend*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDfriend::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDfriend*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDfriend::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDfriend*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDfriend::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDfriend*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESD::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESD::Class_Name()
{
   return "AliESD";
}

//______________________________________________________________________________
const char *AliESD::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESD*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESD::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESD*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESD::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESD*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESD::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESD*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDRun::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDRun::Class_Name()
{
   return "AliESDRun";
}

//______________________________________________________________________________
const char *AliESDRun::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDRun*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDRun::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDRun*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDRun::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDRun*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDRun::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDRun*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTriggerScalersESD::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTriggerScalersESD::Class_Name()
{
   return "AliTriggerScalersESD";
}

//______________________________________________________________________________
const char *AliTriggerScalersESD::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalersESD*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTriggerScalersESD::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalersESD*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTriggerScalersESD::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalersESD*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTriggerScalersESD::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalersESD*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTriggerScalersRecordESD::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTriggerScalersRecordESD::Class_Name()
{
   return "AliTriggerScalersRecordESD";
}

//______________________________________________________________________________
const char *AliTriggerScalersRecordESD::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalersRecordESD*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTriggerScalersRecordESD::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalersRecordESD*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTriggerScalersRecordESD::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalersRecordESD*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTriggerScalersRecordESD::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerScalersRecordESD*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTriggerIR::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTriggerIR::Class_Name()
{
   return "AliTriggerIR";
}

//______________________________________________________________________________
const char *AliTriggerIR::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerIR*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTriggerIR::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerIR*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTriggerIR::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerIR*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTriggerIR::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerIR*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTriggerConfiguration::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTriggerConfiguration::Class_Name()
{
   return "AliTriggerConfiguration";
}

//______________________________________________________________________________
const char *AliTriggerConfiguration::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerConfiguration*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTriggerConfiguration::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerConfiguration*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTriggerConfiguration::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerConfiguration*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTriggerConfiguration::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerConfiguration*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDHeader::Class_Name()
{
   return "AliESDHeader";
}

//______________________________________________________________________________
const char *AliESDHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDTZERO::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDTZERO::Class_Name()
{
   return "AliESDTZERO";
}

//______________________________________________________________________________
const char *AliESDTZERO::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTZERO*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDTZERO::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTZERO*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDTZERO::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTZERO*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDTZERO::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTZERO*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDFIT::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDFIT::Class_Name()
{
   return "AliESDFIT";
}

//______________________________________________________________________________
const char *AliESDFIT::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDFIT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDFIT::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDFIT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDFIT::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDFIT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDFIT::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDFIT*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDZDC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDZDC::Class_Name()
{
   return "AliESDZDC";
}

//______________________________________________________________________________
const char *AliESDZDC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDZDC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDZDC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDZDC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDZDC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDZDC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDZDC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDZDC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDVZEROfriend::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDVZEROfriend::Class_Name()
{
   return "AliESDVZEROfriend";
}

//______________________________________________________________________________
const char *AliESDVZEROfriend::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDVZEROfriend*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDVZEROfriend::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDVZEROfriend*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDVZEROfriend::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDVZEROfriend*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDVZEROfriend::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDVZEROfriend*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDTZEROfriend::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDTZEROfriend::Class_Name()
{
   return "AliESDTZEROfriend";
}

//______________________________________________________________________________
const char *AliESDTZEROfriend::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTZEROfriend*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDTZEROfriend::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTZEROfriend*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDTZEROfriend::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTZEROfriend*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDTZEROfriend::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTZEROfriend*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDTrdTrigger::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDTrdTrigger::Class_Name()
{
   return "AliESDTrdTrigger";
}

//______________________________________________________________________________
const char *AliESDTrdTrigger::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTrdTrigger*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDTrdTrigger::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTrdTrigger*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDTrdTrigger::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTrdTrigger*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDTrdTrigger::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDTrdTrigger*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDMuonCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDMuonCluster::Class_Name()
{
   return "AliESDMuonCluster";
}

//______________________________________________________________________________
const char *AliESDMuonCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDMuonCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDMuonCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDMuonCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDMuonPad::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDMuonPad::Class_Name()
{
   return "AliESDMuonPad";
}

//______________________________________________________________________________
const char *AliESDMuonPad::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonPad*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDMuonPad::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonPad*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDMuonPad::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonPad*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDMuonPad::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonPad*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDMuonGlobalTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDMuonGlobalTrack::Class_Name()
{
   return "AliESDMuonGlobalTrack";
}

//______________________________________________________________________________
const char *AliESDMuonGlobalTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonGlobalTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDMuonGlobalTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonGlobalTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDMuonGlobalTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonGlobalTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDMuonGlobalTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMuonGlobalTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDHLTDecision::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDHLTDecision::Class_Name()
{
   return "AliESDHLTDecision";
}

//______________________________________________________________________________
const char *AliESDHLTDecision::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHLTDecision*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDHLTDecision::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHLTDecision*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDHLTDecision::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHLTDecision*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDHLTDecision::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHLTDecision*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDHandler::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDHandler::Class_Name()
{
   return "AliESDHandler";
}

//______________________________________________________________________________
const char *AliESDHandler::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHandler*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDHandler::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHandler*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDHandler::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHandler*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDHandler::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDHandler*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDpid::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDpid::Class_Name()
{
   return "AliESDpid";
}

//______________________________________________________________________________
const char *AliESDpid::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDpid*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDpid::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDpid*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDpid::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDpid*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDpid::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDpid*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDInputHandler::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDInputHandler::Class_Name()
{
   return "AliESDInputHandler";
}

//______________________________________________________________________________
const char *AliESDInputHandler::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDInputHandler*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDInputHandler::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDInputHandler*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDInputHandler::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDInputHandler*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDInputHandler::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDInputHandler*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDInputHandlerRP::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDInputHandlerRP::Class_Name()
{
   return "AliESDInputHandlerRP";
}

//______________________________________________________________________________
const char *AliESDInputHandlerRP::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDInputHandlerRP*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDInputHandlerRP::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDInputHandlerRP*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDInputHandlerRP::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDInputHandlerRP*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDInputHandlerRP::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDInputHandlerRP*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliESDMultITS::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliESDMultITS::Class_Name()
{
   return "AliESDMultITS";
}

//______________________________________________________________________________
const char *AliESDMultITS::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMultITS*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliESDMultITS::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMultITS*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliESDMultITS::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMultITS*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliESDMultITS::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliESDMultITS*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVertexerTracks::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVertexerTracks::Class_Name()
{
   return "AliVertexerTracks";
}

//______________________________________________________________________________
const char *AliVertexerTracks::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVertexerTracks*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVertexerTracks::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVertexerTracks*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVertexerTracks::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVertexerTracks*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVertexerTracks::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVertexerTracks*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliExpression::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliExpression::Class_Name()
{
   return "AliExpression";
}

//______________________________________________________________________________
const char *AliExpression::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliExpression*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliExpression::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliExpression*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliExpression::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliExpression*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliExpression::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliExpression*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliVariableExpression::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliVariableExpression::Class_Name()
{
   return "AliVariableExpression";
}

//______________________________________________________________________________
const char *AliVariableExpression::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVariableExpression*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliVariableExpression::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliVariableExpression*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliVariableExpression::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVariableExpression*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliVariableExpression::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliVariableExpression*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliKFParticleBase::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliKFParticleBase::Class_Name()
{
   return "AliKFParticleBase";
}

//______________________________________________________________________________
const char *AliKFParticleBase::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliKFParticleBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliKFParticleBase::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliKFParticleBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliKFParticleBase::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliKFParticleBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliKFParticleBase::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliKFParticleBase*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliKFParticle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliKFParticle::Class_Name()
{
   return "AliKFParticle";
}

//______________________________________________________________________________
const char *AliKFParticle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliKFParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliKFParticle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliKFParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliKFParticle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliKFParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliKFParticle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliKFParticle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliKFVertex::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliKFVertex::Class_Name()
{
   return "AliKFVertex";
}

//______________________________________________________________________________
const char *AliKFVertex::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliKFVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliKFVertex::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliKFVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliKFVertex::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliKFVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliKFVertex::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliKFVertex*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliMeanVertex::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliMeanVertex::Class_Name()
{
   return "AliMeanVertex";
}

//______________________________________________________________________________
const char *AliMeanVertex::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMeanVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliMeanVertex::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliMeanVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliMeanVertex::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMeanVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliMeanVertex::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliMeanVertex*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliSelector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliSelector::Class_Name()
{
   return "AliSelector";
}

//______________________________________________________________________________
const char *AliSelector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliSelector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliSelector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliSelector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliSelector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliSelector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliSelector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliSelector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliStrLine::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliStrLine::Class_Name()
{
   return "AliStrLine";
}

//______________________________________________________________________________
const char *AliStrLine::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliStrLine*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliStrLine::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliStrLine*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliStrLine::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliStrLine*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliStrLine::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliStrLine*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTrackerBase::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTrackerBase::Class_Name()
{
   return "AliTrackerBase";
}

//______________________________________________________________________________
const char *AliTrackerBase::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackerBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTrackerBase::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackerBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTrackerBase::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackerBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTrackerBase::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTrackerBase*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTriggerBCMask::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTriggerBCMask::Class_Name()
{
   return "AliTriggerBCMask";
}

//______________________________________________________________________________
const char *AliTriggerBCMask::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerBCMask*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTriggerBCMask::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerBCMask*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTriggerBCMask::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerBCMask*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTriggerBCMask::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerBCMask*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTriggerDescriptor::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTriggerDescriptor::Class_Name()
{
   return "AliTriggerDescriptor";
}

//______________________________________________________________________________
const char *AliTriggerDescriptor::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerDescriptor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTriggerDescriptor::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerDescriptor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTriggerDescriptor::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerDescriptor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTriggerDescriptor::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerDescriptor*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTriggerCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTriggerCluster::Class_Name()
{
   return "AliTriggerCluster";
}

//______________________________________________________________________________
const char *AliTriggerCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTriggerCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTriggerCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTriggerCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTriggerPFProtection::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTriggerPFProtection::Class_Name()
{
   return "AliTriggerPFProtection";
}

//______________________________________________________________________________
const char *AliTriggerPFProtection::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerPFProtection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTriggerPFProtection::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerPFProtection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTriggerPFProtection::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerPFProtection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTriggerPFProtection::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerPFProtection*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTriggerClass::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTriggerClass::Class_Name()
{
   return "AliTriggerClass";
}

//______________________________________________________________________________
const char *AliTriggerClass::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerClass*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTriggerClass::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerClass*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTriggerClass::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerClass*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTriggerClass::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerClass*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTriggerInput::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTriggerInput::Class_Name()
{
   return "AliTriggerInput";
}

//______________________________________________________________________________
const char *AliTriggerInput::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerInput*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTriggerInput::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerInput*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTriggerInput::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerInput*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTriggerInput::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerInput*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliTriggerInteraction::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliTriggerInteraction::Class_Name()
{
   return "AliTriggerInteraction";
}

//______________________________________________________________________________
const char *AliTriggerInteraction::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerInteraction*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliTriggerInteraction::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerInteraction*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliTriggerInteraction::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerInteraction*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliTriggerInteraction::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliTriggerInteraction*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AliV0vertexer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AliV0vertexer::Class_Name()
{
   return "AliV0vertexer";
}

//______________________________________________________________________________
const char *AliV0vertexer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliV0vertexer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AliV0vertexer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AliV0vertexer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AliV0vertexer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliV0vertexer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AliV0vertexer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AliV0vertexer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void AliESD::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESD.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESD::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESD::Class(),this);
   }
}

//______________________________________________________________________________
void AliESD::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESD.
      TClass *R__cl = ::AliESD::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNumberInFile", &fEventNumberInFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBunchCrossNumber", &fBunchCrossNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOrbitNumber", &fOrbitNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPeriodNumber", &fPeriodNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunNumber", &fRunNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStamp", &fTimeStamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventType", &fEventType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerMask", &fTriggerMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerMaskNext50", &fTriggerMaskNext50);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerCluster", &fTriggerCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecoVersion", &fRecoVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMagneticField", &fMagneticField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCN1Energy", &fZDCN1Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCP1Energy", &fZDCP1Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCN2Energy", &fZDCN2Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCP2Energy", &fZDCP2Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCEMEnergy", &fZDCEMEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCParticipants", &fZDCParticipants);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0zVertex", &fT0zVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSPDVertex", &fSPDVertex);
      R__insp.InspectMember(fSPDVertex, "fSPDVertex.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrimaryVertex", &fPrimaryVertex);
      R__insp.InspectMember(fPrimaryVertex, "fPrimaryVertex.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDiamondXY[2]", fDiamondXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDiamondCovXY[3]", fDiamondCovXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSPDMult", &fSPDMult);
      R__insp.InspectMember(fSPDMult, "fSPDMult.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0clock", &fT0clock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0TOF[3]", fT0TOF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0timeStart", &fT0timeStart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0trig", &fT0trig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0time[24]", fT0time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0amplitude[24]", fT0amplitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTracks", &fTracks);
      R__insp.InspectMember(fTracks, "fTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHLTConfMapTracks", &fHLTConfMapTracks);
      R__insp.InspectMember(fHLTConfMapTracks, "fHLTConfMapTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHLTHoughTracks", &fHLTHoughTracks);
      R__insp.InspectMember(fHLTHoughTracks, "fHLTHoughTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMuonTracks", &fMuonTracks);
      R__insp.InspectMember(fMuonTracks, "fMuonTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPmdTracks", &fPmdTracks);
      R__insp.InspectMember(fPmdTracks, "fPmdTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrdTracks", &fTrdTracks);
      R__insp.InspectMember(fTrdTracks, "fTrdTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fV0s", &fV0s);
      R__insp.InspectMember(fV0s, "fV0s.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCascades", &fCascades);
      R__insp.InspectMember(fCascades, "fCascades.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKinks", &fKinks);
      R__insp.InspectMember(fKinks, "fKinks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCaloClusters", &fCaloClusters);
      R__insp.InspectMember(fCaloClusters, "fCaloClusters.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEMCALClusters", &fEMCALClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstEMCALCluster", &fFirstEMCALCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEMCALTriggerPosition", &fEMCALTriggerPosition);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEMCALTriggerAmplitudes", &fEMCALTriggerAmplitudes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPHOSClusters", &fPHOSClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstPHOSCluster", &fFirstPHOSCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPHOSTriggerPosition", &fPHOSTriggerPosition);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPHOSTriggerAmplitudes", &fPHOSTriggerAmplitudes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDFMD", &fESDFMD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDVZERO", &fESDVZERO);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDACORDE", &fESDACORDE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDAD", &fESDAD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrorLogs", &fErrorLogs);
      R__insp.InspectMember(fErrorLogs, "fErrorLogs.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESD(void *p) {
      return  p ? new(p) ::AliESD : new ::AliESD;
   }
   static void *newArray_AliESD(Long_t nElements, void *p) {
      return p ? new(p) ::AliESD[nElements] : new ::AliESD[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESD(void *p) {
      delete ((::AliESD*)p);
   }
   static void deleteArray_AliESD(void *p) {
      delete [] ((::AliESD*)p);
   }
   static void destruct_AliESD(void *p) {
      typedef ::AliESD current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESD

//______________________________________________________________________________
void AliESDEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDEvent::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDEvent.
      TClass *R__cl = ::AliESDEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDObjects", &fESDObjects);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDRun", &fESDRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHeader", &fHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDZDC", &fESDZDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDFMD", &fESDFMD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDVZERO", &fESDVZERO);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDTZERO", &fESDTZERO);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDFIT", &fESDFIT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTPCVertex", &fTPCVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSPDVertex", &fSPDVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPrimaryVertex", &fPrimaryVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSPDMult", &fSPDMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPHOSTrigger", &fPHOSTrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEMCALTrigger", &fEMCALTrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDACORDE", &fESDACORDE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDAD", &fESDAD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrdTrigger", &fTrdTrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSPDPileupVertices", &fSPDPileupVertices);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrkPileupVertices", &fTrkPileupVertices);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTracks", &fTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMuonTracks", &fMuonTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMuonClusters", &fMuonClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMuonPads", &fMuonPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMuonGlobalTracks", &fMuonGlobalTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPmdTracks", &fPmdTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrdTracks", &fTrdTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrdTracklets", &fTrdTracklets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fV0s", &fV0s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCascades", &fCascades);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fKinks", &fKinks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCaloClusters", &fCaloClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEMCALCells", &fEMCALCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPHOSCells", &fPHOSCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCosmicTracks", &fCosmicTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDTOFClusters", &fESDTOFClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDTOFHits", &fESDTOFHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDTOFMatches", &fESDTOFMatches);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fErrorLogs", &fErrorLogs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOldMuonStructure", &fOldMuonStructure);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDOld", &fESDOld);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDFriendOld", &fESDFriendOld);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConnected", &fConnected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseOwnList", &fUseOwnList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTracksConnected", &fTracksConnected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTOFHeader", &fTOFHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCentrality", &fCentrality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEventplane", &fEventplane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTPCFriend2Store", &fNTPCFriend2Store);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorStatus", &fDetectorStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDAQDetectorPattern", &fDAQDetectorPattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDAQAttributes", &fDAQAttributes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTPCClusters", &fNTPCClusters);
      AliVEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDEvent(void *p) {
      return  p ? new(p) ::AliESDEvent : new ::AliESDEvent;
   }
   static void *newArray_AliESDEvent(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDEvent[nElements] : new ::AliESDEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDEvent(void *p) {
      delete ((::AliESDEvent*)p);
   }
   static void deleteArray_AliESDEvent(void *p) {
      delete [] ((::AliESDEvent*)p);
   }
   static void destruct_AliESDEvent(void *p) {
      typedef ::AliESDEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDEvent

//______________________________________________________________________________
void AliESDInputHandler::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDInputHandler.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDInputHandler::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDInputHandler::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDInputHandler::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDInputHandler.
      TClass *R__cl = ::AliESDInputHandler::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvent", &fEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFriend", &fFriend);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDpid", &fESDpid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAnalysisType", &fAnalysisType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNEvents", &fNEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHLTEvent", &fHLTEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHLTTree", &fHLTTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseHLT", &fUseHLT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTagCutSumm", &fTagCutSumm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseTags", &fUseTags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChainT", &fChainT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTreeT", &fTreeT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunTag", &fRunTag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEventTag", &fEventTag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReadFriends", &fReadFriends);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFriendFileName", &fFriendFileName);
      R__insp.InspectMember(fFriendFileName, "fFriendFileName.");
      AliInputEventHandler::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDInputHandler(void *p) {
      return  p ? new(p) ::AliESDInputHandler : new ::AliESDInputHandler;
   }
   static void *newArray_AliESDInputHandler(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDInputHandler[nElements] : new ::AliESDInputHandler[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDInputHandler(void *p) {
      delete ((::AliESDInputHandler*)p);
   }
   static void deleteArray_AliESDInputHandler(void *p) {
      delete [] ((::AliESDInputHandler*)p);
   }
   static void destruct_AliESDInputHandler(void *p) {
      typedef ::AliESDInputHandler current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDInputHandler

//______________________________________________________________________________
void AliESDInputHandlerRP::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDInputHandlerRP.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDInputHandlerRP::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDInputHandlerRP::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDInputHandlerRP::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDInputHandlerRP.
      TClass *R__cl = ::AliESDInputHandlerRP::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRTrees", &fRTrees);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRDirs", &fRDirs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRFiles", &fRFiles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDetectors", &fDetectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDirR", &fDirR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNumber", &fEventNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileNumber", &fFileNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventsPerFile", &fEventsPerFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fExtension", &fExtension);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPathName", &fPathName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsArchive", &fIsArchive);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReadDirectory", &fReadDirectory);
      AliESDInputHandler::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDInputHandlerRP(void *p) {
      return  p ? new(p) ::AliESDInputHandlerRP : new ::AliESDInputHandlerRP;
   }
   static void *newArray_AliESDInputHandlerRP(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDInputHandlerRP[nElements] : new ::AliESDInputHandlerRP[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDInputHandlerRP(void *p) {
      delete ((::AliESDInputHandlerRP*)p);
   }
   static void deleteArray_AliESDInputHandlerRP(void *p) {
      delete [] ((::AliESDInputHandlerRP*)p);
   }
   static void destruct_AliESDInputHandlerRP(void *p) {
      typedef ::AliESDInputHandlerRP current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDInputHandlerRP

//______________________________________________________________________________
void AliESDRun::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDRun.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDRun::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDRun::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDRun::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDRun.
      TClass *R__cl = ::AliESDRun::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentL3", &fCurrentL3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentDip", &fCurrentDip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamEnergy", &fBeamEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMagneticField", &fMagneticField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanBeamInt[2][2]", fMeanBeamInt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDiamondXY[2]", fDiamondXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDiamondCovXY[3]", fDiamondCovXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDiamondZ", &fDiamondZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDiamondSig2Z", &fDiamondSig2Z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPeriodNumber", &fPeriodNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunNumber", &fRunNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecoVersion", &fRecoVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamParticle[2]", fBeamParticle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamType", &fBeamType);
      R__insp.InspectMember(fBeamType, "fBeamType.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerClasses", &fTriggerClasses);
      R__insp.InspectMember(fTriggerClasses, "fTriggerClasses.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetInDAQ", &fDetInDAQ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetInReco", &fDetInReco);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPHOSMatrix[5]", &fPHOSMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEMCALMatrix[22]", &fEMCALMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0spread[4]", fT0spread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCaloTriggerType[15]", fCaloTriggerType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVZEROEqFactors[64]", fVZEROEqFactors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCaloTriggerTypeNew[19]", fCaloTriggerTypeNew);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCTPStart", &fCTPStart);
      R__insp.InspectMember(fCTPStart, "fCTPStart.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDRun(void *p) {
      return  p ? new(p) ::AliESDRun : new ::AliESDRun;
   }
   static void *newArray_AliESDRun(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDRun[nElements] : new ::AliESDRun[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDRun(void *p) {
      delete ((::AliESDRun*)p);
   }
   static void deleteArray_AliESDRun(void *p) {
      delete [] ((::AliESDRun*)p);
   }
   static void destruct_AliESDRun(void *p) {
      typedef ::AliESDRun current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDRun

//______________________________________________________________________________
void AliESDHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDHeader::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDHeader.
      TClass *R__cl = ::AliESDHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerMask", &fTriggerMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerMaskNext50", &fTriggerMaskNext50);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOrbitNumber", &fOrbitNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStamp", &fTimeStamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventType", &fEventType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventSpecie", &fEventSpecie);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPeriodNumber", &fPeriodNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNumberInFile", &fEventNumberInFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBunchCrossNumber", &fBunchCrossNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerCluster", &fTriggerCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL0TriggerInputs", &fL0TriggerInputs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL1TriggerInputs", &fL1TriggerInputs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL2TriggerInputs", &fL2TriggerInputs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerScalers", &fTriggerScalers);
      R__insp.InspectMember(fTriggerScalers, "fTriggerScalers.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerScalersDeltaEvent", &fTriggerScalersDeltaEvent);
      R__insp.InspectMember(fTriggerScalersDeltaEvent, "fTriggerScalersDeltaEvent.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerScalersDeltaRun", &fTriggerScalersDeltaRun);
      R__insp.InspectMember(fTriggerScalersDeltaRun, "fTriggerScalersDeltaRun.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIRArray[3]", &fIRArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerInputsNames", &fTriggerInputsNames);
      R__insp.InspectMember(fTriggerInputsNames, "fTriggerInputsNames.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCTPConfig", &fCTPConfig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIRBufferArray", &fIRBufferArray);
      R__insp.InspectMember(fIRBufferArray, "fIRBufferArray.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIRInt2InteractionsMap", &fIRInt2InteractionsMap);
      R__insp.InspectMember(fIRInt2InteractionsMap, "fIRInt2InteractionsMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIRInt1InteractionsMap", &fIRInt1InteractionsMap);
      R__insp.InspectMember(fIRInt1InteractionsMap, "fIRInt1InteractionsMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCNoiseFilterCounter[3]", fTPCNoiseFilterCounter);
      AliVHeader::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDHeader(void *p) {
      return  p ? new(p) ::AliESDHeader : new ::AliESDHeader;
   }
   static void *newArray_AliESDHeader(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDHeader[nElements] : new ::AliESDHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDHeader(void *p) {
      delete ((::AliESDHeader*)p);
   }
   static void deleteArray_AliESDHeader(void *p) {
      delete [] ((::AliESDHeader*)p);
   }
   static void destruct_AliESDHeader(void *p) {
      typedef ::AliESDHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDHeader

//______________________________________________________________________________
void AliESDHLTDecision::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDHLTDecision.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDHLTDecision::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDHLTDecision::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDHLTDecision::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDHLTDecision.
      TClass *R__cl = ::AliESDHLTDecision::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputObjectInfo", &fInputObjectInfo);
      R__insp.InspectMember(fInputObjectInfo, "fInputObjectInfo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerItems", &fTriggerItems);
      R__insp.InspectMember(fTriggerItems, "fTriggerItems.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCounters", &fCounters);
      R__insp.InspectMember(fCounters, "fCounters.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDHLTDecision(void *p) {
      return  p ? new(p) ::AliESDHLTDecision : new ::AliESDHLTDecision;
   }
   static void *newArray_AliESDHLTDecision(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDHLTDecision[nElements] : new ::AliESDHLTDecision[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDHLTDecision(void *p) {
      delete ((::AliESDHLTDecision*)p);
   }
   static void deleteArray_AliESDHLTDecision(void *p) {
      delete [] ((::AliESDHLTDecision*)p);
   }
   static void destruct_AliESDHLTDecision(void *p) {
      typedef ::AliESDHLTDecision current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDHLTDecision

//______________________________________________________________________________
void AliESDZDC::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDZDC.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDZDC::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDZDC::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDZDC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDZDC.
      TClass *R__cl = ::AliESDZDC::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCN1Energy", &fZDCN1Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCP1Energy", &fZDCP1Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCN2Energy", &fZDCN2Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCP2Energy", &fZDCP2Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCEMEnergy", &fZDCEMEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCEMEnergy1", &fZDCEMEnergy1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZN1TowerEnergy[5]", fZN1TowerEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZN2TowerEnergy[5]", fZN2TowerEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZP1TowerEnergy[5]", fZP1TowerEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZP2TowerEnergy[5]", fZP2TowerEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZN1TowerEnergyLR[5]", fZN1TowerEnergyLR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZN2TowerEnergyLR[5]", fZN2TowerEnergyLR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZP1TowerEnergyLR[5]", fZP1TowerEnergyLR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZP2TowerEnergyLR[5]", fZP2TowerEnergyLR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCParticipants", &fZDCParticipants);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCPartSideA", &fZDCPartSideA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCPartSideC", &fZDCPartSideC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImpactParameter", &fImpactParameter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImpactParamSideA", &fImpactParamSideA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImpactParamSideC", &fImpactParamSideC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZNACentrCoord[2]", fZNACentrCoord);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZNCCentrCoord[2]", fZNCCentrCoord);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fESDQuality", &fESDQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVMEScaler[32]", fVMEScaler);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCTDCData[32][4]", fZDCTDCData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCTDCCorrected[32][4]", fZDCTDCCorrected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZNCTDChit", &fZNCTDChit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZNATDChit", &fZNATDChit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZPCTDChit", &fZPCTDChit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZPATDChit", &fZPATDChit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZEM1TDChit", &fZEM1TDChit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZEM2TDChit", &fZEM2TDChit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZDCTDCChannels[7]", fZDCTDCChannels);
      AliVZDC::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDZDC(void *p) {
      return  p ? new(p) ::AliESDZDC : new ::AliESDZDC;
   }
   static void *newArray_AliESDZDC(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDZDC[nElements] : new ::AliESDZDC[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDZDC(void *p) {
      delete ((::AliESDZDC*)p);
   }
   static void deleteArray_AliESDZDC(void *p) {
      delete [] ((::AliESDZDC*)p);
   }
   static void destruct_AliESDZDC(void *p) {
      typedef ::AliESDZDC current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDZDC

//______________________________________________________________________________
void AliESDCaloTrigger::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDCaloTrigger.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDCaloTrigger::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDCaloTrigger::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDCaloTrigger::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDCaloTrigger.
      TClass *R__cl = ::AliESDCaloTrigger::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNEntries", &fNEntries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrent", &fCurrent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fColumn", &fColumn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRow", &fRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmplitude", &fAmplitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNL0Times", &fNL0Times);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fL0Times", &fL0Times);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fL1TimeSum", &fL1TimeSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTriggerBits", &fTriggerBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL1Threshold[4]", fL1Threshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL1V0[2]", fL1V0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL1FrameMask", &fL1FrameMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL1DCALThreshold[4]", fL1DCALThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fL1SubRegion", &fL1SubRegion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL1DCALFrameMask", &fL1DCALFrameMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMedian[2]", fMedian);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerBitWord", &fTriggerBitWord);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL1DCALV0[2]", fL1DCALV0);
      AliVCaloTrigger::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDCaloTrigger(void *p) {
      return  p ? new(p) ::AliESDCaloTrigger : new ::AliESDCaloTrigger;
   }
   static void *newArray_AliESDCaloTrigger(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDCaloTrigger[nElements] : new ::AliESDCaloTrigger[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDCaloTrigger(void *p) {
      delete ((::AliESDCaloTrigger*)p);
   }
   static void deleteArray_AliESDCaloTrigger(void *p) {
      delete [] ((::AliESDCaloTrigger*)p);
   }
   static void destruct_AliESDCaloTrigger(void *p) {
      typedef ::AliESDCaloTrigger current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDCaloTrigger

//______________________________________________________________________________
void AliESDfriend::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDfriend.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDfriend::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDfriend::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDfriend::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDfriend.
      TClass *R__cl = ::AliESDfriend::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fESDIndicesStored", &fESDIndicesStored);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTracks", &fTracks);
      R__insp.InspectMember(fTracks, "fTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDVZEROfriend", &fESDVZEROfriend);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDTZEROfriend", &fESDTZEROfriend);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDADfriend", &fESDADfriend);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNclustersTPC[72]", fNclustersTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNclustersTPCused[72]", fNclustersTPCused);
      AliVfriendEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDfriend(void *p) {
      return  p ? new(p) ::AliESDfriend : new ::AliESDfriend;
   }
   static void *newArray_AliESDfriend(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDfriend[nElements] : new ::AliESDfriend[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDfriend(void *p) {
      delete ((::AliESDfriend*)p);
   }
   static void deleteArray_AliESDfriend(void *p) {
      delete [] ((::AliESDfriend*)p);
   }
   static void destruct_AliESDfriend(void *p) {
      typedef ::AliESDfriend current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDfriend

//______________________________________________________________________________
void AliESDtrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDtrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDtrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDtrack::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDtrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDtrack.
      TClass *R__cl = ::AliESDtrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCp", &fCp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIp", &fIp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTPCInner", &fTPCInner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOp", &fOp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHMPIDp", &fHMPIDp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFriendTrack", &fFriendTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCFitMap", &fTPCFitMap);
      R__insp.InspectMember(fTPCFitMap, "fTPCFitMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCClusterMap", &fTPCClusterMap);
      R__insp.InspectMember(fTPCClusterMap, "fTPCClusterMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCSharedMap", &fTPCSharedMap);
      R__insp.InspectMember(fTPCSharedMap, "fTPCSharedMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFrTrackID", &fFrTrackID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlags", &fFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fID", &fID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabel", &fLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fITSLabel", &fITSLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fITSModule[12]", fITSModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCLabel", &fTPCLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRDLabel", &fTRDLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTOFLabel", &fTOFLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFCalChannel", &fTOFCalChannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFindex", &fTOFindex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHMPIDqn", &fHMPIDqn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHMPIDcluIdx", &fHMPIDcluIdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCaloIndex", &fCaloIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKinkIndexes[3]", fKinkIndexes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fV0Indexes[3]", fV0Indexes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fR", &fR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fITSr", &fITSr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTPCr", &fTPCr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTRDr", &fTRDr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTOFr", &fTOFr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHMPIDr", &fHMPIDr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHMPIDtrkTheta", &fHMPIDtrkTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHMPIDtrkPhi", &fHMPIDtrkPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHMPIDsignal", &fHMPIDsignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackTime", &fTrackTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackLength", &fTrackLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdTPC", &fdTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fzTPC", &fzTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCddTPC", &fCddTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCdzTPC", &fCdzTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCzzTPC", &fCzzTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCchi2TPC", &fCchi2TPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fD", &fD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCdd", &fCdd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCdz", &fCdz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCzz", &fCzz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCchi2", &fCchi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fITSchi2Std[3]", fITSchi2Std);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fITSchi2", &fITSchi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCchi2", &fTPCchi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCchi2Iter1", &fTPCchi2Iter1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRDchi2", &fTRDchi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFchi2", &fTOFchi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHMPIDchi2", &fHMPIDchi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGlobalChi2", &fGlobalChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fITSsignal", &fITSsignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fITSsignalTuned", &fITSsignalTuned);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fITSdEdxSamples[4]", fITSdEdxSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCsignal", &fTPCsignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCsignalTuned", &fTPCsignalTuned);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCsignalS", &fTPCsignalS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTPCdEdxInfo", &fTPCdEdxInfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCPoints[4]", fTPCPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRDsignal", &fTRDsignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRDQuality", &fTRDQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRDBudget", &fTRDBudget);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFsignal", &fTOFsignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFsignalTuned", &fTOFsignalTuned);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFsignalToT", &fTOFsignalToT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFsignalRaw", &fTOFsignalRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFsignalDz", &fTOFsignalDz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFsignalDx", &fTOFsignalDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFInfo[10]", fTOFInfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFdeltaBC", &fTOFdeltaBC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFl0l1", &fTOFl0l1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCaloDx", &fCaloDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCaloDz", &fCaloDz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHMPIDtrkX", &fHMPIDtrkX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHMPIDtrkY", &fHMPIDtrkY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHMPIDmipX", &fHMPIDmipX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHMPIDmipY", &fHMPIDmipY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCncls", &fTPCncls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCnclsF", &fTPCnclsF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCsignalN", &fTPCsignalN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCnclsIter1", &fTPCnclsIter1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCnclsFIter1", &fTPCnclsFIter1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fITSncls", &fITSncls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fITSClusterMap", &fITSClusterMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fITSSharedMap", &fITSSharedMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRDncls", &fTRDncls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRDncls0", &fTRDncls0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRDntracklets", &fTRDntracklets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRDNchamberdEdx", &fTRDNchamberdEdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRDNclusterdEdx", &fTRDNclusterdEdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRDnSlices", &fTRDnSlices);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTRDslices", &fTRDslices);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRDTimBin[6]", fTRDTimBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVertexID", &fVertexID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPIDForTracking", &fPIDForTracking);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPIDForTrackingIn", &fPIDForTrackingIn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDEvent", &fESDEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCacheNCrossedRows", &fCacheNCrossedRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCacheChi2TPCConstrainedVsGlobal", &fCacheChi2TPCConstrainedVsGlobal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCacheChi2TPCConstrainedVsGlobalVertex", &fCacheChi2TPCConstrainedVsGlobalVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDetectorPID", &fDetectorPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackPhiOnEMCal", &fTrackPhiOnEMCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackEtaOnEMCal", &fTrackEtaOnEMCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackPtOnEMCal", &fTrackPtOnEMCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNtofClusters", &fNtofClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTOFcluster", &fTOFcluster);
      AliExternalTrackParam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDtrack(void *p) {
      return  p ? new(p) ::AliESDtrack : new ::AliESDtrack;
   }
   static void *newArray_AliESDtrack(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDtrack[nElements] : new ::AliESDtrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDtrack(void *p) {
      delete ((::AliESDtrack*)p);
   }
   static void deleteArray_AliESDtrack(void *p) {
      delete [] ((::AliESDtrack*)p);
   }
   static void destruct_AliESDtrack(void *p) {
      typedef ::AliESDtrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDtrack

//______________________________________________________________________________
void AliESDfriendTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDfriendTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDfriendTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDfriendTrack::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDfriendTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDfriendTrack.
      TClass *R__cl = ::AliESDfriendTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f1P", &f1P);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fnMaxITScluster", &fnMaxITScluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fnMaxTPCcluster", &fnMaxTPCcluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fnMaxTRDcluster", &fnMaxTRDcluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fITSindex", &fITSindex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTPCindex", &fTPCindex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTRDindex", &fTRDindex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPoints", &fPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibContainer", &fCalibContainer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fITStrack", &fITStrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTRDtrack", &fTRDtrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTPCOut", &fTPCOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fITSOut", &fITSOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTRDIn", &fTRDIn);
      AliVfriendTrack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDfriendTrack(void *p) {
      return  p ? new(p) ::AliESDfriendTrack : new ::AliESDfriendTrack;
   }
   static void *newArray_AliESDfriendTrack(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDfriendTrack[nElements] : new ::AliESDfriendTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDfriendTrack(void *p) {
      delete ((::AliESDfriendTrack*)p);
   }
   static void deleteArray_AliESDfriendTrack(void *p) {
      delete [] ((::AliESDfriendTrack*)p);
   }
   static void destruct_AliESDfriendTrack(void *p) {
      typedef ::AliESDfriendTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDfriendTrack

//______________________________________________________________________________
void AliESDMuonTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDMuonTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDMuonTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDMuonTrack::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDMuonTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDMuonTrack.
      TClass *R__cl = ::AliESDMuonTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInverseBendingMomentum", &fInverseBendingMomentum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaX", &fThetaX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaY", &fThetaY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBendingCoor", &fBendingCoor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNonBendingCoor", &fNonBendingCoor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInverseBendingMomentumAtDCA", &fInverseBendingMomentumAtDCA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaXAtDCA", &fThetaXAtDCA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaYAtDCA", &fThetaYAtDCA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBendingCoorAtDCA", &fBendingCoorAtDCA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNonBendingCoorAtDCA", &fNonBendingCoorAtDCA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInverseBendingMomentumUncorrected", &fInverseBendingMomentumUncorrected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaXUncorrected", &fThetaXUncorrected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaYUncorrected", &fThetaYUncorrected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZUncorrected", &fZUncorrected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBendingCoorUncorrected", &fBendingCoorUncorrected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNonBendingCoorUncorrected", &fNonBendingCoorUncorrected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCovariances[15]", fCovariances);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRAtAbsorberEnd", &fRAtAbsorberEnd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2", &fChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2MatchTrigger", &fChi2MatchTrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLocalTrigger", &fLocalTrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX1Pattern", &fX1Pattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY1Pattern", &fY1Pattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX2Pattern", &fX2Pattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY2Pattern", &fY2Pattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX3Pattern", &fX3Pattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY3Pattern", &fY3Pattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX4Pattern", &fX4Pattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY4Pattern", &fY4Pattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMuonClusterMap", &fMuonClusterMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitsPatternInTrigCh", &fHitsPatternInTrigCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitsPatternInTrigChTrk", &fHitsPatternInTrigChTrk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNHit", &fNHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusters", &fClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClustersId", &fClustersId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabel", &fLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDEvent", &fESDEvent);
      AliVParticle::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDMuonTrack(void *p) {
      return  p ? new(p) ::AliESDMuonTrack : new ::AliESDMuonTrack;
   }
   static void *newArray_AliESDMuonTrack(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDMuonTrack[nElements] : new ::AliESDMuonTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDMuonTrack(void *p) {
      delete ((::AliESDMuonTrack*)p);
   }
   static void deleteArray_AliESDMuonTrack(void *p) {
      delete [] ((::AliESDMuonTrack*)p);
   }
   static void destruct_AliESDMuonTrack(void *p) {
      typedef ::AliESDMuonTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDMuonTrack

//______________________________________________________________________________
void AliESDPmdTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDPmdTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDPmdTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDPmdTrack::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDPmdTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDPmdTrack.
      TClass *R__cl = ::AliESDPmdTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCluADC", &fCluADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCluPID", &fCluPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDet", &fDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNcell", &fNcell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSmn", &fSmn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackNo", &fTrackNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackPid", &fTrackPid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClMatching", &fClMatching);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigX", &fSigX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigY", &fSigY);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDPmdTrack(void *p) {
      return  p ? new(p) ::AliESDPmdTrack : new ::AliESDPmdTrack;
   }
   static void *newArray_AliESDPmdTrack(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDPmdTrack[nElements] : new ::AliESDPmdTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDPmdTrack(void *p) {
      delete ((::AliESDPmdTrack*)p);
   }
   static void deleteArray_AliESDPmdTrack(void *p) {
      delete [] ((::AliESDPmdTrack*)p);
   }
   static void destruct_AliESDPmdTrack(void *p) {
      typedef ::AliESDPmdTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDPmdTrack

//______________________________________________________________________________
void AliESDTrdTrigger::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDTrdTrigger.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDTrdTrigger::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDTrdTrigger::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDTrdTrigger::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDTrdTrigger.
      TClass *R__cl = ::AliESDTrdTrigger::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlags[18]", fFlags);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDTrdTrigger(void *p) {
      return  p ? new(p) ::AliESDTrdTrigger : new ::AliESDTrdTrigger;
   }
   static void *newArray_AliESDTrdTrigger(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDTrdTrigger[nElements] : new ::AliESDTrdTrigger[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDTrdTrigger(void *p) {
      delete ((::AliESDTrdTrigger*)p);
   }
   static void deleteArray_AliESDTrdTrigger(void *p) {
      delete [] ((::AliESDTrdTrigger*)p);
   }
   static void destruct_AliESDTrdTrigger(void *p) {
      typedef ::AliESDTrdTrigger current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDTrdTrigger

//______________________________________________________________________________
void AliESDTrdTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDTrdTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDTrdTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDTrdTrack::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDTrdTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDTrdTrack.
      TClass *R__cl = ::AliESDTrdTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSector", &fSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStack", &fStack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fB", &fB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fC", &fC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPID", &fPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLayerMask", &fLayerMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackletIndex[6]", fTrackletIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlags", &fFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlagsTiming", &fFlagsTiming);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReserved", &fReserved);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackletRefs[6]", fTrackletRefs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackMatch", &fTrackMatch);
      R__insp.InspectMember(fTrackMatch, "fTrackMatch.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabel", &fLabel);
      AliVTrdTrack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDTrdTrack(void *p) {
      return  p ? new(p) ::AliESDTrdTrack : new ::AliESDTrdTrack;
   }
   static void *newArray_AliESDTrdTrack(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDTrdTrack[nElements] : new ::AliESDTrdTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDTrdTrack(void *p) {
      delete ((::AliESDTrdTrack*)p);
   }
   static void deleteArray_AliESDTrdTrack(void *p) {
      delete [] ((::AliESDTrdTrack*)p);
   }
   static void destruct_AliESDTrdTrack(void *p) {
      typedef ::AliESDTrdTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDTrdTrack

//______________________________________________________________________________
void AliESDTrdTracklet::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDTrdTracklet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDTrdTracklet::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDTrdTracklet::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDTrdTracklet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDTrdTracklet.
      TClass *R__cl = ::AliESDTrdTracklet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHCId", &fHCId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackletWord", &fTrackletWord);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabel", &fLabel);
      AliVTrdTracklet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDTrdTracklet(void *p) {
      return  p ? new(p) ::AliESDTrdTracklet : new ::AliESDTrdTracklet;
   }
   static void *newArray_AliESDTrdTracklet(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDTrdTracklet[nElements] : new ::AliESDTrdTracklet[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDTrdTracklet(void *p) {
      delete ((::AliESDTrdTracklet*)p);
   }
   static void deleteArray_AliESDTrdTracklet(void *p) {
      delete [] ((::AliESDTrdTracklet*)p);
   }
   static void destruct_AliESDTrdTracklet(void *p) {
      typedef ::AliESDTrdTracklet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDTrdTracklet

//______________________________________________________________________________
void AliESDHLTtrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDHLTtrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDHLTtrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDHLTtrack::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDHLTtrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDHLTtrack.
      TClass *R__cl = ::AliESDHLTtrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNHits", &fNHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCid", &fMCid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWeight", &fWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFromMainVertex", &fFromMainVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRowRange[2]", fRowRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSector", &fSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstPoint[3]", fFirstPoint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastPoint[3]", fLastPoint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQ", &fQ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTanl", &fTanl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPsi", &fPsi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPt", &fPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPterr", &fPterr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPsierr", &fPsierr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTanlerr", &fTanlerr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBinX", &fBinX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBinY", &fBinY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSizeX", &fSizeX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSizeY", &fSizeY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPID", &fPID);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDHLTtrack(void *p) {
      return  p ? new(p) ::AliESDHLTtrack : new ::AliESDHLTtrack;
   }
   static void *newArray_AliESDHLTtrack(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDHLTtrack[nElements] : new ::AliESDHLTtrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDHLTtrack(void *p) {
      delete ((::AliESDHLTtrack*)p);
   }
   static void deleteArray_AliESDHLTtrack(void *p) {
      delete [] ((::AliESDHLTtrack*)p);
   }
   static void destruct_AliESDHLTtrack(void *p) {
      typedef ::AliESDHLTtrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDHLTtrack

//______________________________________________________________________________
void AliESDv0::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDv0.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDv0::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDv0::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDv0::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDv0.
      TClass *R__cl = ::AliESDv0::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParamN", &fParamN);
      R__insp.InspectMember(fParamN, "fParamN.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParamP", &fParamP);
      R__insp.InspectMember(fParamP, "fParamP.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEffMass", &fEffMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDcaV0Daughters", &fDcaV0Daughters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2V0", &fChi2V0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPos[3]", fPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosCov[6]", fPosCov);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNmom[3]", fNmom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPmom[3]", fPmom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNormDCAPrim[2]", fNormDCAPrim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRr", &fRr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDistSigma", &fDistSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2Before", &fChi2Before);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2After", &fChi2After);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCausality[4]", fCausality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAngle[3]", fAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPointAngleFi", &fPointAngleFi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPointAngleTh", &fPointAngleTh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPointAngle", &fPointAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPdgCode", &fPdgCode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusters[2][6]", fClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNidx", &fNidx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPidx", &fPidx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNBefore", &fNBefore);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNAfter", &fNAfter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOnFlyStatus", &fOnFlyStatus);
      AliVParticle::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDv0(void *p) {
      return  p ? new(p) ::AliESDv0 : new ::AliESDv0;
   }
   static void *newArray_AliESDv0(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDv0[nElements] : new ::AliESDv0[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDv0(void *p) {
      delete ((::AliESDv0*)p);
   }
   static void deleteArray_AliESDv0(void *p) {
      delete [] ((::AliESDv0*)p);
   }
   static void destruct_AliESDv0(void *p) {
      typedef ::AliESDv0 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDv0

//______________________________________________________________________________
void AliESDcascade::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDcascade.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDcascade::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDcascade::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDcascade::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDcascade.
      TClass *R__cl = ::AliESDcascade::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEffMassXi", &fEffMassXi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2Xi", &fChi2Xi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDcaXiDaughters", &fDcaXiDaughters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosXi[3]", fPosXi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosCovXi[6]", fPosCovXi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBachMom[3]", fBachMom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBachMomCov[6]", fBachMomCov);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPdgCodeXi", &fPdgCodeXi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBachIdx", &fBachIdx);
      AliESDv0::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDcascade(void *p) {
      return  p ? new(p) ::AliESDcascade : new ::AliESDcascade;
   }
   static void *newArray_AliESDcascade(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDcascade[nElements] : new ::AliESDcascade[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDcascade(void *p) {
      delete ((::AliESDcascade*)p);
   }
   static void deleteArray_AliESDcascade(void *p) {
      delete [] ((::AliESDcascade*)p);
   }
   static void destruct_AliESDcascade(void *p) {
      typedef ::AliESDcascade current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDcascade

//______________________________________________________________________________
void AliVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVertex::Class(),this);
   }
}

//______________________________________________________________________________
void AliVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVertex.
      TClass *R__cl = ::AliVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosition[3]", fPosition);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigma", &fSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNContributors", &fNContributors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNIndices", &fNIndices);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIndices", &fIndices);
      AliVVertex::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliVertex(void *p) {
      return  p ? new(p) ::AliVertex : new ::AliVertex;
   }
   static void *newArray_AliVertex(Long_t nElements, void *p) {
      return p ? new(p) ::AliVertex[nElements] : new ::AliVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliVertex(void *p) {
      delete ((::AliVertex*)p);
   }
   static void deleteArray_AliVertex(void *p) {
      delete [] ((::AliVertex*)p);
   }
   static void destruct_AliVertex(void *p) {
      typedef ::AliVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVertex

//______________________________________________________________________________
void AliESDVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDVertex::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDVertex.
      TClass *R__cl = ::AliESDVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCovXX", &fCovXX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCovXY", &fCovXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCovYY", &fCovYY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCovXZ", &fCovXZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCovYZ", &fCovYZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCovZZ", &fCovZZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSNR[3]", fSNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2", &fChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fID", &fID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBCID", &fBCID);
      AliVertex::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDVertex(void *p) {
      return  p ? new(p) ::AliESDVertex : new ::AliESDVertex;
   }
   static void *newArray_AliESDVertex(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDVertex[nElements] : new ::AliESDVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDVertex(void *p) {
      delete ((::AliESDVertex*)p);
   }
   static void deleteArray_AliESDVertex(void *p) {
      delete [] ((::AliESDVertex*)p);
   }
   static void destruct_AliESDVertex(void *p) {
      typedef ::AliESDVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDVertex

//______________________________________________________________________________
void AliESDpid::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDpid.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDpid::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDpid::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDpid::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDpid.
      TClass *R__cl = ::AliESDpid::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRangeTOFMismatch", &fRangeTOFMismatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEventHandler", &fEventHandler);
      AliPIDResponse::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDpid(void *p) {
      return  p ? new(p) ::AliESDpid : new ::AliESDpid;
   }
   static void *newArray_AliESDpid(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDpid[nElements] : new ::AliESDpid[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDpid(void *p) {
      delete ((::AliESDpid*)p);
   }
   static void deleteArray_AliESDpid(void *p) {
      delete [] ((::AliESDpid*)p);
   }
   static void destruct_AliESDpid(void *p) {
      typedef ::AliESDpid current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDpid

//______________________________________________________________________________
void AliESDkink::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDkink.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDkink::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDkink::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDkink::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDkink.
      TClass *R__cl = ::AliESDkink::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParamDaughter", &fParamDaughter);
      R__insp.InspectMember(fParamDaughter, "fParamDaughter.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParamMother", &fParamMother);
      R__insp.InspectMember(fParamMother, "fParamMother.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDist1", &fDist1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDist2", &fDist2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPdr[3]", fPdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXr[3]", fXr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPm[3]", fPm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRr", &fRr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShapeFactor", &fShapeFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCdensity[2][2]", fTPCdensity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAngle[3]", fAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLab[2]", fLab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndex[2]", fIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fID", &fID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRow0", &fRow0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMultiple[2]", fMultiple);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTPCncls[2]", fTPCncls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus[12]", fStatus);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDkink(void *p) {
      return  p ? new(p) ::AliESDkink : new ::AliESDkink;
   }
   static void *newArray_AliESDkink(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDkink[nElements] : new ::AliESDkink[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDkink(void *p) {
      delete ((::AliESDkink*)p);
   }
   static void deleteArray_AliESDkink(void *p) {
      delete [] ((::AliESDkink*)p);
   }
   static void destruct_AliESDkink(void *p) {
      typedef ::AliESDkink current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDkink

//______________________________________________________________________________
void AliESDV0Params::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDV0Params.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDV0Params::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDV0Params::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDV0Params::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDV0Params.
      TClass *R__cl = ::AliESDV0Params::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPSigmaOffsetD0", &fPSigmaOffsetD0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPSigmaOffsetAP0", &fPSigmaOffsetAP0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPSigmaMaxDE", &fPSigmaMaxDE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPSigmaOffsetDE", &fPSigmaOffsetDE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPSigmaCoefDE", &fPSigmaCoefDE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPSigmaRminDE", &fPSigmaRminDE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPSigmaBase0APE", &fPSigmaBase0APE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPSigmaMaxAPE", &fPSigmaMaxAPE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPSigmaR0APE", &fPSigmaR0APE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPSigmaR1APE", &fPSigmaR1APE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPSigmaP0APE", &fPSigmaP0APE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPSigmaP1APE", &fPSigmaP1APE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPMinFractionAP0", &fPMinFractionAP0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPMaxFractionAP0", &fPMaxFractionAP0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPMinAP0", &fPMinAP0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPMinFractionD0", &fPMinFractionD0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPMaxFractionD0", &fPMaxFractionD0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPMinD0", &fPMinD0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMaxDist0", &fkMaxDist0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMaxDist1", &fkMaxDist1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMaxDist", &fkMaxDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinPointAngle", &fkMinPointAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinPointAngle2", &fkMinPointAngle2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinR", &fkMinR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMaxR", &fkMaxR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinPABestConst", &fkMinPABestConst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMaxRBestConst", &fkMaxRBestConst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkCausality0Cut", &fkCausality0Cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkLikelihood01Cut", &fkLikelihood01Cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkLikelihood1Cut", &fkLikelihood1Cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkCombinedCut", &fkCombinedCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinClFullTrk", &fkMinClFullTrk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinTgl0", &fkMinTgl0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinClForb0", &fkMinClForb0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinRTgl0", &fkMinRTgl0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinNormDistForbTgl0", &fkMinNormDistForbTgl0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinNormDistForb1", &fkMinNormDistForb1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinNormDistForb2", &fkMinNormDistForb2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinNormDistForb3", &fkMinNormDistForb3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinNormDistForb4", &fkMinNormDistForb4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinNormDistForb5", &fkMinNormDistForb5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinNormDistForbProt", &fkMinNormDistForbProt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMaxPidProbPionForb", &fkMaxPidProbPionForb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinRTPCdensity", &fkMinRTPCdensity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMaxRTPCdensity0", &fkMaxRTPCdensity0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMaxRTPCdensity10", &fkMaxRTPCdensity10);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMaxRTPCdensity20", &fkMaxRTPCdensity20);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMaxRTPCdensity30", &fkMaxRTPCdensity30);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinTPCdensity", &fkMinTPCdensity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinTgl1", &fkMinTgl1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinTgl2", &fkMinTgl2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinchi2before0", &fkMinchi2before0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinchi2before1", &fkMinchi2before1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinchi2after0", &fkMinchi2after0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMinchi2after1", &fkMinchi2after1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkAddchi2SharedCl", &fkAddchi2SharedCl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkAddchi2NegCl0", &fkAddchi2NegCl0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkAddchi2NegCl1", &fkAddchi2NegCl1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkSigp0Par0", &fkSigp0Par0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkSigp0Par1", &fkSigp0Par1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkSigp0Par2", &fkSigp0Par2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkSigpPar0", &fkSigpPar0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkSigpPar1", &fkSigpPar1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkSigpPar2", &fkSigpPar2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkMaxDcaLh0", &fkMaxDcaLh0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkChi2KF", &fkChi2KF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fkRobustChi2KF", &fkRobustChi2KF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fgStreamLevel", &fgStreamLevel);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDV0Params(void *p) {
      return  p ? new(p) ::AliESDV0Params : new ::AliESDV0Params;
   }
   static void *newArray_AliESDV0Params(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDV0Params[nElements] : new ::AliESDV0Params[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDV0Params(void *p) {
      delete ((::AliESDV0Params*)p);
   }
   static void deleteArray_AliESDV0Params(void *p) {
      delete [] ((::AliESDV0Params*)p);
   }
   static void destruct_AliESDV0Params(void *p) {
      typedef ::AliESDV0Params current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDV0Params

//______________________________________________________________________________
void AliESDCaloCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDCaloCluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDCaloCluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDCaloCluster::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDCaloCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDCaloCluster.
      TClass *R__cl = ::AliESDCaloCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTracksMatched", &fTracksMatched);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLabels", &fLabels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNCells", &fNCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCellsAbsId", &fCellsAbsId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCellsAmpFraction", &fCellsAmpFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGlobalPos[3]", fGlobalPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergy", &fEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDispersion", &fDispersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2", &fChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM20", &fM20);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM02", &fM02);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEmcCpvDistance", &fEmcCpvDistance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackDx", &fTrackDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackDz", &fTrackDz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDistToBadChannel", &fDistToBadChannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPID[14]", fPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fID", &fID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNExMax", &fNExMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusterType", &fClusterType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOF", &fTOF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoreEnergy", &fCoreEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCEnergyFraction", &fMCEnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsExotic", &fIsExotic);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUserDefEnergy[5]", fUserDefEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNLabel", &fNLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusterMCEdepFraction", &fClusterMCEdepFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCellsMCEdepFractionMap", &fCellsMCEdepFractionMap);
      AliVCluster::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDCaloCluster(void *p) {
      return  p ? new(p) ::AliESDCaloCluster : new ::AliESDCaloCluster;
   }
   static void *newArray_AliESDCaloCluster(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDCaloCluster[nElements] : new ::AliESDCaloCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDCaloCluster(void *p) {
      delete ((::AliESDCaloCluster*)p);
   }
   static void deleteArray_AliESDCaloCluster(void *p) {
      delete [] ((::AliESDCaloCluster*)p);
   }
   static void destruct_AliESDCaloCluster(void *p) {
      typedef ::AliESDCaloCluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDCaloCluster

//______________________________________________________________________________
void AliESDMuonCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDMuonCluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDMuonCluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDMuonCluster::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDMuonCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDMuonCluster.
      TClass *R__cl = ::AliESDMuonCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXYZ[3]", fXYZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrXY[2]", fErrXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2", &fChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPads", &fPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPads", &fNPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPadsId", &fPadsId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabel", &fLabel);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDMuonCluster(void *p) {
      return  p ? new(p) ::AliESDMuonCluster : new ::AliESDMuonCluster;
   }
   static void *newArray_AliESDMuonCluster(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDMuonCluster[nElements] : new ::AliESDMuonCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDMuonCluster(void *p) {
      delete ((::AliESDMuonCluster*)p);
   }
   static void deleteArray_AliESDMuonCluster(void *p) {
      delete [] ((::AliESDMuonCluster*)p);
   }
   static void destruct_AliESDMuonCluster(void *p) {
      typedef ::AliESDMuonCluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDMuonCluster

//______________________________________________________________________________
void AliESDMuonPad::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDMuonPad.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDMuonPad::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDMuonPad::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDMuonPad::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDMuonPad.
      TClass *R__cl = ::AliESDMuonPad::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADC", &fADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCharge", &fCharge);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDMuonPad(void *p) {
      return  p ? new(p) ::AliESDMuonPad : new ::AliESDMuonPad;
   }
   static void *newArray_AliESDMuonPad(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDMuonPad[nElements] : new ::AliESDMuonPad[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDMuonPad(void *p) {
      delete ((::AliESDMuonPad*)p);
   }
   static void deleteArray_AliESDMuonPad(void *p) {
      delete [] ((::AliESDMuonPad*)p);
   }
   static void destruct_AliESDMuonPad(void *p) {
      typedef ::AliESDMuonPad current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDMuonPad

//______________________________________________________________________________
void AliKFParticleBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliKFParticleBase.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliKFParticleBase::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliKFParticleBase::Class(),this);
   }
}

//______________________________________________________________________________
void AliKFParticleBase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliKFParticleBase.
      TClass *R__cl = ::AliKFParticleBase::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fP[8]", fP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fC[36]", fC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQ", &fQ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNDF", &fNDF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2", &fChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSFromDecay", &fSFromDecay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAtProductionVertex", &fAtProductionVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVtxGuess[3]", fVtxGuess);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLinearized", &fIsLinearized);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConstructMethod", &fConstructMethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SumDaughterMass", &SumDaughterMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMassHypo", &fMassHypo);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliKFParticleBase(void *p) {
      delete ((::AliKFParticleBase*)p);
   }
   static void deleteArray_AliKFParticleBase(void *p) {
      delete [] ((::AliKFParticleBase*)p);
   }
   static void destruct_AliKFParticleBase(void *p) {
      typedef ::AliKFParticleBase current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliKFParticleBase

//______________________________________________________________________________
void AliKFParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliKFParticle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliKFParticle::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliKFParticle::Class(),this);
   }
}

//______________________________________________________________________________
void AliKFParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliKFParticle.
      TClass *R__cl = ::AliKFParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      AliKFParticleBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliKFParticle(void *p) {
      return  p ? new(p) ::AliKFParticle : new ::AliKFParticle;
   }
   static void *newArray_AliKFParticle(Long_t nElements, void *p) {
      return p ? new(p) ::AliKFParticle[nElements] : new ::AliKFParticle[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliKFParticle(void *p) {
      delete ((::AliKFParticle*)p);
   }
   static void deleteArray_AliKFParticle(void *p) {
      delete [] ((::AliKFParticle*)p);
   }
   static void destruct_AliKFParticle(void *p) {
      typedef ::AliKFParticle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliKFParticle

//______________________________________________________________________________
void AliKFVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliKFVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliKFVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliKFVertex::Class(),this);
   }
}

//______________________________________________________________________________
void AliKFVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliKFVertex.
      TClass *R__cl = ::AliKFVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsConstrained", &fIsConstrained);
      AliKFParticle::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliKFVertex(void *p) {
      return  p ? new(p) ::AliKFVertex : new ::AliKFVertex;
   }
   static void *newArray_AliKFVertex(Long_t nElements, void *p) {
      return p ? new(p) ::AliKFVertex[nElements] : new ::AliKFVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliKFVertex(void *p) {
      delete ((::AliKFVertex*)p);
   }
   static void deleteArray_AliKFVertex(void *p) {
      delete [] ((::AliKFVertex*)p);
   }
   static void destruct_AliKFVertex(void *p) {
      typedef ::AliKFVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliKFVertex

//______________________________________________________________________________
void AliKalmanTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliKalmanTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliKalmanTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliKalmanTrack::Class(),this);
   }
}

//______________________________________________________________________________
void AliKalmanTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliKalmanTrack.
      TClass *R__cl = ::AliKalmanTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFakeRatio", &fFakeRatio);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2", &fChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMass", &fMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLab", &fLab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fN", &fN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStartTimeIntegral", &fStartTimeIntegral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIntegratedTime[9]", fIntegratedTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIntegratedLength", &fIntegratedLength);
      AliExternalTrackParam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliKalmanTrack(void *p) {
      delete ((::AliKalmanTrack*)p);
   }
   static void deleteArray_AliKalmanTrack(void *p) {
      delete [] ((::AliKalmanTrack*)p);
   }
   static void destruct_AliKalmanTrack(void *p) {
      typedef ::AliKalmanTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliKalmanTrack

//______________________________________________________________________________
void AliVertexerTracks::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVertexerTracks.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVertexerTracks::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVertexerTracks::Class(),this);
   }
}

//______________________________________________________________________________
void AliVertexerTracks::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVertexerTracks.
      TClass *R__cl = ::AliVertexerTracks::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVert", &fVert);
      R__insp.InspectMember(fVert, "fVert.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCurrentVertex", &fCurrentVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMode", &fMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFieldkG", &fFieldkG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNominalPos[3]", fNominalPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNominalCov[6]", fNominalCov);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrkArraySel", &fTrkArraySel);
      R__insp.InspectMember(fTrkArraySel, "fTrkArraySel.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIdSel", &fIdSel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrksToSkip", &fTrksToSkip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTrksToSkip", &fNTrksToSkip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConstraint", &fConstraint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOnlyFitter", &fOnlyFitter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinTracks", &fMinTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinClusters", &fMinClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDCAcut", &fDCAcut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDCAcutIter0", &fDCAcutIter0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNSigma", &fNSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxd0z0", &fMaxd0z0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinDetFitter", &fMinDetFitter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxTgl", &fMaxTgl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fITSrefit", &fITSrefit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fITSpureSA", &fITSpureSA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFiducialR", &fFiducialR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFiducialZ", &fFiducialZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fnSigmaForUi00", &fnSigmaForUi00);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAlgo", &fAlgo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAlgoIter0", &fAlgoIter0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSelectOnTOFBunchCrossing", &fSelectOnTOFBunchCrossing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKeepAlsoUnflaggedTOFBunchCrossing", &fKeepAlsoUnflaggedTOFBunchCrossing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVWSum", &fMVWSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVWE2", &fMVWE2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVTukey2", &fMVTukey2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVSigma2", &fMVSigma2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVSig2Ini", &fMVSig2Ini);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVMaxSigma2", &fMVMaxSigma2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVMinSig2Red", &fMVMinSig2Red);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVMinDst", &fMVMinDst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVScanStep", &fMVScanStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVMaxWghNtr", &fMVMaxWghNtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMVFinalWBinary", &fMVFinalWBinary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBCSpacing", &fBCSpacing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMVVertices", &fMVVertices);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDisableBCInCPass0", &fDisableBCInCPass0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusterize", &fClusterize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaZCutForCluster", &fDeltaZCutForCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fnSigmaZCutForCluster", &fnSigmaZCutForCluster);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliVertexerTracks(void *p) {
      return  p ? new(p) ::AliVertexerTracks : new ::AliVertexerTracks;
   }
   static void *newArray_AliVertexerTracks(Long_t nElements, void *p) {
      return p ? new(p) ::AliVertexerTracks[nElements] : new ::AliVertexerTracks[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliVertexerTracks(void *p) {
      delete ((::AliVertexerTracks*)p);
   }
   static void deleteArray_AliVertexerTracks(void *p) {
      delete [] ((::AliVertexerTracks*)p);
   }
   static void destruct_AliVertexerTracks(void *p) {
      typedef ::AliVertexerTracks current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVertexerTracks

//______________________________________________________________________________
void AliStrLine::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliStrLine.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliStrLine::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliStrLine::Class(),this);
   }
}

//______________________________________________________________________________
void AliStrLine::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliStrLine.
      TClass *R__cl = ::AliStrLine::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fP0[3]", fP0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigma2P0[3]", fSigma2P0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWMatrix", &fWMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCd[3]", fCd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTpar", &fTpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdPoint[2]", fIdPoint);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliStrLine(void *p) {
      return  p ? new(p) ::AliStrLine : new ::AliStrLine;
   }
   static void *newArray_AliStrLine(Long_t nElements, void *p) {
      return p ? new(p) ::AliStrLine[nElements] : new ::AliStrLine[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliStrLine(void *p) {
      delete ((::AliStrLine*)p);
   }
   static void deleteArray_AliStrLine(void *p) {
      delete [] ((::AliStrLine*)p);
   }
   static void destruct_AliStrLine(void *p) {
      typedef ::AliStrLine current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliStrLine

//______________________________________________________________________________
void AliTrackPointArray::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTrackPointArray.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTrackPointArray::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTrackPointArray::Class(),this);
   }
}

//______________________________________________________________________________
void AliTrackPointArray::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTrackPointArray.
      TClass *R__cl = ::AliTrackPointArray::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSorted", &fSorted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPoints", &fNPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDriftTime", &fDriftTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChargeRatio", &fChargeRatio);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusterType", &fClusterType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIsExtra", &fIsExtra);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSize", &fSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCov", &fCov);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fVolumeID", &fVolumeID);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTrackPointArray(void *p) {
      return  p ? new(p) ::AliTrackPointArray : new ::AliTrackPointArray;
   }
   static void *newArray_AliTrackPointArray(Long_t nElements, void *p) {
      return p ? new(p) ::AliTrackPointArray[nElements] : new ::AliTrackPointArray[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTrackPointArray(void *p) {
      delete ((::AliTrackPointArray*)p);
   }
   static void deleteArray_AliTrackPointArray(void *p) {
      delete [] ((::AliTrackPointArray*)p);
   }
   static void destruct_AliTrackPointArray(void *p) {
      typedef ::AliTrackPointArray current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTrackPointArray

//______________________________________________________________________________
void AliTrackPoint::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTrackPoint.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTrackPoint::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTrackPoint::Class(),this);
   }
}

//______________________________________________________________________________
void AliTrackPoint::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTrackPoint.
      TClass *R__cl = ::AliTrackPoint::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDriftTime", &fDriftTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeRatio", &fChargeRatio);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusterType", &fClusterType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCov[6]", fCov);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsExtra", &fIsExtra);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVolumeID", &fVolumeID);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTrackPoint(void *p) {
      return  p ? new(p) ::AliTrackPoint : new ::AliTrackPoint;
   }
   static void *newArray_AliTrackPoint(Long_t nElements, void *p) {
      return p ? new(p) ::AliTrackPoint[nElements] : new ::AliTrackPoint[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTrackPoint(void *p) {
      delete ((::AliTrackPoint*)p);
   }
   static void deleteArray_AliTrackPoint(void *p) {
      delete [] ((::AliTrackPoint*)p);
   }
   static void destruct_AliTrackPoint(void *p) {
      typedef ::AliTrackPoint current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTrackPoint

//______________________________________________________________________________
void AliESDFMD::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDFMD.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDFMD::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDFMD::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDFMD::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDFMD.
      TClass *R__cl = ::AliESDFMD::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMultiplicity", &fMultiplicity);
      R__insp.InspectMember(fMultiplicity, "fMultiplicity.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEta", &fEta);
      R__insp.InspectMember(fEta, "fEta.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNoiseFactor", &fNoiseFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAngleCorrected", &fAngleCorrected);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDFMD(void *p) {
      return  p ? new(p) ::AliESDFMD : new ::AliESDFMD;
   }
   static void *newArray_AliESDFMD(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDFMD[nElements] : new ::AliESDFMD[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDFMD(void *p) {
      delete ((::AliESDFMD*)p);
   }
   static void deleteArray_AliESDFMD(void *p) {
      delete [] ((::AliESDFMD*)p);
   }
   static void destruct_AliESDFMD(void *p) {
      typedef ::AliESDFMD current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDFMD

//______________________________________________________________________________
void AliFMDMap::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliFMDMap.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliFMDMap::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliFMDMap::Class(),this);
   }
}

//______________________________________________________________________________
void AliFMDMap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliFMDMap.
      TClass *R__cl = ::AliFMDMap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxDetectors", &fMaxDetectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxRings", &fMaxRings);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxSectors", &fMaxSectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxStrips", &fMaxStrips);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliFMDMap(void *p) {
      delete ((::AliFMDMap*)p);
   }
   static void deleteArray_AliFMDMap(void *p) {
      delete [] ((::AliFMDMap*)p);
   }
   static void destruct_AliFMDMap(void *p) {
      typedef ::AliFMDMap current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliFMDMap

//______________________________________________________________________________
void AliFMDFloatMap::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliFMDFloatMap.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliFMDFloatMap::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliFMDFloatMap::Class(),this);
   }
}

//______________________________________________________________________________
void AliFMDFloatMap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliFMDFloatMap.
      TClass *R__cl = ::AliFMDFloatMap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotal", &fTotal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      AliFMDMap::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliFMDFloatMap(void *p) {
      return  p ? new(p) ::AliFMDFloatMap : new ::AliFMDFloatMap;
   }
   static void *newArray_AliFMDFloatMap(Long_t nElements, void *p) {
      return p ? new(p) ::AliFMDFloatMap[nElements] : new ::AliFMDFloatMap[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliFMDFloatMap(void *p) {
      delete ((::AliFMDFloatMap*)p);
   }
   static void deleteArray_AliFMDFloatMap(void *p) {
      delete [] ((::AliFMDFloatMap*)p);
   }
   static void destruct_AliFMDFloatMap(void *p) {
      typedef ::AliFMDFloatMap current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliFMDFloatMap

//______________________________________________________________________________
void AliESDVZERO::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDVZERO.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDVZERO::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDVZERO::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDVZERO::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDVZERO.
      TClass *R__cl = ::AliESDVZERO::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBBtriggerV0A", &fBBtriggerV0A);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBGtriggerV0A", &fBGtriggerV0A);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBBtriggerV0C", &fBBtriggerV0C);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBGtriggerV0C", &fBGtriggerV0C);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMultiplicity[64]", fMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAdc[64]", fAdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime[64]", fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidth[64]", fWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBBFlag[64]", fBBFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBGFlag[64]", fBGFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fV0ATime", &fV0ATime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fV0CTime", &fV0CTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fV0ATimeError", &fV0ATimeError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fV0CTimeError", &fV0CTimeError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fV0ADecision", &fV0ADecision);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fV0CDecision", &fV0CDecision);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerChargeA", &fTriggerChargeA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerChargeC", &fTriggerChargeC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerBits", &fTriggerBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsBB[64][21]", fIsBB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsBG[64][21]", fIsBG);
      AliVVZERO::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDVZERO(void *p) {
      return  p ? new(p) ::AliESDVZERO : new ::AliESDVZERO;
   }
   static void *newArray_AliESDVZERO(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDVZERO[nElements] : new ::AliESDVZERO[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDVZERO(void *p) {
      delete ((::AliESDVZERO*)p);
   }
   static void deleteArray_AliESDVZERO(void *p) {
      delete [] ((::AliESDVZERO*)p);
   }
   static void destruct_AliESDVZERO(void *p) {
      typedef ::AliESDVZERO current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDVZERO

//______________________________________________________________________________
void AliESDTZERO::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDTZERO.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDTZERO::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDTZERO::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDTZERO::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDTZERO.
      TClass *R__cl = ::AliESDTZERO::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0clock", &fT0clock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0TOF[3]", fT0TOF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0zVertex", &fT0zVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0timeStart", &fT0timeStart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0trig", &fT0trig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0time[24]", fT0time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0amplitude[24]", fT0amplitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeFull[24][5]", fTimeFull);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOrA[5]", fOrA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOrC[5]", fOrC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTVDC[5]", fTVDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPileup", &fPileup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSattelite", &fSattelite);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMultC", &fMultC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMultA", &fMultA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBackground", &fBackground);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPileupTime[6]", fPileupTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0TOFbest[3]", fT0TOFbest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0NewAmplitude[24]", fT0NewAmplitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPileupBits", &fPileupBits);
      R__insp.InspectMember(fPileupBits, "fPileupBits.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDTZERO(void *p) {
      return  p ? new(p) ::AliESDTZERO : new ::AliESDTZERO;
   }
   static void *newArray_AliESDTZERO(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDTZERO[nElements] : new ::AliESDTZERO[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDTZERO(void *p) {
      delete ((::AliESDTZERO*)p);
   }
   static void deleteArray_AliESDTZERO(void *p) {
      delete [] ((::AliESDTZERO*)p);
   }
   static void destruct_AliESDTZERO(void *p) {
      typedef ::AliESDTZERO current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDTZERO

//______________________________________________________________________________
void AliESDACORDE::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDACORDE.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDACORDE::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDACORDE::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDACORDE::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDACORDE.
      TClass *R__cl = ::AliESDACORDE::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fACORDEBitPattern[60]", fACORDEBitPattern);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDACORDE(void *p) {
      return  p ? new(p) ::AliESDACORDE : new ::AliESDACORDE;
   }
   static void *newArray_AliESDACORDE(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDACORDE[nElements] : new ::AliESDACORDE[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDACORDE(void *p) {
      delete ((::AliESDACORDE*)p);
   }
   static void deleteArray_AliESDACORDE(void *p) {
      delete [] ((::AliESDACORDE*)p);
   }
   static void destruct_AliESDACORDE(void *p) {
      typedef ::AliESDACORDE current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDACORDE

//______________________________________________________________________________
void AliESDAD::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDAD.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDAD::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDAD::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDAD::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDAD.
      TClass *R__cl = ::AliESDAD::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBBtriggerADA", &fBBtriggerADA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBGtriggerADA", &fBGtriggerADA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBBtriggerADC", &fBBtriggerADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBGtriggerADC", &fBGtriggerADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMultiplicity[16]", fMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAdc[16]", fAdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime[16]", fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidth[16]", fWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBBFlag[16]", fBBFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBGFlag[16]", fBGFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADATime", &fADATime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADCTime", &fADCTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADATimeError", &fADATimeError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADCTimeError", &fADCTimeError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADADecision", &fADADecision);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADCDecision", &fADCDecision);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerChargeA", &fTriggerChargeA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerChargeC", &fTriggerChargeC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerBits", &fTriggerBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsBB[16][21]", fIsBB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsBG[16][21]", fIsBG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAdcTail[16]", fAdcTail);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAdcTrigger[16]", fAdcTrigger);
      AliVAD::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDAD(void *p) {
      return  p ? new(p) ::AliESDAD : new ::AliESDAD;
   }
   static void *newArray_AliESDAD(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDAD[nElements] : new ::AliESDAD[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDAD(void *p) {
      delete ((::AliESDAD*)p);
   }
   static void deleteArray_AliESDAD(void *p) {
      delete [] ((::AliESDAD*)p);
   }
   static void destruct_AliESDAD(void *p) {
      typedef ::AliESDAD current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDAD

//______________________________________________________________________________
void AliESDMultITS::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDMultITS.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDMultITS::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDMultITS::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDMultITS::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDMultITS.
      TClass *R__cl = ::AliESDMultITS::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi", &fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEta", &fEta);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDMultITS(void *p) {
      return  p ? new(p) ::AliESDMultITS : new ::AliESDMultITS;
   }
   static void *newArray_AliESDMultITS(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDMultITS[nElements] : new ::AliESDMultITS[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDMultITS(void *p) {
      delete ((::AliESDMultITS*)p);
   }
   static void deleteArray_AliESDMultITS(void *p) {
      delete [] ((::AliESDMultITS*)p);
   }
   static void destruct_AliESDMultITS(void *p) {
      typedef ::AliESDMultITS current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDMultITS

//______________________________________________________________________________
void AliMultiplicity::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliMultiplicity.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliMultiplicity::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliMultiplicity::Class(),this);
   }
}

//______________________________________________________________________________
void AliMultiplicity::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliMultiplicity.
      TClass *R__cl = ::AliMultiplicity::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNtracks", &fNtracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNsingle", &fNsingle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNsingleSPD2", &fNsingleSPD2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDPhiWindow2", &fDPhiWindow2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDThetaWindow2", &fDThetaWindow2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDPhiShift", &fDPhiShift);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNStdDev", &fNStdDev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLabels", &fLabels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLabelsL2", &fLabelsL2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fUsedClusS", &fUsedClusS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fUsedClusT", &fUsedClusT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTCl2Tracks[2][2]", &fTCl2Tracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSCl2Tracks[2]", &fSCl2Tracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTh", &fTh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPhi", &fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDeltTh", &fDeltTh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDeltPhi", &fDeltPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fThsingle", &fThsingle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPhisingle", &fPhisingle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLabelssingle", &fLabelssingle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFiredChips[2]", fFiredChips);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fITSClusters[6]", fITSClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFastOrFiredChips", &fFastOrFiredChips);
      R__insp.InspectMember(fFastOrFiredChips, "fFastOrFiredChips.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusterFiredChips", &fClusterFiredChips);
      R__insp.InspectMember(fClusterFiredChips, "fClusterFiredChips.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNtracksOnline", &fNtracksOnline);
      AliVMultiplicity::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliMultiplicity(void *p) {
      return  p ? new(p) ::AliMultiplicity : new ::AliMultiplicity;
   }
   static void *newArray_AliMultiplicity(Long_t nElements, void *p) {
      return p ? new(p) ::AliMultiplicity[nElements] : new ::AliMultiplicity[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliMultiplicity(void *p) {
      delete ((::AliMultiplicity*)p);
   }
   static void deleteArray_AliMultiplicity(void *p) {
      delete [] ((::AliMultiplicity*)p);
   }
   static void destruct_AliMultiplicity(void *p) {
      typedef ::AliMultiplicity current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliMultiplicity

//______________________________________________________________________________
void AliSelector::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliSelector.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliSelector::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliSelector::Class(),this);
   }
}

//______________________________________________________________________________
void AliSelector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliSelector.
      TClass *R__cl = ::AliSelector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESD", &fESD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCountFiles", &fCountFiles);
      TSelector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliSelector(void *p) {
      return  p ? new(p) ::AliSelector : new ::AliSelector;
   }
   static void *newArray_AliSelector(Long_t nElements, void *p) {
      return p ? new(p) ::AliSelector[nElements] : new ::AliSelector[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliSelector(void *p) {
      delete ((::AliSelector*)p);
   }
   static void deleteArray_AliSelector(void *p) {
      delete [] ((::AliSelector*)p);
   }
   static void destruct_AliSelector(void *p) {
      typedef ::AliSelector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliSelector

//______________________________________________________________________________
void AliRawDataErrorLog::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliRawDataErrorLog.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliRawDataErrorLog::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliRawDataErrorLog::Class(),this);
   }
}

//______________________________________________________________________________
void AliRawDataErrorLog::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliRawDataErrorLog.
      TClass *R__cl = ::AliRawDataErrorLog::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNumber", &fEventNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDdlID", &fDdlID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrorLevel", &fErrorLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrorCode", &fErrorCode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCount", &fCount);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliRawDataErrorLog(void *p) {
      return  p ? new(p) ::AliRawDataErrorLog : new ::AliRawDataErrorLog;
   }
   static void *newArray_AliRawDataErrorLog(Long_t nElements, void *p) {
      return p ? new(p) ::AliRawDataErrorLog[nElements] : new ::AliRawDataErrorLog[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliRawDataErrorLog(void *p) {
      delete ((::AliRawDataErrorLog*)p);
   }
   static void deleteArray_AliRawDataErrorLog(void *p) {
      delete [] ((::AliRawDataErrorLog*)p);
   }
   static void destruct_AliRawDataErrorLog(void *p) {
      typedef ::AliRawDataErrorLog current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliRawDataErrorLog

//______________________________________________________________________________
void AliMeanVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliMeanVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliMeanVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliMeanVertex::Class(),this);
   }
}

//______________________________________________________________________________
void AliMeanVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliMeanVertex.
      TClass *R__cl = ::AliMeanVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrW[3]", fErrW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotTracklets", &fTotTracklets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAverTracklets", &fAverTracklets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaOnAverTrack", &fSigmaOnAverTrack);
      AliESDVertex::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliMeanVertex(void *p) {
      return  p ? new(p) ::AliMeanVertex : new ::AliMeanVertex;
   }
   static void *newArray_AliMeanVertex(Long_t nElements, void *p) {
      return p ? new(p) ::AliMeanVertex[nElements] : new ::AliMeanVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliMeanVertex(void *p) {
      delete ((::AliMeanVertex*)p);
   }
   static void deleteArray_AliMeanVertex(void *p) {
      delete [] ((::AliMeanVertex*)p);
   }
   static void destruct_AliMeanVertex(void *p) {
      typedef ::AliMeanVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliMeanVertex

//______________________________________________________________________________
void AliESDCaloCells::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDCaloCells.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDCaloCells::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDCaloCells::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDCaloCells::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDCaloCells.
      TClass *R__cl = ::AliESDCaloCells::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNCells", &fNCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHGLG", &fHGLG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCellNumber", &fCellNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmplitude", &fAmplitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEFraction", &fEFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMCLabel", &fMCLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsSorted", &fIsSorted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      AliVCaloCells::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDCaloCells(void *p) {
      return  p ? new(p) ::AliESDCaloCells : new ::AliESDCaloCells;
   }
   static void *newArray_AliESDCaloCells(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDCaloCells[nElements] : new ::AliESDCaloCells[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDCaloCells(void *p) {
      delete ((::AliESDCaloCells*)p);
   }
   static void deleteArray_AliESDCaloCells(void *p) {
      delete [] ((::AliESDCaloCells*)p);
   }
   static void destruct_AliESDCaloCells(void *p) {
      typedef ::AliESDCaloCells current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDCaloCells

//______________________________________________________________________________
void AliESDVZEROfriend::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDVZEROfriend.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDVZEROfriend::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDVZEROfriend::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDVZEROfriend::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDVZEROfriend.
      TClass *R__cl = ::AliESDVZEROfriend::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBBScalers[64]", fBBScalers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBGScalers[64]", fBGScalers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScalers[16]", fScalers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBunchNumbers[10]", fBunchNumbers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeMB[64][10]", fChargeMB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsIntMB[64][10]", fIsIntMB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsBBMB[64][10]", fIsBBMB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsBGMB[64][10]", fIsBGMB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADC[64][21]", fADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsInt[64][21]", fIsInt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsBB[64][21]", fIsBB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsBG[64][21]", fIsBG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime[64]", fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidth[64]", fWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrigger", &fTrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerMask", &fTriggerMask);
      AliVVZEROfriend::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDVZEROfriend(void *p) {
      return  p ? new(p) ::AliESDVZEROfriend : new ::AliESDVZEROfriend;
   }
   static void *newArray_AliESDVZEROfriend(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDVZEROfriend[nElements] : new ::AliESDVZEROfriend[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDVZEROfriend(void *p) {
      delete ((::AliESDVZEROfriend*)p);
   }
   static void deleteArray_AliESDVZEROfriend(void *p) {
      delete [] ((::AliESDVZEROfriend*)p);
   }
   static void destruct_AliESDVZEROfriend(void *p) {
      typedef ::AliESDVZEROfriend current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDVZEROfriend

//______________________________________________________________________________
void AliESDTZEROfriend::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDTZEROfriend.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDTZEROfriend::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDTZEROfriend::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDTZEROfriend::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDTZEROfriend.
      TClass *R__cl = ::AliESDTZEROfriend::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0time[24]", fT0time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0ampQTC[24]", fT0ampQTC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0ampLEDminCFD[24]", fT0ampLEDminCFD);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDTZEROfriend(void *p) {
      return  p ? new(p) ::AliESDTZEROfriend : new ::AliESDTZEROfriend;
   }
   static void *newArray_AliESDTZEROfriend(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDTZEROfriend[nElements] : new ::AliESDTZEROfriend[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDTZEROfriend(void *p) {
      delete ((::AliESDTZEROfriend*)p);
   }
   static void deleteArray_AliESDTZEROfriend(void *p) {
      delete [] ((::AliESDTZEROfriend*)p);
   }
   static void destruct_AliESDTZEROfriend(void *p) {
      typedef ::AliESDTZEROfriend current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDTZEROfriend

//______________________________________________________________________________
void AliESDADfriend::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDADfriend.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDADfriend::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDADfriend::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDADfriend::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDADfriend.
      TClass *R__cl = ::AliESDADfriend::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBBScalers[16]", fBBScalers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBGScalers[16]", fBGScalers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScalers[16]", fScalers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADC[16][21]", fADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsInt[16][21]", fIsInt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsBB[16][21]", fIsBB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsBG[16][21]", fIsBG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime[16]", fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidth[16]", fWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrigger", &fTrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerMask", &fTriggerMask);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDADfriend(void *p) {
      return  p ? new(p) ::AliESDADfriend : new ::AliESDADfriend;
   }
   static void *newArray_AliESDADfriend(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDADfriend[nElements] : new ::AliESDADfriend[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDADfriend(void *p) {
      delete ((::AliESDADfriend*)p);
   }
   static void deleteArray_AliESDADfriend(void *p) {
      delete [] ((::AliESDADfriend*)p);
   }
   static void destruct_AliESDADfriend(void *p) {
      typedef ::AliESDADfriend current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDADfriend

//______________________________________________________________________________
void AliESDHandler::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDHandler.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDHandler::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDHandler::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDHandler::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDHandler.
      TClass *R__cl = ::AliESDHandler::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fesdf", &fesdf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTreeEF", &fTreeEF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFileEF", &fFileEF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileName", &fFileName);
      R__insp.InspectMember(fFileName, "fFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsEventSelectedForFriends", &fIsEventSelectedForFriends);
      AliVEventHandler::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDHandler(void *p) {
      return  p ? new(p) ::AliESDHandler : new ::AliESDHandler;
   }
   static void *newArray_AliESDHandler(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDHandler[nElements] : new ::AliESDHandler[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDHandler(void *p) {
      delete ((::AliESDHandler*)p);
   }
   static void deleteArray_AliESDHandler(void *p) {
      delete [] ((::AliESDHandler*)p);
   }
   static void destruct_AliESDHandler(void *p) {
      typedef ::AliESDHandler current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDHandler

//______________________________________________________________________________
void AliTrackerBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTrackerBase.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTrackerBase::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTrackerBase::Class(),this);
   }
}

//______________________________________________________________________________
void AliTrackerBase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTrackerBase.
      TClass *R__cl = ::AliTrackerBase::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaX", &fSigmaX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaY", &fSigmaY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaZ", &fSigmaZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStamp", &fTimeStamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRun", &fRun);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTrackerBase(void *p) {
      return  p ? new(p) ::AliTrackerBase : new ::AliTrackerBase;
   }
   static void *newArray_AliTrackerBase(Long_t nElements, void *p) {
      return p ? new(p) ::AliTrackerBase[nElements] : new ::AliTrackerBase[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTrackerBase(void *p) {
      delete ((::AliTrackerBase*)p);
   }
   static void deleteArray_AliTrackerBase(void *p) {
      delete [] ((::AliTrackerBase*)p);
   }
   static void destruct_AliTrackerBase(void *p) {
      typedef ::AliTrackerBase current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTrackerBase

//______________________________________________________________________________
void AliTriggerIR::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTriggerIR.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTriggerIR::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTriggerIR::Class(),this);
   }
}

//______________________________________________________________________________
void AliTriggerIR::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTriggerIR.
      TClass *R__cl = ::AliTriggerIR::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOrbit", &fOrbit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNWord", &fNWord);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInt1", &fInt1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInt2", &fInt2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBC", &fBC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIncomplete", &fIncomplete);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTransErr", &fTransErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNWord2", &fNWord2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIntRun2", &fIntRun2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBC2", &fBC2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIncomplete2", &fIncomplete2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTransErr2", &fTransErr2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDDLflag", &fDDLflag);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTriggerIR(void *p) {
      return  p ? new(p) ::AliTriggerIR : new ::AliTriggerIR;
   }
   static void *newArray_AliTriggerIR(Long_t nElements, void *p) {
      return p ? new(p) ::AliTriggerIR[nElements] : new ::AliTriggerIR[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTriggerIR(void *p) {
      delete ((::AliTriggerIR*)p);
   }
   static void deleteArray_AliTriggerIR(void *p) {
      delete [] ((::AliTriggerIR*)p);
   }
   static void destruct_AliTriggerIR(void *p) {
      typedef ::AliTriggerIR current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTriggerIR

//______________________________________________________________________________
void AliTriggerScalersESD::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTriggerScalersESD.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTriggerScalersESD::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTriggerScalersESD::Class(),this);
   }
}

//______________________________________________________________________________
void AliTriggerScalersESD::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTriggerScalersESD.
      TClass *R__cl = ::AliTriggerScalersESD::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClassIndex", &fClassIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLOCB", &fLOCB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLOCA", &fLOCA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL1CB", &fL1CB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL1CA", &fL1CA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL2CB", &fL2CB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL2CA", &fL2CA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLMCB", &fLMCB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLMCA", &fLMCA);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTriggerScalersESD(void *p) {
      return  p ? new(p) ::AliTriggerScalersESD : new ::AliTriggerScalersESD;
   }
   static void *newArray_AliTriggerScalersESD(Long_t nElements, void *p) {
      return p ? new(p) ::AliTriggerScalersESD[nElements] : new ::AliTriggerScalersESD[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTriggerScalersESD(void *p) {
      delete ((::AliTriggerScalersESD*)p);
   }
   static void deleteArray_AliTriggerScalersESD(void *p) {
      delete [] ((::AliTriggerScalersESD*)p);
   }
   static void destruct_AliTriggerScalersESD(void *p) {
      typedef ::AliTriggerScalersESD current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTriggerScalersESD

//______________________________________________________________________________
void AliTriggerScalersRecordESD::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTriggerScalersRecordESD.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTriggerScalersRecordESD::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTriggerScalersRecordESD::Class(),this);
   }
}

//______________________________________________________________________________
void AliTriggerScalersRecordESD::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTriggerScalersRecordESD.
      TClass *R__cl = ::AliTriggerScalersRecordESD::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimestamp", &fTimestamp);
      R__insp.InspectMember(fTimestamp, "fTimestamp.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScalers", &fScalers);
      R__insp.InspectMember(fScalers, "fScalers.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeGroup", &fTimeGroup);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTriggerScalersRecordESD(void *p) {
      return  p ? new(p) ::AliTriggerScalersRecordESD : new ::AliTriggerScalersRecordESD;
   }
   static void *newArray_AliTriggerScalersRecordESD(Long_t nElements, void *p) {
      return p ? new(p) ::AliTriggerScalersRecordESD[nElements] : new ::AliTriggerScalersRecordESD[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTriggerScalersRecordESD(void *p) {
      delete ((::AliTriggerScalersRecordESD*)p);
   }
   static void deleteArray_AliTriggerScalersRecordESD(void *p) {
      delete [] ((::AliTriggerScalersRecordESD*)p);
   }
   static void destruct_AliTriggerScalersRecordESD(void *p) {
      typedef ::AliTriggerScalersRecordESD current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTriggerScalersRecordESD

//______________________________________________________________________________
void AliTriggerCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTriggerCluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTriggerCluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTriggerCluster::Class(),this);
   }
}

//______________________________________________________________________________
void AliTriggerCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTriggerCluster.
      TClass *R__cl = ::AliTriggerCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusterMask", &fClusterMask);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTriggerCluster(void *p) {
      return  p ? new(p) ::AliTriggerCluster : new ::AliTriggerCluster;
   }
   static void *newArray_AliTriggerCluster(Long_t nElements, void *p) {
      return p ? new(p) ::AliTriggerCluster[nElements] : new ::AliTriggerCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTriggerCluster(void *p) {
      delete ((::AliTriggerCluster*)p);
   }
   static void deleteArray_AliTriggerCluster(void *p) {
      delete [] ((::AliTriggerCluster*)p);
   }
   static void destruct_AliTriggerCluster(void *p) {
      typedef ::AliTriggerCluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTriggerCluster

//______________________________________________________________________________
void AliTriggerDescriptor::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTriggerDescriptor.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTriggerDescriptor::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTriggerDescriptor::Class(),this);
   }
}

//______________________________________________________________________________
void AliTriggerDescriptor::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTriggerDescriptor.
      TClass *R__cl = ::AliTriggerDescriptor::IsA();
      if (R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTriggerDescriptor(void *p) {
      return  p ? new(p) ::AliTriggerDescriptor : new ::AliTriggerDescriptor;
   }
   static void *newArray_AliTriggerDescriptor(Long_t nElements, void *p) {
      return p ? new(p) ::AliTriggerDescriptor[nElements] : new ::AliTriggerDescriptor[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTriggerDescriptor(void *p) {
      delete ((::AliTriggerDescriptor*)p);
   }
   static void deleteArray_AliTriggerDescriptor(void *p) {
      delete [] ((::AliTriggerDescriptor*)p);
   }
   static void destruct_AliTriggerDescriptor(void *p) {
      typedef ::AliTriggerDescriptor current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTriggerDescriptor

//______________________________________________________________________________
void AliTriggerInput::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTriggerInput.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTriggerInput::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTriggerInput::Class(),this);
   }
}

//______________________________________________________________________________
void AliTriggerInput::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTriggerInput.
      TClass *R__cl = ::AliTriggerInput::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMask", &fMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fValue", &fValue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSignature", &fSignature);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLevel", &fLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorId", &fDetectorId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsActive", &fIsActive);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndexCTP", &fIndexCTP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndexSwitch", &fIndexSwitch);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTriggerInput(void *p) {
      return  p ? new(p) ::AliTriggerInput : new ::AliTriggerInput;
   }
   static void *newArray_AliTriggerInput(Long_t nElements, void *p) {
      return p ? new(p) ::AliTriggerInput[nElements] : new ::AliTriggerInput[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTriggerInput(void *p) {
      delete ((::AliTriggerInput*)p);
   }
   static void deleteArray_AliTriggerInput(void *p) {
      delete [] ((::AliTriggerInput*)p);
   }
   static void destruct_AliTriggerInput(void *p) {
      typedef ::AliTriggerInput current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTriggerInput

//______________________________________________________________________________
void AliTriggerInteraction::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTriggerInteraction.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTriggerInteraction::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTriggerInteraction::Class(),this);
   }
}

//______________________________________________________________________________
void AliTriggerInteraction::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTriggerInteraction.
      TClass *R__cl = ::AliTriggerInteraction::IsA();
      if (R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTriggerInteraction(void *p) {
      return  p ? new(p) ::AliTriggerInteraction : new ::AliTriggerInteraction;
   }
   static void *newArray_AliTriggerInteraction(Long_t nElements, void *p) {
      return p ? new(p) ::AliTriggerInteraction[nElements] : new ::AliTriggerInteraction[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTriggerInteraction(void *p) {
      delete ((::AliTriggerInteraction*)p);
   }
   static void deleteArray_AliTriggerInteraction(void *p) {
      delete [] ((::AliTriggerInteraction*)p);
   }
   static void destruct_AliTriggerInteraction(void *p) {
      typedef ::AliTriggerInteraction current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTriggerInteraction

//______________________________________________________________________________
void AliTriggerPFProtection::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTriggerPFProtection.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTriggerPFProtection::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTriggerPFProtection::Class(),this);
   }
}

//______________________________________________________________________________
void AliTriggerPFProtection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTriggerPFProtection.
      TClass *R__cl = ::AliTriggerPFProtection::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fINTa", &fINTa);
      R__insp.InspectMember(fINTa, "fINTa.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fINTb", &fINTb);
      R__insp.InspectMember(fINTb, "fINTb.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fINT", &fINT);
      R__insp.InspectMember(fINT, "fINT.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNa1", &fNa1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNa2", &fNa2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTa", &fTa);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNb1", &fNb1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNb2", &fNb2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTb", &fTb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPFdef[12]", fPFdef);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInter", &fInter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBCmask", &fBCmask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVersion", &fVersion);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTriggerPFProtection(void *p) {
      return  p ? new(p) ::AliTriggerPFProtection : new ::AliTriggerPFProtection;
   }
   static void *newArray_AliTriggerPFProtection(Long_t nElements, void *p) {
      return p ? new(p) ::AliTriggerPFProtection[nElements] : new ::AliTriggerPFProtection[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTriggerPFProtection(void *p) {
      delete ((::AliTriggerPFProtection*)p);
   }
   static void deleteArray_AliTriggerPFProtection(void *p) {
      delete [] ((::AliTriggerPFProtection*)p);
   }
   static void destruct_AliTriggerPFProtection(void *p) {
      typedef ::AliTriggerPFProtection current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTriggerPFProtection

//______________________________________________________________________________
void AliTriggerBCMask::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTriggerBCMask.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTriggerBCMask::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTriggerBCMask::Class(),this);
   }
}

//______________________________________________________________________________
void AliTriggerBCMask::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTriggerBCMask.
      TClass *R__cl = ::AliTriggerBCMask::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBCMask[446]", fBCMask);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTriggerBCMask(void *p) {
      return  p ? new(p) ::AliTriggerBCMask : new ::AliTriggerBCMask;
   }
   static void *newArray_AliTriggerBCMask(Long_t nElements, void *p) {
      return p ? new(p) ::AliTriggerBCMask[nElements] : new ::AliTriggerBCMask[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTriggerBCMask(void *p) {
      delete ((::AliTriggerBCMask*)p);
   }
   static void deleteArray_AliTriggerBCMask(void *p) {
      delete [] ((::AliTriggerBCMask*)p);
   }
   static void destruct_AliTriggerBCMask(void *p) {
      typedef ::AliTriggerBCMask current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTriggerBCMask

//______________________________________________________________________________
void AliTriggerClass::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTriggerClass.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTriggerClass::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTriggerClass::Class(),this);
   }
}

//______________________________________________________________________________
void AliTriggerClass::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTriggerClass.
      TClass *R__cl = ::AliTriggerClass::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClassMask", &fClassMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClassMaskNext50", &fClassMaskNext50);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndex", &fIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDescriptor", &fDescriptor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCluster", &fCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPFProtection", &fPFProtection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMask[13]", &fMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrescaler", &fPrescaler);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAllRare", &fAllRare);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeGroup", &fTimeGroup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeWindow", &fTimeWindow);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTriggerClass(void *p) {
      return  p ? new(p) ::AliTriggerClass : new ::AliTriggerClass;
   }
   static void *newArray_AliTriggerClass(Long_t nElements, void *p) {
      return p ? new(p) ::AliTriggerClass[nElements] : new ::AliTriggerClass[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTriggerClass(void *p) {
      delete ((::AliTriggerClass*)p);
   }
   static void deleteArray_AliTriggerClass(void *p) {
      delete [] ((::AliTriggerClass*)p);
   }
   static void destruct_AliTriggerClass(void *p) {
      typedef ::AliTriggerClass current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTriggerClass

//______________________________________________________________________________
void AliTriggerConfiguration::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliTriggerConfiguration.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliTriggerConfiguration::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliTriggerConfiguration::Class(),this);
   }
}

//______________________________________________________________________________
void AliTriggerConfiguration::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliTriggerConfiguration.
      TClass *R__cl = ::AliTriggerConfiguration::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputs", &fInputs);
      R__insp.InspectMember(fInputs, "fInputs.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInteractions", &fInteractions);
      R__insp.InspectMember(fInteractions, "fInteractions.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFunctions", &fFunctions);
      R__insp.InspectMember(fFunctions, "fFunctions.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPFProtections", &fPFProtections);
      R__insp.InspectMember(fPFProtections, "fPFProtections.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMasks", &fMasks);
      R__insp.InspectMember(fMasks, "fMasks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDescriptors", &fDescriptors);
      R__insp.InspectMember(fDescriptors, "fDescriptors.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusters", &fClusters);
      R__insp.InspectMember(fClusters, "fClusters.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClasses", &fClasses);
      R__insp.InspectMember(fClasses, "fClasses.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVersion", &fVersion);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliTriggerConfiguration(void *p) {
      return  p ? new(p) ::AliTriggerConfiguration : new ::AliTriggerConfiguration;
   }
   static void *newArray_AliTriggerConfiguration(Long_t nElements, void *p) {
      return p ? new(p) ::AliTriggerConfiguration[nElements] : new ::AliTriggerConfiguration[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliTriggerConfiguration(void *p) {
      delete ((::AliTriggerConfiguration*)p);
   }
   static void deleteArray_AliTriggerConfiguration(void *p) {
      delete [] ((::AliTriggerConfiguration*)p);
   }
   static void destruct_AliTriggerConfiguration(void *p) {
      typedef ::AliTriggerConfiguration current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliTriggerConfiguration

//______________________________________________________________________________
void AliExpression::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliExpression.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliExpression::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliExpression::Class(),this);
   }
}

//______________________________________________________________________________
void AliExpression::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliExpression.
      TClass *R__cl = ::AliExpression::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVname", &fVname);
      R__insp.InspectMember(fVname, "fVname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArg1", &fArg1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArg2", &fArg2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOperator", &fOperator);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliExpression(void *p) {
      return  p ? new(p) ::AliExpression : new ::AliExpression;
   }
   static void *newArray_AliExpression(Long_t nElements, void *p) {
      return p ? new(p) ::AliExpression[nElements] : new ::AliExpression[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliExpression(void *p) {
      delete ((::AliExpression*)p);
   }
   static void deleteArray_AliExpression(void *p) {
      delete [] ((::AliExpression*)p);
   }
   static void destruct_AliExpression(void *p) {
      typedef ::AliExpression current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliExpression

//______________________________________________________________________________
void AliVariableExpression::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliVariableExpression.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliVariableExpression::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliVariableExpression::Class(),this);
   }
}

//______________________________________________________________________________
void AliVariableExpression::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliVariableExpression.
      TClass *R__cl = ::AliVariableExpression::IsA();
      if (R__cl || R__insp.IsA()) { }
      AliExpression::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_AliVariableExpression(void *p) {
      delete ((::AliVariableExpression*)p);
   }
   static void deleteArray_AliVariableExpression(void *p) {
      delete [] ((::AliVariableExpression*)p);
   }
   static void destruct_AliVariableExpression(void *p) {
      typedef ::AliVariableExpression current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliVariableExpression

//______________________________________________________________________________
void AliESDCosmicTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDCosmicTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDCosmicTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDCosmicTrack::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDCosmicTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDCosmicTrack.
      TClass *R__cl = ::AliESDCosmicTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLowerTrackParam", &fLowerTrackParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fX0UpperTrackParam", &fX0UpperTrackParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fX0LowerTrackParam", &fX0LowerTrackParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInnerClusterUpper", &fInnerClusterUpper);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInnerClusterLower", &fInnerClusterLower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fESDtrackIndex[2]", fESDtrackIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNCluster", &fNCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLeverArm", &fLeverArm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2PerCluster", &fChi2PerCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImpactD", &fImpactD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImpactZ", &fImpactZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsReuse", &fIsReuse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFindableRatio", &fFindableRatio);
      AliExternalTrackParam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDCosmicTrack(void *p) {
      return  p ? new(p) ::AliESDCosmicTrack : new ::AliESDCosmicTrack;
   }
   static void *newArray_AliESDCosmicTrack(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDCosmicTrack[nElements] : new ::AliESDCosmicTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDCosmicTrack(void *p) {
      delete ((::AliESDCosmicTrack*)p);
   }
   static void deleteArray_AliESDCosmicTrack(void *p) {
      delete [] ((::AliESDCosmicTrack*)p);
   }
   static void destruct_AliESDCosmicTrack(void *p) {
      typedef ::AliESDCosmicTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDCosmicTrack

//______________________________________________________________________________
void AliV0vertexer::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliV0vertexer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliV0vertexer::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliV0vertexer::Class(),this);
   }
}

//______________________________________________________________________________
void AliV0vertexer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliV0vertexer.
      TClass *R__cl = ::AliV0vertexer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2max", &fChi2max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDNmin", &fDNmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDPmin", &fDPmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDCAmax", &fDCAmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCPAmin", &fCPAmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmin", &fRmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmax", &fRmax);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliV0vertexer(void *p) {
      return  p ? new(p) ::AliV0vertexer : new ::AliV0vertexer;
   }
   static void *newArray_AliV0vertexer(Long_t nElements, void *p) {
      return p ? new(p) ::AliV0vertexer[nElements] : new ::AliV0vertexer[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliV0vertexer(void *p) {
      delete ((::AliV0vertexer*)p);
   }
   static void deleteArray_AliV0vertexer(void *p) {
      delete [] ((::AliV0vertexer*)p);
   }
   static void destruct_AliV0vertexer(void *p) {
      typedef ::AliV0vertexer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliV0vertexer

//______________________________________________________________________________
void AliCascadeVertexer::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliCascadeVertexer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliCascadeVertexer::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliCascadeVertexer::Class(),this);
   }
}

//______________________________________________________________________________
void AliCascadeVertexer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliCascadeVertexer.
      TClass *R__cl = ::AliCascadeVertexer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2max", &fChi2max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDV0min", &fDV0min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMassWin", &fMassWin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDBachMin", &fDBachMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDCAmax", &fDCAmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCPAmin", &fCPAmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmin2", &fRmin2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmax2", &fRmax2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmaxMargin2", &fRmaxMargin2);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliCascadeVertexer(void *p) {
      return  p ? new(p) ::AliCascadeVertexer : new ::AliCascadeVertexer;
   }
   static void *newArray_AliCascadeVertexer(Long_t nElements, void *p) {
      return p ? new(p) ::AliCascadeVertexer[nElements] : new ::AliCascadeVertexer[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliCascadeVertexer(void *p) {
      delete ((::AliCascadeVertexer*)p);
   }
   static void deleteArray_AliCascadeVertexer(void *p) {
      delete [] ((::AliCascadeVertexer*)p);
   }
   static void destruct_AliCascadeVertexer(void *p) {
      typedef ::AliCascadeVertexer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliCascadeVertexer

//______________________________________________________________________________
void AliESDTOFHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDTOFHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDTOFHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDTOFHit::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDTOFHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDTOFHit.
      TClass *R__cl = ::AliESDTOFHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeRaw", &fTimeRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOT", &fTOT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFLabel[3]", fTOFLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL0L1Latency", &fL0L1Latency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaBC", &fDeltaBC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFchannel", &fTOFchannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fR", &fR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi", &fPhi);
      AliVTOFHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDTOFHit(void *p) {
      return  p ? new(p) ::AliESDTOFHit : new ::AliESDTOFHit;
   }
   static void *newArray_AliESDTOFHit(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDTOFHit[nElements] : new ::AliESDTOFHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDTOFHit(void *p) {
      delete ((::AliESDTOFHit*)p);
   }
   static void deleteArray_AliESDTOFHit(void *p) {
      delete [] ((::AliESDTOFHit*)p);
   }
   static void destruct_AliESDTOFHit(void *p) {
      typedef ::AliESDTOFHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDTOFHit

//______________________________________________________________________________
void AliESDTOFMatch::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDTOFMatch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDTOFMatch::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDTOFMatch::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDTOFMatch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDTOFMatch.
      TClass *R__cl = ::AliESDTOFMatch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDx", &fDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDy", &fDy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDz", &fDz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackLength", &fTrackLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIntegratedTimes[9]", fIntegratedTimes);
      AliVTOFMatch::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDTOFMatch(void *p) {
      return  p ? new(p) ::AliESDTOFMatch : new ::AliESDTOFMatch;
   }
   static void *newArray_AliESDTOFMatch(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDTOFMatch[nElements] : new ::AliESDTOFMatch[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDTOFMatch(void *p) {
      delete ((::AliESDTOFMatch*)p);
   }
   static void deleteArray_AliESDTOFMatch(void *p) {
      delete [] ((::AliESDTOFMatch*)p);
   }
   static void destruct_AliESDTOFMatch(void *p) {
      typedef ::AliESDTOFMatch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDTOFMatch

//______________________________________________________________________________
void AliESDTOFCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDTOFCluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDTOFCluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDTOFCluster::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDTOFCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDTOFCluster.
      TClass *R__cl = ::AliESDTOFCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fID", &fID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTOFhits", &fNTOFhits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNmatchableTracks", &fNmatchableTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitIndex[4]", fHitIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMatchIndex[7]", fMatchIndex);
      AliVTOFcluster::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDTOFCluster(void *p) {
      return  p ? new(p) ::AliESDTOFCluster : new ::AliESDTOFCluster;
   }
   static void *newArray_AliESDTOFCluster(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDTOFCluster[nElements] : new ::AliESDTOFCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDTOFCluster(void *p) {
      delete ((::AliESDTOFCluster*)p);
   }
   static void deleteArray_AliESDTOFCluster(void *p) {
      delete [] ((::AliESDTOFCluster*)p);
   }
   static void destruct_AliESDTOFCluster(void *p) {
      typedef ::AliESDTOFCluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDTOFCluster

//______________________________________________________________________________
void AliESDMuonGlobalTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDMuonGlobalTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDMuonGlobalTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDMuonGlobalTrack::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDMuonGlobalTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDMuonGlobalTrack.
      TClass *R__cl = ::AliESDMuonGlobalTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMatchTrigger", &fMatchTrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMFTClusters", &fNMFTClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNWrongMFTClustersMC", &fNWrongMFTClustersMC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMFTClusterPattern", &fMFTClusterPattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPx", &fPx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPy", &fPy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPz", &fPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPt", &fPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fP", &fP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEta", &fEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRapidity", &fRapidity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstTrackingPointX", &fFirstTrackingPointX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstTrackingPointY", &fFirstTrackingPointY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstTrackingPointZ", &fFirstTrackingPointZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXAtVertex", &fXAtVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYAtVertex", &fYAtVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRAtAbsorberEnd", &fRAtAbsorberEnd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCovariances", &fCovariances);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2OverNdf", &fChi2OverNdf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2MatchTrigger", &fChi2MatchTrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabel", &fLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMuonClusterMap", &fMuonClusterMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitsPatternInTrigCh", &fHitsPatternInTrigCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitsPatternInTrigChTrk", &fHitsPatternInTrigChTrk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoCircuit", &fLoCircuit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsConnected", &fIsConnected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProdVertexXYZ[3]", fProdVertexXYZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fESDEvent", &fESDEvent);
      AliVParticle::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDMuonGlobalTrack(void *p) {
      return  p ? new(p) ::AliESDMuonGlobalTrack : new ::AliESDMuonGlobalTrack;
   }
   static void *newArray_AliESDMuonGlobalTrack(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDMuonGlobalTrack[nElements] : new ::AliESDMuonGlobalTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDMuonGlobalTrack(void *p) {
      delete ((::AliESDMuonGlobalTrack*)p);
   }
   static void deleteArray_AliESDMuonGlobalTrack(void *p) {
      delete [] ((::AliESDMuonGlobalTrack*)p);
   }
   static void destruct_AliESDMuonGlobalTrack(void *p) {
      typedef ::AliESDMuonGlobalTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDMuonGlobalTrack

//______________________________________________________________________________
void AliESDFIT::Streamer(TBuffer &R__b)
{
   // Stream an object of class AliESDFIT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AliESDFIT::Class(),this);
   } else {
      R__b.WriteClassBuffer(AliESDFIT::Class(),this);
   }
}

//______________________________________________________________________________
void AliESDFIT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AliESDFIT.
      TClass *R__cl = ::AliESDFIT::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0[3]", fT0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFITzVertex", &fFITzVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFITtime[240]", fFITtime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFITamplitude[240]", fFITamplitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0best[3]", fT0best);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AliESDFIT(void *p) {
      return  p ? new(p) ::AliESDFIT : new ::AliESDFIT;
   }
   static void *newArray_AliESDFIT(Long_t nElements, void *p) {
      return p ? new(p) ::AliESDFIT[nElements] : new ::AliESDFIT[nElements];
   }
   // Wrapper around operator delete
   static void delete_AliESDFIT(void *p) {
      delete ((::AliESDFIT*)p);
   }
   static void deleteArray_AliESDFIT(void *p) {
      delete [] ((::AliESDFIT*)p);
   }
   static void destruct_AliESDFIT(void *p) {
      typedef ::AliESDFIT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AliESDFIT

/********************************************************
* G__ESD.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__ESD();

extern "C" void G__set_cpp_environmentG__ESD() {
  G__cpp_reset_tagtableG__ESD();
}
#include <new>
extern "C" int G__cpp_dllrevG__ESD() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* AliESDEvent */
static int G__G__ESD_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDEvent[n];
     } else {
       p = new((void*) gvp) AliESDEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDEvent;
     } else {
       p = new((void*) gvp) AliESDEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDEvent& obj = ((AliESDEvent*) G__getstructoffset())->operator=(*(AliESDEvent*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetESDRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetCTPStart());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetCTPStart((AliTimeStamp*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetDiamond((AliESDVertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDEvent*) G__getstructoffset())->GetDiamondZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDEvent*) G__getstructoffset())->GetSigma2DiamondX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDEvent*) G__getstructoffset())->GetSigma2DiamondY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDEvent*) G__getstructoffset())->GetSigma2DiamondZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetTriggerClass((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetPHOSMatrix((TGeoHMatrix*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetPHOSMatrix((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetEMCALMatrix((TGeoHMatrix*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetEMCALMatrix((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetCaloTriggerType((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetCaloTriggerType((int) G__int(libp->para[0]), (const Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const AliESDEvent*) G__getstructoffset())->GetCaloTriggerType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const AliESDEvent*) G__getstructoffset())->GetCaloTriggerType((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDEvent*) G__getstructoffset())->SetCurrentL3((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDEvent*) G__getstructoffset())->SetCurrentDip((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDEvent*) G__getstructoffset())->SetBeamEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDEvent*) G__getstructoffset())->SetBeamType((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetBeamParticle((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const AliESDEvent*) G__getstructoffset())->SetUniformBMap((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const AliESDEvent*) G__getstructoffset())->SetUniformBMap();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const AliESDEvent*) G__getstructoffset())->SetBInfoStored((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const AliESDEvent*) G__getstructoffset())->SetBInfoStored();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->SetESDDownscaledOnline((Bool_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDEvent*) G__getstructoffset())->GetCurrentL3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDEvent*) G__getstructoffset())->GetCurrentDip());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDEvent*) G__getstructoffset())->GetBeamEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliESDEvent*) G__getstructoffset())->GetBeamType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetBeamParticle((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetBeamParticleA((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetBeamParticleZ((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->IsUniformBMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDEvent*) G__getstructoffset())->SetT0spread((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetTriggerMaskNext50((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetTimeStamp((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetEventSpecie((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetEventNumberInFile((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->IsEventSelected((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetHLTTriggerDecision());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliESDEvent*) G__getstructoffset())->GetHLTTriggerDescription();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->IsHLTTriggerFired((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->IsHLTTriggerFired());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDEvent*) G__getstructoffset())->GetTimeStampCTP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDEvent*) G__getstructoffset())->GetTimeStampCTPBCCorr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->IsDetectorInTriggerCluster(*((TString*) G__int(libp->para[0])), (AliTriggerConfiguration*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetESDZDC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetZDCData((AliESDZDC*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((const AliESDEvent*) G__getstructoffset())->GetZDCEMEnergy((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const AliESDEvent*) G__getstructoffset())->GetZDCEMEnergy());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetZDCParticipants());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetZDC(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (UInt_t) G__int(libp->para[12]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetFMDData((AliESDFMD*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetFMDData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetESDFIT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetFITData((AliESDFIT*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetESDTZERO());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetTZEROData((AliESDTZERO*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDEvent*) G__getstructoffset())->GetT0zVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetT0zVertex((Double32_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDEvent*) G__getstructoffset())->GetT0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetT0((Double32_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDEvent*) G__getstructoffset())->GetT0clock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetT0clock((Double32_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetT0TOF((Int_t) G__int(libp->para[0]), (Double32_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDEvent*) G__getstructoffset())->GetT0time());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetT0time((Double32_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDEvent*) G__getstructoffset())->GetT0amplitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetT0amplitude((Double32_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetT0Trig());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetT0Trig((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetVZEROData((AliESDVZERO*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetACORDEData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetACORDEData((AliESDACORDE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetADData((AliESDAD*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDEvent*) G__getstructoffset())->SetESDfriend((AliESDfriend*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->GetESDfriend((AliESDfriend*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetPrimaryVertexTPC((AliESDVertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetPrimaryVertexSPD((AliESDVertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetPrimaryVertexTracks((AliESDVertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->PrimaryVertexTracksUnconstrained());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetTOFHeader((AliTOFHeader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetTOFHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetESDTOFClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetESDTOFHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetESDTOFMatches());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((AliESDEvent*) G__getstructoffset())->SetTOFcluster((Int_t) G__int(libp->para[0]), (AliESDTOFCluster*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliESDEvent*) G__getstructoffset())->SetTOFcluster((Int_t) G__int(libp->para[0]), (AliESDTOFCluster*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((AliESDEvent*) G__getstructoffset())->SetTOFcluster((Int_t) G__int(libp->para[0]), (AliESDTOFCluster**) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliESDEvent*) G__getstructoffset())->SetTOFcluster((Int_t) G__int(libp->para[0]), (AliESDTOFCluster**) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetNTOFclusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_147(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetMultiplicity((AliMultiplicity*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((const AliESDEvent*) G__getstructoffset())->EstimateMultiplicity(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((const AliESDEvent*) G__getstructoffset())->EstimateMultiplicity(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((const AliESDEvent*) G__getstructoffset())->EstimateMultiplicity(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((const AliESDEvent*) G__getstructoffset())->EstimateMultiplicity(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetNumberOfTPCClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetNumberOfTPCClusters((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDEvent*) G__getstructoffset())->Clean((Float_t*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_154(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->RemoveKink((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_155(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->RemoveV0((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_156(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->RemoveTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_157(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetPileupVertexSPD((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_158(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((AliESDEvent*) G__getstructoffset())->AddPileupVertexSPD((AliESDVertex*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_159(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetPileupVertexTracks((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_160(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((AliESDEvent*) G__getstructoffset())->AddPileupVertexTracks((AliESDVertex*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_161(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetPileupVerticesTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_162(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetPileupVerticesSPD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_163(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->IsPileupFromSPD((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->IsPileupFromSPD((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->IsPileupFromSPD((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->IsPileupFromSPD((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->IsPileupFromSPD((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->IsPileupFromSPD());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_166(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->AreTracksConnected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_168(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDEvent*) G__getstructoffset())->AddTrack((AliESDtrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_170(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDEvent*) G__getstructoffset())->NewTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_171(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetHLTConfMapTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_172(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->AddHLTConfMapTrack((AliESDHLTtrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_173(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetHLTHoughTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_174(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->AddHLTHoughTrack((AliESDHLTtrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_175(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDEvent*) G__getstructoffset())->MoveMuonObjects());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_176(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDEvent*) G__getstructoffset())->GetMuonTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_177(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDEvent*) G__getstructoffset())->NewMuonTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_178(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDEvent*) G__getstructoffset())->GetMuonCluster((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_179(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDEvent*) G__getstructoffset())->FindMuonCluster((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_180(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDEvent*) G__getstructoffset())->NewMuonCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_181(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDEvent*) G__getstructoffset())->GetMuonPad((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_182(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDEvent*) G__getstructoffset())->FindMuonPad((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_183(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDEvent*) G__getstructoffset())->NewMuonPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_184(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDEvent*) G__getstructoffset())->GetMuonGlobalTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_185(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDEvent*) G__getstructoffset())->NewMuonGlobalTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_186(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetPmdTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_187(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->AddPmdTrack((AliESDPmdTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_189(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetTrdTrigger((AliESDTrdTrigger*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_190(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetTrdTrigger());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_191(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->AddTrdTrack((AliESDTrdTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_192(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetTrdTracklet((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_193(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->AddTrdTracklet((AliESDTrdTracklet*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_194(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((AliESDEvent*) G__getstructoffset())->AddTrdTracklet((UInt_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliESDEvent*) G__getstructoffset())->AddTrdTracklet((UInt_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_195(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetV0((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_197(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDEvent*) G__getstructoffset())->AddV0((AliESDv0*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_198(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetCascade((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_199(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->AddCascade((AliESDcascade*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_201(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDEvent*) G__getstructoffset())->AddKink((AliESDkink*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_203(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDEvent*) G__getstructoffset())->AddCaloCluster((AliESDCaloCluster*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_207(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetCosmicTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_208(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetCosmicTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_209(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->AddCosmicTrack((AliESDCosmicTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_210(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDEvent*) G__getstructoffset())->GetErrorLog((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_211(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDEvent*) G__getstructoffset())->AddRawDataErrorLog((AliRawDataErrorLog*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_212(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetNumberOfErrorLogs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_213(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetNumberOfPileupVerticesSPD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_214(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetNumberOfPileupVerticesTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_217(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetNumberOfHLTConfMapTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_218(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetNumberOfHLTHoughTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_219(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetNumberOfMuonTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_220(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDEvent*) G__getstructoffset())->GetNumberOfMuonClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_221(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDEvent*) G__getstructoffset())->GetNumberOfMuonPads());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_222(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetNumberOfMuonGlobalTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_223(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetNumberOfPmdTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_225(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetNumberOfTrdTracklets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_229(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetNumberOfCosmicTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_233(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetUseOwnList((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_234(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->GetUseOwnList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_235(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->ResetV0s();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_236(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->ResetCascades();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_240(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliESDEvent*) G__getstructoffset())->ReadFromTree((TTree*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliESDEvent*) G__getstructoffset())->ReadFromTree((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_242(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDEvent*) G__getstructoffset())->GetAliESDOld());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_245(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->ResetStdContent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_247(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->CreateStdContent((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_248(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->CompleteStdContent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_250(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->CopyFromOldESD();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_257(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetDetectorStatus((ULong_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_258(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->ResetDetectorStatus((ULong_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_259(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const AliESDEvent*) G__getstructoffset())->GetDetectorStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_260(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDEvent*) G__getstructoffset())->IsDetectorOn((ULong_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_261(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetDAQDetectorPattern((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_262(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetDAQAttributes((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_263(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDEvent*) G__getstructoffset())->GetDAQDetectorPattern());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_264(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDEvent*) G__getstructoffset())->GetDAQAttributes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_266(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->SetNTPCFriend2Store((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_267(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDEvent*) G__getstructoffset())->GetNTPCFriend2Store());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_273(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_274(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_275(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_276(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_280(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_281(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_282(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_283(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_170_0_284(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDEvent G__TAliESDEvent;
static int G__G__ESD_170_0_285(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDEvent*) (soff+(sizeof(AliESDEvent)*i)))->~G__TAliESDEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDEvent*) (soff))->~G__TAliESDEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDv0 */
static int G__G__ESD_171_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDv0* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDv0[n];
     } else {
       p = new((void*) gvp) AliESDv0[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDv0;
     } else {
       p = new((void*) gvp) AliESDv0;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDv0));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDv0* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDv0(
*(AliExternalTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, *(AliExternalTrackParam*) libp->para[2].ref, (Int_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) AliESDv0(
*(AliExternalTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, *(AliExternalTrackParam*) libp->para[2].ref, (Int_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDv0));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDv0* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDv0(*(AliESDv0*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDv0(*(AliESDv0*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDv0));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDv0*) G__getstructoffset())->Refit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDv0& obj = ((AliESDv0*) G__getstructoffset())->operator=(*(AliESDv0*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->E((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->Y((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->RapK0Short());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->RapLambda());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->AlphaV0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->PtArmV0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((AliESDv0*) G__getstructoffset())->ChangeMassHypothesis((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((AliESDv0*) G__getstructoffset())->ChangeMassHypothesis());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDv0*) G__getstructoffset())->GetPdgCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->GetEffMass((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->GetEffMassExplicit((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->GetEffMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->GetChi2V0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDv0*) G__getstructoffset())->GetPxPyPz(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDv0*) G__getstructoffset())->GetNPxPyPz(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDv0*) G__getstructoffset())->GetPPxPyPz(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDv0*) G__getstructoffset())->GetXYZ(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDv0*) G__getstructoffset())->GetD((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDv0*) G__getstructoffset())->GetD((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDv0*) G__getstructoffset())->GetNindex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDv0*) G__getstructoffset())->GetPindex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDv0*) G__getstructoffset())->SetDcaV0Daughters((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDv0*) G__getstructoffset())->SetDcaV0Daughters();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->GetDcaV0Daughters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDv0*) G__getstructoffset())->GetV0CosineOfPointingAngle((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->GetV0CosineOfPointingAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->SetV0CosineOfPointingAngle((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->SetOnFlyStatus((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDv0*) G__getstructoffset())->GetOnFlyStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDv0*) G__getstructoffset())->GetParamP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDv0*) G__getstructoffset())->GetParamN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDVertex* pobj;
         const AliESDVertex xobj = ((const AliESDv0*) G__getstructoffset())->GetVertex();
         pobj = new AliESDVertex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDv0*) G__getstructoffset())->GetPosCov((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliESDv0*) G__getstructoffset())->GetSigmaY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliESDv0*) G__getstructoffset())->GetSigmaZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliESDv0*) G__getstructoffset())->GetSigmaAP0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliESDv0*) G__getstructoffset())->GetSigmaD0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliESDv0*) G__getstructoffset())->GetEffectiveSigmaAP0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliESDv0*) G__getstructoffset())->GetEffectiveSigmaD0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliESDv0*) G__getstructoffset())->GetMinimaxSigmaAP0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliESDv0*) G__getstructoffset())->GetMinimaxSigmaD0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliESDv0*) G__getstructoffset())->GetLikelihoodAP((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliESDv0*) G__getstructoffset())->GetLikelihoodD((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->GetLikelihoodC((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDV0Params& obj = AliESDv0::GetParameterization();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->SetParamP(*(AliExternalTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->SetParamN(*(AliExternalTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->SetStatus((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDv0*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDv0*) G__getstructoffset())->GetIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->SetIndex((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDv0*) G__getstructoffset())->GetAnglep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->GetRr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->GetDistSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->SetDistSigma((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDv0*) G__getstructoffset())->GetChi2Before());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->SetChi2Before((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDv0*) G__getstructoffset())->GetChi2After());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->SetChi2After((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDv0*) G__getstructoffset())->GetNAfter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->SetNAfter((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliESDv0*) G__getstructoffset())->GetNBefore());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->SetNBefore((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->SetCausality((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDv0*) G__getstructoffset())->GetCausalityP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->SetClusters((const Int_t*) G__int(libp->para[0]), (const Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const AliESDv0*) G__getstructoffset())->GetClusters((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->SetNormDCAPrim((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDv0*) G__getstructoffset())->GetNormDCAPrimP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->SetID((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->GetKFInfo((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDv0*) G__getstructoffset())->GetKFInfoScale((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDv0::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDv0::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDv0::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDv0::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDv0*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDv0::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDv0::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDv0::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_171_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDv0::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDv0 G__TAliESDv0;
static int G__G__ESD_171_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDv0*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDv0*) (soff+(sizeof(AliESDv0)*i)))->~G__TAliESDv0();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDv0*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDv0*) (soff))->~G__TAliESDv0();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliCascadeVertexer */
static int G__G__ESD_173_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCascadeVertexer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCascadeVertexer[n];
     } else {
       p = new((void*) gvp) AliCascadeVertexer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliCascadeVertexer;
     } else {
       p = new((void*) gvp) AliCascadeVertexer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliCascadeVertexer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCascadeVertexer*) G__getstructoffset())->SetCuts((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliCascadeVertexer::SetDefaultCuts((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliCascadeVertexer*) G__getstructoffset())->V0sTracks2CascadeVertices((AliESDEvent*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliCascadeVertexer*) G__getstructoffset())->Det((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliCascadeVertexer*) G__getstructoffset())->Det(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliCascadeVertexer*) G__getstructoffset())->PropagateToDCA((AliESDv0*) G__int(libp->para[0]), (AliExternalTrackParam*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliCascadeVertexer*) G__getstructoffset())->GetCuts((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliCascadeVertexer::GetDefaultCuts((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliCascadeVertexer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCascadeVertexer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliCascadeVertexer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliCascadeVertexer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliCascadeVertexer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCascadeVertexer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCascadeVertexer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliCascadeVertexer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_173_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliCascadeVertexer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__ESD_173_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliCascadeVertexer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliCascadeVertexer(*(AliCascadeVertexer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliCascadeVertexer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliCascadeVertexer G__TAliCascadeVertexer;
static int G__G__ESD_173_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliCascadeVertexer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliCascadeVertexer*) (soff+(sizeof(AliCascadeVertexer)*i)))->~G__TAliCascadeVertexer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliCascadeVertexer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliCascadeVertexer*) (soff))->~G__TAliCascadeVertexer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ESD_173_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliCascadeVertexer* dest = (AliCascadeVertexer*) G__getstructoffset();
   *dest = *(AliCascadeVertexer*) libp->para[0].ref;
   const AliCascadeVertexer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDACORDE */
static int G__G__ESD_174_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDACORDE* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDACORDE[n];
     } else {
       p = new((void*) gvp) AliESDACORDE[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDACORDE;
     } else {
       p = new((void*) gvp) AliESDACORDE;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDACORDE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_174_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDACORDE* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDACORDE(*(AliESDACORDE*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDACORDE(*(AliESDACORDE*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDACORDE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_174_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDACORDE* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDACORDE((Bool_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliESDACORDE((Bool_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDACORDE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_174_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDACORDE*) G__getstructoffset())->SetACORDEBitPattern((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_174_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDACORDE*) G__getstructoffset())->GetHitChannel((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_174_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDACORDE& obj = ((AliESDACORDE*) G__getstructoffset())->operator=(*(AliESDACORDE*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_174_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDACORDE::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_174_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDACORDE::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_174_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDACORDE::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_174_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDACORDE::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_174_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDACORDE*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_174_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDACORDE::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_174_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDACORDE::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_174_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDACORDE::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_174_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDACORDE::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDACORDE G__TAliESDACORDE;
static int G__G__ESD_174_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDACORDE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDACORDE*) (soff+(sizeof(AliESDACORDE)*i)))->~G__TAliESDACORDE();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDACORDE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDACORDE*) (soff))->~G__TAliESDACORDE();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDAD */
static int G__G__ESD_179_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDAD* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDAD[n];
     } else {
       p = new((void*) gvp) AliESDAD[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDAD;
     } else {
       p = new((void*) gvp) AliESDAD;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDAD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDAD* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDAD(*(AliESDAD*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDAD(*(AliESDAD*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDAD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDAD* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 10
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDAD(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Float_t*) G__int(libp->para[5])
, (Float_t*) G__int(libp->para[6]), (Float_t*) G__int(libp->para[7])
, (Bool_t*) G__int(libp->para[8]), (Bool_t*) G__int(libp->para[9]));
   } else {
     p = new((void*) gvp) AliESDAD(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Float_t*) G__int(libp->para[5])
, (Float_t*) G__int(libp->para[6]), (Float_t*) G__int(libp->para[7])
, (Bool_t*) G__int(libp->para[8]), (Bool_t*) G__int(libp->para[9]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDAD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetBBtriggerADA((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetBGtriggerADA((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetBBtriggerADC((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetBGtriggerADC((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetMultiplicity((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetADC((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetTime((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetWidth((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetBBFlag((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetBGFlag((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetADATime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetADCTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetADATimeError((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetADCTimeError((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetADADecision((AliVAD::Decision) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetADCDecision((AliVAD::Decision) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetTriggerChargeA((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetTriggerChargeC((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetTriggerBits((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetPFBBFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetPFBGFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetADCTail((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->SetADCTrigger((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetAdc((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetAdcADA((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetAdcADC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetTime((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetTimeADA((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetTimeADC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetWidth((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetWidthADA((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetWidthADC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetADATimeError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetADCTimeError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetAdcTail((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetAdcTailADA((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetAdcTailADC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetAdcTrigger((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetAdcTriggerADA((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDAD*) G__getstructoffset())->GetAdcTriggerADC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDAD& obj = ((AliESDAD*) G__getstructoffset())->operator=(*(AliESDAD*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDAD::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDAD::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDAD::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDAD::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDAD*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDAD::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDAD::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDAD::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_179_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDAD::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDAD G__TAliESDAD;
static int G__G__ESD_179_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDAD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDAD*) (soff+(sizeof(AliESDAD)*i)))->~G__TAliESDAD();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDAD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDAD*) (soff))->~G__TAliESDAD();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDADfriend */
static int G__G__ESD_180_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDADfriend* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDADfriend[n];
     } else {
       p = new((void*) gvp) AliESDADfriend[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDADfriend;
     } else {
       p = new((void*) gvp) AliESDADfriend;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDADfriend));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDADfriend* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDADfriend(*(AliESDADfriend*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDADfriend(*(AliESDADfriend*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDADfriend));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDADfriend& obj = ((AliESDADfriend*) G__getstructoffset())->operator=(*(AliESDADfriend*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDADfriend*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliESDADfriend*) G__getstructoffset())->GetBBScalers((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliESDADfriend*) G__getstructoffset())->GetBGScalers((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDADfriend*) G__getstructoffset())->GetTriggerScalers((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDADfriend*) G__getstructoffset())->GetADC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDADfriend*) G__getstructoffset())->GetPedestal((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDADfriend*) G__getstructoffset())->GetIntegratorFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDADfriend*) G__getstructoffset())->GetBBFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDADfriend*) G__getstructoffset())->GetBGFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDADfriend*) G__getstructoffset())->GetTime((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDADfriend*) G__getstructoffset())->GetWidth((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDADfriend*) G__getstructoffset())->SetBBScalers((Int_t) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDADfriend*) G__getstructoffset())->SetBGScalers((Int_t) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDADfriend*) G__getstructoffset())->SetTriggerScalers((Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDADfriend*) G__getstructoffset())->SetPedestal((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDADfriend*) G__getstructoffset())->SetIntegratorFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDADfriend*) G__getstructoffset())->SetBBFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDADfriend*) G__getstructoffset())->SetBGFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDADfriend*) G__getstructoffset())->SetTime((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDADfriend*) G__getstructoffset())->SetWidth((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDADfriend*) G__getstructoffset())->GetTriggerInputs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDADfriend*) G__getstructoffset())->GetTriggerInputsMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDADfriend*) G__getstructoffset())->SetTriggerInputs((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDADfriend*) G__getstructoffset())->SetTriggerInputsMask((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDADfriend::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDADfriend::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDADfriend::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDADfriend::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDADfriend*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDADfriend::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDADfriend::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDADfriend::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_180_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDADfriend::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDADfriend G__TAliESDADfriend;
static int G__G__ESD_180_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDADfriend*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDADfriend*) (soff+(sizeof(AliESDADfriend)*i)))->~G__TAliESDADfriend();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDADfriend*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDADfriend*) (soff))->~G__TAliESDADfriend();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDCaloCells */
static int G__G__ESD_198_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDCaloCells* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDCaloCells[n];
     } else {
       p = new((void*) gvp) AliESDCaloCells[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDCaloCells;
     } else {
       p = new((void*) gvp) AliESDCaloCells;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_198_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDCaloCells* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDCaloCells(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (AliVCaloCells::VCells_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliESDCaloCells(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (AliVCaloCells::VCells_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDCaloCells((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliESDCaloCells((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_198_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDCaloCells* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDCaloCells(*(AliESDCaloCells*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDCaloCells(*(AliESDCaloCells*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_198_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDCaloCells& obj = ((AliESDCaloCells*) G__getstructoffset())->operator=(*(AliESDCaloCells*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_198_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDCaloCells::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_198_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDCaloCells::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_198_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDCaloCells::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_198_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDCaloCells::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_198_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDCaloCells*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_198_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDCaloCells::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_198_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDCaloCells::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_198_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDCaloCells::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_198_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDCaloCells::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDCaloCells G__TAliESDCaloCells;
static int G__G__ESD_198_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDCaloCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDCaloCells*) (soff+(sizeof(AliESDCaloCells)*i)))->~G__TAliESDCaloCells();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDCaloCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDCaloCells*) (soff))->~G__TAliESDCaloCells();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDCaloCluster */
static int G__G__ESD_499_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDCaloCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDCaloCluster[n];
     } else {
       p = new((void*) gvp) AliESDCaloCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDCaloCluster;
     } else {
       p = new((void*) gvp) AliESDCaloCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDCaloCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDCaloCluster(*(AliESDCaloCluster*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDCaloCluster(*(AliESDCaloCluster*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDCaloCluster& obj = ((AliESDCaloCluster*) G__getstructoffset())->operator=(*(AliESDCaloCluster*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDCaloCluster*) G__getstructoffset())->AddTracksMatched(*(TArrayI*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDCaloCluster*) G__getstructoffset())->AddLabels(*(TArrayI*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDCaloCluster*) G__getstructoffset())->GetTracksMatched());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDCaloCluster*) G__getstructoffset())->GetLabelsArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDCaloCluster*) G__getstructoffset())->SetUserDefEnergyCorrFactor((AliVCluster::VCluUserDefEnergy_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDCaloCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDCaloCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDCaloCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDCaloCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDCaloCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDCaloCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDCaloCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDCaloCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_499_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDCaloCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDCaloCluster G__TAliESDCaloCluster;
static int G__G__ESD_499_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDCaloCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDCaloCluster*) (soff+(sizeof(AliESDCaloCluster)*i)))->~G__TAliESDCaloCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDCaloCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDCaloCluster*) (soff))->~G__TAliESDCaloCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDCaloTrigger */
static int G__G__ESD_501_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDCaloTrigger* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDCaloTrigger[n];
     } else {
       p = new((void*) gvp) AliESDCaloTrigger[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDCaloTrigger;
     } else {
       p = new((void*) gvp) AliESDCaloTrigger;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloTrigger));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_501_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDCaloTrigger* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDCaloTrigger(*(AliESDCaloTrigger*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDCaloTrigger(*(AliESDCaloTrigger*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloTrigger));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_501_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDCaloTrigger& obj = ((AliESDCaloTrigger*) G__getstructoffset())->operator=(*(AliESDCaloTrigger*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_501_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDCaloTrigger*) G__getstructoffset())->SetTriggerBitWord((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_501_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDCaloTrigger*) G__getstructoffset())->SetMedian((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_501_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDCaloTrigger::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_501_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDCaloTrigger::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_501_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDCaloTrigger::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_501_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDCaloTrigger::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_501_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDCaloTrigger*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_501_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDCaloTrigger::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_501_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDCaloTrigger::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_501_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDCaloTrigger::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_501_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDCaloTrigger::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDCaloTrigger G__TAliESDCaloTrigger;
static int G__G__ESD_501_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDCaloTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDCaloTrigger*) (soff+(sizeof(AliESDCaloTrigger)*i)))->~G__TAliESDCaloTrigger();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDCaloTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDCaloTrigger*) (soff))->~G__TAliESDCaloTrigger();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDVertex */
static int G__G__ESD_509_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDVertex[n];
     } else {
       p = new((void*) gvp) AliESDVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDVertex;
     } else {
       p = new((void*) gvp) AliESDVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDVertex(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) AliESDVertex(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDVertex(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliESDVertex(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDVertex(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) AliESDVertex(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const Char_t*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDVertex(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) AliESDVertex(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDVertex(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliESDVertex(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDVertex((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliESDVertex((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDVertex(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) AliESDVertex(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDVertex(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliESDVertex(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDVertex(*(AliESDVertex*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDVertex(*(AliESDVertex*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDVertex& obj = ((AliESDVertex*) G__getstructoffset())->operator=(*(AliESDVertex*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDVertex*) G__getstructoffset())->GetSigmaXYZ((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDVertex*) G__getstructoffset())->GetCovMatrix((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDVertex*) G__getstructoffset())->GetSNR((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDVertex*) G__getstructoffset())->GetXRes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDVertex*) G__getstructoffset())->GetYRes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDVertex*) G__getstructoffset())->GetZRes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDVertex*) G__getstructoffset())->GetXSNR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDVertex*) G__getstructoffset())->GetYSNR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDVertex*) G__getstructoffset())->GetZSNR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVertex*) G__getstructoffset())->SetSNR((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDVertex*) G__getstructoffset())->GetChi2toNDF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDVertex*) G__getstructoffset())->PrintStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVertex*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVertex*) G__getstructoffset())->SetID((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const AliESDVertex*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDVertex*) G__getstructoffset())->GetWDist((AliESDVertex*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_509_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDVertex G__TAliESDVertex;
static int G__G__ESD_509_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDVertex*) (soff+(sizeof(AliESDVertex)*i)))->~G__TAliESDVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDVertex*) (soff))->~G__TAliESDVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDV0Params */
static int G__G__ESD_516_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDV0Params* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDV0Params[n];
     } else {
       p = new((void*) gvp) AliESDV0Params[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDV0Params;
     } else {
       p = new((void*) gvp) AliESDV0Params;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDV0Params));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxDist0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxDist0();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxDist1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxDist1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxDist((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxDist();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinPointAngle((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinPointAngle();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinPointAngle2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinPointAngle2();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinR((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinR();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxR((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxR();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinPABestConst((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinPABestConst();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxRBestConst((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxRBestConst();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetCausality0Cut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetCausality0Cut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetLikelihood01Cut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetLikelihood01Cut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetLikelihood1Cut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetLikelihood1Cut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetCombinedCut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetCombinedCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinClFullTrk((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinClFullTrk();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinTgl0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinTgl0();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinRTgl0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinRTgl0();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinNormDistForbTgl0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinNormDistForbTgl0();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinClForb0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinClForb0();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinNormDistForb1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinNormDistForb1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinNormDistForb2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinNormDistForb2();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinNormDistForb3((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinNormDistForb3();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinNormDistForb4((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinNormDistForb4();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinNormDistForb5((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinNormDistForb5();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinNormDistForbProt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinNormDistForbProt();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxPidProbPionForb((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxPidProbPionForb();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinRTPCdensity((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinRTPCdensity();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxRTPCdensity0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxRTPCdensity0();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxRTPCdensity10((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxRTPCdensity10();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxRTPCdensity20((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxRTPCdensity20();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxRTPCdensity30((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxRTPCdensity30();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinTPCdensity((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinTPCdensity();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinTgl1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinTgl1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinTgl2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinTgl2();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinchi2before0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinchi2before0();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinchi2before1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinchi2before1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinchi2after0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinchi2after0();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMinchi2after1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMinchi2after1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetAddchi2SharedCl((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetAddchi2SharedCl();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetAddchi2NegCl0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetAddchi2NegCl0();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetAddchi2NegCl1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetAddchi2NegCl1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetSigp0Par0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetSigp0Par0();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetSigp0Par1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetSigp0Par1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetSigp0Par2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetSigp0Par2();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetSigpPar0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetSigpPar0();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetSigpPar1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetSigpPar1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetSigpPar2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetSigpPar2();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxDcaLh0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetMaxDcaLh0();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetChi2KF((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetChi2KF();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetRobustChi2KF((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetRobustChi2KF();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMaxDist0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMaxDist1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMaxDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinPointAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinPointAngle2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMaxR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinPABestConst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMaxRBestConst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetCausality0Cut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetLikelihood01Cut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetLikelihood1Cut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetCombinedCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinClFullTrk());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinTgl0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinRTgl0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinNormDistForbTgl0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinClForb0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinNormDistForb1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinNormDistForb2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinNormDistForb3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinNormDistForb4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinNormDistForb5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinNormDistForbProt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMaxPidProbPionForb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinRTPCdensity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMaxRTPCdensity0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMaxRTPCdensity10());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMaxRTPCdensity20());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMaxRTPCdensity30());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinTPCdensity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinTgl1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinTgl2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinchi2before0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinchi2before1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinchi2after0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMinchi2after1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetAddchi2SharedCl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetAddchi2NegCl0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetAddchi2NegCl1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetSigp0Par0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetSigp0Par1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetSigp0Par2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetSigpPar0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetSigpPar1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetSigpPar2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetMaxDcaLh0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetChi2KF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDV0Params*) G__getstructoffset())->GetRobustChi2KF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDV0Params*) G__getstructoffset())->StreamLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDV0Params*) G__getstructoffset())->SetStreamLevel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDV0Params*) G__getstructoffset())->SetStreamLevel();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDV0Params::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDV0Params::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDV0Params::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDV0Params::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDV0Params*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDV0Params::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDV0Params::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDV0Params::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_516_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDV0Params::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__ESD_516_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliESDV0Params* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliESDV0Params(*(AliESDV0Params*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDV0Params));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDV0Params G__TAliESDV0Params;
static int G__G__ESD_516_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDV0Params*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDV0Params*) (soff+(sizeof(AliESDV0Params)*i)))->~G__TAliESDV0Params();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDV0Params*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDV0Params*) (soff))->~G__TAliESDV0Params();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ESD_516_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDV0Params* dest = (AliESDV0Params*) G__getstructoffset();
   *dest = *(AliESDV0Params*) libp->para[0].ref;
   const AliESDV0Params& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDcascade */
static int G__G__ESD_517_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDcascade* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDcascade[n];
     } else {
       p = new((void*) gvp) AliESDcascade[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDcascade;
     } else {
       p = new((void*) gvp) AliESDcascade;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDcascade));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDcascade* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDcascade(*(AliESDcascade*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDcascade(*(AliESDcascade*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDcascade));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDcascade* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDcascade(
*(AliESDv0*) libp->para[0].ref, *(AliExternalTrackParam*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) AliESDcascade(
*(AliESDv0*) libp->para[0].ref, *(AliExternalTrackParam*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDcascade));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDcascade& obj = ((AliESDcascade*) G__getstructoffset())->operator=(*(AliESDcascade*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDcascade*) G__getstructoffset())->E((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDcascade*) G__getstructoffset())->Y((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDcascade*) G__getstructoffset())->RapXi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDcascade*) G__getstructoffset())->RapOmega());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDcascade*) G__getstructoffset())->AlphaXi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDcascade*) G__getstructoffset())->PtArmXi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((AliESDcascade*) G__getstructoffset())->ChangeMassHypothesis(*(Double_t*) G__Doubleref(&libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((AliESDcascade*) G__getstructoffset())->ChangeMassHypothesis(*(Double_t*) G__Doubleref(&libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDcascade*) G__getstructoffset())->GetPdgCodeXi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDcascade*) G__getstructoffset())->GetEffMassXi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDcascade*) G__getstructoffset())->GetChi2Xi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDcascade*) G__getstructoffset())->GetPxPyPz(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDcascade*) G__getstructoffset())->GetXYZcascade(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDcascade*) G__getstructoffset())->GetDcascade((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDcascade*) G__getstructoffset())->GetBPxPyPz(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDcascade*) G__getstructoffset())->GetBindex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDcascade*) G__getstructoffset())->SetIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDcascade*) G__getstructoffset())->GetIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDcascade*) G__getstructoffset())->SetDcaXiDaughters((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDcascade*) G__getstructoffset())->SetDcaXiDaughters();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDcascade*) G__getstructoffset())->GetDcaXiDaughters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDcascade*) G__getstructoffset())->GetCascadeCosineOfPointingAngle((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDcascade*) G__getstructoffset())->GetPosCovXi((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDcascade::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDcascade::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDcascade::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDcascade::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDcascade*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDcascade::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDcascade::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDcascade::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_517_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDcascade::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDcascade G__TAliESDcascade;
static int G__G__ESD_517_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDcascade*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDcascade*) (soff+(sizeof(AliESDcascade)*i)))->~G__TAliESDcascade();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDcascade*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDcascade*) (soff))->~G__TAliESDcascade();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDCosmicTrack */
static int G__G__ESD_518_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDCosmicTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDCosmicTrack[n];
     } else {
       p = new((void*) gvp) AliESDCosmicTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDCosmicTrack;
     } else {
       p = new((void*) gvp) AliESDCosmicTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDCosmicTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDCosmicTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 15
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDCosmicTrack(
(const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (AliExternalTrackParam*) G__int(libp->para[2]), (AliExternalTrackParam*) G__int(libp->para[3])
, (AliExternalTrackParam*) G__int(libp->para[4]), (AliExternalTrackParam*) G__int(libp->para[5])
, (const Int_t) G__int(libp->para[6]), (const Double_t) G__double(libp->para[7])
, (const Double_t) G__double(libp->para[8]), (const Double_t) G__double(libp->para[9])
, (const Double_t) G__double(libp->para[10]), (const Bool_t) G__int(libp->para[11])
, (const Double_t) G__double(libp->para[12]), *((const TVector3*) G__int(libp->para[13]))
, *((const TVector3*) G__int(libp->para[14])));
   } else {
     p = new((void*) gvp) AliESDCosmicTrack(
(const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (AliExternalTrackParam*) G__int(libp->para[2]), (AliExternalTrackParam*) G__int(libp->para[3])
, (AliExternalTrackParam*) G__int(libp->para[4]), (AliExternalTrackParam*) G__int(libp->para[5])
, (const Int_t) G__int(libp->para[6]), (const Double_t) G__double(libp->para[7])
, (const Double_t) G__double(libp->para[8]), (const Double_t) G__double(libp->para[9])
, (const Double_t) G__double(libp->para[10]), (const Bool_t) G__int(libp->para[11])
, (const Double_t) G__double(libp->para[12]), *((const TVector3*) G__int(libp->para[13]))
, *((const TVector3*) G__int(libp->para[14])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDCosmicTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDCosmicTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDCosmicTrack(*(AliESDCosmicTrack*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDCosmicTrack(*(AliESDCosmicTrack*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDCosmicTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDCosmicTrack& obj = ((AliESDCosmicTrack*) G__getstructoffset())->operator=(*(AliESDCosmicTrack*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDCosmicTrack*) G__getstructoffset())->GetLowerPartner());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDCosmicTrack*) G__getstructoffset())->GetESDUpperTrackParamAt0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDCosmicTrack*) G__getstructoffset())->GetESDLowerTrackParamAt0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDCosmicTrack*) G__getstructoffset())->GetInnerClusterUpper());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDCosmicTrack*) G__getstructoffset())->GetInnerClusterLower());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDCosmicTrack*) G__getstructoffset())->GetESDUpperTrackIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDCosmicTrack*) G__getstructoffset())->GetESDLowerTrackIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDCosmicTrack*) G__getstructoffset())->GetNCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDCosmicTrack*) G__getstructoffset())->GetLeverArm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDCosmicTrack*) G__getstructoffset())->GetChi2PerCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDCosmicTrack*) G__getstructoffset())->GetImpactD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDCosmicTrack*) G__getstructoffset())->GetImpactZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDCosmicTrack*) G__getstructoffset())->IsReuse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDCosmicTrack*) G__getstructoffset())->GetMinFindableRatio());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDCosmicTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDCosmicTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDCosmicTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDCosmicTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDCosmicTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDCosmicTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDCosmicTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDCosmicTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_518_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDCosmicTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDCosmicTrack G__TAliESDCosmicTrack;
static int G__G__ESD_518_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDCosmicTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDCosmicTrack*) (soff+(sizeof(AliESDCosmicTrack)*i)))->~G__TAliESDCosmicTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDCosmicTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDCosmicTrack*) (soff))->~G__TAliESDCosmicTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDMuonTrack */
static int G__G__ESD_549_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDMuonTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDMuonTrack[n];
     } else {
       p = new((void*) gvp) AliESDMuonTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDMuonTrack;
     } else {
       p = new((void*) gvp) AliESDMuonTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDMuonTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDMuonTrack(*(AliESDMuonTrack*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDMuonTrack(*(AliESDMuonTrack*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDMuonTrack& obj = ((AliESDMuonTrack*) G__getstructoffset())->operator=(*(AliESDMuonTrack*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDMuonTrack*) G__getstructoffset())->ContainTrackerData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDMuonTrack*) G__getstructoffset())->ContainTriggerData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetInverseBendingMomentum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetInverseBendingMomentum((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetThetaX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetThetaX((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetThetaY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetThetaY((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetZ((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetBendingCoor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetBendingCoor((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetNonBendingCoor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetNonBendingCoor((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetInverseBendingMomentumAtDCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetInverseBendingMomentumAtDCA((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetThetaXAtDCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetThetaXAtDCA((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetThetaYAtDCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetThetaYAtDCA((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetBendingCoorAtDCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetBendingCoorAtDCA((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetNonBendingCoorAtDCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetNonBendingCoorAtDCA((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetDCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetInverseBendingMomentumUncorrected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetInverseBendingMomentumUncorrected((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetThetaXUncorrected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetThetaXUncorrected((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetThetaYUncorrected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetThetaYUncorrected((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetZUncorrected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetZUncorrected((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetBendingCoorUncorrected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetBendingCoorUncorrected((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetNonBendingCoorUncorrected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetNonBendingCoorUncorrected((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDMuonTrack*) G__getstructoffset())->GetCovariances(*(TMatrixD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetCovariances(*(TMatrixD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDMuonTrack*) G__getstructoffset())->GetCovarianceXYZPxPyPz((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetRAtAbsorberEnd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetRAtAbsorberEnd((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetChi2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetNHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetNDF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetNormalizedChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetMatchTrigger());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDMuonTrack*) G__getstructoffset())->MatchTriggerDigits((Bool_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->GetChi2MatchTrigger());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetChi2MatchTrigger((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetHitsPatternInTrigCh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetHitsPatternInTrigCh((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetHitsPatternInTrigChTrk());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetHitsPatternInTrigChTrk((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetLocalTrigger((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonTrack*) G__getstructoffset())->LoCircuit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonTrack*) G__getstructoffset())->LoStripX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonTrack*) G__getstructoffset())->LoStripY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonTrack*) G__getstructoffset())->LoDev());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonTrack*) G__getstructoffset())->LoLpt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonTrack*) G__getstructoffset())->LoHpt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetTriggerWithoutChamber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDMuonTrack*) G__getstructoffset())->TriggerFiredWithoutChamber((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetMuonTrigDevSign());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetTriggerX1Pattern());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetTriggerY1Pattern());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetTriggerX2Pattern());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetTriggerY2Pattern());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetTriggerX3Pattern());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetTriggerY3Pattern());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetTriggerX4Pattern());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetTriggerY4Pattern());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetTriggerX1Pattern((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetTriggerY1Pattern((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetTriggerX2Pattern((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetTriggerY2Pattern((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetTriggerX3Pattern((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetTriggerY3Pattern((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetTriggerX4Pattern((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetTriggerY4Pattern((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetMuonClusterMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetMuonClusterMap((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->AddInMuonClusterMap((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDMuonTrack*) G__getstructoffset())->IsInMuonClusterMap((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDMuonTrack*) G__getstructoffset())->Connected((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDMuonTrack*) G__getstructoffset())->Connected();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDMuonTrack*) G__getstructoffset())->IsConnected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->AddClusterId((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetNClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetClusterId((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDMuonTrack*) G__getstructoffset())->IsOldTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->MoveClustersToESD(*(AliESDEvent*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDMuonTrack*) G__getstructoffset())->LorentzP(*(TLorentzVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->PxAtDCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->PyAtDCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->PzAtDCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->PAtDCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDMuonTrack*) G__getstructoffset())->PxPyPzAtDCA((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDMuonTrack*) G__getstructoffset())->LorentzPAtDCA(*(TLorentzVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->PxUncorrected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->PyUncorrected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->PzUncorrected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonTrack*) G__getstructoffset())->PUncorrected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDMuonTrack*) G__getstructoffset())->PxPyPzUncorrected((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDMuonTrack*) G__getstructoffset())->LorentzPUncorrected(*(TLorentzVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetLabel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDMuonTrack::SetFiredChamber(*(UInt_t*) G__UIntref(&libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      AliESDMuonTrack::AddEffInfo(*(UInt_t*) G__UIntref(&libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (AliESDMuonTrack::EAliTriggerChPatternFlag) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      AliESDMuonTrack::AddEffInfo(*(UInt_t*) G__UIntref(&libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      AliESDMuonTrack::AddEffInfo(*(UInt_t*) G__UIntref(&libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) AliESDMuonTrack::IsChamberHit((UInt_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDMuonTrack::GetEffFlag((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDMuonTrack::GetSlatOrInfo((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDMuonTrack::GetCrossedBoard((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDMuonTrack*) G__getstructoffset())->AddMuonTrigDevSignInfo(*(UInt_t*) G__UIntref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDMuonTrack*) G__getstructoffset())->GetESDEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->SetESDEvent((AliESDEvent*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDMuonTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDMuonTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDMuonTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_146(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDMuonTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDMuonTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDMuonTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDMuonTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_549_0_154(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDMuonTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDMuonTrack G__TAliESDMuonTrack;
static int G__G__ESD_549_0_155(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDMuonTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDMuonTrack*) (soff+(sizeof(AliESDMuonTrack)*i)))->~G__TAliESDMuonTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDMuonTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDMuonTrack*) (soff))->~G__TAliESDMuonTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDPmdTrack */
static int G__G__ESD_552_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDPmdTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDPmdTrack[n];
     } else {
       p = new((void*) gvp) AliESDPmdTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDPmdTrack;
     } else {
       p = new((void*) gvp) AliESDPmdTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDPmdTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDPmdTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDPmdTrack(*(AliESDPmdTrack*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDPmdTrack(*(AliESDPmdTrack*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDPmdTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDPmdTrack& obj = ((AliESDPmdTrack*) G__getstructoffset())->operator=(*(AliESDPmdTrack*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDPmdTrack*) G__getstructoffset())->SetDetector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDPmdTrack*) G__getstructoffset())->SetClusterX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDPmdTrack*) G__getstructoffset())->SetClusterY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDPmdTrack*) G__getstructoffset())->SetClusterZ((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDPmdTrack*) G__getstructoffset())->SetClusterADC((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDPmdTrack*) G__getstructoffset())->SetClusterCells((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDPmdTrack*) G__getstructoffset())->SetClusterPID((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDPmdTrack*) G__getstructoffset())->SetSmn((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDPmdTrack*) G__getstructoffset())->SetClusterTrackNo((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDPmdTrack*) G__getstructoffset())->SetClusterTrackPid((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDPmdTrack*) G__getstructoffset())->SetClusterMatching((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDPmdTrack*) G__getstructoffset())->SetClusterSigmaX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDPmdTrack*) G__getstructoffset())->SetClusterSigmaY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDPmdTrack*) G__getstructoffset())->GetClusterX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDPmdTrack*) G__getstructoffset())->GetClusterY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDPmdTrack*) G__getstructoffset())->GetClusterZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDPmdTrack*) G__getstructoffset())->GetClusterADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDPmdTrack*) G__getstructoffset())->GetClusterPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliESDPmdTrack*) G__getstructoffset())->GetClusterCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliESDPmdTrack*) G__getstructoffset())->GetDetector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDPmdTrack*) G__getstructoffset())->GetSmn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDPmdTrack*) G__getstructoffset())->GetClusterTrackNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDPmdTrack*) G__getstructoffset())->GetClusterTrackPid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDPmdTrack*) G__getstructoffset())->GetClusterMatching());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDPmdTrack*) G__getstructoffset())->GetClusterSigmaX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDPmdTrack*) G__getstructoffset())->GetClusterSigmaY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDPmdTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDPmdTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDPmdTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDPmdTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDPmdTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDPmdTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDPmdTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDPmdTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_552_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDPmdTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDPmdTrack G__TAliESDPmdTrack;
static int G__G__ESD_552_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDPmdTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDPmdTrack*) (soff+(sizeof(AliESDPmdTrack)*i)))->~G__TAliESDPmdTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDPmdTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDPmdTrack*) (soff))->~G__TAliESDPmdTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDTrdTracklet */
static int G__G__ESD_559_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTrdTracklet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTrdTracklet[n];
     } else {
       p = new((void*) gvp) AliESDTrdTracklet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTrdTracklet;
     } else {
       p = new((void*) gvp) AliESDTrdTracklet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTracklet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTrdTracklet* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTrdTracklet(
(UInt_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliESDTrdTracklet(
(UInt_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTrdTracklet((UInt_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliESDTrdTracklet((UInt_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTracklet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTrdTracklet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDTrdTracklet(*(AliESDTrdTracklet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDTrdTracklet(*(AliESDTrdTracklet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTracklet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDTrdTracklet& obj = ((AliESDTrdTracklet*) G__getstructoffset())->operator=(*(AliESDTrdTracklet*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTracklet*) G__getstructoffset())->SetTrackletWord((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTracklet*) G__getstructoffset())->SetHCId((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTracklet*) G__getstructoffset())->SetLabel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDTrdTracklet*) G__getstructoffset())->GetROB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDTrdTracklet*) G__getstructoffset())->GetMCM());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDTrdTracklet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTrdTracklet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDTrdTracklet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDTrdTracklet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTracklet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTrdTracklet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTrdTracklet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTrdTracklet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_559_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTrdTracklet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDTrdTracklet G__TAliESDTrdTracklet;
static int G__G__ESD_559_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDTrdTracklet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDTrdTracklet*) (soff+(sizeof(AliESDTrdTracklet)*i)))->~G__TAliESDTrdTracklet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDTrdTracklet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDTrdTracklet*) (soff))->~G__TAliESDTrdTracklet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDTOFHit */
static int G__G__ESD_563_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTOFHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTOFHit[n];
     } else {
       p = new((void*) gvp) AliESDTOFHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTOFHit;
     } else {
       p = new((void*) gvp) AliESDTOFHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTOFHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 11
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDTOFHit(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]));
   } else {
     p = new((void*) gvp) AliESDTOFHit(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTOFHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDTOFHit(*(AliESDTOFHit*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDTOFHit(*(AliESDTOFHit*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDTOFHit& obj = ((AliESDTOFHit*) G__getstructoffset())->operator=(*(AliESDTOFHit*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFHit*) G__getstructoffset())->SetTOFLabel((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDTOFHit*) G__getstructoffset())->GetR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDTOFHit*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDTOFHit*) G__getstructoffset())->GetPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFHit*) G__getstructoffset())->SetR((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFHit*) G__getstructoffset())->SetZ((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFHit*) G__getstructoffset())->SetPhi((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDTOFHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTOFHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDTOFHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDTOFHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTOFHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTOFHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTOFHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_563_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTOFHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDTOFHit G__TAliESDTOFHit;
static int G__G__ESD_563_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDTOFHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDTOFHit*) (soff+(sizeof(AliESDTOFHit)*i)))->~G__TAliESDTOFHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDTOFHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDTOFHit*) (soff))->~G__TAliESDTOFHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDTOFMatch */
static int G__G__ESD_565_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTOFMatch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTOFMatch[n];
     } else {
       p = new((void*) gvp) AliESDTOFMatch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTOFMatch;
     } else {
       p = new((void*) gvp) AliESDTOFMatch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFMatch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_565_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTOFMatch* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDTOFMatch(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
   } else {
     p = new((void*) gvp) AliESDTOFMatch(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFMatch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_565_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTOFMatch* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDTOFMatch(*(AliESDTOFMatch*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDTOFMatch(*(AliESDTOFMatch*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFMatch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_565_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDTOFMatch& obj = ((AliESDTOFMatch*) G__getstructoffset())->operator=(*(AliESDTOFMatch*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_565_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDTOFMatch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_565_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTOFMatch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_565_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDTOFMatch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_565_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDTOFMatch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_565_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFMatch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_565_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTOFMatch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_565_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTOFMatch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_565_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTOFMatch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_565_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTOFMatch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDTOFMatch G__TAliESDTOFMatch;
static int G__G__ESD_565_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDTOFMatch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDTOFMatch*) (soff+(sizeof(AliESDTOFMatch)*i)))->~G__TAliESDTOFMatch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDTOFMatch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDTOFMatch*) (soff))->~G__TAliESDTOFMatch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDTOFCluster */
static int G__G__ESD_566_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTOFCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTOFCluster((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliESDTOFCluster((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliESDTOFCluster[n];
       } else {
         p = new((void*) gvp) AliESDTOFCluster[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliESDTOFCluster;
       } else {
         p = new((void*) gvp) AliESDTOFCluster;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTOFCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 18
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDTOFCluster(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Float_t) G__double(libp->para[13])
, (Float_t) G__double(libp->para[14]), (Float_t) G__double(libp->para[15])
, (Float_t) G__double(libp->para[16]), (Double_t*) G__int(libp->para[17]));
   } else {
     p = new((void*) gvp) AliESDTOFCluster(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Float_t) G__double(libp->para[13])
, (Float_t) G__double(libp->para[14]), (Float_t) G__double(libp->para[15])
, (Float_t) G__double(libp->para[16]), (Double_t*) G__int(libp->para[17]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTOFCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 12
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDTOFCluster(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11]));
   } else {
     p = new((void*) gvp) AliESDTOFCluster(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTOFCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDTOFCluster(*(AliESDTOFCluster*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDTOFCluster(*(AliESDTOFCluster*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDTOFCluster& obj = ((AliESDTOFCluster*) G__getstructoffset())->operator=(*(AliESDTOFCluster*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetESDID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFCluster*) G__getstructoffset())->SetESDID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFCluster*) G__getstructoffset())->SetID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDTOFCluster*) G__getstructoffset())->Update((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Double_t*) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFCluster*) G__getstructoffset())->SuppressMatchedTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFCluster*) G__getstructoffset())->ReplaceMatchedTrackID((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFCluster*) G__getstructoffset())->ReplaceMatchID((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFCluster*) G__getstructoffset())->ReplaceHitID((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFCluster*) G__getstructoffset())->FixSelfReferences((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetClusterIndex((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetClusterIndex());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetTOFchannel((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetTOFchannel());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetTime((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetTime());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetTimeRaw((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetTimeRaw());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetTOT((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetTOT());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetTOFsignalToT((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetTOFsignalToT());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetLabel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetLabel((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetLabel());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetDeltaBC((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetDeltaBC());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetL0L1Latency((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetL0L1Latency());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetTrackIndex((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetTrackIndex());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetDistanceInStripPlane((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetDistanceInStripPlane());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetDx((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetDx());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetDy((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetDy());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetDz((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetDz());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetLength((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetLength());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetIntegratedTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetIntegratedTime((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const AliESDTOFCluster*) G__getstructoffset())->GetIntegratedTime());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFCluster*) G__getstructoffset())->SetStatus((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFCluster*) G__getstructoffset())->AddESDTOFHitIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFCluster*) G__getstructoffset())->AddTOFhit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFCluster*) G__getstructoffset())->AddTOFhit((AliESDTOFHit*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetHitIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFCluster*) G__getstructoffset())->SetHitIndex((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetTOFHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDTOFCluster*) G__getstructoffset())->GetTOFMatch((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDTOFCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTOFCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDTOFCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDTOFCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTOFCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTOFCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTOFCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTOFCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_566_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTOFCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDTOFCluster G__TAliESDTOFCluster;
static int G__G__ESD_566_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDTOFCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDTOFCluster*) (soff+(sizeof(AliESDTOFCluster)*i)))->~G__TAliESDTOFCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDTOFCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDTOFCluster*) (soff))->~G__TAliESDTOFCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTrackPointArray */
static int G__G__ESD_569_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTrackPointArray* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackPointArray[n];
     } else {
       p = new((void*) gvp) AliTrackPointArray[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackPointArray;
     } else {
       p = new((void*) gvp) AliTrackPointArray;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTrackPointArray));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTrackPointArray* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTrackPointArray((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliTrackPointArray((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTrackPointArray));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTrackPointArray* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTrackPointArray(*(AliTrackPointArray*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTrackPointArray(*(AliTrackPointArray*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTrackPointArray));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTrackPointArray& obj = ((AliTrackPointArray*) G__getstructoffset())->operator=(*(AliTrackPointArray*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTrackPointArray*) G__getstructoffset())->AddPoint((Int_t) G__int(libp->para[0]), (AliTrackPoint*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTrackPointArray*) G__getstructoffset())->GetNPoints());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTrackPointArray*) G__getstructoffset())->GetCovSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTrackPointArray*) G__getstructoffset())->GetPoint(*(AliTrackPoint*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliTrackPointArray*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliTrackPointArray*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliTrackPointArray*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliTrackPointArray*) G__getstructoffset())->GetCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliTrackPointArray*) G__getstructoffset())->GetDriftTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliTrackPointArray*) G__getstructoffset())->GetChargeRatio());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const AliTrackPointArray*) G__getstructoffset())->GetClusterType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 71, (long) ((const AliTrackPointArray*) G__getstructoffset())->GetExtra());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliTrackPointArray*) G__getstructoffset())->GetCov());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const AliTrackPointArray*) G__getstructoffset())->GetVolumeID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTrackPointArray*) G__getstructoffset())->HasVolumeID((UShort_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliTrackPointArray*) G__getstructoffset())->Sort((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliTrackPointArray*) G__getstructoffset())->Sort();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTrackPointArray::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTrackPointArray::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTrackPointArray::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTrackPointArray::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackPointArray*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTrackPointArray::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTrackPointArray::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTrackPointArray::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_569_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTrackPointArray::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTrackPointArray G__TAliTrackPointArray;
static int G__G__ESD_569_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTrackPointArray*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTrackPointArray*) (soff+(sizeof(AliTrackPointArray)*i)))->~G__TAliTrackPointArray();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTrackPointArray*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTrackPointArray*) (soff))->~G__TAliTrackPointArray();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTrackPoint */
static int G__G__ESD_580_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTrackPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackPoint[n];
     } else {
       p = new((void*) gvp) AliTrackPoint[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackPoint;
     } else {
       p = new((void*) gvp) AliTrackPoint;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTrackPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTrackPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackPoint(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]));
     } else {
       p = new((void*) gvp) AliTrackPoint(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackPoint(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
     } else {
       p = new((void*) gvp) AliTrackPoint(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackPoint(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) AliTrackPoint(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackPoint(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) AliTrackPoint(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackPoint(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) AliTrackPoint(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTrackPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTrackPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackPoint(
(Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) AliTrackPoint(
(Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackPoint(
(Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) AliTrackPoint(
(Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackPoint(
(Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) AliTrackPoint(
(Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackPoint(
(Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) AliTrackPoint(
(Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackPoint(
(Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliTrackPoint(
(Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTrackPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTrackPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTrackPoint(*(AliTrackPoint*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTrackPoint(*(AliTrackPoint*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTrackPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTrackPoint& obj = ((AliTrackPoint*) G__getstructoffset())->operator=(*(AliTrackPoint*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((AliTrackPoint*) G__getstructoffset())->SetXYZ((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((AliTrackPoint*) G__getstructoffset())->SetXYZ((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliTrackPoint*) G__getstructoffset())->SetXYZ((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliTrackPoint*) G__getstructoffset())->SetXYZ((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackPoint*) G__getstructoffset())->SetCov((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackPoint*) G__getstructoffset())->SetVolumeID((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackPoint*) G__getstructoffset())->SetCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackPoint*) G__getstructoffset())->SetDriftTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackPoint*) G__getstructoffset())->SetChargeRatio((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackPoint*) G__getstructoffset())->SetClusterType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliTrackPoint*) G__getstructoffset())->SetExtra((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliTrackPoint*) G__getstructoffset())->SetExtra();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackPoint*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackPoint*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackPoint*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((const AliTrackPoint*) G__getstructoffset())->GetXYZ((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const AliTrackPoint*) G__getstructoffset())->GetXYZ((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliTrackPoint*) G__getstructoffset())->GetCov());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliTrackPoint*) G__getstructoffset())->GetVolumeID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackPoint*) G__getstructoffset())->GetCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackPoint*) G__getstructoffset())->GetDriftTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackPoint*) G__getstructoffset())->GetChargeRatio());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTrackPoint*) G__getstructoffset())->GetClusterType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTrackPoint*) G__getstructoffset())->IsExtra());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 102, (double) ((const AliTrackPoint*) G__getstructoffset())->GetResidual(*(AliTrackPoint*) libp->para[0].ref, (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((const AliTrackPoint*) G__getstructoffset())->GetResidual(*(AliTrackPoint*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTrackPoint*) G__getstructoffset())->GetPCA(*(AliTrackPoint*) libp->para[0].ref, *(AliTrackPoint*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliTrackPoint*) G__getstructoffset())->GetAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTrackPoint*) G__getstructoffset())->GetRotMatrix(*(TGeoRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackPoint*) G__getstructoffset())->SetAlignCovMatrix(*(TMatrixDSym*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTrackPoint& obj = ((const AliTrackPoint*) G__getstructoffset())->Rotate((Float_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTrackPoint& obj = ((const AliTrackPoint*) G__getstructoffset())->MasterToLocal();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTrackPoint::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTrackPoint::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTrackPoint::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTrackPoint::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackPoint*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTrackPoint::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTrackPoint::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTrackPoint::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_580_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTrackPoint::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTrackPoint G__TAliTrackPoint;
static int G__G__ESD_580_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTrackPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTrackPoint*) (soff+(sizeof(AliTrackPoint)*i)))->~G__TAliTrackPoint();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTrackPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTrackPoint*) (soff))->~G__TAliTrackPoint();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliKalmanTrack */
static int G__G__ESD_582_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliKalmanTrack& obj = ((AliKalmanTrack*) G__getstructoffset())->operator=(*(AliKalmanTrack*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKalmanTrack*) G__getstructoffset())->SetLabel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKalmanTrack*) G__getstructoffset())->GetPredictedChi2((AliCluster*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliKalmanTrack*) G__getstructoffset())->PropagateTo((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliKalmanTrack*) G__getstructoffset())->Update((AliCluster*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKalmanTrack*) G__getstructoffset())->GetChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKalmanTrack*) G__getstructoffset())->GetMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKalmanTrack*) G__getstructoffset())->GetClusterIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKalmanTrack*) G__getstructoffset())->GetNumberOfTracklets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKalmanTrack*) G__getstructoffset())->GetTrackletIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKalmanTrack*) G__getstructoffset())->GetPIDsignal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliKalmanTrack*) G__getstructoffset())->GetExternalParameters(*(Double_t*) G__Doubleref(&libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliKalmanTrack*) G__getstructoffset())->GetExternalCovariance((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKalmanTrack*) G__getstructoffset())->StartTimeIntegral();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKalmanTrack*) G__getstructoffset())->SetIntegratedLength((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKalmanTrack*) G__getstructoffset())->SetIntegratedTimes((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKalmanTrack*) G__getstructoffset())->GetIntegratedTime((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKalmanTrack*) G__getstructoffset())->SetNumberOfClusters((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKalmanTrack*) G__getstructoffset())->SetFakeRatio((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliKalmanTrack*) G__getstructoffset())->GetFakeRatio());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKalmanTrack*) G__getstructoffset())->SetMass((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKalmanTrack*) G__getstructoffset())->SetChi2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliKalmanTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliKalmanTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliKalmanTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliKalmanTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKalmanTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliKalmanTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliKalmanTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliKalmanTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_582_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliKalmanTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliKalmanTrack G__TAliKalmanTrack;
static int G__G__ESD_582_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliKalmanTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliKalmanTrack*) (soff+(sizeof(AliKalmanTrack)*i)))->~G__TAliKalmanTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliKalmanTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliKalmanTrack*) (soff))->~G__TAliKalmanTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDfriendTrack */
static int G__G__ESD_585_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDfriendTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDfriendTrack[n];
     } else {
       p = new((void*) gvp) AliESDfriendTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDfriendTrack;
     } else {
       p = new((void*) gvp) AliESDfriendTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDfriendTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDfriendTrack(*(AliESDfriendTrack*) libp->para[0].ref, (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliESDfriendTrack(*(AliESDfriendTrack*) libp->para[0].ref, (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDfriendTrack(*(AliESDfriendTrack*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) AliESDfriendTrack(*(AliESDfriendTrack*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->SetOwner();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->SetESDtrackID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDfriendTrack*) G__getstructoffset())->GetESDtrackID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->Set1P((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->SetTrackPointArray((AliTrackPointArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDfriendTrack*) G__getstructoffset())->Get1P());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((AliESDfriendTrack*) G__getstructoffset())->GetITSindices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((AliESDfriendTrack*) G__getstructoffset())->GetTPCindices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((AliESDfriendTrack*) G__getstructoffset())->GetTRDindices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->SetITStrack((AliKalmanTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->SetTRDtrack((AliKalmanTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDfriendTrack*) G__getstructoffset())->GetTRDtrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDfriendTrack*) G__getstructoffset())->GetITStrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->AddCalibObject((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->RemoveCalibObject((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->SetTPCOut(*(AliExternalTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->SetITSOut(*(AliExternalTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->SetTRDIn(*(AliExternalTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDfriendTrack*) G__getstructoffset())->GetTRDIn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->SetITSIndices((Int_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->SetTPCIndices((Int_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->SetTRDIndices((Int_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDfriendTrack*) G__getstructoffset())->GetMaxITScluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDfriendTrack*) G__getstructoffset())->GetMaxTPCcluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDfriendTrack*) G__getstructoffset())->GetMaxTRDcluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDfriendTrack*) G__getstructoffset())->GetTPCseed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->TagSuppressSharedObjectsBeforeDeletion();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDfriendTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDfriendTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDfriendTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDfriendTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriendTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDfriendTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDfriendTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDfriendTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_585_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDfriendTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDfriendTrack G__TAliESDfriendTrack;
static int G__G__ESD_585_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDfriendTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDfriendTrack*) (soff+(sizeof(AliESDfriendTrack)*i)))->~G__TAliESDfriendTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDfriendTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDfriendTrack*) (soff))->~G__TAliESDfriendTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDtrack */
static int G__G__ESD_590_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDtrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDtrack[n];
     } else {
       p = new((void*) gvp) AliESDtrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDtrack;
     } else {
       p = new((void*) gvp) AliESDtrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDtrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDtrack(*(AliESDtrack*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDtrack(*(AliESDtrack*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDtrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDtrack((AliVTrack*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliESDtrack((AliVTrack*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDtrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDtrack((TParticle*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AliESDtrack((TParticle*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDtrack*) G__getstructoffset())->GetFriendTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetFriendTrack((AliESDfriendTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->ReleaseESDfriendTrack();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetFriendTrackPointer((AliESDfriendTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->AddCalibObject((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDtrack*) G__getstructoffset())->GetCalibObject((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->MakeMiniESDtrack();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetVertexID((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const AliESDtrack*) G__getstructoffset())->GetVertexID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDtrack*) G__getstructoffset())->UpdateTrackParams((AliKalmanTrack*) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetIntegratedLength((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetIntegratedTimes((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetESDpid((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDtrack*) G__getstructoffset())->GetESDpid((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetLabel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDtrack*) G__getstructoffset())->GetExternalParameters(*(Double_t*) G__Doubleref(&libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDtrack*) G__getstructoffset())->GetExternalCovariance((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetIntegratedLengthOld());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetIntegratedTimesOld((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const AliESDtrack*) G__getstructoffset())->GetPID((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const AliESDtrack*) G__getstructoffset())->GetPID());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTOFExpTDiffSpec((AliPID::EParticleType) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTOFExpTDiffSpec((AliPID::EParticleType) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTOFExpTDiffSpec());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetMass((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetMass());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetMassForTracking());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDtrack*) G__getstructoffset())->GetPIDForTracking0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetConstrainedPxPyPz((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetConstrainedXYZ((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetConstrainedExternalParameters(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetConstrainedExternalCovariance((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetConstrainedChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetChi2TPCConstrainedVsGlobal((AliESDVertex*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetCachedChi2TPCConstrainedVsGlobalVal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetGlobalChi2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetGlobalChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetInnerPxPyPz((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDtrack*) G__getstructoffset())->FillTPCOnlyTrack(*(AliESDtrack*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetInnerXYZ((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetInnerExternalParameters(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetInnerExternalCovariance((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetOuterParam((AliExternalTrackParam*) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetOuterHmpParam((AliExternalTrackParam*) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDtrack*) G__getstructoffset())->GetOuterHmpParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetOuterPxPyPz((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetOuterXYZ((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetOuterHmpXYZ((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetOuterExternalParameters(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetOuterExternalCovariance((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetOuterHmpExternalParameters(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetOuterHmpExternalCovariance((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDtrack*) G__getstructoffset())->GetClusters((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetITSpid((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDtrack*) G__getstructoffset())->GetITSpid((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetITSdEdxSamples((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetITSchi2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetITSNcls((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetITSchi2Std((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetITSchi2Std((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetITSClusterMap((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const AliESDtrack*) G__getstructoffset())->GetITSNcls());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliESDtrack*) G__getstructoffset())->GetITSSharedMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetITSSharedFlag((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetITSFakeFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDtrack*) G__getstructoffset())->SetITSFakeFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDtrack*) G__getstructoffset())->SetITSFakeFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetITSSharedMap((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetITSModuleIndex((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDtrack*) G__getstructoffset())->GetITSModuleIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetITSModuleIndexInfo((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDtrack*) G__getstructoffset())->GetITSLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetITSLabel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetITStrack((AliKalmanTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDtrack*) G__getstructoffset())->GetITStrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTPCpid((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDtrack*) G__getstructoffset())->GetTPCpid((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTPCPoints((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTPCNcls((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTPCchi2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTPCPointsF((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTPCPointsFIter1((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDtrack*) G__getstructoffset())->GetTPCNclsIter1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDtrack*) G__getstructoffset())->GetTPCNclsFIter1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 114, (long) ((const AliESDtrack*) G__getstructoffset())->GetTPCnclsS((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 114, (long) ((const AliESDtrack*) G__getstructoffset())->GetTPCnclsS((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 114, (long) ((const AliESDtrack*) G__getstructoffset())->GetTPCnclsS());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCPoints((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetKinkIndexes((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetV0Indexes((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTPCsignal((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (UChar_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTPCdEdxInfo((AliTPCdEdxInfo*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliESDtrack*) G__getstructoffset())->GetdEdxInfo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliESDtrack*) G__getstructoffset())->GetdEdxInfoTRD((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCsignalSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCchi2Iter1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDtrack*) G__getstructoffset())->GetTPCclusters((Int_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCdensity((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDtrack*) G__getstructoffset())->GetV0Index((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TBits& obj = ((const AliESDtrack*) G__getstructoffset())->GetTPCFitMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TBits& obj = ((const AliESDtrack*) G__getstructoffset())->GetTPCClusterMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_147(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TBits& obj = ((const AliESDtrack*) G__getstructoffset())->GetTPCSharedMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTPCFitMap(*(TBits*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTPCClusterMap(*(TBits*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTPCSharedMap(*(TBits*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 102, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCClusterInfo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 102, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCClusterInfo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 102, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCClusterInfo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCClusterInfo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCClusterInfo((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCClusterInfo());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 102, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCClusterDensity((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 102, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCClusterDensity((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 102, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCClusterDensity((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCClusterDensity((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCClusterDensity((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const AliESDtrack*) G__getstructoffset())->GetTPCClusterDensity());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_155(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTRDpid((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_156(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTRDsignal((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_157(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTRDNchamberdEdx((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_158(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTRDNclusterdEdx((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_159(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTRDntracklets((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_160(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliESDtrack*) G__getstructoffset())->GetTRDntracklets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_162(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliESDtrack*) G__getstructoffset())->GetTRDpidQuality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_163(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliESDtrack*) G__getstructoffset())->GetTRDtrkltOccupancy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_164(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliESDtrack*) G__getstructoffset())->GetTRDtrkltClCross((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_165(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->IsTRDtrkltChmbGood((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_166(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetNumberOfTRDslices((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_168(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTRDslice((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_169(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((AliESDtrack*) G__getstructoffset())->SetTRDmomentum((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliESDtrack*) G__getstructoffset())->SetTRDmomentum((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_170(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTRDslice((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTRDslice((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_172(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTRDQuality((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_173(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTRDQuality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_174(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTRDBudget((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_175(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTRDBudget());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_176(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTRDTimBin((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_177(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDtrack*) G__getstructoffset())->GetTRDpid((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_181(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const AliESDtrack*) G__getstructoffset())->GetTRDTimBin((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_185(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliESDtrack*) G__getstructoffset())->GetTRDncls0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_186(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliESDtrack*) G__getstructoffset())->GetTRDtracklets((Int_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_187(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTRDpid((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_188(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTRDpid((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_189(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDtrack*) G__getstructoffset())->GetTRDLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_190(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTRDtrack((AliKalmanTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_191(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDtrack*) G__getstructoffset())->GetTRDtrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_192(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTOFclusterArray((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_193(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const AliESDtrack*) G__getstructoffset())->GetTOFclusterArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_194(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDtrack*) G__getstructoffset())->GetNTOFclusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_195(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SuppressTOFMatches();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_196(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->ReplaceTOFTrackID((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_197(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->ReplaceTOFClusterID((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_198(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->ReplaceTOFMatchID((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_199(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->AddTOFcluster((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_200(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SortTOFcluster();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_201(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->ReMapTOFcluster((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_202(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTOFsignal((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_204(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTOFsignalToT((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_205(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTOFsignalToT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_206(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTOFsignalRaw((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_207(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTOFsignalRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_208(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTOFsignalDz((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_210(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTOFsignalDx((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_211(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTOFsignalDx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_212(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTOFDeltaBC((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_213(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliESDtrack*) G__getstructoffset())->GetTOFDeltaBC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_214(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTOFL0L1((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_215(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliESDtrack*) G__getstructoffset())->GetTOFL0L1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_216(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetTOFchi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_217(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTOFpid((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_218(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTOFLabel((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_219(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDtrack*) G__getstructoffset())->GetTOFpid((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_220(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDtrack*) G__getstructoffset())->GetTOFLabel((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_221(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDtrack*) G__getstructoffset())->GetTOFInfo((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_222(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTOFInfo((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_223(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDtrack*) G__getstructoffset())->GetTOFCalChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_224(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDtrack*) G__getstructoffset())->GetTOFcluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_225(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTOFcluster((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_226(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTOFCalChannel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_227(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDtrack*) G__getstructoffset())->GetTOFclusterN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_228(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->IsTOFHitAlreadyMatched());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_231(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetHMPIDsignal((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_234(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetHMPIDpid((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_236(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetHMPIDchi2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_237(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetHMPIDchi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_238(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetHMPIDcluIdx((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_240(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetHMPIDtrk((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_242(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((AliESDtrack*) G__getstructoffset())->SetHMPIDmip((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((AliESDtrack*) G__getstructoffset())->SetHMPIDmip((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_244(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->IsHMPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_246(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->IsMultPrimary());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_247(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->IsMultSecondary());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_259(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetPHOSdx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_260(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetPHOSdz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_261(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetPHOSdxdz((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_262(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetTrackPointArray((AliTrackPointArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_263(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDtrack*) G__getstructoffset())->GetTrackPointArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_268(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetConstrainedChi2TPC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_277(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetImpactParameters((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (AliExternalTrackParam*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_278(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetImpactParametersTPC((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_280(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDtrack*) G__getstructoffset())->GetESDEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_283(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetESDEvent((AliESDEvent*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_287(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDtrack::OnlineMode((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_288(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) AliESDtrack::OnlineMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_289(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 100, (double) AliESDtrack::GetLengthInActiveZone((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (TTreeSRedirector*) G__int(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) AliESDtrack::GetLengthInActiveZone((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) AliESDtrack::GetLengthInActiveZone((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_290(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetLengthInActiveZone((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (TTreeSRedirector*) G__int(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetLengthInActiveZone((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((const AliESDtrack*) G__getstructoffset())->GetLengthInActiveZone((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_304(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetFriendNotStored((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_305(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDtrack*) G__getstructoffset())->GetFriendNotStored());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_306(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->SetFriendTrackID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_307(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDtrack*) G__getstructoffset())->GetFriendTrackID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_309(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDtrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_310(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDtrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_311(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDtrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_312(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDtrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_316(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDtrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_317(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDtrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_318(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDtrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_319(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDtrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_590_0_320(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDtrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDtrack G__TAliESDtrack;
static int G__G__ESD_590_0_321(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDtrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDtrack*) (soff+(sizeof(AliESDtrack)*i)))->~G__TAliESDtrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDtrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDtrack*) (soff))->~G__TAliESDtrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDTrdTrack */
static int G__G__ESD_592_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTrdTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTrdTrack[n];
     } else {
       p = new((void*) gvp) AliESDTrdTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTrdTrack;
     } else {
       p = new((void*) gvp) AliESDTrdTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTrdTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDTrdTrack(*(AliESDTrdTrack*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDTrdTrack(*(AliESDTrdTrack*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDTrdTrack& obj = ((AliESDTrdTrack*) G__getstructoffset())->operator=(*(AliESDTrdTrack*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliESDTrdTrack*) G__getstructoffset())->GetTrackWord((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliESDTrdTrack*) G__getstructoffset())->GetExtendedTrackWord((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDTrdTrack*) G__getstructoffset())->GetB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDTrdTrack*) G__getstructoffset())->GetC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDTrdTrack*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliESDTrdTrack*) G__getstructoffset())->GetFlags());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDTrdTrack*) G__getstructoffset())->GetTrackletIndex((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDTrdTrack*) G__getstructoffset())->Phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDTrdTrack*) G__getstructoffset())->Eta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTrack*) G__getstructoffset())->SetB((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTrack*) G__getstructoffset())->SetC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTrack*) G__getstructoffset())->SetY((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTrack*) G__getstructoffset())->SetFlags((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTrack*) G__getstructoffset())->SetFlagsTiming((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTrack*) G__getstructoffset())->SetReserved((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTrack*) G__getstructoffset())->SetTrackletIndex((const Char_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTrack*) G__getstructoffset())->AddTrackletReference((AliESDTrdTracklet*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTrack*) G__getstructoffset())->SetTrackMatchReference((AliVTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDTrdTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTrdTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDTrdTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDTrdTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTrdTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTrdTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTrdTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_592_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTrdTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDTrdTrack G__TAliESDTrdTrack;
static int G__G__ESD_592_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDTrdTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDTrdTrack*) (soff+(sizeof(AliESDTrdTrack)*i)))->~G__TAliESDTrdTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDTrdTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDTrdTrack*) (soff))->~G__TAliESDTrdTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVertex */
static int G__G__ESD_593_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVertex[n];
     } else {
       p = new((void*) gvp) AliVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVertex;
     } else {
       p = new((void*) gvp) AliVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliVertex(
(Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) AliVertex(
(Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliVertex(*(AliVertex*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliVertex(*(AliVertex*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliVertex& obj = ((AliVertex*) G__getstructoffset())->operator=(*(AliVertex*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertex*) G__getstructoffset())->Clear((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertex*) G__getstructoffset())->Clear();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertex*) G__getstructoffset())->SetXYZ((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertex*) G__getstructoffset())->SetXv((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertex*) G__getstructoffset())->SetYv((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertex*) G__getstructoffset())->SetZv((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertex*) G__getstructoffset())->SetDispersion((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertex*) G__getstructoffset())->SetNContributors((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVertex*) G__getstructoffset())->GetDispersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVertex*) G__getstructoffset())->GetNIndices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertex*) G__getstructoffset())->SetIndices((Int_t) G__int(libp->para[0]), (UShort_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const AliVertex*) G__getstructoffset())->GetIndices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVertex*) G__getstructoffset())->UsesTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertex*) G__getstructoffset())->SetCovarianceMatrix((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertex*) G__getstructoffset())->SetChi2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_593_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVertex G__TAliVertex;
static int G__G__ESD_593_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVertex*) (soff+(sizeof(AliVertex)*i)))->~G__TAliVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVertex*) (soff))->~G__TAliVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDkink */
static int G__G__ESD_594_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDkink* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDkink[n];
     } else {
       p = new((void*) gvp) AliESDkink[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDkink;
     } else {
       p = new((void*) gvp) AliESDkink;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDkink));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDkink* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDkink(*(AliESDkink*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDkink(*(AliESDkink*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDkink));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDkink& obj = ((AliESDkink*) G__getstructoffset())->operator=(*(AliESDkink*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDkink*) G__getstructoffset())->SetID((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((AliESDkink*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDkink*) G__getstructoffset())->SetMother(*(AliExternalTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDkink*) G__getstructoffset())->SetDaughter(*(AliExternalTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDkink*) G__getstructoffset())->GetTPCDensityFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDkink*) G__getstructoffset())->GetQt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDkink*) G__getstructoffset())->GetR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDkink*) G__getstructoffset())->GetDistance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliESDkink*) G__getstructoffset())->GetTPCRow0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDkink*) G__getstructoffset())->GetAngle((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDkink*) G__getstructoffset())->GetPosition());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDkink*) G__getstructoffset())->GetMotherP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDkink*) G__getstructoffset())->GetDaughterP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDkink*) G__getstructoffset())->SetTPCRow0((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDkink*) G__getstructoffset())->GetLabel((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDkink*) G__getstructoffset())->SetLabel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDkink*) G__getstructoffset())->GetIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDkink*) G__getstructoffset())->SetIndex((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDkink*) G__getstructoffset())->SetStatus((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const AliESDkink*) G__getstructoffset())->GetStatus((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDkink*) G__getstructoffset())->SetTPCncls((UChar_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((const AliESDkink*) G__getstructoffset())->GetTPCncls());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDkink*) G__getstructoffset())->SetTPCDensity((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDkink*) G__getstructoffset())->GetTPCDensity((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDkink*) G__getstructoffset())->GetShapeFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDkink*) G__getstructoffset())->SetShapeFactor((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDkink*) G__getstructoffset())->SetMultiple((UChar_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((const AliESDkink*) G__getstructoffset())->GetMultiple());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliExternalTrackParam& obj = ((AliESDkink*) G__getstructoffset())->RefParamDaughter();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliExternalTrackParam& obj = ((AliESDkink*) G__getstructoffset())->RefParamMother();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDkink::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDkink::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDkink::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDkink::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDkink*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDkink::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDkink::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDkink::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_594_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDkink::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDkink G__TAliESDkink;
static int G__G__ESD_594_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDkink*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDkink*) (soff+(sizeof(AliESDkink)*i)))->~G__TAliESDkink();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDkink*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDkink*) (soff))->~G__TAliESDkink();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDHLTtrack */
static int G__G__ESD_595_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDHLTtrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDHLTtrack[n];
     } else {
       p = new((void*) gvp) AliESDHLTtrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDHLTtrack;
     } else {
       p = new((void*) gvp) AliESDHLTtrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTtrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDHLTtrack*) G__getstructoffset())->GetNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDHLTtrack*) G__getstructoffset())->GetMCid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDHLTtrack*) G__getstructoffset())->GetWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDHLTtrack*) G__getstructoffset())->ComesFromMainVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDHLTtrack*) G__getstructoffset())->GetFirstRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDHLTtrack*) G__getstructoffset())->GetLastRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDHLTtrack*) G__getstructoffset())->GetSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetFirstPointX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetFirstPointY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetFirstPointZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetLastPointX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetLastPointY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetLastPointZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDHLTtrack*) G__getstructoffset())->GetCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetTgl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetPsi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetPterr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetPsierr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetTglerr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetBinX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetBinY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetSizeX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetSizeY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetPx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetPy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetPz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetPseudoRapidity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDHLTtrack*) G__getstructoffset())->GetPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetNHits((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetMCid((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetWeight((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->ComesFromMainVertex((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetRowRange((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetSector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetFirstPoint((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetLastPoint((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetCharge((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetTgl((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetPsi((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetPt((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetPterr((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetPsierr((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetTglerr((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetBinXY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->SetPID((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDHLTtrack*) G__getstructoffset())->UpdateTrackParams((AliKalmanTrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDHLTtrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDHLTtrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDHLTtrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDHLTtrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTtrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDHLTtrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDHLTtrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDHLTtrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_595_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDHLTtrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__ESD_595_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliESDHLTtrack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliESDHLTtrack(*(AliESDHLTtrack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTtrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDHLTtrack G__TAliESDHLTtrack;
static int G__G__ESD_595_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDHLTtrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDHLTtrack*) (soff+(sizeof(AliESDHLTtrack)*i)))->~G__TAliESDHLTtrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDHLTtrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDHLTtrack*) (soff))->~G__TAliESDHLTtrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ESD_595_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDHLTtrack* dest = (AliESDHLTtrack*) G__getstructoffset();
   *dest = *(AliESDHLTtrack*) libp->para[0].ref;
   const AliESDHLTtrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliFMDMap */
static int G__G__ESD_596_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliFMDMap*) G__getstructoffset())->MaxDetectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliFMDMap*) G__getstructoffset())->MaxRings());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliFMDMap*) G__getstructoffset())->MaxSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliFMDMap*) G__getstructoffset())->MaxStrips());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliFMDMap*) G__getstructoffset())->CalcCoords((Int_t) G__int(libp->para[0]), *(UShort_t*) G__UShortref(&libp->para[1])
, *(Char_t*) G__Charref(&libp->para[2]), *(UShort_t*) G__UShortref(&libp->para[3])
, *(UShort_t*) G__UShortref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliFMDMap*) G__getstructoffset())->CalcIndex((UShort_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (UShort_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliFMDMap*) G__getstructoffset())->CheckIndex((UShort_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (UShort_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliFMDMap*) G__getstructoffset())->CheckNeedUShort((TFile*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliFMDMap& obj = ((AliFMDMap*) G__getstructoffset())->operator*=(*(AliFMDMap*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliFMDMap& obj = ((AliFMDMap*) G__getstructoffset())->operator/=(*(AliFMDMap*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliFMDMap& obj = ((AliFMDMap*) G__getstructoffset())->operator+=(*(AliFMDMap*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliFMDMap& obj = ((AliFMDMap*) G__getstructoffset())->operator-=(*(AliFMDMap*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliFMDMap*) G__getstructoffset())->ForEach(*(AliFMDMap::ForOne*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliFMDMap*) G__getstructoffset())->MaxIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliFMDMap*) G__getstructoffset())->AtAsFloat((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Float_t& obj = ((AliFMDMap*) G__getstructoffset())->AtAsFloat((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliFMDMap*) G__getstructoffset())->AtAsInt((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Int_t& obj = ((AliFMDMap*) G__getstructoffset())->AtAsInt((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliFMDMap*) G__getstructoffset())->AtAsUShort((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const UShort_t& obj = ((AliFMDMap*) G__getstructoffset())->AtAsUShort((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'r', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliFMDMap*) G__getstructoffset())->AtAsBool((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Bool_t& obj = ((AliFMDMap*) G__getstructoffset())->AtAsBool((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'g', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliFMDMap*) G__getstructoffset())->IsFloat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliFMDMap*) G__getstructoffset())->IsInt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliFMDMap*) G__getstructoffset())->IsUShort());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliFMDMap*) G__getstructoffset())->IsBool());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const AliFMDMap*) G__getstructoffset())->Ptr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliFMDMap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliFMDMap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliFMDMap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliFMDMap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliFMDMap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliFMDMap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliFMDMap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliFMDMap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_596_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliFMDMap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliFMDMap G__TAliFMDMap;
static int G__G__ESD_596_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliFMDMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliFMDMap*) (soff+(sizeof(AliFMDMap)*i)))->~G__TAliFMDMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliFMDMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliFMDMap*) (soff))->~G__TAliFMDMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ESD_596_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliFMDMap* dest = (AliFMDMap*) G__getstructoffset();
   *dest = *(AliFMDMap*) libp->para[0].ref;
   const AliFMDMap& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliFMDFloatMap */
static int G__G__ESD_600_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliFMDFloatMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliFMDFloatMap[n];
     } else {
       p = new((void*) gvp) AliFMDFloatMap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliFMDFloatMap;
     } else {
       p = new((void*) gvp) AliFMDFloatMap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliFMDFloatMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliFMDFloatMap(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) AliFMDFloatMap(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliFMDFloatMap(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliFMDFloatMap(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliFMDFloatMap((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliFMDFloatMap((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliFMDFloatMap((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliFMDFloatMap((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliFMDFloatMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliFMDFloatMap(*(AliFMDMap*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliFMDFloatMap(*(AliFMDMap*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliFMDFloatMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliFMDFloatMap(*(AliFMDFloatMap*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliFMDFloatMap(*(AliFMDFloatMap*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliFMDFloatMap& obj = ((AliFMDFloatMap*) G__getstructoffset())->operator=(*(AliFMDFloatMap*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliFMDFloatMap*) G__getstructoffset())->Reset(*(Float_t*) G__Floatref(&libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliFMDFloatMap*) G__getstructoffset())->Reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Float_t& obj = ((AliFMDFloatMap*) G__getstructoffset())->operator()((UShort_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (UShort_t) G__int(libp->para[3]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Float_t& obj = ((const AliFMDFloatMap*) G__getstructoffset())->operator()((UShort_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (UShort_t) G__int(libp->para[3]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliFMDFloatMap*) G__getstructoffset())->Data());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliFMDFloatMap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliFMDFloatMap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliFMDFloatMap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliFMDFloatMap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliFMDFloatMap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliFMDFloatMap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliFMDFloatMap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliFMDFloatMap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_600_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliFMDFloatMap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliFMDFloatMap G__TAliFMDFloatMap;
static int G__G__ESD_600_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliFMDFloatMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliFMDFloatMap*) (soff+(sizeof(AliFMDFloatMap)*i)))->~G__TAliFMDFloatMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliFMDFloatMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliFMDFloatMap*) (soff))->~G__TAliFMDFloatMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDFMD */
static int G__G__ESD_601_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDFMD* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDFMD[n];
     } else {
       p = new((void*) gvp) AliESDFMD[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDFMD;
     } else {
       p = new((void*) gvp) AliESDFMD;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDFMD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDFMD* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDFMD(*(AliESDFMD*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDFMD(*(AliESDFMD*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDFMD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDFMD& obj = ((AliESDFMD*) G__getstructoffset())->operator=(*(AliESDFMD*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDFMD*) G__getstructoffset())->Multiplicity((UShort_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (UShort_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDFMD*) G__getstructoffset())->Eta((UShort_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (UShort_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDFMD*) G__getstructoffset())->Phi((UShort_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (UShort_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDFMD*) G__getstructoffset())->Theta((UShort_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (UShort_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDFMD*) G__getstructoffset())->R((UShort_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (UShort_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDFMD*) G__getstructoffset())->SetMultiplicity((UShort_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (UShort_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDFMD*) G__getstructoffset())->SetEta((UShort_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (UShort_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDFMD*) G__getstructoffset())->SetNoiseFactor((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDFMD*) G__getstructoffset())->SetAngleCorrected((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDFMD*) G__getstructoffset())->IsAngleCorrected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDFMD*) G__getstructoffset())->GetNoiseFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDFMD*) G__getstructoffset())->MaxDetectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDFMD*) G__getstructoffset())->MaxRings());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDFMD*) G__getstructoffset())->MaxSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDFMD*) G__getstructoffset())->MaxStrips());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDFMD*) G__getstructoffset())->CheckNeedUShort((TFile*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDFMD*) G__getstructoffset())->NeedNoiseFix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDFMD*) G__getstructoffset())->ForEach(*(AliESDFMD::ForOne*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliFMDFloatMap& obj = ((const AliESDFMD*) G__getstructoffset())->MultiplicityMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliFMDFloatMap& obj = ((const AliESDFMD*) G__getstructoffset())->EtaMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDFMD::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDFMD::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDFMD::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDFMD::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDFMD*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDFMD::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDFMD::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDFMD::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_601_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDFMD::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDFMD G__TAliESDFMD;
static int G__G__ESD_601_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDFMD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDFMD*) (soff+(sizeof(AliESDFMD)*i)))->~G__TAliESDFMD();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDFMD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDFMD*) (soff))->~G__TAliESDFMD();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDVZERO */
static int G__G__ESD_608_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDVZERO* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDVZERO[n];
     } else {
       p = new((void*) gvp) AliESDVZERO[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDVZERO;
     } else {
       p = new((void*) gvp) AliESDVZERO;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDVZERO* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDVZERO(*(AliESDVZERO*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDVZERO(*(AliESDVZERO*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDVZERO* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 10
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDVZERO(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Float_t*) G__int(libp->para[5])
, (Float_t*) G__int(libp->para[6]), (Float_t*) G__int(libp->para[7])
, (Bool_t*) G__int(libp->para[8]), (Bool_t*) G__int(libp->para[9]));
   } else {
     p = new((void*) gvp) AliESDVZERO(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Float_t*) G__int(libp->para[5])
, (Float_t*) G__int(libp->para[6]), (Float_t*) G__int(libp->para[7])
, (Bool_t*) G__int(libp->para[8]), (Bool_t*) G__int(libp->para[9]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetBBtriggerV0A((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetBGtriggerV0A((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetBBtriggerV0C((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetBGtriggerV0C((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetMultiplicity((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetADC((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetTime((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetWidth((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetBBFlag((const Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetBGFlag((const Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetV0ATime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetV0CTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetV0ATimeError((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetV0CTimeError((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetV0ADecision((AliVVZERO::Decision) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetV0CDecision((AliVVZERO::Decision) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetTriggerChargeA((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetTriggerChargeC((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetTriggerBits((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetPFBBFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->SetPFBGFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDVZERO*) G__getstructoffset())->GetAdc((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDVZERO*) G__getstructoffset())->GetAdcV0A((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDVZERO*) G__getstructoffset())->GetAdcV0C((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDVZERO*) G__getstructoffset())->GetTime((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDVZERO*) G__getstructoffset())->GetTimeV0A((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDVZERO*) G__getstructoffset())->GetTimeV0C((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDVZERO*) G__getstructoffset())->GetWidth((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDVZERO*) G__getstructoffset())->GetWidthV0A((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDVZERO*) G__getstructoffset())->GetWidthV0C((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDVZERO*) G__getstructoffset())->GetV0ATimeError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDVZERO*) G__getstructoffset())->GetV0CTimeError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDVZERO*) G__getstructoffset())->GetBBTriggerV0A());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDVZERO*) G__getstructoffset())->GetBGTriggerV0A());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDVZERO*) G__getstructoffset())->GetBBTriggerV0C());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDVZERO*) G__getstructoffset())->GetBGTriggerV0C());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDVZERO& obj = ((AliESDVZERO*) G__getstructoffset())->operator=(*(AliESDVZERO*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDVZERO::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDVZERO::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDVZERO::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDVZERO::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZERO*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDVZERO::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDVZERO::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDVZERO::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_608_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDVZERO::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDVZERO G__TAliESDVZERO;
static int G__G__ESD_608_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDVZERO*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDVZERO*) (soff+(sizeof(AliESDVZERO)*i)))->~G__TAliESDVZERO();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDVZERO*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDVZERO*) (soff))->~G__TAliESDVZERO();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliMultiplicity */
static int G__G__ESD_612_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMultiplicity* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMultiplicity[n];
     } else {
       p = new((void*) gvp) AliMultiplicity[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMultiplicity;
     } else {
       p = new((void*) gvp) AliMultiplicity;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMultiplicity* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 14
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliMultiplicity(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Int_t*) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Float_t*) G__int(libp->para[8]), (Float_t*) G__int(libp->para[9])
, (Int_t*) G__int(libp->para[10]), (Short_t) G__int(libp->para[11])
, (Short_t) G__int(libp->para[12]), *(TBits*) libp->para[13].ref);
   } else {
     p = new((void*) gvp) AliMultiplicity(
(Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Int_t*) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Float_t*) G__int(libp->para[8]), (Float_t*) G__int(libp->para[9])
, (Int_t*) G__int(libp->para[10]), (Short_t) G__int(libp->para[11])
, (Short_t) G__int(libp->para[12]), *(TBits*) libp->para[13].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMultiplicity* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliMultiplicity(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Short_t) G__int(libp->para[2]), (Short_t) G__int(libp->para[3])
, *(TBits*) libp->para[4].ref);
   } else {
     p = new((void*) gvp) AliMultiplicity(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Short_t) G__int(libp->para[2]), (Short_t) G__int(libp->para[3])
, *(TBits*) libp->para[4].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMultiplicity* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliMultiplicity(*(AliMultiplicity*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliMultiplicity(*(AliMultiplicity*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliMultiplicity& obj = ((AliMultiplicity*) G__getstructoffset())->operator=(*(AliMultiplicity*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliMultiplicity*) G__getstructoffset())->GetMultTrackRefs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMultiplicity*) G__getstructoffset())->SetMultTrackRefs((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliMultiplicity*) G__getstructoffset())->GetScaleDThetaBySin2T());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMultiplicity*) G__getstructoffset())->SetScaleDThetaBySin2T((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMultiplicity*) G__getstructoffset())->SetNumberOfTracklets((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMultiplicity*) G__getstructoffset())->GetDeltaTheta((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMultiplicity*) G__getstructoffset())->CalcDist((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMultiplicity*) G__getstructoffset())->GetThetaAll((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMultiplicity*) G__getstructoffset())->GetPhiAll((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMultiplicity*) G__getstructoffset())->GetLabelAll((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMultiplicity*) G__getstructoffset())->GetLabelSingle((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMultiplicity*) G__getstructoffset())->GetLabelSingleLr((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMultiplicity*) G__getstructoffset())->SetLabelSingle((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliMultiplicity*) G__getstructoffset())->FreeClustersTracklet((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliMultiplicity*) G__getstructoffset())->FreeSingleCluster((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliMultiplicity*) G__getstructoffset())->SetNumberOfSingleClustersSPD2((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMultiplicity*) G__getstructoffset())->GetNumberOfSingleClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMultiplicity*) G__getstructoffset())->GetNumberOfSingleClustersLr((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliMultiplicity*) G__getstructoffset())->AreSPD2SinglesStored());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliMultiplicity*) G__getstructoffset())->SetSPD2SinglesStored((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliMultiplicity*) G__getstructoffset())->SetSPD2SinglesStored();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMultiplicity*) G__getstructoffset())->GetThetaSingle((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMultiplicity*) G__getstructoffset())->GetThetaSingleLr((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMultiplicity*) G__getstructoffset())->GetPhiSingle((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliMultiplicity*) G__getstructoffset())->GetPhiSingleLr((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliMultiplicity*) G__getstructoffset())->GetNumberOfITSClusters((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliMultiplicity*) G__getstructoffset())->GetTrackletTrackIDs((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMultiplicity*) G__getstructoffset())->GetTrackletTrackIDsLay((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t*) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliMultiplicity*) G__getstructoffset())->GetSingleClusterTrackID((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMultiplicity*) G__getstructoffset())->GetSingleClusterTrackIDs((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UInt_t*) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliMultiplicity*) G__getstructoffset())->GetDeltTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliMultiplicity*) G__getstructoffset())->GetThetaSingle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliMultiplicity*) G__getstructoffset())->GetPhiSingle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const AliMultiplicity*) G__getstructoffset())->GetLabelsSingle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMultiplicity*) G__getstructoffset())->AttachTracklet2TrackRefs((AliRefArray*) G__int(libp->para[0]), (AliRefArray*) G__int(libp->para[1])
, (AliRefArray*) G__int(libp->para[2]), (AliRefArray*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMultiplicity*) G__getstructoffset())->AttachCluster2TrackRefs((AliRefArray*) G__int(libp->para[0]), (AliRefArray*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((AliMultiplicity*) G__getstructoffset())->SetTrackletData((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((AliMultiplicity*) G__getstructoffset())->SetTrackletData((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliMultiplicity*) G__getstructoffset())->SetTrackletData((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((AliMultiplicity*) G__getstructoffset())->SetSingleClusterData((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliMultiplicity*) G__getstructoffset())->SetSingleClusterData((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMultiplicity*) G__getstructoffset())->CompactBits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliMultiplicity*) G__getstructoffset())->SetDPhiWindow2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliMultiplicity*) G__getstructoffset())->SetDPhiWindow2();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliMultiplicity*) G__getstructoffset())->SetDThetaWindow2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliMultiplicity*) G__getstructoffset())->SetDThetaWindow2();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliMultiplicity*) G__getstructoffset())->SetDPhiShift((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliMultiplicity*) G__getstructoffset())->SetDPhiShift();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliMultiplicity*) G__getstructoffset())->SetNStdDev((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliMultiplicity*) G__getstructoffset())->SetNStdDev();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMultiplicity*) G__getstructoffset())->GetDPhiWindow2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMultiplicity*) G__getstructoffset())->GetDThetaWindow2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMultiplicity*) G__getstructoffset())->GetDPhiShift());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMultiplicity*) G__getstructoffset())->GetNStdDev());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMultiplicity::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMultiplicity::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliMultiplicity::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMultiplicity::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMultiplicity*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMultiplicity::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMultiplicity::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMultiplicity::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_612_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMultiplicity::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliMultiplicity G__TAliMultiplicity;
static int G__G__ESD_612_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliMultiplicity*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliMultiplicity*) (soff+(sizeof(AliMultiplicity)*i)))->~G__TAliMultiplicity();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliMultiplicity*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliMultiplicity*) (soff))->~G__TAliMultiplicity();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliRawDataErrorLog */
static int G__G__ESD_613_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliRawDataErrorLog* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliRawDataErrorLog[n];
     } else {
       p = new((void*) gvp) AliRawDataErrorLog[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliRawDataErrorLog;
     } else {
       p = new((void*) gvp) AliRawDataErrorLog;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLog));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliRawDataErrorLog* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliRawDataErrorLog(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (AliRawDataErrorLog::ERawDataErrorLevel) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) AliRawDataErrorLog(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (AliRawDataErrorLog::ERawDataErrorLevel) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliRawDataErrorLog(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (AliRawDataErrorLog::ERawDataErrorLevel) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) AliRawDataErrorLog(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (AliRawDataErrorLog::ERawDataErrorLevel) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLog));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliRawDataErrorLog* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliRawDataErrorLog(*(AliRawDataErrorLog*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliRawDataErrorLog(*(AliRawDataErrorLog*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLog));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliRawDataErrorLog& obj = ((AliRawDataErrorLog*) G__getstructoffset())->operator=(*(AliRawDataErrorLog*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRawDataErrorLog*) G__getstructoffset())->GetEventNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRawDataErrorLog*) G__getstructoffset())->GetDdlID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRawDataErrorLog*) G__getstructoffset())->GetErrorLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliRawDataErrorLog*) G__getstructoffset())->GetErrorLevelAsString());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRawDataErrorLog*) G__getstructoffset())->GetErrorCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliRawDataErrorLog*) G__getstructoffset())->GetMessage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliRawDataErrorLog*) G__getstructoffset())->GetCount());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRawDataErrorLog*) G__getstructoffset())->AddCount();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliRawDataErrorLog::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliRawDataErrorLog::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliRawDataErrorLog::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliRawDataErrorLog::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliRawDataErrorLog*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliRawDataErrorLog::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliRawDataErrorLog::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliRawDataErrorLog::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_613_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliRawDataErrorLog::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliRawDataErrorLog G__TAliRawDataErrorLog;
static int G__G__ESD_613_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliRawDataErrorLog*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliRawDataErrorLog*) (soff+(sizeof(AliRawDataErrorLog)*i)))->~G__TAliRawDataErrorLog();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliRawDataErrorLog*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliRawDataErrorLog*) (soff))->~G__TAliRawDataErrorLog();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDfriend */
static int G__G__ESD_615_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDfriend* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDfriend[n];
     } else {
       p = new((void*) gvp) AliESDfriend[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDfriend;
     } else {
       p = new((void*) gvp) AliESDfriend;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDfriend* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDfriend(*(AliESDfriend*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDfriend(*(AliESDfriend*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDfriend& obj = ((AliESDfriend*) G__getstructoffset())->operator=(*(AliESDfriend*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriend*) G__getstructoffset())->SetOwner();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDfriend*) G__getstructoffset())->GetTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((AliESDfriend*) G__getstructoffset())->AddTrack((AliESDfriendTrack*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((AliESDfriend*) G__getstructoffset())->AddTrack((AliESDfriendTrack*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((AliESDfriend*) G__getstructoffset())->AddTrackAt((AliESDfriendTrack*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((AliESDfriend*) G__getstructoffset())->AddTrackAt((AliESDfriendTrack*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriend*) G__getstructoffset())->SetVZEROfriend((AliESDVZEROfriend*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDfriend*) G__getstructoffset())->GetVZEROfriend());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDfriend*) G__getstructoffset())->GetVZEROfriendConst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriend*) G__getstructoffset())->SetTZEROfriend((AliESDTZEROfriend*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDfriend*) G__getstructoffset())->GetTZEROfriend());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriend*) G__getstructoffset())->SetADfriend((AliESDADfriend*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDfriend*) G__getstructoffset())->GetADfriend());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriend*) G__getstructoffset())->ResetSoft();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriend*) G__getstructoffset())->SetNclustersTPC((UInt_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriend*) G__getstructoffset())->SetNclustersTPCused((UInt_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDfriend*) G__getstructoffset())->GetESDIndicesStored());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriend*) G__getstructoffset())->SetESDIndicesStored((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDfriend::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDfriend::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDfriend::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDfriend::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDfriend*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDfriend::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDfriend::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDfriend::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_615_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDfriend::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDfriend G__TAliESDfriend;
static int G__G__ESD_615_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDfriend*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDfriend*) (soff+(sizeof(AliESDfriend)*i)))->~G__TAliESDfriend();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDfriend*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDfriend*) (soff))->~G__TAliESDfriend();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESD */
static int G__G__ESD_616_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESD* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESD[n];
     } else {
       p = new((void*) gvp) AliESD[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESD;
     } else {
       p = new((void*) gvp) AliESD;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESD* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESD(*(AliESD*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESD(*(AliESD*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetESDfriend((AliESDfriend*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESD*) G__getstructoffset())->GetESDfriend((AliESDfriend*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetEventNumberInFile((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetBunchCrossNumber((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetOrbitNumber((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetPeriodNumber((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetRunNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetTimeStamp((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetEventType((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetTriggerMask((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetTriggerMaskNext50((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetTriggerCluster((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetMagneticField((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESD*) G__getstructoffset())->GetMagneticField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetHLTConfMapTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetHLTHoughTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetMuonTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetPmdTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetTrdTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESD*) G__getstructoffset())->Clean((Float_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESD*) G__getstructoffset())->RemoveKink((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESD*) G__getstructoffset())->RemoveV0((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESD*) G__getstructoffset())->RemoveTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESD*) G__getstructoffset())->AddTrack((AliESDtrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->AddHLTConfMapTrack((AliESDHLTtrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->AddHLTHoughTrack((AliESDHLTtrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->AddMuonTrack((AliESDMuonTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->AddPmdTrack((AliESDPmdTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->AddTrdTrack((AliESDTrdTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetV0((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESD*) G__getstructoffset())->AddV0((AliESDv0*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetCascade((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->AddCascade((AliESDcascade*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetKink((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESD*) G__getstructoffset())->AddKink((AliESDkink*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetCaloCluster((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESD*) G__getstructoffset())->AddCaloCluster((AliESDCaloCluster*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->AddPHOSTriggerPosition(*((TArrayF*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->AddPHOSTriggerAmplitudes(*((TArrayF*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->AddEMCALTriggerPosition(*((TArrayF*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->AddEMCALTriggerAmplitudes(*((TArrayF*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetVertex((AliESDVertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetMultiplicity((AliMultiplicity*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetMultiplicity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetPrimaryVertex((AliESDVertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetPrimaryVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetDiamond((AliESDVertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESD*) G__getstructoffset())->GetDiamondX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESD*) G__getstructoffset())->GetDiamondY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESD*) G__getstructoffset())->GetSigma2DiamondX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESD*) G__getstructoffset())->GetSigma2DiamondY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESD*) G__getstructoffset())->GetDiamondCovXY((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetEventNumberInFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESD*) G__getstructoffset())->GetBunchCrossNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESD*) G__getstructoffset())->GetOrbitNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESD*) G__getstructoffset())->GetPeriodNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetRunNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESD*) G__getstructoffset())->GetTimeStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESD*) G__getstructoffset())->GetEventType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliESD*) G__getstructoffset())->GetTriggerMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliESD*) G__getstructoffset())->GetTriggerMaskNext50());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliESD*) G__getstructoffset())->GetTriggerCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetNumberOfTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetNumberOfHLTConfMapTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetNumberOfHLTHoughTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetNumberOfMuonTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetNumberOfPmdTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetNumberOfTrdTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetNumberOfV0s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetNumberOfCascades());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetNumberOfKinks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetNumberOfCaloClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetNumberOfEMCALClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetNumberOfEMCALClusters((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetFirstEMCALCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetFirstEMCALCluster((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetEMCALTriggerPosition());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetEMCALTriggerAmplitudes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetNumberOfPHOSClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetNumberOfPHOSClusters((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetFirstPHOSCluster((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetFirstPHOSCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetPHOSTriggerPosition());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetPHOSTriggerAmplitudes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESD*) G__getstructoffset())->GetT0zVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetT0zVertex((Double32_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESD*) G__getstructoffset())->GetT0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetT0((Double32_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESD*) G__getstructoffset())->GetT0clock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetT0clock((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESD*) G__getstructoffset())->GetT0TOF((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESD*) G__getstructoffset())->GetT0TOF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetT0TOF((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetT0Trig());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetT0Trig((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESD*) G__getstructoffset())->GetT0time());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetT0time((Double32_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESD*) G__getstructoffset())->GetT0amplitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetT0amplitude((Double32_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESD*) G__getstructoffset())->GetZDCN1Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESD*) G__getstructoffset())->GetZDCP1Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESD*) G__getstructoffset())->GetZDCN2Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESD*) G__getstructoffset())->GetZDCP2Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESD*) G__getstructoffset())->GetZDCEMEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetZDCParticipants());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetZDC((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->ResetV0s();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->ResetCascades();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetFMDData((AliESDFMD*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESD*) G__getstructoffset())->GetFMDData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetVZEROData((AliESDVZERO*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESD*) G__getstructoffset())->GetVZEROData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetACORDEData((AliESDACORDE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESD*) G__getstructoffset())->GetACORDEDAta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->SetADData((AliESDAD*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESD*) G__getstructoffset())->GetADData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESD*) G__getstructoffset())->GetErrorLog((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->AddRawDataErrorLog((AliRawDataErrorLog*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESD*) G__getstructoffset())->GetNumberOfErrorLogs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESD::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESD::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESD::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESD::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESD*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESD::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESD::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESD::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_616_0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESD::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESD G__TAliESD;
static int G__G__ESD_616_0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESD*) (soff+(sizeof(AliESD)*i)))->~G__TAliESD();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESD*) (soff))->~G__TAliESD();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDRun */
static int G__G__ESD_701_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDRun[n];
     } else {
       p = new((void*) gvp) AliESDRun[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDRun;
     } else {
       p = new((void*) gvp) AliESDRun;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDRun(*(AliESDRun*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDRun(*(AliESDRun*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDRun& obj = ((AliESDRun*) G__getstructoffset())->operator=(*(AliESDRun*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDRun*) G__getstructoffset())->InitMagneticField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDRun*) G__getstructoffset())->GetRunNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetRunNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetMagneticField((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDRun*) G__getstructoffset())->GetMagneticField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDRun*) G__getstructoffset())->GetPeriodNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetPeriodNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetDiamond((AliESDVertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetTriggerClass((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetCurrentL3((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetCurrentDip((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetBeamEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetBeamType((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDRun*) G__getstructoffset())->SetBeamEnergyIsSqrtSHalfGeV((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDRun*) G__getstructoffset())->SetBeamEnergyIsSqrtSHalfGeV();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetDetectorsInDAQ((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetDetectorsInReco((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetCTPStart((AliTimeStamp*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDRun*) G__getstructoffset())->IsBeamEnergyIsSqrtSHalfGeV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDRun*) G__getstructoffset())->GetDiamondX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDRun*) G__getstructoffset())->GetDiamondY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDRun*) G__getstructoffset())->GetDiamondZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDRun*) G__getstructoffset())->GetSigma2DiamondX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDRun*) G__getstructoffset())->GetSigma2DiamondY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDRun*) G__getstructoffset())->GetSigma2DiamondZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDRun*) G__getstructoffset())->GetDiamondCovXY((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliESDRun*) G__getstructoffset())->GetTriggerClass((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliESDRun*) G__getstructoffset())->GetActiveTriggerClasses();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliESDRun*) G__getstructoffset())->GetFiredTriggerClasses((ULong64_t) G__ULonglong(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliESDRun*) G__getstructoffset())->GetFiredTriggerClassesNext50((ULong64_t) G__ULonglong(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliESDRun*) G__getstructoffset())->GetFiredTriggerClasses((ULong64_t) G__ULonglong(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDRun*) G__getstructoffset())->PrintAllTriggerClasses();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDRun*) G__getstructoffset())->IsTriggerClassFired((ULong64_t) G__ULonglong(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDRun*) G__getstructoffset())->IsTriggerClassFiredNext50((ULong64_t) G__ULonglong(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDRun*) G__getstructoffset())->IsTriggerClassFired((ULong64_t) G__ULonglong(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1])
, (const char*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDRun*) G__getstructoffset())->GetCurrentL3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDRun*) G__getstructoffset())->GetCurrentDip());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDRun*) G__getstructoffset())->GetBeamEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliESDRun*) G__getstructoffset())->GetBeamType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetBeamParticle((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDRun*) G__getstructoffset())->GetBeamParticle((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDRun*) G__getstructoffset())->GetBeamParticleA((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDRun*) G__getstructoffset())->GetBeamParticleZ((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDRun*) G__getstructoffset())->GetDetectorsInDAQ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDRun*) G__getstructoffset())->GetDetectorsInReco());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTimeStamp& obj = ((const AliESDRun*) G__getstructoffset())->GetCTPStart();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetPHOSMatrix((TGeoHMatrix*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDRun*) G__getstructoffset())->GetPHOSMatrix((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetEMCALMatrix((TGeoHMatrix*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDRun*) G__getstructoffset())->GetEMCALMatrix((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDRun*) G__getstructoffset())->GetMeanIntensity((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((AliESDRun*) G__getstructoffset())->SetMeanIntensity((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliESDRun*) G__getstructoffset())->SetMeanIntensity((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDRun*) G__getstructoffset())->GetMeanIntensityIntecting((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDRun*) G__getstructoffset())->GetMeanIntensityNonIntecting((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDRun*) G__getstructoffset())->GetT0spread((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetT0spread((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetT0spread((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetCaloTriggerType((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetCaloTriggerType((int) G__int(libp->para[0]), (const Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((AliESDRun*) G__getstructoffset())->GetCaloTriggerType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((AliESDRun*) G__getstructoffset())->GetCaloTriggerType((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->SetVZEROEqFactors((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliESDRun*) G__getstructoffset())->GetVZEROEqFactors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDRun*) G__getstructoffset())->GetVZEROEqFactors((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDRun::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDRun::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDRun::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDRun::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDRun*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDRun::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDRun::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDRun::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_701_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDRun::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDRun G__TAliESDRun;
static int G__G__ESD_701_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDRun*) (soff+(sizeof(AliESDRun)*i)))->~G__TAliESDRun();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDRun*) (soff))->~G__TAliESDRun();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTriggerScalersESD */
static int G__G__ESD_704_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerScalersESD* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerScalersESD[n];
     } else {
       p = new((void*) gvp) AliTriggerScalersESD[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerScalersESD;
     } else {
       p = new((void*) gvp) AliTriggerScalersESD;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerScalersESD* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerScalersESD(
(UChar_t) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1])
, (ULong64_t) G__ULonglong(libp->para[2]), (ULong64_t) G__ULonglong(libp->para[3])
, (ULong64_t) G__ULonglong(libp->para[4]), (ULong64_t) G__ULonglong(libp->para[5])
, (ULong64_t) G__ULonglong(libp->para[6]));
   } else {
     p = new((void*) gvp) AliTriggerScalersESD(
(UChar_t) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1])
, (ULong64_t) G__ULonglong(libp->para[2]), (ULong64_t) G__ULonglong(libp->para[3])
, (ULong64_t) G__ULonglong(libp->para[4]), (ULong64_t) G__ULonglong(libp->para[5])
, (ULong64_t) G__ULonglong(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerScalersESD* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 9
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerScalersESD(
(UChar_t) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1])
, (ULong64_t) G__ULonglong(libp->para[2]), (ULong64_t) G__ULonglong(libp->para[3])
, (ULong64_t) G__ULonglong(libp->para[4]), (ULong64_t) G__ULonglong(libp->para[5])
, (ULong64_t) G__ULonglong(libp->para[6]), (ULong64_t) G__ULonglong(libp->para[7])
, (ULong64_t) G__ULonglong(libp->para[8]));
   } else {
     p = new((void*) gvp) AliTriggerScalersESD(
(UChar_t) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1])
, (ULong64_t) G__ULonglong(libp->para[2]), (ULong64_t) G__ULonglong(libp->para[3])
, (ULong64_t) G__ULonglong(libp->para[4]), (ULong64_t) G__ULonglong(libp->para[5])
, (ULong64_t) G__ULonglong(libp->para[6]), (ULong64_t) G__ULonglong(libp->para[7])
, (ULong64_t) G__ULonglong(libp->para[8]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerScalersESD* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerScalersESD((UChar_t) G__int(libp->para[0]), (ULong64_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) AliTriggerScalersESD((UChar_t) G__int(libp->para[0]), (ULong64_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerScalersESD* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerScalersESD(*(AliTriggerScalersESD*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTriggerScalersESD(*(AliTriggerScalersESD*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTriggerScalersESD& obj = ((AliTriggerScalersESD*) G__getstructoffset())->operator=(*(AliTriggerScalersESD*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalersESD*) G__getstructoffset())->SetLMCB((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalersESD*) G__getstructoffset())->SetLMCA((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliTriggerScalersESD*) G__getstructoffset())->GetLOCB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliTriggerScalersESD*) G__getstructoffset())->GetLOCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliTriggerScalersESD*) G__getstructoffset())->GetL1CB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliTriggerScalersESD*) G__getstructoffset())->GetL1CA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliTriggerScalersESD*) G__getstructoffset())->GetL2CB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliTriggerScalersESD*) G__getstructoffset())->GetL2CA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliTriggerScalersESD*) G__getstructoffset())->GetLMCB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliTriggerScalersESD*) G__getstructoffset())->GetLMCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliTriggerScalersESD*) G__getstructoffset())->GetAllScalers((ULong64_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliTriggerScalersESD*) G__getstructoffset())->GetAllScalersM012((ULong64_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliTriggerScalersESD*) G__getstructoffset())->GetClassIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTriggerScalersESD::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerScalersESD::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTriggerScalersESD::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTriggerScalersESD::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalersESD*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerScalersESD::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerScalersESD::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerScalersESD::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_704_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerScalersESD::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTriggerScalersESD G__TAliTriggerScalersESD;
static int G__G__ESD_704_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTriggerScalersESD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTriggerScalersESD*) (soff+(sizeof(AliTriggerScalersESD)*i)))->~G__TAliTriggerScalersESD();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTriggerScalersESD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTriggerScalersESD*) (soff))->~G__TAliTriggerScalersESD();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTriggerScalersRecordESD */
static int G__G__ESD_705_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerScalersRecordESD* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerScalersRecordESD[n];
     } else {
       p = new((void*) gvp) AliTriggerScalersRecordESD[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerScalersRecordESD;
     } else {
       p = new((void*) gvp) AliTriggerScalersRecordESD;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersRecordESD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalersRecordESD*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalersRecordESD*) G__getstructoffset())->AddTriggerScalers((AliTriggerScalersESD*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalersRecordESD*) G__getstructoffset())->AddTriggerScalers(
(UChar_t) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1])
, (ULong64_t) G__ULonglong(libp->para[2]), (ULong64_t) G__ULonglong(libp->para[3])
, (ULong64_t) G__ULonglong(libp->para[4]), (ULong64_t) G__ULonglong(libp->para[5])
, (ULong64_t) G__ULonglong(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTriggerScalersRecordESD*) G__getstructoffset())->GetTriggerScalers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTriggerScalersRecordESD*) G__getstructoffset())->GetTriggerScalersForClass((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTriggerScalersRecordESD*) G__getstructoffset())->GetTimeStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerScalersRecordESD*) G__getstructoffset())->GetTimeGroup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalersRecordESD*) G__getstructoffset())->SetTimeStamp((AliTimeStamp*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalersRecordESD*) G__getstructoffset())->SetTimeGroup((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerScalersRecordESD* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerScalersRecordESD(*(AliTriggerScalersRecordESD*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTriggerScalersRecordESD(*(AliTriggerScalersRecordESD*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersRecordESD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTriggerScalersRecordESD& obj = ((AliTriggerScalersRecordESD*) G__getstructoffset())->operator=(*(AliTriggerScalersRecordESD*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTriggerScalersRecordESD::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerScalersRecordESD::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTriggerScalersRecordESD::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTriggerScalersRecordESD::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerScalersRecordESD*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerScalersRecordESD::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerScalersRecordESD::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerScalersRecordESD::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_705_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerScalersRecordESD::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTriggerScalersRecordESD G__TAliTriggerScalersRecordESD;
static int G__G__ESD_705_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTriggerScalersRecordESD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTriggerScalersRecordESD*) (soff+(sizeof(AliTriggerScalersRecordESD)*i)))->~G__TAliTriggerScalersRecordESD();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTriggerScalersRecordESD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTriggerScalersRecordESD*) (soff))->~G__TAliTriggerScalersRecordESD();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTriggerIR */
static int G__G__ESD_706_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerIR* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerIR[n];
     } else {
       p = new((void*) gvp) AliTriggerIR[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerIR;
     } else {
       p = new((void*) gvp) AliTriggerIR;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerIR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerIR* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerIR(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) AliTriggerIR(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerIR(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) AliTriggerIR(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerIR(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliTriggerIR(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerIR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerIR* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerIR(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (ULong64_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) AliTriggerIR(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (ULong64_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerIR(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (ULong64_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) AliTriggerIR(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (ULong64_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerIR(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (ULong64_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliTriggerIR(
(UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (ULong64_t*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerIR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerIR* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerIR(*(AliTriggerIR*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTriggerIR(*(AliTriggerIR*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerIR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTriggerIR& obj = ((AliTriggerIR*) G__getstructoffset())->operator=(*(AliTriggerIR*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerIR*) G__getstructoffset())->SetOrbit((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerIR*) G__getstructoffset())->SetIncomplete((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerIR*) G__getstructoffset())->SetTransErr((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerIR*) G__getstructoffset())->SetDDLflag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerIR*) G__getstructoffset())->GetOrbit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerIR*) G__getstructoffset())->GetNWord());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerIR*) G__getstructoffset())->GetNWord2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 71, (long) ((const AliTriggerIR*) G__getstructoffset())->GetInt1s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 71, (long) ((const AliTriggerIR*) G__getstructoffset())->GetInt2s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 77, (long) ((const AliTriggerIR*) G__getstructoffset())->GetIntsRun2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const AliTriggerIR*) G__getstructoffset())->GetBCs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const AliTriggerIR*) G__getstructoffset())->GetBC2s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerIR*) G__getstructoffset())->GetIncomplete());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerIR*) G__getstructoffset())->GetIncomplete2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerIR*) G__getstructoffset())->GetTransErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerIR*) G__getstructoffset())->GetTransErr2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliTriggerIR*) G__getstructoffset())->GetDDLflag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTriggerIR::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerIR::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTriggerIR::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTriggerIR::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerIR*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerIR::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerIR::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerIR::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_706_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerIR::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTriggerIR G__TAliTriggerIR;
static int G__G__ESD_706_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTriggerIR*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTriggerIR*) (soff+(sizeof(AliTriggerIR)*i)))->~G__TAliTriggerIR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTriggerIR*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTriggerIR*) (soff))->~G__TAliTriggerIR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTriggerConfiguration */
static int G__G__ESD_707_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerConfiguration* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerConfiguration[n];
     } else {
       p = new((void*) gvp) AliTriggerConfiguration[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerConfiguration;
     } else {
       p = new((void*) gvp) AliTriggerConfiguration;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfiguration));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerConfiguration* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerConfiguration(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) AliTriggerConfiguration(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfiguration));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddInput(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref
, (UChar_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UChar_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddInput(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref
, (UChar_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddInput((AliTriggerInput*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddInteraction(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddInteraction((AliTriggerInteraction*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddFunction(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddFunction((AliTriggerInteraction*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddPFProtection((AliTriggerPFProtection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddMask(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddMask((AliTriggerBCMask*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddCluster(*(TString*) libp->para[0].ref, (UChar_t) G__int(libp->para[1])
, *(TString*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddCluster((AliTriggerCluster*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddDescriptor(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddDescriptor((AliTriggerDescriptor*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddClass(
*(TString*) libp->para[0].ref, (UChar_t) G__int(libp->para[1])
, (AliTriggerDescriptor*) G__int(libp->para[2]), (AliTriggerCluster*) G__int(libp->para[3])
, (AliTriggerPFProtection*) G__int(libp->para[4]), (AliTriggerBCMask*) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddClass(
*(TString*) libp->para[0].ref, (UChar_t) G__int(libp->para[1])
, *(TString*) libp->para[2].ref, *(TString*) libp->para[3].ref
, *(TString*) libp->para[4].ref, *(TString*) libp->para[5].ref
, (UInt_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTriggerConfiguration*) G__getstructoffset())->AddClass((AliTriggerClass*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerConfiguration*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliTriggerConfiguration*) G__getstructoffset())->GetPartitionName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliTriggerConfiguration*) G__getstructoffset())->GetActiveDetectors();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliTriggerConfiguration*) G__getstructoffset())->GetTriggeringDetectors();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliTriggerConfiguration*) G__getstructoffset())->GetTriggeringModules();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TObjArray& obj = ((const AliTriggerConfiguration*) G__getstructoffset())->GetInputs();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TObjArray& obj = ((const AliTriggerConfiguration*) G__getstructoffset())->GetInteractions();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TObjArray& obj = ((const AliTriggerConfiguration*) G__getstructoffset())->GetFunctions();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TObjArray& obj = ((const AliTriggerConfiguration*) G__getstructoffset())->GetPFProtections();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TObjArray& obj = ((const AliTriggerConfiguration*) G__getstructoffset())->GetMasks();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TObjArray& obj = ((const AliTriggerConfiguration*) G__getstructoffset())->GetClusters();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TObjArray& obj = ((const AliTriggerConfiguration*) G__getstructoffset())->GetDescriptors();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TObjArray& obj = ((const AliTriggerConfiguration*) G__getstructoffset())->GetClasses();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTriggerConfiguration*) G__getstructoffset())->GetVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTriggerConfiguration*) G__getstructoffset())->GetClassIndexFromName((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliTriggerConfiguration*) G__getstructoffset())->GetClassNameFromIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTriggerConfiguration*) G__getstructoffset())->GetTriggerClass((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliTriggerConfiguration*) G__getstructoffset())->WriteConfiguration((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliTriggerConfiguration*) G__getstructoffset())->WriteConfiguration();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) AliTriggerConfiguration::GetAvailableConfigurations((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) AliTriggerConfiguration::GetAvailableConfigurations());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTriggerConfiguration::LoadConfiguration(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTriggerConfiguration::LoadConfigurationFromString((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerConfiguration*) G__getstructoffset())->IsSelected(*((TString*) G__int(libp->para[0])), *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTriggerConfiguration::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerConfiguration::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTriggerConfiguration::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTriggerConfiguration::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerConfiguration*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerConfiguration::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerConfiguration::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerConfiguration::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_707_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerConfiguration::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTriggerConfiguration G__TAliTriggerConfiguration;
static int G__G__ESD_707_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTriggerConfiguration*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTriggerConfiguration*) (soff+(sizeof(AliTriggerConfiguration)*i)))->~G__TAliTriggerConfiguration();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTriggerConfiguration*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTriggerConfiguration*) (soff))->~G__TAliTriggerConfiguration();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDHeader */
static int G__G__ESD_708_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDHeader[n];
     } else {
       p = new((void*) gvp) AliESDHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDHeader;
     } else {
       p = new((void*) gvp) AliESDHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDHeader(*(AliESDHeader*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDHeader(*(AliESDHeader*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDHeader& obj = ((AliESDHeader*) G__getstructoffset())->operator=(*(AliESDHeader*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetTriggerMask((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetTriggerMaskNext50((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetOrbitNumber((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetTimeStamp((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetEventType((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetEventSpecie((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetEventNumberInFile((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetBunchCrossNumber((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetPeriodNumber((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetTriggerCluster((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDHeader*) G__getstructoffset())->AddTriggerIR((AliTriggerIR*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetCTPConfig((AliTriggerConfiguration*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetL0TriggerInputs((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetL1TriggerInputs((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetL2TriggerInputs((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetTriggerScalersRecord((AliTriggerScalersESD*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetTriggerScalersDeltaEvent((AliTriggerScalersRecordESD*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetTriggerScalersDeltaRun((AliTriggerScalersRecordESD*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDHeader*) G__getstructoffset())->GetTriggerScalersRecord());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDHeader*) G__getstructoffset())->GetTriggerScalersDeltaEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDHeader*) G__getstructoffset())->GetTriggerScalersDeltaRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDHeader*) G__getstructoffset())->GetTriggerIR((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetActiveTriggerInputs((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliESDHeader*) G__getstructoffset())->GetTriggerInputName((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliESDHeader*) G__getstructoffset())->GetActiveTriggerInputs();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliESDHeader*) G__getstructoffset())->GetFiredTriggerInputs();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDHeader*) G__getstructoffset())->GetCTPConfig());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDHeader*) G__getstructoffset())->FindIRIntInteractionsBXMap((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDHeader*) G__getstructoffset())->GetIRInt2LastInteractionMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliESDHeader*) G__getstructoffset())->GetTriggerMaskNext50());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDHeader*) G__getstructoffset())->GetTriggerMaskAll(*(ULong64_t*) G__ULonglongref(&libp->para[0]), *(ULong64_t*) G__ULonglongref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDHeader*) G__getstructoffset())->GetEventSpecie());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDHeader*) G__getstructoffset())->GetEventNumberInFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDHeader*) G__getstructoffset())->GetTriggerIREntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((const AliESDHeader*) G__getstructoffset())->GetTriggerIREntries((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const AliESDHeader*) G__getstructoffset())->GetTriggerIREntries((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         const TObjArray* pobj;
         const TObjArray xobj = ((const AliESDHeader*) G__getstructoffset())->GetIRArray((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
         pobj = new TObjArray(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         const TObjArray* pobj;
         const TObjArray xobj = ((const AliESDHeader*) G__getstructoffset())->GetIRArray((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         pobj = new TObjArray(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((AliESDHeader*) G__getstructoffset())->GetTPCNoiseFilterCounter((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->SetTPCNoiseFilterCounter((UInt_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_708_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDHeader G__TAliESDHeader;
static int G__G__ESD_708_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDHeader*) (soff+(sizeof(AliESDHeader)*i)))->~G__TAliESDHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDHeader*) (soff))->~G__TAliESDHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDTZERO */
static int G__G__ESD_710_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTZERO* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTZERO[n];
     } else {
       p = new((void*) gvp) AliESDTZERO[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTZERO;
     } else {
       p = new((void*) gvp) AliESDTZERO;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTZERO));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTZERO* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDTZERO(*(AliESDTZERO*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDTZERO(*(AliESDTZERO*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTZERO));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDTZERO& obj = ((AliESDTZERO*) G__getstructoffset())->operator=(*(AliESDTZERO*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDTZERO*) G__getstructoffset())->GetT0zVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetT0zVertex((Double32_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDTZERO*) G__getstructoffset())->GetT0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetT0((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDTZERO*) G__getstructoffset())->GetT0clock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetT0clock((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDTZERO*) G__getstructoffset())->GetT0TOF((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDTZERO*) G__getstructoffset())->GetT0TOF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetT0TOF((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDTZERO*) G__getstructoffset())->GetT0TOFbest((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDTZERO*) G__getstructoffset())->GetT0TOFbest());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetT0TOFbest((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDTZERO*) G__getstructoffset())->GetT0Trig());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetT0Trig((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDTZERO*) G__getstructoffset())->GetT0Trig((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDTZERO*) G__getstructoffset())->GetT0time());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetT0time((Double32_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDTZERO*) G__getstructoffset())->GetT0amplitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetT0amplitude((Double32_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDTZERO*) G__getstructoffset())->GetTimeFull((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDTZERO*) G__getstructoffset())->GetOrA((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDTZERO*) G__getstructoffset())->GetOrC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDTZERO*) G__getstructoffset())->GetTVDC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetTimeFull((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetOrA((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetOrC((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetTVDC((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetMultC((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetMultA((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDTZERO*) G__getstructoffset())->GetMultC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDTZERO*) G__getstructoffset())->GetMultA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDTZERO*) G__getstructoffset())->SetBackgroundFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDTZERO*) G__getstructoffset())->SetBackgroundFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDTZERO*) G__getstructoffset())->SetPileupFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDTZERO*) G__getstructoffset())->SetPileupFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDTZERO*) G__getstructoffset())->SetSatelliteFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDTZERO*) G__getstructoffset())->SetSatelliteFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDTZERO*) G__getstructoffset())->GetBackgroundFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDTZERO*) G__getstructoffset())->GetPileupFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDTZERO*) G__getstructoffset())->GetSatellite());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetPileupTime((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDTZERO*) G__getstructoffset())->GetPileupTime((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetPileupBits(*((TBits*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TBits* pobj;
         const TBits xobj = ((const AliESDTZERO*) G__getstructoffset())->GetT0PileupBits();
         pobj = new TBits(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDTZERO*) G__getstructoffset())->GetT0NewAmplitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->SetT0NewAmplitude((Double32_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDTZERO::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTZERO::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDTZERO::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDTZERO::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZERO*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTZERO::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTZERO::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTZERO::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_710_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTZERO::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDTZERO G__TAliESDTZERO;
static int G__G__ESD_710_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDTZERO*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDTZERO*) (soff+(sizeof(AliESDTZERO)*i)))->~G__TAliESDTZERO();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDTZERO*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDTZERO*) (soff))->~G__TAliESDTZERO();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDFIT */
static int G__G__ESD_711_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDFIT* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDFIT[n];
     } else {
       p = new((void*) gvp) AliESDFIT[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDFIT;
     } else {
       p = new((void*) gvp) AliESDFIT;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDFIT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDFIT* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDFIT(*(AliESDFIT*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDFIT(*(AliESDFIT*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDFIT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDFIT& obj = ((AliESDFIT*) G__getstructoffset())->operator=(*(AliESDFIT*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDFIT*) G__getstructoffset())->GetFITzVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDFIT*) G__getstructoffset())->SetFITzVertex((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDFIT*) G__getstructoffset())->GetFITT0((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliESDFIT*) G__getstructoffset())->GetFITT0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDFIT*) G__getstructoffset())->SetFITT0((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDFIT*) G__getstructoffset())->GetT0best((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliESDFIT*) G__getstructoffset())->GetT0best());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDFIT*) G__getstructoffset())->SetT0best((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliESDFIT*) G__getstructoffset())->GetFITtime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDFIT*) G__getstructoffset())->SetFITtime((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const AliESDFIT*) G__getstructoffset())->GetFITamplitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDFIT*) G__getstructoffset())->SetFITamplitude((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDFIT*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDFIT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDFIT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDFIT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDFIT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDFIT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDFIT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDFIT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDFIT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_711_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDFIT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDFIT G__TAliESDFIT;
static int G__G__ESD_711_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDFIT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDFIT*) (soff+(sizeof(AliESDFIT)*i)))->~G__TAliESDFIT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDFIT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDFIT*) (soff))->~G__TAliESDFIT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDZDC */
static int G__G__ESD_713_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDZDC* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDZDC[n];
     } else {
       p = new((void*) gvp) AliESDZDC[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDZDC;
     } else {
       p = new((void*) gvp) AliESDZDC;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDZDC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDZDC* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDZDC(*(AliESDZDC*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDZDC(*(AliESDZDC*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDZDC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDZDC& obj = ((AliESDZDC*) G__getstructoffset())->operator=(*(AliESDZDC*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDZDC*) G__getstructoffset())->GetZPCTowerEnergyLR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDZDC*) G__getstructoffset())->GetZPATowerEnergyLR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDZDC*) G__getstructoffset())->GetESDQuality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDZDC*) G__getstructoffset())->GetZDCN1Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDZDC*) G__getstructoffset())->GetZDCP1Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDZDC*) G__getstructoffset())->GetZDCN2Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDZDC*) G__getstructoffset())->GetZDCP2Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDZDC*) G__getstructoffset())->GetZDCEMEnergy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDZDC*) G__getstructoffset())->GetZN1TowerEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDZDC*) G__getstructoffset())->GetZN2TowerEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDZDC*) G__getstructoffset())->GetZP1TowerEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDZDC*) G__getstructoffset())->GetZP2TowerEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDZDC*) G__getstructoffset())->GetZN1TowerEnergyLR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDZDC*) G__getstructoffset())->GetZN2TowerEnergyLR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDZDC*) G__getstructoffset())->GetZP1TowerEnergyLR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const AliESDZDC*) G__getstructoffset())->GetZP2TowerEnergyLR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDZDC*) G__getstructoffset())->GetZDCScaler((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const AliESDZDC*) G__getstructoffset())->GetZDCScaler());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDZDC*) G__getstructoffset())->GetZDCTDCData((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDZDC*) G__getstructoffset())->GetZDCTDCCorrected((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDZDC*) G__getstructoffset())->GetZNATDCChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDZDC*) G__getstructoffset())->GetZPATDCChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDZDC*) G__getstructoffset())->GetZEM1TDCChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDZDC*) G__getstructoffset())->GetZEM2TDCChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDZDC*) G__getstructoffset())->GetZNCTDCChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDZDC*) G__getstructoffset())->GetZPCTDCChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDZDC*) G__getstructoffset())->GetL0TDCChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDZDC*) G__getstructoffset())->GetZNTDCSum((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDZDC*) G__getstructoffset())->GetZNTDCDiff((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDZDC*) G__getstructoffset())->IsZDCTDCcablingSet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZDC(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Short_t) G__int(libp->para[6]), (Short_t) G__int(libp->para[7])
, (Short_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (UInt_t) G__int(libp->para[12]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZN1TowerEnergy((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZN2TowerEnergy((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZP1TowerEnergy((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZP2TowerEnergy((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZN1TowerEnergyLR((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZN2TowerEnergyLR((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZP1TowerEnergyLR((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZP2TowerEnergyLR((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZNACentroid((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZNCCentroid((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZDCScaler((const UInt_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Int_t a[1][4]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((AliESDZDC*) G__getstructoffset())->SetZDCTDCData(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Float_t a[1][4]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((AliESDZDC*) G__getstructoffset())->SetZDCTDCCorrected(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDZDC*) G__getstructoffset())->IsZNChit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDZDC*) G__getstructoffset())->IsZNAhit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDZDC*) G__getstructoffset())->IsZPChit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDZDC*) G__getstructoffset())->IsZPAhit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDZDC*) G__getstructoffset())->IsZEM1hit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDZDC*) G__getstructoffset())->IsZEM2hit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZNCTDChit((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZPCTDChit((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZNATDChit((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZPATDChit((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZEM1TDChit((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZEM2TDChit((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->SetZDCTDCChannel((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDZDC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDZDC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDZDC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDZDC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDZDC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDZDC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDZDC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDZDC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_713_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDZDC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDZDC G__TAliESDZDC;
static int G__G__ESD_713_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDZDC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDZDC*) (soff+(sizeof(AliESDZDC)*i)))->~G__TAliESDZDC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDZDC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDZDC*) (soff))->~G__TAliESDZDC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDVZEROfriend */
static int G__G__ESD_715_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDVZEROfriend* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDVZEROfriend[n];
     } else {
       p = new((void*) gvp) AliESDVZEROfriend[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDVZEROfriend;
     } else {
       p = new((void*) gvp) AliESDVZEROfriend;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDVZEROfriend));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDVZEROfriend* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDVZEROfriend(*(AliESDVZEROfriend*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDVZEROfriend(*(AliESDVZEROfriend*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDVZEROfriend));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDVZEROfriend& obj = ((AliESDVZEROfriend*) G__getstructoffset())->operator=(*(AliESDVZEROfriend*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetBBScalers((Int_t) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetBGScalers((Int_t) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetTriggerScalers((Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetBunchNumbersMB((Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetChargeMB((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetIntMBFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetBBMBFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetBGMBFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetPedestal((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetIntegratorFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetBBFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetBGFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetTime((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetWidth((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDVZEROfriend*) G__getstructoffset())->GetTriggerInputs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDVZEROfriend*) G__getstructoffset())->GetTriggerInputsMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetTriggerInputs((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->SetTriggerInputsMask((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDVZEROfriend::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDVZEROfriend::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDVZEROfriend::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDVZEROfriend::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDVZEROfriend*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDVZEROfriend::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDVZEROfriend::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDVZEROfriend::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_715_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDVZEROfriend::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDVZEROfriend G__TAliESDVZEROfriend;
static int G__G__ESD_715_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDVZEROfriend*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDVZEROfriend*) (soff+(sizeof(AliESDVZEROfriend)*i)))->~G__TAliESDVZEROfriend();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDVZEROfriend*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDVZEROfriend*) (soff))->~G__TAliESDVZEROfriend();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDTZEROfriend */
static int G__G__ESD_717_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTZEROfriend* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTZEROfriend[n];
     } else {
       p = new((void*) gvp) AliESDTZEROfriend[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTZEROfriend;
     } else {
       p = new((void*) gvp) AliESDTZEROfriend;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTZEROfriend));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTZEROfriend* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDTZEROfriend(*(AliESDTZEROfriend*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDTZEROfriend(*(AliESDTZEROfriend*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTZEROfriend));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDTZEROfriend& obj = ((AliESDTZEROfriend*) G__getstructoffset())->operator=(*(AliESDTZEROfriend*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZEROfriend*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((AliESDTZEROfriend*) G__getstructoffset())->GetT0timeCorr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZEROfriend*) G__getstructoffset())->SetT0timeCorr((Double32_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((AliESDTZEROfriend*) G__getstructoffset())->GetT0ampQTC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZEROfriend*) G__getstructoffset())->SetT0ampQTC((Double32_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((AliESDTZEROfriend*) G__getstructoffset())->GetT0ampLEDminCFD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZEROfriend*) G__getstructoffset())->SetT0ampLEDminCFD((Double32_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDTZEROfriend::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTZEROfriend::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDTZEROfriend::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDTZEROfriend::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTZEROfriend*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTZEROfriend::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTZEROfriend::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTZEROfriend::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_717_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTZEROfriend::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDTZEROfriend G__TAliESDTZEROfriend;
static int G__G__ESD_717_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDTZEROfriend*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDTZEROfriend*) (soff+(sizeof(AliESDTZEROfriend)*i)))->~G__TAliESDTZEROfriend();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDTZEROfriend*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDTZEROfriend*) (soff))->~G__TAliESDTZEROfriend();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDTrdTrigger */
static int G__G__ESD_718_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTrdTrigger* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTrdTrigger[n];
     } else {
       p = new((void*) gvp) AliESDTrdTrigger[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDTrdTrigger;
     } else {
       p = new((void*) gvp) AliESDTrdTrigger;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrigger));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_718_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDTrdTrigger* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDTrdTrigger(*(AliESDTrdTrigger*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDTrdTrigger(*(AliESDTrdTrigger*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrigger));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_718_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDTrdTrigger& obj = ((AliESDTrdTrigger*) G__getstructoffset())->operator=(*(AliESDTrdTrigger*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_718_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDTrdTrigger*) G__getstructoffset())->GetFlags((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_718_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTrigger*) G__getstructoffset())->SetFlags((const Int_t) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_718_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDTrdTrigger::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_718_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTrdTrigger::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_718_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDTrdTrigger::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_718_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDTrdTrigger::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_718_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDTrdTrigger*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_718_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTrdTrigger::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_718_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTrdTrigger::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_718_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDTrdTrigger::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_718_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDTrdTrigger::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDTrdTrigger G__TAliESDTrdTrigger;
static int G__G__ESD_718_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDTrdTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDTrdTrigger*) (soff+(sizeof(AliESDTrdTrigger)*i)))->~G__TAliESDTrdTrigger();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDTrdTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDTrdTrigger*) (soff))->~G__TAliESDTrdTrigger();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDMuonCluster */
static int G__G__ESD_719_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDMuonCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDMuonCluster[n];
     } else {
       p = new((void*) gvp) AliESDMuonCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDMuonCluster;
     } else {
       p = new((void*) gvp) AliESDMuonCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDMuonCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDMuonCluster(*(AliESDMuonCluster*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDMuonCluster(*(AliESDMuonCluster*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDMuonCluster& obj = ((AliESDMuonCluster*) G__getstructoffset())->operator=(*(AliESDMuonCluster*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonCluster*) G__getstructoffset())->SetXYZ((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonCluster*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonCluster*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonCluster*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonCluster*) G__getstructoffset())->SetErrXY((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonCluster*) G__getstructoffset())->GetErrX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonCluster*) G__getstructoffset())->GetErrX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonCluster*) G__getstructoffset())->GetErrY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonCluster*) G__getstructoffset())->GetErrY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonCluster*) G__getstructoffset())->SetCharge((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonCluster*) G__getstructoffset())->GetCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonCluster*) G__getstructoffset())->SetChi2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonCluster*) G__getstructoffset())->GetChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonCluster*) G__getstructoffset())->GetChamberId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonCluster*) G__getstructoffset())->GetDetElemId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonCluster*) G__getstructoffset())->GetClusterIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonCluster*) G__getstructoffset())->AddPadId((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonCluster*) G__getstructoffset())->SetPadsId((Int_t) G__int(libp->para[0]), (const UInt_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonCluster*) G__getstructoffset())->GetNPads());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDMuonCluster*) G__getstructoffset())->GetPadId((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const AliESDMuonCluster*) G__getstructoffset())->GetPadsId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDMuonCluster*) G__getstructoffset())->PadsStored());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonCluster*) G__getstructoffset())->MovePadsToESD(*(AliESDEvent*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonCluster*) G__getstructoffset())->SetLabel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonCluster*) G__getstructoffset())->GetLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDMuonCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDMuonCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDMuonCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDMuonCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDMuonCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDMuonCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDMuonCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_719_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDMuonCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDMuonCluster G__TAliESDMuonCluster;
static int G__G__ESD_719_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDMuonCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDMuonCluster*) (soff+(sizeof(AliESDMuonCluster)*i)))->~G__TAliESDMuonCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDMuonCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDMuonCluster*) (soff))->~G__TAliESDMuonCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDMuonPad */
static int G__G__ESD_720_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDMuonPad* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDMuonPad[n];
     } else {
       p = new((void*) gvp) AliESDMuonPad[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDMuonPad;
     } else {
       p = new((void*) gvp) AliESDMuonPad;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonPad));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDMuonPad* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDMuonPad(*(AliESDMuonPad*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDMuonPad(*(AliESDMuonPad*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonPad));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDMuonPad& obj = ((AliESDMuonPad*) G__getstructoffset())->operator=(*(AliESDMuonPad*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonPad*) G__getstructoffset())->SetADC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonPad*) G__getstructoffset())->GetADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonPad*) G__getstructoffset())->SetCharge((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonPad*) G__getstructoffset())->GetCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonPad*) G__getstructoffset())->GetDetElemId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonPad*) G__getstructoffset())->GetManuId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonPad*) G__getstructoffset())->GetManuChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonPad*) G__getstructoffset())->GetCathode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDMuonPad*) G__getstructoffset())->SetCalibrated((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDMuonPad*) G__getstructoffset())->SetCalibrated();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDMuonPad*) G__getstructoffset())->IsCalibrated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliESDMuonPad*) G__getstructoffset())->SetSaturated((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliESDMuonPad*) G__getstructoffset())->SetSaturated();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDMuonPad*) G__getstructoffset())->IsSaturated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDMuonPad::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDMuonPad::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDMuonPad::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDMuonPad::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonPad*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDMuonPad::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDMuonPad::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDMuonPad::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_720_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDMuonPad::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDMuonPad G__TAliESDMuonPad;
static int G__G__ESD_720_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDMuonPad*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDMuonPad*) (soff+(sizeof(AliESDMuonPad)*i)))->~G__TAliESDMuonPad();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDMuonPad*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDMuonPad*) (soff))->~G__TAliESDMuonPad();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDMuonGlobalTrack */
static int G__G__ESD_721_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDMuonGlobalTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDMuonGlobalTrack[n];
     } else {
       p = new((void*) gvp) AliESDMuonGlobalTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDMuonGlobalTrack;
     } else {
       p = new((void*) gvp) AliESDMuonGlobalTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonGlobalTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDMuonGlobalTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDMuonGlobalTrack(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) AliESDMuonGlobalTrack(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonGlobalTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDMuonGlobalTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDMuonGlobalTrack(*(AliESDMuonGlobalTrack*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDMuonGlobalTrack(*(AliESDMuonGlobalTrack*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonGlobalTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDMuonGlobalTrack& obj = ((AliESDMuonGlobalTrack*) G__getstructoffset())->operator=(*(AliESDMuonGlobalTrack*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetCharge((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const AliESDMuonGlobalTrack*) G__getstructoffset())->GetCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetPxPyPz((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonGlobalTrack*) G__getstructoffset())->GetChi2OverNdf());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetChi2OverNdf((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonGlobalTrack*) G__getstructoffset())->GetChi2MatchTrigger());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetChi2MatchTrigger((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliESDMuonGlobalTrack*) G__getstructoffset())->GetHitsPatternInTrigCh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetHitsPatternInTrigCh((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDMuonGlobalTrack*) G__getstructoffset())->GetHitsPatternInTrigChTrk());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetHitsPatternInTrigChTrk((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliESDMuonGlobalTrack*) G__getstructoffset())->GetMuonClusterMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetMuonClusterMap((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliESDMuonGlobalTrack*) G__getstructoffset())->GetLoCircuit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetLoCircuit((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDMuonGlobalTrack*) G__getstructoffset())->IsConnected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->Connected((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetMatchTrigger((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDMuonGlobalTrack*) G__getstructoffset())->GetMatchTrigger());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetNMFTClusters((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((AliESDMuonGlobalTrack*) G__getstructoffset())->GetNMFTClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetNWrongMFTClustersMC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((AliESDMuonGlobalTrack*) G__getstructoffset())->GetNWrongMFTClustersMC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetMFTClusterPattern((ULong_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((AliESDMuonGlobalTrack*) G__getstructoffset())->GetMFTClusterPattern());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliESDMuonGlobalTrack*) G__getstructoffset())->Rapidity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetFirstTrackingPoint((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->GetFirstTrackingPoint((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetXYAtVertex((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->GetXYAtVertex((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AliESDMuonGlobalTrack*) G__getstructoffset())->GetRAtAbsorberEnd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetRAtAbsorberEnd((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDMuonGlobalTrack*) G__getstructoffset())->ContainTrackerData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetLabel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetProdVertexXYZ((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->GetProdVertexXYZ((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMatrixD& obj = ((const AliESDMuonGlobalTrack*) G__getstructoffset())->GetCovariances();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetCovariances(*(TMatrixD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDMuonGlobalTrack*) G__getstructoffset())->GetESDEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->SetESDEvent((AliESDEvent*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDMuonGlobalTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDMuonGlobalTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDMuonGlobalTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDMuonGlobalTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMuonGlobalTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDMuonGlobalTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDMuonGlobalTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDMuonGlobalTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_721_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDMuonGlobalTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDMuonGlobalTrack G__TAliESDMuonGlobalTrack;
static int G__G__ESD_721_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDMuonGlobalTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDMuonGlobalTrack*) (soff+(sizeof(AliESDMuonGlobalTrack)*i)))->~G__TAliESDMuonGlobalTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDMuonGlobalTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDMuonGlobalTrack*) (soff))->~G__TAliESDMuonGlobalTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDHLTDecision */
static int G__G__ESD_722_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDHLTDecision* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDHLTDecision[n];
     } else {
       p = new((void*) gvp) AliESDHLTDecision[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDHLTDecision;
     } else {
       p = new((void*) gvp) AliESDHLTDecision;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTDecision));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDHLTDecision* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDHLTDecision((bool) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) AliESDHLTDecision((bool) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTDecision));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDHLTDecision* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDHLTDecision(*(AliESDHLTDecision*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDHLTDecision(*(AliESDHLTDecision*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTDecision));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDHLTDecision& obj = ((AliESDHLTDecision*) G__getstructoffset())->operator=(*(AliESDHLTDecision*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTDecision*) G__getstructoffset())->SetTriggerResult((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDHLTDecision*) G__getstructoffset())->SetTriggerItems(*((TArrayI*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDHLTDecision*) G__getstructoffset())->SetCounters(*((TArrayL64*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliESDHLTDecision*) G__getstructoffset())->GetDescription());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDHLTDecision*) G__getstructoffset())->Result());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const AliESDHLTDecision*) G__getstructoffset())->IsTriggerFired((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const AliESDHLTDecision*) G__getstructoffset())->IsTriggerFired());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDHLTDecision::Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDHLTDecision::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDHLTDecision::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDHLTDecision::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDHLTDecision::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHLTDecision*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDHLTDecision::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDHLTDecision::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDHLTDecision::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_722_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDHLTDecision::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDHLTDecision G__TAliESDHLTDecision;
static int G__G__ESD_722_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDHLTDecision*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDHLTDecision*) (soff+(sizeof(AliESDHLTDecision)*i)))->~G__TAliESDHLTDecision();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDHLTDecision*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDHLTDecision*) (soff))->~G__TAliESDHLTDecision();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDHandler */
static int G__G__ESD_726_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDHandler* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDHandler[n];
     } else {
       p = new((void*) gvp) AliESDHandler[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDHandler;
     } else {
       p = new((void*) gvp) AliESDHandler;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDHandler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_726_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDHandler* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDHandler((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) AliESDHandler((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDHandler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_726_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDHandler*) G__getstructoffset())->GetESDfriend());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_726_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHandler*) G__getstructoffset())->FillTree();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_726_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHandler*) G__getstructoffset())->SelectEventForFriends();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_726_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDHandler::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_726_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDHandler::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_726_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDHandler::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_726_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDHandler::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_726_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDHandler*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_726_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDHandler::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_726_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDHandler::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_726_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDHandler::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_726_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDHandler::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDHandler G__TAliESDHandler;
static int G__G__ESD_726_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDHandler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDHandler*) (soff+(sizeof(AliESDHandler)*i)))->~G__TAliESDHandler();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDHandler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDHandler*) (soff))->~G__TAliESDHandler();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDpid */
static int G__G__ESD_738_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDpid* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDpid((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) AliESDpid((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliESDpid[n];
       } else {
         p = new((void*) gvp) AliESDpid[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AliESDpid;
       } else {
         p = new((void*) gvp) AliESDpid;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDpid));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDpid* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDpid(*(AliESDpid*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliESDpid(*(AliESDpid*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDpid));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliESDpid& obj = ((AliESDpid*) G__getstructoffset())->operator=(*(AliESDpid*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((const AliESDpid*) G__getstructoffset())->MakePID((AliESDEvent*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const AliESDpid*) G__getstructoffset())->MakePID((AliESDEvent*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const AliESDpid*) G__getstructoffset())->MakePID((AliESDEvent*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDpid*) G__getstructoffset())->MakePIDForTracking((AliESDEvent*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDpid*) G__getstructoffset())->MakeTPCPID((AliESDtrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDpid*) G__getstructoffset())->MakeITSPID((AliESDtrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDpid*) G__getstructoffset())->MakeTOFPID((AliESDtrack*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDpid*) G__getstructoffset())->CheckTOFMatching((AliESDtrack*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDpid*) G__getstructoffset())->MakeTRDPID((AliESDtrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDpid*) G__getstructoffset())->CombinePID((AliESDtrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliESDpid*) G__getstructoffset())->SetPIDForTracking((AliESDtrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDpid*) G__getstructoffset())->SetNMaxSigmaTOFTPCMismatch((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDpid*) G__getstructoffset())->GetNMaxSigmaTOFTPCMismatch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDpid*) G__getstructoffset())->SetEventHandler((AliVEventHandler*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDpid::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDpid::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDpid::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDpid::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDpid*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDpid::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDpid::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDpid::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_738_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDpid::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDpid G__TAliESDpid;
static int G__G__ESD_738_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDpid*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDpid*) (soff+(sizeof(AliESDpid)*i)))->~G__TAliESDpid();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDpid*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDpid*) (soff))->~G__TAliESDpid();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDInputHandler */
static int G__G__ESD_739_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDInputHandler* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDInputHandler[n];
     } else {
       p = new((void*) gvp) AliESDInputHandler[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDInputHandler;
     } else {
       p = new((void*) gvp) AliESDInputHandler;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDInputHandler* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDInputHandler((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) AliESDInputHandler((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDInputHandler*) G__getstructoffset())->CheckSelectionMask();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDInputHandler*) G__getstructoffset())->GetNEventAcceptedInFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDInputHandler*) G__getstructoffset())->GetNEventRejectedInFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDInputHandler*) G__getstructoffset())->GetCutSummaryForChain((Int_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliESDInputHandler*) G__getstructoffset())->GetNFilesEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDInputHandler*) G__getstructoffset())->GetHLTEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDInputHandler*) G__getstructoffset())->GetHLTTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDInputHandler*) G__getstructoffset())->SetReadHLT();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDInputHandler*) G__getstructoffset())->GetReadHLT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDInputHandler*) G__getstructoffset())->GetESDfriend());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDInputHandler*) G__getstructoffset())->SetReadFriends((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliESDInputHandler*) G__getstructoffset())->GetReadFriends());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDInputHandler*) G__getstructoffset())->SetFriendFileName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliESDInputHandler*) G__getstructoffset())->GetFriendFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDInputHandler*) G__getstructoffset())->SetReadTags();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliESDInputHandler*) G__getstructoffset())->GetESDpid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDInputHandler*) G__getstructoffset())->SetESDpid((AliESDpid*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDInputHandler::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDInputHandler::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDInputHandler::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDInputHandler::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDInputHandler*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDInputHandler::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDInputHandler::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDInputHandler::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_739_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDInputHandler::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDInputHandler G__TAliESDInputHandler;
static int G__G__ESD_739_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDInputHandler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDInputHandler*) (soff+(sizeof(AliESDInputHandler)*i)))->~G__TAliESDInputHandler();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDInputHandler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDInputHandler*) (soff))->~G__TAliESDInputHandler();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDInputHandlerRP */
static int G__G__ESD_741_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDInputHandlerRP* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDInputHandlerRP[n];
     } else {
       p = new((void*) gvp) AliESDInputHandlerRP[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDInputHandlerRP;
     } else {
       p = new((void*) gvp) AliESDInputHandlerRP;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandlerRP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_741_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDInputHandlerRP* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDInputHandlerRP((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) AliESDInputHandlerRP((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandlerRP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_741_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDInputHandlerRP*) G__getstructoffset())->InitIO((Option_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_741_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliESDInputHandlerRP*) G__getstructoffset())->LoadEvent((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_741_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDInputHandlerRP*) G__getstructoffset())->ResetIO();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_741_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDInputHandlerRP*) G__getstructoffset())->ReadFromDirectory();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_741_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliESDInputHandlerRP*) G__getstructoffset())->GetTreeR((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_741_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDInputHandlerRP::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_741_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDInputHandlerRP::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_741_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDInputHandlerRP::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_741_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDInputHandlerRP::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_741_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDInputHandlerRP*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_741_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDInputHandlerRP::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_741_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDInputHandlerRP::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_741_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDInputHandlerRP::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_741_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDInputHandlerRP::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDInputHandlerRP G__TAliESDInputHandlerRP;
static int G__G__ESD_741_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDInputHandlerRP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDInputHandlerRP*) (soff+(sizeof(AliESDInputHandlerRP)*i)))->~G__TAliESDInputHandlerRP();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDInputHandlerRP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDInputHandlerRP*) (soff))->~G__TAliESDInputHandlerRP();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDMultITS */
static int G__G__ESD_743_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDMultITS* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDMultITS[n];
     } else {
       p = new((void*) gvp) AliESDMultITS[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliESDMultITS;
     } else {
       p = new((void*) gvp) AliESDMultITS;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDMultITS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_743_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDMultITS* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliESDMultITS((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) AliESDMultITS((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDMultITS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_743_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDMultITS*) G__getstructoffset())->GetPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_743_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDMultITS*) G__getstructoffset())->GetEta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_743_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliESDMultITS*) G__getstructoffset())->GetTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_743_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliESDMultITS::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_743_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDMultITS::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_743_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliESDMultITS::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_743_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliESDMultITS::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_743_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliESDMultITS*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_743_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDMultITS::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_743_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDMultITS::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_743_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliESDMultITS::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_743_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliESDMultITS::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__ESD_743_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliESDMultITS* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliESDMultITS(*(AliESDMultITS*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliESDMultITS));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliESDMultITS G__TAliESDMultITS;
static int G__G__ESD_743_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliESDMultITS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliESDMultITS*) (soff+(sizeof(AliESDMultITS)*i)))->~G__TAliESDMultITS();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliESDMultITS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliESDMultITS*) (soff))->~G__TAliESDMultITS();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ESD_743_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliESDMultITS* dest = (AliESDMultITS*) G__getstructoffset();
   *dest = *(AliESDMultITS*) libp->para[0].ref;
   const AliESDMultITS& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVertexerTracks */
static int G__G__ESD_804_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVertexerTracks* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVertexerTracks[n];
     } else {
       p = new((void*) gvp) AliVertexerTracks[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliVertexerTracks;
     } else {
       p = new((void*) gvp) AliVertexerTracks;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTracks));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVertexerTracks* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliVertexerTracks((Double_t) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) AliVertexerTracks((Double_t) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTracks));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliVertexerTracks*) G__getstructoffset())->FindPrimaryVertex((AliVEvent*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AliVertexerTracks*) G__getstructoffset())->FindPrimaryVertex((TObjArray*) G__int(libp->para[0]), (UShort_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) ((AliVertexerTracks*) G__getstructoffset())->VertexForSelectedTracks((TObjArray*) G__int(libp->para[0]), (UShort_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((AliVertexerTracks*) G__getstructoffset())->VertexForSelectedTracks((TObjArray*) G__int(libp->para[0]), (UShort_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((AliVertexerTracks*) G__getstructoffset())->VertexForSelectedTracks((TObjArray*) G__int(libp->para[0]), (UShort_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((AliVertexerTracks*) G__getstructoffset())->VertexForSelectedTracks((TObjArray*) G__int(libp->para[0]), (UShort_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((AliVertexerTracks*) G__getstructoffset())->VertexForSelectedESDTracks((TObjArray*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((AliVertexerTracks*) G__getstructoffset())->VertexForSelectedESDTracks((TObjArray*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((AliVertexerTracks*) G__getstructoffset())->VertexForSelectedESDTracks((TObjArray*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((AliVertexerTracks*) G__getstructoffset())->VertexForSelectedESDTracks((TObjArray*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVertexerTracks*) G__getstructoffset())->RemoveTracksFromVertex((AliESDVertex*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (UShort_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVertexerTracks*) G__getstructoffset())->RemoveConstraintFromVertex((AliESDVertex*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 12:
      ((AliVertexerTracks*) G__getstructoffset())->SetITSMode(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11]));
      G__setnull(result7);
      break;
   case 11:
      ((AliVertexerTracks*) G__getstructoffset())->SetITSMode(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]));
      G__setnull(result7);
      break;
   case 10:
      ((AliVertexerTracks*) G__getstructoffset())->SetITSMode(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9]));
      G__setnull(result7);
      break;
   case 9:
      ((AliVertexerTracks*) G__getstructoffset())->SetITSMode(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((AliVertexerTracks*) G__getstructoffset())->SetITSMode(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((AliVertexerTracks*) G__getstructoffset())->SetITSMode(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((AliVertexerTracks*) G__getstructoffset())->SetITSMode((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((AliVertexerTracks*) G__getstructoffset())->SetITSMode((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((AliVertexerTracks*) G__getstructoffset())->SetITSMode((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((AliVertexerTracks*) G__getstructoffset())->SetITSMode((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliVertexerTracks*) G__getstructoffset())->SetITSMode((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetITSMode((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetITSMode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 12:
      ((AliVertexerTracks*) G__getstructoffset())->SetTPCMode(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11]));
      G__setnull(result7);
      break;
   case 11:
      ((AliVertexerTracks*) G__getstructoffset())->SetTPCMode(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]));
      G__setnull(result7);
      break;
   case 10:
      ((AliVertexerTracks*) G__getstructoffset())->SetTPCMode(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9]));
      G__setnull(result7);
      break;
   case 9:
      ((AliVertexerTracks*) G__getstructoffset())->SetTPCMode(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((AliVertexerTracks*) G__getstructoffset())->SetTPCMode(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((AliVertexerTracks*) G__getstructoffset())->SetTPCMode(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((AliVertexerTracks*) G__getstructoffset())->SetTPCMode((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((AliVertexerTracks*) G__getstructoffset())->SetTPCMode((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((AliVertexerTracks*) G__getstructoffset())->SetTPCMode((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((AliVertexerTracks*) G__getstructoffset())->SetTPCMode((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliVertexerTracks*) G__getstructoffset())->SetTPCMode((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetTPCMode((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetTPCMode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertexerTracks*) G__getstructoffset())->SetCuts((Double_t*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertexerTracks*) G__getstructoffset())->SetConstraintOff();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertexerTracks*) G__getstructoffset())->SetConstraintOn();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertexerTracks*) G__getstructoffset())->SetDCAcut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertexerTracks*) G__getstructoffset())->SetDCAcutIter0((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetFinderAlgorithm((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetFinderAlgorithm();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertexerTracks*) G__getstructoffset())->SetITSrefitRequired();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetITSpureSA((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetITSpureSA();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVertexerTracks*) G__getstructoffset())->GetITSpureSA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVertexerTracks*) G__getstructoffset())->GetITSrefitRequired());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertexerTracks*) G__getstructoffset())->SetITSrefitNotRequired();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliVertexerTracks*) G__getstructoffset())->SetFiducialRZ((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetFiducialRZ((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetFiducialRZ();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetMaxd0z0((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetMaxd0z0();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetMinClusters((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetMinClusters();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliVertexerTracks*) G__getstructoffset())->GetMinClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetMinTracks((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetMinTracks();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetNSigmad0((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetNSigmad0();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVertexerTracks*) G__getstructoffset())->GetNSigmad0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetMinDetFitter((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetMinDetFitter();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetMaxTgl((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetMaxTgl();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertexerTracks*) G__getstructoffset())->SetOnlyFitter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertexerTracks*) G__getstructoffset())->SetSkipTracks((Int_t) G__int(libp->para[0]), (const Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((AliVertexerTracks*) G__getstructoffset())->SetVtxStart((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliVertexerTracks*) G__getstructoffset())->SetVtxStart((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetVtxStart((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetVtxStart();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((AliVertexerTracks*) G__getstructoffset())->SetVtxStartSigma((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliVertexerTracks*) G__getstructoffset())->SetVtxStartSigma((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetVtxStartSigma((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetVtxStartSigma();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertexerTracks*) G__getstructoffset())->SetVtxStart((AliESDVertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliVertexerTracks*) G__getstructoffset())->SetSelectOnTOFBunchCrossing((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetSelectOnTOFBunchCrossing((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetSelectOnTOFBunchCrossing();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliVertexerTracks::GetStrLinMinDist((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Double_t a[1][3]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      G__letdouble(result7, 100, (double) AliVertexerTracks::GetDeterminant3X3(G__Ap0->a));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVertexerTracks::GetStrLinDerivMatrix((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t (*)[3]) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVertexerTracks::GetStrLinDerivMatrix((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t (*)[3]) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         AliESDVertex* pobj;
         AliESDVertex xobj = AliVertexerTracks::TrackletVertexFinder((TClonesArray*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         pobj = new AliESDVertex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         AliESDVertex* pobj;
         AliESDVertex xobj = AliVertexerTracks::TrackletVertexFinder((TClonesArray*) G__int(libp->para[0]));
         pobj = new AliESDVertex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         AliESDVertex* pobj;
         AliESDVertex xobj = AliVertexerTracks::TrackletVertexFinder((AliStrLine**) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
         pobj = new AliESDVertex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         AliESDVertex* pobj;
         AliESDVertex xobj = AliVertexerTracks::TrackletVertexFinder((AliStrLine**) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
         pobj = new AliESDVertex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetFieldkG((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetFieldkG();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVertexerTracks*) G__getstructoffset())->GetFieldkG());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetNSigmaForUi00((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetNSigmaForUi00();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVertexerTracks*) G__getstructoffset())->GetNSigmaForUi00());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVTukey2((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVTukey2();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVSig2Ini((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVSig2Ini();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVMaxSigma2((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVMaxSigma2();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVMinSig2Red((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVMinSig2Red();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVMinDst((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVMinDst();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVScanStep((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVScanStep();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVFinalWBinary((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVFinalWBinary();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVMaxWghNtr((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetMVMaxWghNtr();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertexerTracks*) G__getstructoffset())->FindVerticesMV();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliVertexerTracks*) G__getstructoffset())->FindNextVertexMV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVertexerTracks*) G__getstructoffset())->GetCurrentVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliVertexerTracks*) G__getstructoffset())->GetVerticesArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertexerTracks*) G__getstructoffset())->AnalyzePileUp((AliESDEvent*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetBCSpacing((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetBCSpacing();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetUseTrackClusterization((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetUseTrackClusterization();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertexerTracks*) G__getstructoffset())->SetDeltaZCutForCluster((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertexerTracks*) G__getstructoffset())->SetnSigmaZCutForCluster((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AliVertexerTracks*) G__getstructoffset())->SetDisableBCInCPass0((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AliVertexerTracks*) G__getstructoffset())->SetDisableBCInCPass0();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVertexerTracks*) G__getstructoffset())->GetDisableBCInCPass0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliVertexerTracks*) G__getstructoffset())->GetUseTrackClusterization());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVertexerTracks*) G__getstructoffset())->GetDeltaZCutForCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliVertexerTracks*) G__getstructoffset())->GetnSigmaZCutForCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVertexerTracks::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVertexerTracks::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVertexerTracks::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVertexerTracks::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVertexerTracks*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVertexerTracks::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVertexerTracks::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVertexerTracks::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_804_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVertexerTracks::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVertexerTracks G__TAliVertexerTracks;
static int G__G__ESD_804_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVertexerTracks*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVertexerTracks*) (soff+(sizeof(AliVertexerTracks)*i)))->~G__TAliVertexerTracks();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVertexerTracks*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVertexerTracks*) (soff))->~G__TAliVertexerTracks();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliESDUtils */
static int G__G__ESD_805_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 102, (double) AliESDUtils::GetCorrV0((AliVEvent*) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 102, (double) AliESDUtils::GetCorrV0((AliVEvent*) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, (Float_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) AliESDUtils::GetCorrV0((AliVEvent*) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_805_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliESDUtils::GetCorrSPD2((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_805_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) AliESDUtils::RefitESDVertexTracks((AliESDEvent*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) AliESDUtils::RefitESDVertexTracks((AliESDEvent*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) AliESDUtils::RefitESDVertexTracks((AliESDEvent*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_805_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliESDUtils::GetCorrV0A0((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_805_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliESDUtils::GetCorrV0A((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_805_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) AliESDUtils::GetCorrV0C((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliExpression */
static int G__G__ESD_807_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliExpression* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliExpression[n];
     } else {
       p = new((void*) gvp) AliExpression[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliExpression;
     } else {
       p = new((void*) gvp) AliExpression;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliExpression));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_807_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliExpression* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliExpression(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) AliExpression(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliExpression));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_807_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliExpression* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliExpression(*(AliExpression*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliExpression(*(AliExpression*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliExpression));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_807_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliExpression& obj = ((AliExpression*) G__getstructoffset())->operator=(*(AliExpression*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_807_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliExpression*) G__getstructoffset())->Value(*(TObjArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_807_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliExpression*) G__getstructoffset())->Unparse();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_807_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliExpression::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_807_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliExpression::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_807_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliExpression::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_807_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliExpression::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_807_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliExpression*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_807_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliExpression::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_807_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliExpression::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_807_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliExpression::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_807_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliExpression::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliExpression G__TAliExpression;
static int G__G__ESD_807_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliExpression*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliExpression*) (soff+(sizeof(AliExpression)*i)))->~G__TAliExpression();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliExpression*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliExpression*) (soff))->~G__TAliExpression();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliVariableExpression */
static int G__G__ESD_808_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVariableExpression* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliVariableExpression(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) AliVariableExpression(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliVariableExpression));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_808_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliVariableExpression::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_808_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVariableExpression::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_808_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliVariableExpression::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_808_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliVariableExpression::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_808_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliVariableExpression*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_808_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVariableExpression::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_808_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVariableExpression::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_808_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliVariableExpression::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_808_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliVariableExpression::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__ESD_808_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliVariableExpression* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliVariableExpression(*(AliVariableExpression*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliVariableExpression));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliVariableExpression G__TAliVariableExpression;
static int G__G__ESD_808_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliVariableExpression*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliVariableExpression*) (soff+(sizeof(AliVariableExpression)*i)))->~G__TAliVariableExpression();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliVariableExpression*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliVariableExpression*) (soff))->~G__TAliVariableExpression();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ESD_808_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliVariableExpression* dest = (AliVariableExpression*) G__getstructoffset();
   *dest = *(AliVariableExpression*) libp->para[0].ref;
   const AliVariableExpression& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliKFParticleBase */
static int G__G__ESD_810_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliKFParticleBase*) G__getstructoffset())->GetFieldValue((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetDStoPoint((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliKFParticleBase*) G__getstructoffset())->GetDStoParticle(*(AliKFParticleBase*) libp->para[0].ref, *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliKFParticleBase*) G__getstructoffset())->Transport((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->Initialize((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->SetVtxGuess((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->SetConstructMethod((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->SetMassHypo((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticleBase*) G__getstructoffset())->GetMassHypo();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticleBase*) G__getstructoffset())->GetSumDaughterMass();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetPx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetPy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetPz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticleBase*) G__getstructoffset())->GetQ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticleBase*) G__getstructoffset())->GetNDF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticleBase*) G__getstructoffset())->X();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticleBase*) G__getstructoffset())->Y();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticleBase*) G__getstructoffset())->Z();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticleBase*) G__getstructoffset())->Px();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticleBase*) G__getstructoffset())->Py();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticleBase*) G__getstructoffset())->Pz();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticleBase*) G__getstructoffset())->E();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticleBase*) G__getstructoffset())->S();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Int_t& obj = ((const AliKFParticleBase*) G__getstructoffset())->Q();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticleBase*) G__getstructoffset())->Chi2();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Int_t& obj = ((const AliKFParticleBase*) G__getstructoffset())->NDF();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetParameter((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetCovariance((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetCovariance((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticleBase*) G__getstructoffset())->GetMomentum(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticleBase*) G__getstructoffset())->GetPt(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticleBase*) G__getstructoffset())->GetEta(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticleBase*) G__getstructoffset())->GetPhi(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticleBase*) G__getstructoffset())->GetMass(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticleBase*) G__getstructoffset())->GetDecayLength(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticleBase*) G__getstructoffset())->GetDecayLengthXY(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticleBase*) G__getstructoffset())->GetLifeTime(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticleBase*) G__getstructoffset())->GetR(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticleBase*) G__getstructoffset())->X();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticleBase*) G__getstructoffset())->Y();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticleBase*) G__getstructoffset())->Z();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticleBase*) G__getstructoffset())->Px();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticleBase*) G__getstructoffset())->Py();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticleBase*) G__getstructoffset())->Pz();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticleBase*) G__getstructoffset())->E();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticleBase*) G__getstructoffset())->S();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Int_t& obj = ((AliKFParticleBase*) G__getstructoffset())->Q();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticleBase*) G__getstructoffset())->Chi2();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Int_t& obj = ((AliKFParticleBase*) G__getstructoffset())->NDF();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticleBase*) G__getstructoffset())->Parameter((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticleBase*) G__getstructoffset())->Covariance((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticleBase*) G__getstructoffset())->Covariance((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->operator+=(*(AliKFParticleBase*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->AddDaughter(*(AliKFParticleBase*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->AddDaughterWithEnergyFit(*(AliKFParticleBase*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->AddDaughterWithEnergyCalc(*(AliKFParticleBase*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->AddDaughterWithEnergyFitMC(*(AliKFParticleBase*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->SetProductionVertex(*(AliKFParticleBase*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->SetNonlinearMassConstraint((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliKFParticleBase*) G__getstructoffset())->SetMassConstraint((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliKFParticleBase*) G__getstructoffset())->SetMassConstraint((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->SetNoDecayLength();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((AliKFParticleBase*) G__getstructoffset())->Construct((const AliKFParticleBase**) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (AliKFParticleBase*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((AliKFParticleBase*) G__getstructoffset())->Construct((const AliKFParticleBase**) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (AliKFParticleBase*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((AliKFParticleBase*) G__getstructoffset())->Construct((const AliKFParticleBase**) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (AliKFParticleBase*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliKFParticleBase*) G__getstructoffset())->Construct((const AliKFParticleBase**) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->TransportToDecayVertex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->TransportToProductionVertex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->TransportToDS((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetDStoPointBz((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliKFParticleBase*) G__getstructoffset())->GetDStoParticleBz((Double_t) G__double(libp->para[0]), *(AliKFParticleBase*) libp->para[1].ref
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliKFParticleBase*) G__getstructoffset())->TransportBz((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliKFParticleBase*) G__getstructoffset())->TransportCBM((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetDistanceFromVertex((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetDistanceFromVertex(*(AliKFParticleBase*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetDistanceFromParticle(*(AliKFParticleBase*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetDeviationFromVertex((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetDeviationFromVertex((Double_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetDeviationFromVertex(*(AliKFParticleBase*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticleBase*) G__getstructoffset())->GetDeviationFromParticle(*(AliKFParticleBase*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliKFParticleBase*) G__getstructoffset())->SubtractFromVertex(*(AliKFParticleBase*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->ConstructGammaBz(*(AliKFParticleBase*) libp->para[0].ref, *(AliKFParticleBase*) libp->para[1].ref
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliKFParticleBase::GetArmenterosPodolanski(*(AliKFParticleBase*) libp->para[0].ref, *(AliKFParticleBase*) libp->para[1].ref
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->RotateXY((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliKFParticleBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliKFParticleBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliKFParticleBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliKFParticleBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticleBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliKFParticleBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliKFParticleBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliKFParticleBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_810_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliKFParticleBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliKFParticleBase G__TAliKFParticleBase;
static int G__G__ESD_810_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliKFParticleBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliKFParticleBase*) (soff+(sizeof(AliKFParticleBase)*i)))->~G__TAliKFParticleBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliKFParticleBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliKFParticleBase*) (soff))->~G__TAliKFParticleBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ESD_810_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliKFParticleBase* dest = (AliKFParticleBase*) G__getstructoffset();
   *dest = *(AliKFParticleBase*) libp->para[0].ref;
   const AliKFParticleBase& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliKFParticle */
static int G__G__ESD_811_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliKFParticle::SetField((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliKFParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliKFParticle[n];
     } else {
       p = new((void*) gvp) AliKFParticle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliKFParticle;
     } else {
       p = new((void*) gvp) AliKFParticle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliKFParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliKFParticle(
*(AliKFParticle*) libp->para[0].ref, *(AliKFParticle*) libp->para[1].ref
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliKFParticle(
*(AliKFParticle*) libp->para[0].ref, *(AliKFParticle*) libp->para[1].ref
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliKFParticle(*(AliKFParticle*) libp->para[0].ref, *(AliKFParticle*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) AliKFParticle(*(AliKFParticle*) libp->para[0].ref, *(AliKFParticle*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliKFParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliKFParticle(
*(AliKFParticle*) libp->para[0].ref, *(AliKFParticle*) libp->para[1].ref
, *(AliKFParticle*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) AliKFParticle(
*(AliKFParticle*) libp->para[0].ref, *(AliKFParticle*) libp->para[1].ref
, *(AliKFParticle*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliKFParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliKFParticle(
*(AliKFParticle*) libp->para[0].ref, *(AliKFParticle*) libp->para[1].ref
, *(AliKFParticle*) libp->para[2].ref, *(AliKFParticle*) libp->para[3].ref);
   } else {
     p = new((void*) gvp) AliKFParticle(
*(AliKFParticle*) libp->para[0].ref, *(AliKFParticle*) libp->para[1].ref
, *(AliKFParticle*) libp->para[2].ref, *(AliKFParticle*) libp->para[3].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->Create((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->Create((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliKFParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliKFParticle(*(AliVTrack*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) AliKFParticle(*(AliVTrack*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliKFParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliKFParticle(
*(AliExternalTrackParam*) libp->para[0].ref, (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) AliKFParticle(
*(AliExternalTrackParam*) libp->para[0].ref, (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliKFParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliKFParticle(*(AliVVertex*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliKFParticle(*(AliVVertex*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->SetVtxGuess((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetPx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetPy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetPz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticle*) G__getstructoffset())->GetQ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticle*) G__getstructoffset())->GetNDF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticle*) G__getstructoffset())->X();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticle*) G__getstructoffset())->Y();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticle*) G__getstructoffset())->Z();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticle*) G__getstructoffset())->Px();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticle*) G__getstructoffset())->Py();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticle*) G__getstructoffset())->Pz();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticle*) G__getstructoffset())->E();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticle*) G__getstructoffset())->S();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Int_t& obj = ((const AliKFParticle*) G__getstructoffset())->Q();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const AliKFParticle*) G__getstructoffset())->Chi2();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Int_t& obj = ((const AliKFParticle*) G__getstructoffset())->NDF();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetParameter((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetCovariance((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetCovariance((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetEta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetMomentum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDecayLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDecayLengthXY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetLifeTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrPx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrPy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrPz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrEta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrMomentum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrDecayLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrDecayLengthXY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrLifeTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetErrR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticle*) G__getstructoffset())->GetP(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticle*) G__getstructoffset())->GetPt(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticle*) G__getstructoffset())->GetEta(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticle*) G__getstructoffset())->GetPhi(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticle*) G__getstructoffset())->GetMomentum(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticle*) G__getstructoffset())->GetMass(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticle*) G__getstructoffset())->GetDecayLength(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticle*) G__getstructoffset())->GetDecayLengthXY(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticle*) G__getstructoffset())->GetLifeTime(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFParticle*) G__getstructoffset())->GetR(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticle*) G__getstructoffset())->X();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticle*) G__getstructoffset())->Y();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticle*) G__getstructoffset())->Z();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticle*) G__getstructoffset())->Px();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticle*) G__getstructoffset())->Py();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticle*) G__getstructoffset())->Pz();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticle*) G__getstructoffset())->E();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticle*) G__getstructoffset())->S();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Int_t& obj = ((AliKFParticle*) G__getstructoffset())->Q();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticle*) G__getstructoffset())->Chi2();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Int_t& obj = ((AliKFParticle*) G__getstructoffset())->NDF();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticle*) G__getstructoffset())->Parameter((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticle*) G__getstructoffset())->Covariance((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((AliKFParticle*) G__getstructoffset())->Covariance((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((AliKFParticle*) G__getstructoffset())->Parameters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((AliKFParticle*) G__getstructoffset())->CovarianceMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->AddDaughter(*(AliKFParticle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->operator+=(*(AliKFParticle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->SetProductionVertex(*(AliKFParticle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliKFParticle*) G__getstructoffset())->SetMassConstraint((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliKFParticle*) G__getstructoffset())->SetMassConstraint((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->SetNoDecayLength();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((AliKFParticle*) G__getstructoffset())->Construct((const AliKFParticle**) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (AliKFParticle*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((AliKFParticle*) G__getstructoffset())->Construct((const AliKFParticle**) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (AliKFParticle*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((AliKFParticle*) G__getstructoffset())->Construct((const AliKFParticle**) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (AliKFParticle*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AliKFParticle*) G__getstructoffset())->Construct((const AliKFParticle**) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->TransportToDecayVertex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->TransportToProductionVertex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->TransportToPoint((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->TransportToVertex(*(AliVVertex*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->TransportToParticle(*(AliKFParticle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->TransportToDS((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliKFParticle*) G__getstructoffset())->GetDStoParticle(*(AliKFParticle*) libp->para[0].ref, *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliKFParticle*) G__getstructoffset())->GetDStoParticleXY(*(AliKFParticleBase*) libp->para[0].ref, *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDistanceFromVertex((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDistanceFromVertex(*(AliKFParticle*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDistanceFromVertex(*(AliVVertex*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDistanceFromParticle(*(AliKFParticle*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDeviationFromVertex((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDeviationFromVertex((Double_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDeviationFromVertex(*(AliKFParticle*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDeviationFromVertex(*(AliVVertex*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDeviationFromParticle(*(AliKFParticle*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliKFParticle*) G__getstructoffset())->GetDistanceFromVertexXY((Double_t*) G__int(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliKFParticle*) G__getstructoffset())->GetDistanceFromVertexXY((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliKFParticle*) G__getstructoffset())->GetDistanceFromVertexXY(*(AliKFParticle*) libp->para[0].ref, *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliKFParticle*) G__getstructoffset())->GetDistanceFromVertexXY(*(AliVVertex*) libp->para[0].ref, *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDistanceFromVertexXY((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDistanceFromVertexXY(*(AliKFParticle*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDistanceFromVertexXY(*(AliVVertex*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDistanceFromParticleXY(*(AliKFParticle*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDeviationFromVertexXY((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDeviationFromVertexXY((Double_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDeviationFromVertexXY(*(AliKFParticle*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDeviationFromVertexXY(*(AliVVertex*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetDeviationFromParticleXY(*(AliKFParticle*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetAngle(*(AliKFParticle*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetAngleXY(*(AliKFParticle*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetAngleRZ(*(AliKFParticle*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliKFParticle*) G__getstructoffset())->SubtractFromVertex(*(AliKFParticle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->ConstructGamma(*(AliKFParticle*) libp->para[0].ref, *(AliKFParticle*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetPseudoProperDecayTime(*(AliKFParticle*) libp->para[0].ref, *(Double_t*) G__Doubleref(&libp->para[1])
, (Double_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const AliKFParticle*) G__getstructoffset())->GetPseudoProperDecayTime(*(AliKFParticle*) libp->para[0].ref, *(Double_t*) G__Doubleref(&libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliKFParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliKFParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliKFParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliKFParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_146(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliKFParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_147(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliKFParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_148(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliKFParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_811_0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliKFParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__ESD_811_0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliKFParticle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliKFParticle(*(AliKFParticle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliKFParticle G__TAliKFParticle;
static int G__G__ESD_811_0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliKFParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliKFParticle*) (soff+(sizeof(AliKFParticle)*i)))->~G__TAliKFParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliKFParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliKFParticle*) (soff))->~G__TAliKFParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ESD_811_0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliKFParticle* dest = (AliKFParticle*) G__getstructoffset();
   *dest = *(AliKFParticle*) libp->para[0].ref;
   const AliKFParticle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliKFVertex */
static int G__G__ESD_812_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliKFVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliKFVertex[n];
     } else {
       p = new((void*) gvp) AliKFVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliKFVertex;
     } else {
       p = new((void*) gvp) AliKFVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliKFVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliKFVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliKFVertex(*(AliVVertex*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliKFVertex(*(AliVVertex*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliKFVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliKFVertex*) G__getstructoffset())->GetNContributors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFVertex*) G__getstructoffset())->operator+=(*(AliKFParticle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliKFVertex* pobj;
         const AliKFVertex xobj = ((const AliKFVertex*) G__getstructoffset())->operator-(*(AliKFParticle*) libp->para[0].ref);
         pobj = new AliKFVertex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFVertex*) G__getstructoffset())->operator-=(*(AliKFParticle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFVertex*) G__getstructoffset())->SetBeamConstraint((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFVertex*) G__getstructoffset())->SetBeamConstraintOff();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((AliKFVertex*) G__getstructoffset())->ConstructPrimaryVertex((const AliKFParticle**) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Bool_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((AliKFVertex*) G__getstructoffset())->ConstructPrimaryVertex((const AliKFParticle**) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Bool_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliKFVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliKFVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliKFVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliKFVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliKFVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliKFVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliKFVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliKFVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_812_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliKFVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__ESD_812_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliKFVertex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliKFVertex(*(AliKFVertex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliKFVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliKFVertex G__TAliKFVertex;
static int G__G__ESD_812_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliKFVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliKFVertex*) (soff+(sizeof(AliKFVertex)*i)))->~G__TAliKFVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliKFVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliKFVertex*) (soff))->~G__TAliKFVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ESD_812_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliKFVertex* dest = (AliKFVertex*) G__getstructoffset();
   *dest = *(AliKFVertex*) libp->para[0].ref;
   const AliKFVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliMeanVertex */
static int G__G__ESD_813_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMeanVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMeanVertex[n];
     } else {
       p = new((void*) gvp) AliMeanVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliMeanVertex;
     } else {
       p = new((void*) gvp) AliMeanVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliMeanVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_813_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMeanVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliMeanVertex(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
   } else {
     p = new((void*) gvp) AliMeanVertex(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliMeanVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_813_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliMeanVertex*) G__getstructoffset())->GetNumberOfContributingEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_813_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliMeanVertex*) G__getstructoffset())->GetErrorsOnPosition((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_813_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMeanVertex*) G__getstructoffset())->GetTotalNumbOfTracklets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_813_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMeanVertex*) G__getstructoffset())->GetAverageNumbOfTracklets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_813_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const AliMeanVertex*) G__getstructoffset())->GetSigmaOnAvNumbOfTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_813_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliMeanVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_813_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMeanVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_813_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliMeanVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_813_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliMeanVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_813_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliMeanVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_813_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMeanVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_813_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMeanVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_813_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliMeanVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_813_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliMeanVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__ESD_813_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliMeanVertex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliMeanVertex(*(AliMeanVertex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliMeanVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliMeanVertex G__TAliMeanVertex;
static int G__G__ESD_813_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliMeanVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliMeanVertex*) (soff+(sizeof(AliMeanVertex)*i)))->~G__TAliMeanVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliMeanVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliMeanVertex*) (soff))->~G__TAliMeanVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ESD_813_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliMeanVertex* dest = (AliMeanVertex*) G__getstructoffset();
   *dest = *(AliMeanVertex*) libp->para[0].ref;
   const AliMeanVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliSelector */
static int G__G__ESD_819_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliSelector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliSelector[n];
     } else {
       p = new((void*) gvp) AliSelector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliSelector;
     } else {
       p = new((void*) gvp) AliSelector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliSelector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_819_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliSelector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_819_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliSelector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_819_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliSelector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_819_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliSelector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_819_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliSelector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_819_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliSelector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_819_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliSelector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_819_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliSelector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_819_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliSelector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliSelector G__TAliSelector;
static int G__G__ESD_819_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliSelector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliSelector*) (soff+(sizeof(AliSelector)*i)))->~G__TAliSelector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliSelector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliSelector*) (soff))->~G__TAliSelector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliStrLine */
static int G__G__ESD_820_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliStrLine* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStrLine[n];
     } else {
       p = new((void*) gvp) AliStrLine[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStrLine;
     } else {
       p = new((void*) gvp) AliStrLine;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliStrLine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliStrLine* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (UShort_t) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (UShort_t) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (UShort_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (UShort_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStrLine((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) AliStrLine((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliStrLine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliStrLine* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]), (UShort_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]), (UShort_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (UShort_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliStrLine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliStrLine* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (UShort_t) G__int(libp->para[5])
, (UShort_t) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (UShort_t) G__int(libp->para[5])
, (UShort_t) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (UShort_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (UShort_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) AliStrLine(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliStrLine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliStrLine* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliStrLine(*(AliStrLine*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliStrLine(*(AliStrLine*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliStrLine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliStrLine& obj = ((AliStrLine*) G__getstructoffset())->operator=(*(AliStrLine*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliStrLine*) G__getstructoffset())->PrintStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliStrLine*) G__getstructoffset())->SetP0((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliStrLine*) G__getstructoffset())->SetSigma2P0((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliStrLine*) G__getstructoffset())->SetWMatrix((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliStrLine*) G__getstructoffset())->SetCd((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliStrLine*) G__getstructoffset())->SetIdPoints((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliStrLine*) G__getstructoffset())->GetP0((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliStrLine*) G__getstructoffset())->GetSigma2P0((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliStrLine*) G__getstructoffset())->GetWMatrix((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliStrLine*) G__getstructoffset())->GetCd((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliStrLine*) G__getstructoffset())->GetCurrentPoint((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliStrLine*) G__getstructoffset())->GetIdPoint((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliStrLine*) G__getstructoffset())->IsParallelTo((AliStrLine*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliStrLine*) G__getstructoffset())->Crossrphi((AliStrLine*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliStrLine*) G__getstructoffset())->CrossPoints((AliStrLine*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliStrLine*) G__getstructoffset())->Cross((AliStrLine*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliStrLine*) G__getstructoffset())->GetDCA((AliStrLine*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliStrLine*) G__getstructoffset())->GetDistFromPoint((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliStrLine*) G__getstructoffset())->GetParamAtRadius((Double_t) G__double(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliStrLine*) G__getstructoffset())->ComputePointAtT((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliStrLine::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliStrLine::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliStrLine::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliStrLine::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliStrLine*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliStrLine::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliStrLine::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliStrLine::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_820_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliStrLine::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliStrLine G__TAliStrLine;
static int G__G__ESD_820_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliStrLine*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliStrLine*) (soff+(sizeof(AliStrLine)*i)))->~G__TAliStrLine();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliStrLine*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliStrLine*) (soff))->~G__TAliStrLine();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTrackerBase */
static int G__G__ESD_830_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTrackerBase* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackerBase[n];
     } else {
       p = new((void*) gvp) AliTrackerBase[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTrackerBase;
     } else {
       p = new((void*) gvp) AliTrackerBase;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTrackerBase));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AliTrackerBase*) G__getstructoffset())->SetVertex((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AliTrackerBase*) G__getstructoffset())->SetVertex((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTrackerBase*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTrackerBase*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTrackerBase*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTrackerBase*) G__getstructoffset())->GetSigmaX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTrackerBase*) G__getstructoffset())->GetSigmaY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AliTrackerBase*) G__getstructoffset())->GetSigmaZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTrackerBase*) G__getstructoffset())->GetTimeStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTrackerBase*) G__getstructoffset())->GetRunNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackerBase*) G__getstructoffset())->SetTimeStamp((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackerBase*) G__getstructoffset())->SetRunNumber((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliTrackerBase::GetTrackPredictedChi2((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (AliExternalTrackParam*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTrackerBase::UpdateTrack(*(AliExternalTrackParam*) libp->para[0].ref, *(AliExternalTrackParam*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliTrackerBase::MeanMaterialBudget((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackTo(
(AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackTo(
(AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackTo(
(AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackTo((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackTo((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackTo((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      G__letint(result7, 105, (long) AliTrackerBase::PropagateTrackTo2(
(AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 105, (long) AliTrackerBase::PropagateTrackTo2(
(AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 105, (long) AliTrackerBase::PropagateTrackTo2(
(AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) AliTrackerBase::PropagateTrackTo2((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) AliTrackerBase::PropagateTrackTo2((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) AliTrackerBase::PropagateTrackTo2((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackToBxByBz(
(AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackToBxByBz(
(AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackToBxByBz(
(AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackToBxByBz((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackToBxByBz((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackToBxByBz((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackParamOnlyToBxByBz((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackParamOnlyToBxByBz((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackParamOnlyToBxByBz((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackParamOnlyTo((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackParamOnlyTo((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) AliTrackerBase::PropagateTrackParamOnlyTo((AliExternalTrackParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliTrackerBase::GetBz((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTrackerBase::GetBxByBz((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliTrackerBase::GetBz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) AliTrackerBase::UniformField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliTrackerBase::MakeC((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliTrackerBase::MakeSnp((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliTrackerBase::MakeTgl((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliTrackerBase::MakeTgl(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTrackerBase::MakeSeed(*(AliTrackPoint*) libp->para[0].ref, *(AliTrackPoint*) libp->para[1].ref
, *(AliTrackPoint*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) AliTrackerBase::FitTrack((AliExternalTrackParam*) G__int(libp->para[0]), (AliTrackPointArray*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTrackerBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTrackerBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTrackerBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTrackerBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTrackerBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTrackerBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTrackerBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTrackerBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_830_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTrackerBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTrackerBase G__TAliTrackerBase;
static int G__G__ESD_830_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTrackerBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTrackerBase*) (soff+(sizeof(AliTrackerBase)*i)))->~G__TAliTrackerBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTrackerBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTrackerBase*) (soff))->~G__TAliTrackerBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTriggerBCMask */
static int G__G__ESD_831_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerBCMask* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerBCMask[n];
     } else {
       p = new((void*) gvp) AliTriggerBCMask[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerBCMask;
     } else {
       p = new((void*) gvp) AliTriggerBCMask;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerBCMask* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerBCMask(*(TString*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTriggerBCMask(*(TString*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerBCMask* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerBCMask(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) AliTriggerBCMask(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerBCMask* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerBCMask((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) AliTriggerBCMask((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerBCMask* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerBCMask(*(AliTriggerBCMask*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTriggerBCMask(*(AliTriggerBCMask*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTriggerBCMask& obj = ((AliTriggerBCMask*) G__getstructoffset())->operator=(*(AliTriggerBCMask*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((const AliTriggerBCMask*) G__getstructoffset())->GetFullMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerBCMask*) G__getstructoffset())->GetMask((UShort_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const AliTriggerBCMask*) G__getstructoffset())->GetNUnmaskedBCs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTriggerBCMask*) G__getstructoffset())->SetMask((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTriggerBCMask::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerBCMask::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTriggerBCMask::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTriggerBCMask::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerBCMask*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerBCMask::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerBCMask::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerBCMask::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_831_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerBCMask::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTriggerBCMask G__TAliTriggerBCMask;
static int G__G__ESD_831_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTriggerBCMask*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTriggerBCMask*) (soff+(sizeof(AliTriggerBCMask)*i)))->~G__TAliTriggerBCMask();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTriggerBCMask*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTriggerBCMask*) (soff))->~G__TAliTriggerBCMask();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTriggerDescriptor */
static int G__G__ESD_833_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerDescriptor* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerDescriptor[n];
     } else {
       p = new((void*) gvp) AliTriggerDescriptor[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerDescriptor;
     } else {
       p = new((void*) gvp) AliTriggerDescriptor;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerDescriptor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_833_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerDescriptor* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerDescriptor(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) AliTriggerDescriptor(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerDescriptor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_833_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerDescriptor* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerDescriptor(*(AliTriggerDescriptor*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTriggerDescriptor(*(AliTriggerDescriptor*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerDescriptor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_833_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTriggerDescriptor& obj = ((AliTriggerDescriptor*) G__getstructoffset())->operator=(*(AliTriggerDescriptor*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_833_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerDescriptor*) G__getstructoffset())->CheckInputsAndFunctions(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_833_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerDescriptor*) G__getstructoffset())->IsActive(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_833_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerDescriptor*) G__getstructoffset())->Trigger(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_833_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTriggerDescriptor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_833_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerDescriptor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_833_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTriggerDescriptor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_833_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTriggerDescriptor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_833_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerDescriptor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_833_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerDescriptor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_833_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerDescriptor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_833_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerDescriptor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_833_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerDescriptor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTriggerDescriptor G__TAliTriggerDescriptor;
static int G__G__ESD_833_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTriggerDescriptor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTriggerDescriptor*) (soff+(sizeof(AliTriggerDescriptor)*i)))->~G__TAliTriggerDescriptor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTriggerDescriptor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTriggerDescriptor*) (soff))->~G__TAliTriggerDescriptor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTriggerCluster */
static int G__G__ESD_834_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerCluster[n];
     } else {
       p = new((void*) gvp) AliTriggerCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerCluster;
     } else {
       p = new((void*) gvp) AliTriggerCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_834_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerCluster(
*(TString*) libp->para[0].ref, (UChar_t) G__int(libp->para[1])
, *(TString*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) AliTriggerCluster(
*(TString*) libp->para[0].ref, (UChar_t) G__int(libp->para[1])
, *(TString*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_834_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerCluster(*(AliTriggerCluster*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTriggerCluster(*(AliTriggerCluster*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_834_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const AliTriggerCluster*) G__getstructoffset())->GetDetectorsInCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_834_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTriggerCluster*) G__getstructoffset())->IsDetectorInCluster(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_834_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliTriggerCluster*) G__getstructoffset())->GetClusterMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_834_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTriggerCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_834_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_834_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTriggerCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_834_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTriggerCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_834_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_834_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_834_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_834_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_834_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTriggerCluster G__TAliTriggerCluster;
static int G__G__ESD_834_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTriggerCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTriggerCluster*) (soff+(sizeof(AliTriggerCluster)*i)))->~G__TAliTriggerCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTriggerCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTriggerCluster*) (soff))->~G__TAliTriggerCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTriggerPFProtection */
static int G__G__ESD_835_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerPFProtection* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerPFProtection[n];
     } else {
       p = new((void*) gvp) AliTriggerPFProtection[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerPFProtection;
     } else {
       p = new((void*) gvp) AliTriggerPFProtection;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerPFProtection* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerPFProtection(*(TString*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTriggerPFProtection(*(TString*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerPFProtection* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerPFProtection(
*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref, *(TString*) libp->para[3].ref);
   } else {
     p = new((void*) gvp) AliTriggerPFProtection(
*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref, *(TString*) libp->para[3].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerPFProtection* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 9
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerPFProtection(
*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref, (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]), (UInt_t) G__int(libp->para[7])
, (UInt_t) G__int(libp->para[8]));
   } else {
     p = new((void*) gvp) AliTriggerPFProtection(
*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref, (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]), (UInt_t) G__int(libp->para[7])
, (UInt_t) G__int(libp->para[8]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerPFProtection* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerPFProtection(*(TString*) libp->para[0].ref, (UInt_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) AliTriggerPFProtection(*(TString*) libp->para[0].ref, (UInt_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerPFProtection*) G__getstructoffset())->SetINTa(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerPFProtection*) G__getstructoffset())->SetINTb(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerPFProtection*) G__getstructoffset())->SetINT(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerPFProtection*) G__getstructoffset())->SetNa1((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerPFProtection*) G__getstructoffset())->SetNa2((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerPFProtection*) G__getstructoffset())->SetTa((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerPFProtection*) G__getstructoffset())->SetNb1((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerPFProtection*) G__getstructoffset())->SetNb2((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerPFProtection*) G__getstructoffset())->SetTb((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const AliTriggerPFProtection*) G__getstructoffset())->GetINTa();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const AliTriggerPFProtection*) G__getstructoffset())->GetINTb();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const AliTriggerPFProtection*) G__getstructoffset())->GetINT();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerPFProtection*) G__getstructoffset())->GetNa1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerPFProtection*) G__getstructoffset())->GetNa2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerPFProtection*) G__getstructoffset())->GetTa());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerPFProtection*) G__getstructoffset())->GetNb1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerPFProtection*) G__getstructoffset())->GetNb2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerPFProtection*) G__getstructoffset())->GetTb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerPFProtection*) G__getstructoffset())->CheckInteractions(*(TObjArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTriggerPFProtection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerPFProtection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTriggerPFProtection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTriggerPFProtection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerPFProtection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerPFProtection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerPFProtection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerPFProtection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_835_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerPFProtection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTriggerPFProtection G__TAliTriggerPFProtection;
static int G__G__ESD_835_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTriggerPFProtection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTriggerPFProtection*) (soff+(sizeof(AliTriggerPFProtection)*i)))->~G__TAliTriggerPFProtection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTriggerPFProtection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTriggerPFProtection*) (soff))->~G__TAliTriggerPFProtection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTriggerClass */
static int G__G__ESD_836_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerClass* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerClass[n];
     } else {
       p = new((void*) gvp) AliTriggerClass[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerClass;
     } else {
       p = new((void*) gvp) AliTriggerClass;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerClass* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 8
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerClass(
*(TString*) libp->para[0].ref, (UChar_t) G__int(libp->para[1])
, (AliTriggerDescriptor*) G__int(libp->para[2]), (AliTriggerCluster*) G__int(libp->para[3])
, (AliTriggerPFProtection*) G__int(libp->para[4]), (AliTriggerBCMask*) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7]));
   } else {
     p = new((void*) gvp) AliTriggerClass(
*(TString*) libp->para[0].ref, (UChar_t) G__int(libp->para[1])
, (AliTriggerDescriptor*) G__int(libp->para[2]), (AliTriggerCluster*) G__int(libp->para[3])
, (AliTriggerPFProtection*) G__int(libp->para[4]), (AliTriggerBCMask*) G__int(libp->para[5])
, (UInt_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerClass* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 9
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerClass(
(AliTriggerConfiguration*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, (UChar_t) G__int(libp->para[2]), *(TString*) libp->para[3].ref
, *(TString*) libp->para[4].ref, *(TString*) libp->para[5].ref
, *(TString*) libp->para[6].ref, (UInt_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]));
   } else {
     p = new((void*) gvp) AliTriggerClass(
(AliTriggerConfiguration*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, (UChar_t) G__int(libp->para[2]), *(TString*) libp->para[3].ref
, *(TString*) libp->para[4].ref, *(TString*) libp->para[5].ref
, *(TString*) libp->para[6].ref, (UInt_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerClass* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 10
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerClass(
(AliTriggerConfiguration*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, (UChar_t) G__int(libp->para[2]), *(TString*) libp->para[3].ref
, *(TString*) libp->para[4].ref, *(TString*) libp->para[5].ref
, (UInt_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (UInt_t) G__int(libp->para[8]), (UInt_t) G__int(libp->para[9]));
   } else {
     p = new((void*) gvp) AliTriggerClass(
(AliTriggerConfiguration*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, (UChar_t) G__int(libp->para[2]), *(TString*) libp->para[3].ref
, *(TString*) libp->para[4].ref, *(TString*) libp->para[5].ref
, (UInt_t) G__int(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (UInt_t) G__int(libp->para[8]), (UInt_t) G__int(libp->para[9]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerClass* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerClass(*(AliTriggerClass*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTriggerClass(*(AliTriggerClass*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTriggerClass& obj = ((AliTriggerClass*) G__getstructoffset())->operator=(*(AliTriggerClass*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerClass*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliTriggerClass*) G__getstructoffset())->GetValue());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliTriggerClass*) G__getstructoffset())->GetValueNext50());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerClass*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliTriggerClass*) G__getstructoffset())->GetMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliTriggerClass*) G__getstructoffset())->GetMaskNext50());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTriggerClass*) G__getstructoffset())->GetIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTriggerClass*) G__getstructoffset())->GetDescriptor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTriggerClass*) G__getstructoffset())->GetCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AliTriggerClass*) G__getstructoffset())->GetBCMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerClass*) G__getstructoffset())->GetTimeGroup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerClass*) G__getstructoffset())->GetTimeWindow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerClass*) G__getstructoffset())->GetPrescaler());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTriggerClass*) G__getstructoffset())->GetDownscaleFactor(*(Double_t*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AliTriggerClass*) G__getstructoffset())->SetMasks((AliTriggerConfiguration*) G__int(libp->para[0]), *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerClass*) G__getstructoffset())->Trigger(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerClass*) G__getstructoffset())->CheckClass((AliTriggerConfiguration*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerClass*) G__getstructoffset())->IsActive(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTriggerClass::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerClass::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTriggerClass::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTriggerClass::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerClass*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerClass::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerClass::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerClass::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_836_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerClass::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTriggerClass G__TAliTriggerClass;
static int G__G__ESD_836_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTriggerClass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTriggerClass*) (soff+(sizeof(AliTriggerClass)*i)))->~G__TAliTriggerClass();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTriggerClass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTriggerClass*) (soff))->~G__TAliTriggerClass();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTriggerInput */
static int G__G__ESD_838_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerInput* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerInput[n];
     } else {
       p = new((void*) gvp) AliTriggerInput[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerInput;
     } else {
       p = new((void*) gvp) AliTriggerInput;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerInput* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerInput(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (UChar_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Char_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) AliTriggerInput(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (UChar_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Char_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerInput(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (UChar_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) AliTriggerInput(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (UChar_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerInput(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (UChar_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) AliTriggerInput(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (UChar_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerInput* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerInput(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (UChar_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5]));
   } else {
     p = new((void*) gvp) AliTriggerInput(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (UChar_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerInput* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerInput(*(AliTriggerInput*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTriggerInput(*(AliTriggerInput*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerInput*) G__getstructoffset())->Set();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerInput*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerInput*) G__getstructoffset())->Enable();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerInput*) G__getstructoffset())->Status());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliTriggerInput*) G__getstructoffset())->GetValue());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const AliTriggerInput*) G__getstructoffset())->GetMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AliTriggerInput*) G__getstructoffset())->GetSignature());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliTriggerInput*) G__getstructoffset())->GetInputName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliTriggerInput*) G__getstructoffset())->GetDetector();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const AliTriggerInput*) G__getstructoffset())->GetModule();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const AliTriggerInput*) G__getstructoffset())->GetDetectorId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const AliTriggerInput*) G__getstructoffset())->GetLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerInput*) G__getstructoffset())->IsActive());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerInput*) G__getstructoffset())->GetIndexCTP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AliTriggerInput*) G__getstructoffset())->GetIndexSwitch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTriggerInput::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerInput::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTriggerInput::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTriggerInput::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerInput*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerInput::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerInput::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerInput::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_838_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerInput::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTriggerInput G__TAliTriggerInput;
static int G__G__ESD_838_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTriggerInput*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTriggerInput*) (soff+(sizeof(AliTriggerInput)*i)))->~G__TAliTriggerInput();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTriggerInput*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTriggerInput*) (soff))->~G__TAliTriggerInput();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ESD_838_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerInput* dest = (AliTriggerInput*) G__getstructoffset();
   *dest = *(AliTriggerInput*) libp->para[0].ref;
   const AliTriggerInput& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliTriggerInteraction */
static int G__G__ESD_839_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerInteraction* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerInteraction[n];
     } else {
       p = new((void*) gvp) AliTriggerInteraction[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliTriggerInteraction;
     } else {
       p = new((void*) gvp) AliTriggerInteraction;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInteraction));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_839_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerInteraction* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerInteraction(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) AliTriggerInteraction(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInteraction));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_839_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliTriggerInteraction* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AliTriggerInteraction(*(AliTriggerInteraction*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AliTriggerInteraction(*(AliTriggerInteraction*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInteraction));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_839_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AliTriggerInteraction& obj = ((AliTriggerInteraction*) G__getstructoffset())->operator=(*(AliTriggerInteraction*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_839_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerInteraction*) G__getstructoffset())->CheckInputs(*(TObjArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_839_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerInteraction*) G__getstructoffset())->IsActive(*(TObjArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_839_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const AliTriggerInteraction*) G__getstructoffset())->Trigger(*(TObjArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_839_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliTriggerInteraction::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_839_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerInteraction::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_839_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliTriggerInteraction::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_839_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliTriggerInteraction::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_839_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliTriggerInteraction*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_839_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerInteraction::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_839_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerInteraction::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_839_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliTriggerInteraction::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_839_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliTriggerInteraction::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliTriggerInteraction G__TAliTriggerInteraction;
static int G__G__ESD_839_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliTriggerInteraction*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliTriggerInteraction*) (soff+(sizeof(AliTriggerInteraction)*i)))->~G__TAliTriggerInteraction();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliTriggerInteraction*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliTriggerInteraction*) (soff))->~G__TAliTriggerInteraction();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AliV0vertexer */
static int G__G__ESD_845_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliV0vertexer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliV0vertexer[n];
     } else {
       p = new((void*) gvp) AliV0vertexer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AliV0vertexer;
     } else {
       p = new((void*) gvp) AliV0vertexer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliV0vertexer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_845_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliV0vertexer*) G__getstructoffset())->SetCuts((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_845_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliV0vertexer::SetDefaultCuts((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_845_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AliV0vertexer*) G__getstructoffset())->Tracks2V0vertices((AliESDEvent*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_845_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const AliV0vertexer*) G__getstructoffset())->GetCuts((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_845_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliV0vertexer::GetDefaultCuts((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_845_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AliV0vertexer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_845_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliV0vertexer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_845_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AliV0vertexer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_845_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AliV0vertexer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_845_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AliV0vertexer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_845_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliV0vertexer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_845_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliV0vertexer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_845_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AliV0vertexer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD_845_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AliV0vertexer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__ESD_845_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AliV0vertexer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AliV0vertexer(*(AliV0vertexer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ESDLN_AliV0vertexer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AliV0vertexer G__TAliV0vertexer;
static int G__G__ESD_845_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AliV0vertexer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AliV0vertexer*) (soff+(sizeof(AliV0vertexer)*i)))->~G__TAliV0vertexer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AliV0vertexer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AliV0vertexer*) (soff))->~G__TAliV0vertexer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ESD_845_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AliV0vertexer* dest = (AliV0vertexer*) G__getstructoffset();
   *dest = *(AliV0vertexer*) libp->para[0].ref;
   const AliV0vertexer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__G__ESD__0_2740(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         AliFMDFloatMap* pobj;
         AliFMDFloatMap xobj = operator*(*(AliFMDMap*) libp->para[0].ref, *(AliFMDMap*) libp->para[1].ref);
         pobj = new AliFMDFloatMap(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD__0_2741(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         AliFMDFloatMap* pobj;
         AliFMDFloatMap xobj = operator/(*(AliFMDMap*) libp->para[0].ref, *(AliFMDMap*) libp->para[1].ref);
         pobj = new AliFMDFloatMap(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD__0_2742(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         AliFMDFloatMap* pobj;
         AliFMDFloatMap xobj = operator+(*(AliFMDMap*) libp->para[0].ref, *(AliFMDMap*) libp->para[1].ref);
         pobj = new AliFMDFloatMap(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ESD__0_2743(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         AliFMDFloatMap* pobj;
         AliFMDFloatMap xobj = operator-(*(AliFMDMap*) libp->para[0].ref, *(AliFMDMap*) libp->para[1].ref);
         pobj = new AliFMDFloatMap(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* AliESDEvent */

/* AliESDv0 */

/* AliCascadeVertexer */

/* AliESDACORDE */

/* AliESDAD */

/* AliESDADfriend */

/* AliESDCaloCells */

/* AliESDCaloCluster */

/* AliESDCaloTrigger */

/* AliESDVertex */

/* AliESDV0Params */

/* AliESDcascade */

/* AliESDCosmicTrack */

/* AliESDMuonTrack */

/* AliESDPmdTrack */

/* AliESDTrdTracklet */

/* AliESDTOFHit */

/* AliESDTOFMatch */

/* AliESDTOFCluster */

/* AliTrackPointArray */

/* AliTrackPoint */

/* AliKalmanTrack */

/* AliESDfriendTrack */

/* AliESDtrack */

/* AliESDTrdTrack */

/* AliVertex */

/* AliESDkink */

/* AliESDHLTtrack */

/* AliFMDMap */

/* AliFMDFloatMap */

/* AliESDFMD */

/* AliESDVZERO */

/* AliMultiplicity */

/* AliRawDataErrorLog */

/* AliESDfriend */

/* AliESD */

/* AliESDRun */

/* AliTriggerScalersESD */

/* AliTriggerScalersRecordESD */

/* AliTriggerIR */

/* AliTriggerConfiguration */

/* AliESDHeader */

/* AliESDTZERO */

/* AliESDFIT */

/* AliESDZDC */

/* AliESDVZEROfriend */

/* AliESDTZEROfriend */

/* AliESDTrdTrigger */

/* AliESDMuonCluster */

/* AliESDMuonPad */

/* AliESDMuonGlobalTrack */

/* AliESDHLTDecision */

/* AliESDHandler */

/* AliESDpid */

/* AliESDInputHandler */

/* AliESDInputHandlerRP */

/* AliESDMultITS */

/* AliVertexerTracks */

/* AliESDUtils */

/* AliExpression */

/* AliVariableExpression */

/* AliKFParticleBase */

/* AliKFParticle */

/* AliKFVertex */

/* AliMeanVertex */

/* AliSelector */

/* AliStrLine */

/* AliTrackerBase */

/* AliTriggerBCMask */

/* AliTriggerDescriptor */

/* AliTriggerCluster */

/* AliTriggerPFProtection */

/* AliTriggerClass */

/* AliTriggerInput */

/* AliTriggerInteraction */

/* AliV0vertexer */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__ESD {
 public:
  G__Sizep2memfuncG__ESD(): p(&G__Sizep2memfuncG__ESD::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__ESD::*p)();
};

size_t G__get_sizep2memfuncG__ESD()
{
  G__Sizep2memfuncG__ESD a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__ESD() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent))) {
     AliESDEvent *G__Lderived;
     G__Lderived=(AliESDEvent*)0x1000;
     {
       AliVEvent *G__Lpbase=(AliVEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent),G__get_linked_tagnum(&G__G__ESDLN_AliVEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDv0))) {
     AliESDv0 *G__Lderived;
     G__Lderived=(AliESDv0*)0x1000;
     {
       AliVParticle *G__Lpbase=(AliVParticle*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDv0),G__get_linked_tagnum(&G__G__ESDLN_AliVParticle),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDv0),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliCascadeVertexer))) {
     AliCascadeVertexer *G__Lderived;
     G__Lderived=(AliCascadeVertexer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliCascadeVertexer),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDACORDE))) {
     AliESDACORDE *G__Lderived;
     G__Lderived=(AliESDACORDE*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDACORDE),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDAD))) {
     AliESDAD *G__Lderived;
     G__Lderived=(AliESDAD*)0x1000;
     {
       AliVAD *G__Lpbase=(AliVAD*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDAD),G__get_linked_tagnum(&G__G__ESDLN_AliVAD),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDAD),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDADfriend))) {
     AliESDADfriend *G__Lderived;
     G__Lderived=(AliESDADfriend*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDADfriend),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells))) {
     AliESDCaloCells *G__Lderived;
     G__Lderived=(AliESDCaloCells*)0x1000;
     {
       AliVCaloCells *G__Lpbase=(AliVCaloCells*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells),G__get_linked_tagnum(&G__G__ESDLN_AliVCaloCells),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCluster))) {
     AliESDCaloCluster *G__Lderived;
     G__Lderived=(AliESDCaloCluster*)0x1000;
     {
       AliVCluster *G__Lpbase=(AliVCluster*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCluster),G__get_linked_tagnum(&G__G__ESDLN_AliVCluster),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCluster),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloTrigger))) {
     AliESDCaloTrigger *G__Lderived;
     G__Lderived=(AliESDCaloTrigger*)0x1000;
     {
       AliVCaloTrigger *G__Lpbase=(AliVCaloTrigger*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloTrigger),G__get_linked_tagnum(&G__G__ESDLN_AliVCaloTrigger),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloTrigger),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloTrigger),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliVParticle))) {
     AliVParticle *G__Lderived;
     G__Lderived=(AliVParticle*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliVParticle),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliVEvent))) {
     AliVEvent *G__Lderived;
     G__Lderived=(AliVEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliVEvent),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex))) {
     AliESDVertex *G__Lderived;
     G__Lderived=(AliESDVertex*)0x1000;
     {
       AliVertex *G__Lpbase=(AliVertex*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex),G__get_linked_tagnum(&G__G__ESDLN_AliVertex),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       AliVVertex *G__Lpbase=(AliVVertex*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex),G__get_linked_tagnum(&G__G__ESDLN_AliVVertex),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDV0Params))) {
     AliESDV0Params *G__Lderived;
     G__Lderived=(AliESDV0Params*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDV0Params),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDcascade))) {
     AliESDcascade *G__Lderived;
     G__Lderived=(AliESDcascade*)0x1000;
     {
       AliESDv0 *G__Lpbase=(AliESDv0*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDcascade),G__get_linked_tagnum(&G__G__ESDLN_AliESDv0),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       AliVParticle *G__Lpbase=(AliVParticle*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDcascade),G__get_linked_tagnum(&G__G__ESDLN_AliVParticle),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDcascade),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDCosmicTrack))) {
     AliESDCosmicTrack *G__Lderived;
     G__Lderived=(AliESDCosmicTrack*)0x1000;
     {
       AliExternalTrackParam *G__Lpbase=(AliExternalTrackParam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCosmicTrack),G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       AliVTrack *G__Lpbase=(AliVTrack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCosmicTrack),G__get_linked_tagnum(&G__G__ESDLN_AliVTrack),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       AliVParticle *G__Lpbase=(AliVParticle*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCosmicTrack),G__get_linked_tagnum(&G__G__ESDLN_AliVParticle),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCosmicTrack),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrack))) {
     AliESDMuonTrack *G__Lderived;
     G__Lderived=(AliESDMuonTrack*)0x1000;
     {
       AliVParticle *G__Lpbase=(AliVParticle*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrack),G__get_linked_tagnum(&G__G__ESDLN_AliVParticle),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrack),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDPmdTrack))) {
     AliESDPmdTrack *G__Lderived;
     G__Lderived=(AliESDPmdTrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDPmdTrack),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTracklet))) {
     AliESDTrdTracklet *G__Lderived;
     G__Lderived=(AliESDTrdTracklet*)0x1000;
     {
       AliVTrdTracklet *G__Lpbase=(AliVTrdTracklet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTracklet),G__get_linked_tagnum(&G__G__ESDLN_AliVTrdTracklet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTracklet),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFHit))) {
     AliESDTOFHit *G__Lderived;
     G__Lderived=(AliESDTOFHit*)0x1000;
     {
       AliVTOFHit *G__Lpbase=(AliVTOFHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFHit),G__get_linked_tagnum(&G__G__ESDLN_AliVTOFHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFHit),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFMatch))) {
     AliESDTOFMatch *G__Lderived;
     G__Lderived=(AliESDTOFMatch*)0x1000;
     {
       AliVTOFMatch *G__Lpbase=(AliVTOFMatch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFMatch),G__get_linked_tagnum(&G__G__ESDLN_AliVTOFMatch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFMatch),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFCluster))) {
     AliESDTOFCluster *G__Lderived;
     G__Lderived=(AliESDTOFCluster*)0x1000;
     {
       AliVTOFcluster *G__Lpbase=(AliVTOFcluster*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFCluster),G__get_linked_tagnum(&G__G__ESDLN_AliVTOFcluster),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFCluster),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliTrackPointArray))) {
     AliTrackPointArray *G__Lderived;
     G__Lderived=(AliTrackPointArray*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTrackPointArray),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliTrackPoint))) {
     AliTrackPoint *G__Lderived;
     G__Lderived=(AliTrackPoint*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTrackPoint),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliKalmanTrack))) {
     AliKalmanTrack *G__Lderived;
     G__Lderived=(AliKalmanTrack*)0x1000;
     {
       AliExternalTrackParam *G__Lpbase=(AliExternalTrackParam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKalmanTrack),G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       AliVTrack *G__Lpbase=(AliVTrack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKalmanTrack),G__get_linked_tagnum(&G__G__ESDLN_AliVTrack),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       AliVParticle *G__Lpbase=(AliVParticle*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKalmanTrack),G__get_linked_tagnum(&G__G__ESDLN_AliVParticle),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKalmanTrack),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack))) {
     AliESDfriendTrack *G__Lderived;
     G__Lderived=(AliESDfriendTrack*)0x1000;
     {
       AliVfriendTrack *G__Lpbase=(AliVfriendTrack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack),G__get_linked_tagnum(&G__G__ESDLN_AliVfriendTrack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack))) {
     AliESDtrack *G__Lderived;
     G__Lderived=(AliESDtrack*)0x1000;
     {
       AliExternalTrackParam *G__Lpbase=(AliExternalTrackParam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack),G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       AliVTrack *G__Lpbase=(AliVTrack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack),G__get_linked_tagnum(&G__G__ESDLN_AliVTrack),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       AliVParticle *G__Lpbase=(AliVParticle*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack),G__get_linked_tagnum(&G__G__ESDLN_AliVParticle),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrack))) {
     AliESDTrdTrack *G__Lderived;
     G__Lderived=(AliESDTrdTrack*)0x1000;
     {
       AliVTrdTrack *G__Lpbase=(AliVTrdTrack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrack),G__get_linked_tagnum(&G__G__ESDLN_AliVTrdTrack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrack),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliVertex))) {
     AliVertex *G__Lderived;
     G__Lderived=(AliVertex*)0x1000;
     {
       AliVVertex *G__Lpbase=(AliVVertex*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliVertex),G__get_linked_tagnum(&G__G__ESDLN_AliVVertex),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliVertex),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliVertex),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDkink))) {
     AliESDkink *G__Lderived;
     G__Lderived=(AliESDkink*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDkink),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTtrack))) {
     AliESDHLTtrack *G__Lderived;
     G__Lderived=(AliESDHLTtrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTtrack),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliFMDMap))) {
     AliFMDMap *G__Lderived;
     G__Lderived=(AliFMDMap*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliFMDMap),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap))) {
     AliFMDFloatMap *G__Lderived;
     G__Lderived=(AliFMDFloatMap*)0x1000;
     {
       AliFMDMap *G__Lpbase=(AliFMDMap*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap),G__get_linked_tagnum(&G__G__ESDLN_AliFMDMap),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDFMD))) {
     AliESDFMD *G__Lderived;
     G__Lderived=(AliESDFMD*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDFMD),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO))) {
     AliESDVZERO *G__Lderived;
     G__Lderived=(AliESDVZERO*)0x1000;
     {
       AliVVZERO *G__Lpbase=(AliVVZERO*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO),G__get_linked_tagnum(&G__G__ESDLN_AliVVZERO),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity))) {
     AliMultiplicity *G__Lderived;
     G__Lderived=(AliMultiplicity*)0x1000;
     {
       AliVMultiplicity *G__Lpbase=(AliVMultiplicity*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity),G__get_linked_tagnum(&G__G__ESDLN_AliVMultiplicity),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLog))) {
     AliRawDataErrorLog *G__Lderived;
     G__Lderived=(AliRawDataErrorLog*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLog),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLog),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend))) {
     AliESDfriend *G__Lderived;
     G__Lderived=(AliESDfriend*)0x1000;
     {
       AliVfriendEvent *G__Lpbase=(AliVfriendEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend),G__get_linked_tagnum(&G__G__ESDLN_AliVfriendEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESD))) {
     AliESD *G__Lderived;
     G__Lderived=(AliESD*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESD),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliVfriendEvent))) {
     AliVfriendEvent *G__Lderived;
     G__Lderived=(AliVfriendEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliVfriendEvent),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDRun))) {
     AliESDRun *G__Lderived;
     G__Lderived=(AliESDRun*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDRun),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD))) {
     AliTriggerScalersESD *G__Lderived;
     G__Lderived=(AliTriggerScalersESD*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersRecordESD))) {
     AliTriggerScalersRecordESD *G__Lderived;
     G__Lderived=(AliTriggerScalersRecordESD*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersRecordESD),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerIR))) {
     AliTriggerIR *G__Lderived;
     G__Lderived=(AliTriggerIR*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerIR),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfiguration))) {
     AliTriggerConfiguration *G__Lderived;
     G__Lderived=(AliTriggerConfiguration*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfiguration),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfiguration),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDHeader))) {
     AliESDHeader *G__Lderived;
     G__Lderived=(AliESDHeader*)0x1000;
     {
       AliVHeader *G__Lpbase=(AliVHeader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHeader),G__get_linked_tagnum(&G__G__ESDLN_AliVHeader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHeader),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHeader),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDTZERO))) {
     AliESDTZERO *G__Lderived;
     G__Lderived=(AliESDTZERO*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTZERO),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDFIT))) {
     AliESDFIT *G__Lderived;
     G__Lderived=(AliESDFIT*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDFIT),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDZDC))) {
     AliESDZDC *G__Lderived;
     G__Lderived=(AliESDZDC*)0x1000;
     {
       AliVZDC *G__Lpbase=(AliVZDC*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDZDC),G__get_linked_tagnum(&G__G__ESDLN_AliVZDC),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDZDC),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDVZEROfriend))) {
     AliESDVZEROfriend *G__Lderived;
     G__Lderived=(AliESDVZEROfriend*)0x1000;
     {
       AliVVZEROfriend *G__Lpbase=(AliVVZEROfriend*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDVZEROfriend),G__get_linked_tagnum(&G__G__ESDLN_AliVVZEROfriend),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDVZEROfriend),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDTZEROfriend))) {
     AliESDTZEROfriend *G__Lderived;
     G__Lderived=(AliESDTZEROfriend*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTZEROfriend),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrigger))) {
     AliESDTrdTrigger *G__Lderived;
     G__Lderived=(AliESDTrdTrigger*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrigger),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonCluster))) {
     AliESDMuonCluster *G__Lderived;
     G__Lderived=(AliESDMuonCluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonCluster),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonPad))) {
     AliESDMuonPad *G__Lderived;
     G__Lderived=(AliESDMuonPad*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonPad),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonGlobalTrack))) {
     AliESDMuonGlobalTrack *G__Lderived;
     G__Lderived=(AliESDMuonGlobalTrack*)0x1000;
     {
       AliVParticle *G__Lpbase=(AliVParticle*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonGlobalTrack),G__get_linked_tagnum(&G__G__ESDLN_AliVParticle),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonGlobalTrack),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTDecision))) {
     AliESDHLTDecision *G__Lderived;
     G__Lderived=(AliESDHLTDecision*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTDecision),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTDecision),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDHandler))) {
     AliESDHandler *G__Lderived;
     G__Lderived=(AliESDHandler*)0x1000;
     {
       AliVEventHandler *G__Lpbase=(AliVEventHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHandler),G__get_linked_tagnum(&G__G__ESDLN_AliVEventHandler),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHandler),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHandler),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDpid))) {
     AliESDpid *G__Lderived;
     G__Lderived=(AliESDpid*)0x1000;
     {
       AliPIDResponse *G__Lpbase=(AliPIDResponse*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDpid),G__get_linked_tagnum(&G__G__ESDLN_AliPIDResponse),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDpid),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDpid),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandler))) {
     AliESDInputHandler *G__Lderived;
     G__Lderived=(AliESDInputHandler*)0x1000;
     {
       AliInputEventHandler *G__Lpbase=(AliInputEventHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandler),G__get_linked_tagnum(&G__G__ESDLN_AliInputEventHandler),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       AliVEventHandler *G__Lpbase=(AliVEventHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandler),G__get_linked_tagnum(&G__G__ESDLN_AliVEventHandler),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandler),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandler),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandlerRP))) {
     AliESDInputHandlerRP *G__Lderived;
     G__Lderived=(AliESDInputHandlerRP*)0x1000;
     {
       AliESDInputHandler *G__Lpbase=(AliESDInputHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandlerRP),G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandler),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       AliInputEventHandler *G__Lpbase=(AliInputEventHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandlerRP),G__get_linked_tagnum(&G__G__ESDLN_AliInputEventHandler),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       AliVEventHandler *G__Lpbase=(AliVEventHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandlerRP),G__get_linked_tagnum(&G__G__ESDLN_AliVEventHandler),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandlerRP),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandlerRP),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliESDMultITS))) {
     AliESDMultITS *G__Lderived;
     G__Lderived=(AliESDMultITS*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMultITS),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTracks))) {
     AliVertexerTracks *G__Lderived;
     G__Lderived=(AliVertexerTracks*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTracks),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliExpression))) {
     AliExpression *G__Lderived;
     G__Lderived=(AliExpression*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliExpression),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliVariableExpression))) {
     AliVariableExpression *G__Lderived;
     G__Lderived=(AliVariableExpression*)0x1000;
     {
       AliExpression *G__Lpbase=(AliExpression*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliVariableExpression),G__get_linked_tagnum(&G__G__ESDLN_AliExpression),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliVariableExpression),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliKFParticleBase))) {
     AliKFParticleBase *G__Lderived;
     G__Lderived=(AliKFParticleBase*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKFParticleBase),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle))) {
     AliKFParticle *G__Lderived;
     G__Lderived=(AliKFParticle*)0x1000;
     {
       AliKFParticleBase *G__Lpbase=(AliKFParticleBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle),G__get_linked_tagnum(&G__G__ESDLN_AliKFParticleBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliKFVertex))) {
     AliKFVertex *G__Lderived;
     G__Lderived=(AliKFVertex*)0x1000;
     {
       AliKFParticle *G__Lpbase=(AliKFParticle*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKFVertex),G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       AliKFParticleBase *G__Lpbase=(AliKFParticleBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKFVertex),G__get_linked_tagnum(&G__G__ESDLN_AliKFParticleBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKFVertex),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliMeanVertex))) {
     AliMeanVertex *G__Lderived;
     G__Lderived=(AliMeanVertex*)0x1000;
     {
       AliESDVertex *G__Lpbase=(AliESDVertex*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliMeanVertex),G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       AliVertex *G__Lpbase=(AliVertex*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliMeanVertex),G__get_linked_tagnum(&G__G__ESDLN_AliVertex),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       AliVVertex *G__Lpbase=(AliVVertex*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliMeanVertex),G__get_linked_tagnum(&G__G__ESDLN_AliVVertex),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliMeanVertex),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliMeanVertex),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliSelector))) {
     AliSelector *G__Lderived;
     G__Lderived=(AliSelector*)0x1000;
     {
       TSelector *G__Lpbase=(TSelector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliSelector),G__get_linked_tagnum(&G__G__ESDLN_TSelector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliSelector),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliStrLine))) {
     AliStrLine *G__Lderived;
     G__Lderived=(AliStrLine*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliStrLine),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliTrackerBase))) {
     AliTrackerBase *G__Lderived;
     G__Lderived=(AliTrackerBase*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTrackerBase),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask))) {
     AliTriggerBCMask *G__Lderived;
     G__Lderived=(AliTriggerBCMask*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerDescriptor))) {
     AliTriggerDescriptor *G__Lderived;
     G__Lderived=(AliTriggerDescriptor*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerDescriptor),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerDescriptor),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerCluster))) {
     AliTriggerCluster *G__Lderived;
     G__Lderived=(AliTriggerCluster*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerCluster),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerCluster),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection))) {
     AliTriggerPFProtection *G__Lderived;
     G__Lderived=(AliTriggerPFProtection*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass))) {
     AliTriggerClass *G__Lderived;
     G__Lderived=(AliTriggerClass*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput))) {
     AliTriggerInput *G__Lderived;
     G__Lderived=(AliTriggerInput*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInteraction))) {
     AliTriggerInteraction *G__Lderived;
     G__Lderived=(AliTriggerInteraction*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInteraction),G__get_linked_tagnum(&G__G__ESDLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInteraction),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ESDLN_AliV0vertexer))) {
     AliV0vertexer *G__Lderived;
     G__Lderived=(AliV0vertexer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ESDLN_AliV0vertexer),G__get_linked_tagnum(&G__G__ESDLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__ESD() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("ULong_t",107,-1,0,-1);
   G__setnewtype(-1,"Unsigned long integer 8 bytes (unsigned long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Double32_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes in memory, written as a 4 bytes float",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("ULong64_t",109,-1,0,-1);
   G__setnewtype(-1,"Portable unsigned long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__ESDLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ESDLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ESDLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ESDLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ESDLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__ESDLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ESDLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ESDLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ESDLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ESDLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__ESDLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__ESDLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__ESDLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__ESDLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__ESDLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__G__ESDLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__ESDLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__ESDLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__G__ESDLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixD",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixDSym",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparse<Double_t>",117,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTSparselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Double_t (*)[3]",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* AliESDEvent */
static void G__setup_memvarAliESDEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent));
   { AliESDEvent *p; p=(AliESDEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kESDRun=%lldLL",(long long)AliESDEvent::kESDRun).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kHeader=%lldLL",(long long)AliESDEvent::kHeader).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kESDZDC=%lldLL",(long long)AliESDEvent::kESDZDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kESDFMD=%lldLL",(long long)AliESDEvent::kESDFMD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kESDVZERO=%lldLL",(long long)AliESDEvent::kESDVZERO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kESDTZERO=%lldLL",(long long)AliESDEvent::kESDTZERO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kTPCVertex=%lldLL",(long long)AliESDEvent::kTPCVertex).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kSPDVertex=%lldLL",(long long)AliESDEvent::kSPDVertex).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kPrimaryVertex=%lldLL",(long long)AliESDEvent::kPrimaryVertex).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kSPDMult=%lldLL",(long long)AliESDEvent::kSPDMult).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kPHOSTrigger=%lldLL",(long long)AliESDEvent::kPHOSTrigger).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kEMCALTrigger=%lldLL",(long long)AliESDEvent::kEMCALTrigger).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kSPDPileupVertices=%lldLL",(long long)AliESDEvent::kSPDPileupVertices).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kTrkPileupVertices=%lldLL",(long long)AliESDEvent::kTrkPileupVertices).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kTracks=%lldLL",(long long)AliESDEvent::kTracks).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kMuonTracks=%lldLL",(long long)AliESDEvent::kMuonTracks).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kMuonClusters=%lldLL",(long long)AliESDEvent::kMuonClusters).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kMuonPads=%lldLL",(long long)AliESDEvent::kMuonPads).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kMuonGlobalTracks=%lldLL",(long long)AliESDEvent::kMuonGlobalTracks).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kPmdTracks=%lldLL",(long long)AliESDEvent::kPmdTracks).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kTrdTrigger=%lldLL",(long long)AliESDEvent::kTrdTrigger).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kTrdTracks=%lldLL",(long long)AliESDEvent::kTrdTracks).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kTrdTracklets=%lldLL",(long long)AliESDEvent::kTrdTracklets).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kV0s=%lldLL",(long long)AliESDEvent::kV0s).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kCascades=%lldLL",(long long)AliESDEvent::kCascades).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kKinks=%lldLL",(long long)AliESDEvent::kKinks).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kCaloClusters=%lldLL",(long long)AliESDEvent::kCaloClusters).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kEMCALCells=%lldLL",(long long)AliESDEvent::kEMCALCells).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kPHOSCells=%lldLL",(long long)AliESDEvent::kPHOSCells).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kErrorLogs=%lldLL",(long long)AliESDEvent::kErrorLogs).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kESDACORDE=%lldLL",(long long)AliESDEvent::kESDACORDE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kESDAD=%lldLL",(long long)AliESDEvent::kESDAD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kTOFHeader=%lldLL",(long long)AliESDEvent::kTOFHeader).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kCosmicTracks=%lldLL",(long long)AliESDEvent::kCosmicTracks).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kTOFclusters=%lldLL",(long long)AliESDEvent::kTOFclusters).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kTOFhit=%lldLL",(long long)AliESDEvent::kTOFhit).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kTOFmatch=%lldLL",(long long)AliESDEvent::kTOFmatch).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kESDFIT=%lldLL",(long long)AliESDEvent::kESDFIT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEventcLcLESDListIndex),-1,-2,1,G__FastAllocString(2048).Format("kESDListN=%lldLL",(long long)AliESDEvent::kESDListN).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TList),-1,-1,2,"fESDObjects=",0,"List of esd Objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDRun),-1,-1,2,"fESDRun=",0,"! Run information tmp put in the Userdata");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDHeader),-1,-1,2,"fHeader=",0,"! ESD Event Header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDZDC),-1,-1,2,"fESDZDC=",0,"! ZDC information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDFMD),-1,-1,2,"fESDFMD=",0,"! FMD object containing rough multiplicity");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO),-1,-1,2,"fESDVZERO=",0,"! VZERO object containing rough multiplicity");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDTZERO),-1,-1,2,"fESDTZERO=",0,"! TZEROObject");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDFIT),-1,-1,2,"fESDFIT=",0,"! FITObject");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex),-1,-1,2,"fTPCVertex=",0,"! Primary vertex estimated by the TPC");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex),-1,-1,2,"fSPDVertex=",0,"! Primary vertex estimated by the SPD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex),-1,-1,2,"fPrimaryVertex=",0,"! Primary vertex estimated using ESD tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity),-1,-1,2,"fSPDMult=",0,"! SPD tracklet multiplicity");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloTrigger),-1,-1,2,"fPHOSTrigger=",0,"! PHOS Trigger information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloTrigger),-1,-1,2,"fEMCALTrigger=",0,"! PHOS Trigger information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDACORDE),-1,-1,2,"fESDACORDE=",0,"! ACORDE ESD object caontaining bit pattern");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDAD),-1,-1,2,"fESDAD=",0,"! AD ESD object caontaining bit pattern");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrigger),-1,-1,2,"fTrdTrigger=",0,"! TRD trigger information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fSPDPileupVertices=",0,"! Pileup primary vertices reconstructed by SPD ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fTrkPileupVertices=",0,"! Pileup primary vertices reconstructed using the tracks ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fTracks=",0,"! ESD tracks ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fMuonTracks=",0,"! MUON ESD tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fMuonClusters=",0,"! MUON ESD clusters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fMuonPads=",0,"! MUON ESD pads");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fMuonGlobalTracks=",0,"! MUON+MFT ESD tracks      // AU");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fPmdTracks=",0,"! PMD ESD tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fTrdTracks=",0,"! TRD ESD tracks (triggered)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fTrdTracklets=",0,"! TRD tracklets (for trigger)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fV0s=",0,"! V0 vertices");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fCascades=",0,"! Cascade vertices");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fKinks=",0,"! Kinks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fCaloClusters=",0,"! Calorimeter clusters for PHOS/EMCAL");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells),-1,-1,2,"fEMCALCells=",0,"! EMCAL cell info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells),-1,-1,2,"fPHOSCells=",0,"! PHOS cell info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fCosmicTracks=",0,"! Tracks created by cosmics finder");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fESDTOFClusters=",0,"! TOF clusters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fESDTOFHits=",0,"! TOF hits (used for clusters)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fESDTOFMatches=",0,"! TOF matching info (with the reference to tracks)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fErrorLogs=",0,"! Raw-data reading error messages");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fOldMuonStructure=",0,"! Flag if reading ESD with old MUON structure");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESD),-1,-1,2,"fESDOld=",0,"! Old esd Structure");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend),-1,-1,2,"fESDFriendOld=",0,"! Old friend esd Structure");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fConnected=",0,"! flag if leaves are alreday connected");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fUseOwnList=",0,"! Do not use the list from the esdTree but use the one created by this class ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fTracksConnected=",0,"! flag if tracks have already pointer to event set");
   G__memvar_setup((void*)0,67,0,1,-1,-1,-2,2,"fgkESDListName[38]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliTOFHeader),-1,-1,2,"fTOFHeader=",0,"! event times (and sigmas) as estimated by TOF");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliCentrality),-1,-1,2,"fCentrality=",0,"! Centrality for AA collision");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliEventplane),-1,-1,2,"fEventplane=",0,"! Event plane for AA collision");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNTPCFriend2Store=",0,"! number of TPC friend tracks to store");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,2,"fDetectorStatus=",0,"set detector event status bit for good event selection");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fDAQDetectorPattern=",0,"Detector pattern from DAQ: bit 0 is SPD, bit 4 is TPC, etc. See event.h");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fDAQAttributes=",0,"Third word of attributes from DAQ: bit 7 corresponds to HLT decision ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNTPCClusters=",0,"number of TPC clusters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDv0 */
static void G__setup_memvarAliESDv0(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDv0));
   { AliESDv0 *p; p=(AliESDv0*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),-1,-1,2,"fParamN=",0,"external parameters of negative particle");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),-1,-1,2,"fParamP=",0,"external parameters of positive particle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fEffMass=",0,"reconstructed V0's effective mass");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fDcaV0Daughters=",0,"dca between V0's daughters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fChi2V0=",0,"V0's chi2 value");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPos[3]=",0,"V0's position (global)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPosCov[6]=",0,"covariance matrix of the vertex position");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fNmom[3]=",0,"momentum of the negative daughter (global)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPmom[3]=",0,"momentum of the positive daughter (global)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fNormDCAPrim[2]=",0,"normalize distance to the primary vertex CKBrev");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fRr=",0,"rec position of the vertex CKBrev");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fDistSigma=",0,"sigma of distance CKBrev");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fChi2Before=",0,"chi2 of the tracks before V0 CKBrev");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fChi2After=",0,"chi2 of the tracks after V0 CKBrev");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCausality[4]=",0,"[0,1,8] causality information - see comments in SetCausality CKBrev");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fAngle[3]=",0,"[-2*pi,2*pi,16]three angles CKBrev");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPointAngleFi=",0,"[-1,1,16]point angle fi CKBrev");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPointAngleTh=",0,"[-1,1,16]point angle theta CKBrev");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPointAngle=",0,"[-1,1,32] cosine of the pointing angle");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPdgCode=",0,"reconstructed V0's type (PDG code)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fClusters[2][6]=",0,"! its clusters CKBrev  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNidx=",0,"index of the negative daughter");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPidx=",0,"index of the positive daughter");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fStatus=",0,"status CKBrev");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fNBefore=",0,"number of possible points before V0 CKBrev");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fNAfter=",0,"number of possible points after V0 CKBrev");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fOnFlyStatus=",0,"if kTRUE, then this V0 is recontructed");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDV0Params),-1,-2,2,"fgkParams=",0,"! resolution and likelihood parameterization  ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliCascadeVertexer */
static void G__setup_memvarAliCascadeVertexer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliCascadeVertexer));
   { AliCascadeVertexer *p; p=(AliCascadeVertexer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgChi2max=",0,"maximal allowed chi2 ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgDV0min=",0,"min. allowed V0 impact parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgMassWin=",0,"window around the Lambda mass");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgDBachMin=",0,"min. allowed bachelor impact parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgDCAmax=",0,"maximal allowed DCA between the V0 and the track ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgCPAmin=",0,"minimal allowed cosine of the cascade pointing angle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgRmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgRmax=",0,"max & min radii of the fiducial volume");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fChi2max=",0,"maximal allowed chi2 ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDV0min=",0,"min. allowed V0 impact parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMassWin=",0,"window around the Lambda mass");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDBachMin=",0,"min. allowed bachelor impact parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDCAmax=",0,"maximal allowed DCA between the V0 and the track ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCPAmin=",0,"minimal allowed cosine of the cascade pointing angle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRmin2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRmax2=",0,"max & min radii^2 of the fiducial volume");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRmaxMargin2=",0,"(rmax+margin)^2  for fast checks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDACORDE */
static void G__setup_memvarAliESDACORDE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDACORDE));
   { AliESDACORDE *p; p=(AliESDACORDE*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fACORDEBitPattern[60]=",0,"Array with the ACORDE's bitpattern");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDAD */
static void G__setup_memvarAliESDAD(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDAD));
   { AliESDAD *p; p=(AliESDAD*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fBBtriggerADA=",0,"bit mask for Beam-Beam trigger in ADA");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fBGtriggerADA=",0,"bit mask for Beam-Gas trigger in ADA");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fBBtriggerADC=",0,"bit mask for Beam-Beam trigger in ADC");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fBGtriggerADC=",0,"bit mask for Beam-Gas trigger in ADC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMultiplicity[16]=",0,"multiplicity for each channel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAdc[16]=",0,"charge signal for each channel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTime[16]=",0,"time for each channel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fWidth[16]=",0,"time width for each channel");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fBBFlag[16]=",0,"BB Flags from Online AD Electronics");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fBGFlag[16]=",0,"BG Flags from Online AD Electronics");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fADATime=",0,"Average time in ADA");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fADCTime=",0,"Average time in ADC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fADATimeError=",0,"Error in the average time in ADA");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fADCTimeError=",0,"Error in the average time in ADC");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliVADcLcLDecision),-1,-1,2,"fADADecision=",0,"ADA final decision based on average time of channels");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliVADcLcLDecision),-1,-1,2,"fADCDecision=",0,"ADC final decision based on average time of channels");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fTriggerChargeA=",0,"Sum of the trigger (clock=10) charge on A side");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fTriggerChargeC=",0,"Sum of the trigger (clock=10) charge on C side");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fTriggerBits=",0,"AD trigger bits as defined in the firmware");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsBB[16][21]=",0,"BB flag for all channels and 21 clocks");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsBG[16][21]=",0,"BG flag for all channels and 21 clocks");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAdcTail[16]=",0,"tail of charge signal for each channel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAdcTrigger[16]=",0,"charge trigger signal for each channel");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDADfriend */
static void G__setup_memvarAliESDADfriend(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDADfriend));
   { AliESDADfriend *p; p=(AliESDADfriend*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDADfriendcLcLEESDADfriendParams),-1,-2,1,G__FastAllocString(2048).Format("kNChannels=%lldLL",(long long)AliESDADfriend::kNChannels).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDADfriendcLcLEESDADfriendParams),-1,-2,1,G__FastAllocString(2048).Format("kNEvOfInt=%lldLL",(long long)AliESDADfriend::kNEvOfInt).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDADfriendcLcLEESDADfriendParams),-1,-2,1,G__FastAllocString(2048).Format("kNScalers=%lldLL",(long long)AliESDADfriend::kNScalers).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fBBScalers[16]=",0,"'Beam-Beam' scalers for all channels");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fBGScalers[16]=",0,"'Beam-Gas' scalers for all channels");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fScalers[16]=",0,"Trigger scalers");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fADC[16][21]=",0,"ADC counts for all channels and all events of interest");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsInt[16][21]=",0,"'Integrator' flag for all channels ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsBB[16][21]=",0,"'Beam-Beam' flag for all channels");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsBG[16][21]=",0,"'Beam-Gas' flag for all channels");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTime[16]=",0,"leading time for all channels - from HPTDC - in nanoseconds");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWidth[16]=",0,"pulse width for all channels - from HPTDC - in nanoseconds");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fTrigger=",0,"AD trigger inputs");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fTriggerMask=",0,"AD trigger inputs mask");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDCaloCells */
static void G__setup_memvarAliESDCaloCells(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells));
   { AliESDCaloCells *p; p=(AliESDCaloCells*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNCells=",0,"/< Number of cells");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fHGLG=",0,"[fNCells]");
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,2,"fCellNumber=",0,"[fNCells]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fAmplitude=",0,"[fNCells][0.,0.,16]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTime=",0,"[fNCells][0.,0.,16]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fEFraction=",0,"[fNCells][0.,0.,16] ");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMCLabel=",0,"[fNCells]");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsSorted=",0,"!<! True if cell arrays are sorted by index.");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fType=",0,"/< Cell type.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDCaloCluster */
static void G__setup_memvarAliESDCaloCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCluster));
   { AliESDCaloCluster *p; p=(AliESDCaloCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TArrayI),-1,-1,2,"fTracksMatched=",0,"/< Index of tracks close to cluster. First entry is the most likely match.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TArrayI),-1,-1,2,"fLabels=",0,"/< List of MC particles that generated the cluster, ordered in deposited energy.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNCells=",0,"/< Number of cells in cluster.");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fCellsAbsId=",0,"[fNCells] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCellsAmpFraction=",0,"[fNCells][0.,1.,16] ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fGlobalPos[3]=",0,"/< Position in global coordinate system (cm).");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fEnergy=",0,"/< Energy measured by calorimeter in GeV.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fDispersion=",0,"/< Cluster shape dispersion.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fChi2=",0,"/< Chi2 of cluster fit (unfolded clusters)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fM20=",0,"/< 2-nd moment along the main eigen axis.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fM02=",0,"/< 2-nd moment along the second eigen axis.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fEmcCpvDistance=",0,"/< the distance from PHOS EMC rec.point to the closest CPV rec.point.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTrackDx=",0,"/< Distance to closest track in phi.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTrackDz=",0,"/< Distance to closest track in z.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fDistToBadChannel=",0,"/< Distance to nearest bad channel.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPID[14]=",0,"[0,1,8]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fID=",0,"/< Unique Id of the cluster.");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fNExMax=",0,"/< Number of Local (Ex-)maxima before unfolding.  ");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fClusterType=",0,"/< Flag for different cluster type/versions. See enum VClu_t in AliVCluster");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTOF=",0,"[0,0,12] ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCoreEnergy=",0,"/< Energy of the core of cluster. Used by PHOS.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMCEnergyFraction=",0,"!<! MC energy (embedding)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsExotic=",0,"!<! Cluster marked as \"exotic\" (high energy deposition concentrated in a single cell)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUserDefEnergy[5]=",0,"!<!energy of the cluster after other higher level corrections (e.g. non-linearity, hadronic correction, ...)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fNLabel=",0,"/< Number of MC particles associated to the cluster");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fClusterMCEdepFraction=",0,"[fNLabel] ");
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fCellsMCEdepFractionMap=",0,"[fNCells] ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDCaloTrigger */
static void G__setup_memvarAliESDCaloTrigger(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloTrigger));
   { AliESDCaloTrigger *p; p=(AliESDCaloTrigger*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNEntries=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCurrent=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fColumn=",0,"[fNEntries]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRow=",0,"[fNEntries]");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAmplitude=",0,"[fNEntries]");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTime=",0,"[fNEntries]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNL0Times=",0,"[fNEntries]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TArrayI),-1,-1,4,"fL0Times=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fL1TimeSum=",0,"[fNEntries]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTriggerBits=",0,"[fNEntries]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fL1Threshold[4]=",0,"L1 thresholds from raw data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fL1V0[2]=",0,"L1 threshold components");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fL1FrameMask=",0,"Validation flag for L1 data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fL1DCALThreshold[4]=",0,"L1 thresholds from raw data");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fL1SubRegion=",0,"[fNEntries]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fL1DCALFrameMask=",0,"Validation flag for L1 data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMedian[2]=",0,"Background median");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTriggerBitWord=",0,"Trigger bit word");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fL1DCALV0[2]=",0,"L1 threshold components");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDVertex */
static void G__setup_memvarAliESDVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex));
   { AliESDVertex *p; p=(AliESDVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCovXX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCovXY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCovYY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCovXZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCovYZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCovZZ=",0,"vertex covariance matrix");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fSNR[3]=",0,"S/N ratio");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fChi2=",0,"chi2 of vertex fit");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fID=",0,"ID of this vertex within an ESD event");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fBCID=",0,"BC ID assigned to vertex");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDV0Params */
static void G__setup_memvarAliESDV0Params(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDV0Params));
   { AliESDV0Params *p; p=(AliESDV0Params*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPSigmaOffsetD0=",0,"sigma offset DCA");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPSigmaOffsetAP0=",0,"sigma offset AP");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPSigmaMaxDE=",0,"maximal allowed sigma DCA");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPSigmaOffsetDE=",0,"offset sigma DCA");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPSigmaCoefDE=",0,"sigma coefiecient ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPSigmaRminDE=",0,"max radius  - with momentum dependence ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPSigmaBase0APE=",0,"base sigma PA");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPSigmaMaxAPE=",0,"maximal sigma PA");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPSigmaR0APE=",0,"radial dependent part   - coeficient");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPSigmaR1APE=",0,"radial dependent part   - offset ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPSigmaP0APE=",0,"momentum dependent part - coeficient");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPSigmaP1APE=",0,"momentum dependent part - offset");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPMinFractionAP0=",0,"minimal allowed fraction of effective params - PA");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPMaxFractionAP0=",0,"maximal allowed fraction of effective params - PA");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPMinAP0=",0,"minimal minimax - PA sigma ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPMinFractionD0=",0,"minimal allowed fraction of effective params - DCA");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPMaxFractionD0=",0,"maximal allowed fraction of effective params - DCA");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPMinD0=",0,"minimal minimax - DCA sigma");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMaxDist0=",0,"Maximum distance 0 coef (pol1)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMaxDist1=",0,"Maximum distance 1 coef (pol1)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMaxDist=",0,"Maximum distance  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinPointAngle=",0,"Minimum pointing Angle Soft");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinPointAngle2=",0,"Minimum pointing Angle Hard");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinR=",0,"Minimum R");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMaxR=",0,"Maximum R");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinPABestConst=",0,"Minimum  PA Best ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMaxRBestConst=",0,"Maximum R Best  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkCausality0Cut=",0,"Causality cut");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkLikelihood01Cut=",0,"Likelihood cut ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkLikelihood1Cut=",0,"Likelihood cut");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkCombinedCut=",0,"Combined cut");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinClFullTrk=",0,"Minimum Cluster full track ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinTgl0=",0,"Minimu Tgl    ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinClForb0=",0,"Minimum cluster to forbid track");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinRTgl0=",0,"Minimum R Tgl   ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinNormDistForbTgl0=",0,"Minimum  normalized distance ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinNormDistForb1=",0,"Minimum  normalized distance Forbid cond 1 ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinNormDistForb2=",0,"Minimum  normalize distance Forbid cond 2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinNormDistForb3=",0,"Minimum  normalize distance Forbid cond 3  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinNormDistForb4=",0,"Minimum  normalize distance Forbid cond 4 ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinNormDistForb5=",0,"Minimum  normalize distance Forbid cond 5");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinNormDistForbProt=",0,"Minimum  normalize distance to not Forbid Proton");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMaxPidProbPionForb=",0,"Max pid prob to decleare not pion  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinRTPCdensity=",0,"Minimum R TPC density cond  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMaxRTPCdensity0=",0,"Maximum R TPC density cond  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMaxRTPCdensity10=",0,"Maximum R TPC density cond  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMaxRTPCdensity20=",0,"Maximum R TPC density cond  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMaxRTPCdensity30=",0,"Maximum R TPC density cond  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinTPCdensity=",0,"Minimum TPC density   ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinTgl1=",0,"Minimum Tgl ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinTgl2=",0,"Minimum Tgl ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinchi2before0=",0,"Minimum chi2 before V0 cond 0");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinchi2before1=",0,"Minimum chi2 before V0 cond 1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinchi2after0=",0,"Minimum chi2 after V0 cond 0");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMinchi2after1=",0,"Minimum chi2 after V0 cond 1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkAddchi2SharedCl=",0,"Add chi2 shared clusters  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkAddchi2NegCl0=",0,"Add chi2 negative clusters   ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkAddchi2NegCl1=",0,"Add chi2 negative clusters  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkSigp0Par0=",0,"par0 sigma_0");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkSigp0Par1=",0,"par1 sigma_0");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkSigp0Par2=",0,"par2 sigma_0 ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkSigpPar0=",0,"par0 sigma_1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkSigpPar1=",0,"par1 sigma_1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkSigpPar2=",0,"par2 sigma_1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkMaxDcaLh0=",0,"Maximum DCA Lh");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkChi2KF=",0,"chi2 AliKF");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fkRobustChi2KF=",0,"robust chi2 KF ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fgStreamLevel=",0,"flag for streaming - for ITS V0");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDcascade */
static void G__setup_memvarAliESDcascade(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDcascade));
   { AliESDcascade *p; p=(AliESDcascade*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fEffMassXi=",0,"reconstructed cascade effective mass");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fChi2Xi=",0,"chi2 value");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fDcaXiDaughters=",0,"dca between Xi's daughters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPosXi[3]=",0,"cascade vertex position (global)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPosCovXi[6]=",0,"covariance matrix of the vertex position");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fBachMom[3]=",0,"bachelor momentum (global)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fBachMomCov[6]=",0,"covariance matrix of the bachelor momentum.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPdgCodeXi=",0,"reconstructed cascade type (PDG code)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBachIdx=",0,"label of the bachelor track");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDCosmicTrack */
static void G__setup_memvarAliESDCosmicTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCosmicTrack));
   { AliESDCosmicTrack *p; p=(AliESDCosmicTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),-1,-1,4,"fLowerTrackParam=",0,"trackparameter estimated at lower-outer part of TPC");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),-1,-1,4,"fX0UpperTrackParam=",0,"ESD upper trackparam at X=0");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),-1,-1,4,"fX0LowerTrackParam=",0,"ESD lower trackparam at X=0");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TVector3),-1,-1,4,"fInnerClusterUpper=",0,"innermost TPC cluster, upper");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TVector3),-1,-1,4,"fInnerClusterLower=",0,"innermost TPC cluster, lower");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fESDtrackIndex[2]=",0,"[0]= ESD track for this object; [1]= ESD track for LowerTrackParma");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNCluster=",0,"number of cls used in fit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLeverArm=",0,"lever arm");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fChi2PerCluster=",0,"chi2/ncls");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fImpactD=",0,"2d impact parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fImpactZ=",0,"z of impact parameter");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsReuse=",0,"true if one of the track from the pair already used in previous pair");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fFindableRatio=",0,"min of TPC ncls/nfindablecls of the two tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDMuonTrack */
static void G__setup_memvarAliESDMuonTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrack));
   { AliESDMuonTrack *p; p=(AliESDMuonTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternFlag),-1,-2,1,G__FastAllocString(2048).Format("kNoEff=%lldLL",(long long)AliESDMuonTrack::kNoEff).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternFlag),-1,-2,1,G__FastAllocString(2048).Format("kChEff=%lldLL",(long long)AliESDMuonTrack::kChEff).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternFlag),-1,-2,1,G__FastAllocString(2048).Format("kSlatEff=%lldLL",(long long)AliESDMuonTrack::kSlatEff).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternFlag),-1,-2,1,G__FastAllocString(2048).Format("kBoardEff=%lldLL",(long long)AliESDMuonTrack::kBoardEff).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternInfo),-1,-2,1,G__FastAllocString(2048).Format("kCrossDifferentSlats=%lldLL",(long long)AliESDMuonTrack::kCrossDifferentSlats).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternInfo),-1,-2,1,G__FastAllocString(2048).Format("kTrackMatchesManyPads=%lldLL",(long long)AliESDMuonTrack::kTrackMatchesManyPads).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternInfo),-1,-2,1,G__FastAllocString(2048).Format("kTrackMatchesFewPads=%lldLL",(long long)AliESDMuonTrack::kTrackMatchesFewPads).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternInfo),-1,-2,1,G__FastAllocString(2048).Format("kTrackOutsideGeometry=%lldLL",(long long)AliESDMuonTrack::kTrackOutsideGeometry).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternInfo),-1,-2,1,G__FastAllocString(2048).Format("kTrackerTrackPattern=%lldLL",(long long)AliESDMuonTrack::kTrackerTrackPattern).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternInfo),-1,-2,1,G__FastAllocString(2048).Format("kTrackMatchesMasks=%lldLL",(long long)AliESDMuonTrack::kTrackMatchesMasks).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fInverseBendingMomentum=",0,"/< Inverse bending momentum (GeV/c ** -1) times the charge ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fThetaX=",0,"/< Angle of track at vertex in X direction (rad)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fThetaY=",0,"/< Angle of track at vertex in Y direction (rad)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fZ=",0,"/< Z coordinate (cm)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fBendingCoor=",0,"/< bending coordinate (cm)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fNonBendingCoor=",0,"/< non bending coordinate (cm)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fInverseBendingMomentumAtDCA=",0,"/< Inverse bending momentum (GeV/c ** -1) times the charge ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fThetaXAtDCA=",0,"/< Angle of track at vertex in X direction (rad)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fThetaYAtDCA=",0,"/< Angle of track at vertex in Y direction (rad)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fBendingCoorAtDCA=",0,"/< bending coordinate (cm)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fNonBendingCoorAtDCA=",0,"/< non bending coordinate (cm)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fInverseBendingMomentumUncorrected=",0,"/< Inverse bending momentum (GeV/c ** -1) times the charge ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fThetaXUncorrected=",0,"/< Angle of track at vertex in X direction (rad)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fThetaYUncorrected=",0,"/< Angle of track at vertex in Y direction (rad)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fZUncorrected=",0,"/< Z coordinate (cm)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fBendingCoorUncorrected=",0,"/< bending coordinate (cm)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fNonBendingCoorUncorrected=",0,"/< non bending coordinate (cm)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCovariances[15]=",0,"/< \\brief reduced covariance matrix of parameters AT FIRST CHAMBER");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fRAtAbsorberEnd=",0,"/< transverse position r of the track at the end of the absorber");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fChi2=",0,"/< chi2 in the MUON track fit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fChi2MatchTrigger=",0,"/< chi2 of trigger/track matching");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLocalTrigger=",0,"/< packed local trigger information");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fX1Pattern=",0,"/< x-strips pattern in st6/ch1");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fY1Pattern=",0,"/< y-strips pattern in st6/ch1");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fX2Pattern=",0,"/< x-strips pattern in st6/ch2");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fY2Pattern=",0,"/< y-strips pattern in st6/ch2");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fX3Pattern=",0,"/< x-strips pattern in st7/ch1");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fY3Pattern=",0,"/< y-strips pattern in st7/ch1");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fX4Pattern=",0,"/< x-strips pattern in st7/ch2");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fY4Pattern=",0,"/< y-strips pattern in st7/ch2");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fMuonClusterMap=",0,"/< Map of clusters in tracking chambers");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fHitsPatternInTrigCh=",0,"/< Word containing info on the hits left in trigger chambers");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fHitsPatternInTrigChTrk=",0,"/< Trigger hit map from tracker track extrapolation");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fNHit=",0,"/< number of clusters attached to the track");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fClusters=",0,"/< Array of clusters attached to the track -- deprecated");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TArrayI),-1,-1,2,"fClustersId=",0,"/< Array of clusters'Id attached to the track");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLabel=",0,"/< point to the corresponding MC track");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent),-1,-1,2,"fESDEvent=",0,"!Pointer back to event to which the track belongs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDPmdTrack */
static void G__setup_memvarAliESDPmdTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDPmdTrack));
   { AliESDPmdTrack *p; p=(AliESDPmdTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fX=",0,"Cluster X position");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fY=",0,"Cluster Y position");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fZ=",0,"Cluster Z position (vertex uncorrected)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCluADC=",0,"Cluster Energy in ADC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCluPID=",0,"[0.,1.,8] Cluster probability, 1: Photon, 0: Hadron");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fDet=",0,"Detector, 0:PRE, 1:CPV");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fNcell=",0,"Cluster cells");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSmn=",0,"Serial module number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTrackNo=",0,"Track number assigned to the clus from simulation");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTrackPid=",0,"Track pid assigned to clus from simulation");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fClMatching=",0,"Cluster of PRE matching with CPV");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fSigX=",0,"Cluster x-width");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fSigY=",0,"Cluster y-width");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDTrdTracklet */
static void G__setup_memvarAliESDTrdTracklet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTracklet));
   { AliESDTrdTracklet *p; p=(AliESDTrdTracklet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fHCId=",0,"half-chamber ID");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fTrackletWord=",0,"tracklet word (as from FEE)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLabel=",0,"MC label");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDTOFHit */
static void G__setup_memvarAliESDTOFHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFHit));
   { AliESDTOFHit *p; p=(AliESDTOFHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTimeRaw=",0,"Time Raw");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTime=",0,"TOF calibrated time");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTOT=",0,"Time Over Threshold");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTOFLabel[3]=",0,"TOF MC labels");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fL0L1Latency=",0,"L0L1 latency");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDeltaBC=",0,"DeltaBC can it be Char_t of Short_t ?");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTOFchannel=",0,"TOF channel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZ=",0,"! coordinate for reco");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fR=",0,"! coordinate for reco");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhi=",0,"! coordinate for reco");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDTOFMatch */
static void G__setup_memvarAliESDTOFMatch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFMatch));
   { AliESDTOFMatch *p; p=(AliESDTOFMatch*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fDx=",0,"DeltaX residual");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fDy=",0,"! DeltaY residual");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fDz=",0,"DeltaZ residual");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTrackLength=",0,"track Length");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fIntegratedTimes[9]=",0,"int timex");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDTOFCluster */
static void G__setup_memvarAliESDTOFCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFCluster));
   { AliESDTOFCluster *p; p=(AliESDTOFCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fID=",0,"raw cluster id");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fNTOFhits=",0,"number of TOF hit in the cluster");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fStatus=",0,"!");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fNmatchableTracks=",0,"number of matchable tracks with the same TOF matchable hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fHitIndex[4]=",0,"pointing to hit info");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMatchIndex[7]=",0,"pointing to matching info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTrackPointArray */
static void G__setup_memvarAliTrackPointArray(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTrackPointArray));
   { AliTrackPointArray *p; p=(AliTrackPointArray*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliTrackPointArraycLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTOFBugFixed=%lldLL",(long long)AliTrackPointArray::kTOFBugFixed).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSorted=",0,"Sorted flag");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPoints=",0,"Number of space points");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX=",0,"[fNPoints] Array with space point X coordinates");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY=",0,"[fNPoints] Array with space point Y coordinates");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZ=",0,"[fNPoints] Array with space point Z coordinates");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCharge=",0,"[fNPoints] Array with clusters charge");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDriftTime=",0,"[fNPoints] Array with drift times");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeRatio=",0,"[fNPoints] Array with charge ratio");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fClusterType=",0,"[fNPoints] Array with cluster type");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsExtra=",0,"[fNPoints] Array with extra flags");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSize=",0,"Size of array with cov matrices = 6*N of points");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCov=",0,"[fSize] Array with space point coordinates cov matrix");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fVolumeID=",0,"[fNPoints] Array of space point volume IDs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTrackPoint */
static void G__setup_memvarAliTrackPoint(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTrackPoint));
   { AliTrackPoint *p; p=(AliTrackPoint*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX=",0,"X coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY=",0,"Y coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZ=",0,"Z coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCharge=",0,"Cluster charge in arbitrary units");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDriftTime=",0,"Drift time in SDD (in ns)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeRatio=",0,"Charge ratio in SSD ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fClusterType=",0,"Cluster Type (encoded info on size and shape)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCov[6]=",0,"Cov matrix");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsExtra=",0,"attached by tracker but not used in fit");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fVolumeID=",0,"Volume ID");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliKalmanTrack */
static void G__setup_memvarAliKalmanTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKalmanTrack));
   { AliKalmanTrack *p; p=(AliKalmanTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fFakeRatio=",0,"fake ratio");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fChi2=",0,"total chi2 value for this track");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fMass=",0,"mass hypothesis");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLab=",0,"track label");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fN=",0,"number of associated clusters");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStartTimeIntegral=",0,"indicator wether integrate time");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fIntegratedTime[9]=",0,"integrated time");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fIntegratedLength=",0,"integrated length");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDfriendTrack */
static void G__setup_memvarAliESDfriendTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack));
   { AliESDfriendTrack *p; p=(AliESDfriendTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMaxITScluster=%lldLL",(long long)AliESDfriendTrack::kMaxITScluster).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMaxTPCcluster=%lldLL",(long long)AliESDfriendTrack::kMaxTPCcluster).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMaxTRDcluster=%lldLL",(long long)AliESDfriendTrack::kMaxTRDcluster).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"f1P=",0,"1/P (1/(GeV/c))");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fnMaxITScluster=",0,"Max number of ITS clusters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fnMaxTPCcluster=",0,"Max number of TPC clusters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fnMaxTRDcluster=",0,"Max number of TRD clusters");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fITSindex=",0,"[fnMaxITScluster] indices of the ITS clusters ");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTPCindex=",0,"[fnMaxTPCcluster] indices of the TPC clusters");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTRDindex=",0,"[fnMaxTRDcluster] indices of the TRD clusters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliTrackPointArray),-1,-1,2,"fPoints=",0,"Array of track space points in the global frame");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,2,"fCalibContainer=",0,"Array of objects for calibration    ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliKalmanTrack),-1,-1,2,"fITStrack=",0,"! pointer to the ITS track (debug purposes) ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliKalmanTrack),-1,-1,2,"fTRDtrack=",0,"! pointer to the TRD track (debug purposes) ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),-1,-1,2,"fTPCOut=",0,"tpc outer parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),-1,-1,2,"fITSOut=",0,"its outer parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),-1,-1,2,"fTRDIn=",0,"trd inner parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDtrack */
static void G__setup_memvarAliESDtrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack));
   { AliESDtrack *p; p=(AliESDtrack*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDtrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kSkipFriend=%lldLL",(long long)AliESDtrack::kSkipFriend).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDtrackcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNITSchi2Std=%lldLL",(long long)AliESDtrack::kNITSchi2Std).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),-1,-1,2,"fCp=",0,"Track parameters constrained to the primary vertex");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),-1,-1,2,"fIp=",0,"Track parameters estimated at the inner wall of TPC");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),-1,-1,2,"fTPCInner=",0,"Track parameters estimated at the inner wall of TPC using the TPC stand-alone ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),-1,-1,2,"fOp=",0,"Track parameters estimated at the point of maximal radial coordinate reached during the tracking");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),-1,-1,2,"fHMPIDp=",0,"Track parameters at HMPID");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack),-1,-1,2,"fFriendTrack=",0,"! All the complementary information");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TBits),-1,-1,2,"fTPCFitMap=",0,"Map of clusters, one bit per padrow; 1 if has a cluster on given padrow which is used in the fit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TBits),-1,-1,2,"fTPCClusterMap=",0,"Map of clusters, one bit per padrow; 1 if has a cluster on given padrow");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TBits),-1,-1,2,"fTPCSharedMap=",0,"Map of clusters, one bit per padrow; 1 if has a shared cluster on given padrow");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fFrTrackID=",0,"id of friend in the ESDfriend");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,2,"fFlags=",0,"Reconstruction status flags ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fID=",0,"Unique ID of the track");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLabel=",0,"Track label");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fITSLabel=",0,"label according ITS");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fITSModule[12]=",0,"modules crossed by the track in the ITS ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTPCLabel=",0,"label according TPC");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTRDLabel=",0,"label according TRD");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTOFLabel=",0,"! TOF label ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTOFCalChannel=",0,"! Channel Index of the TOF Signal ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTOFindex=",0,"index of the assigned TOF cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fHMPIDqn=",0,"1000000*number of photon clusters + QDC");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fHMPIDcluIdx=",0,"1000000*chamber id + cluster idx of the assigned MIP cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCaloIndex=",0,"index of associated EMCAL/PHOS cluster (AliESDCaloCluster)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fKinkIndexes[3]=",0,"array of indexes of posible kink candidates ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fV0Indexes[3]=",0,"array of indexes of posible kink candidates ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fR=",0,"! [0.,0.,8] combined \"detector response probability\"");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fITSr=",0,"! [0.,0.,8] \"detector response probabilities\" (for the PID)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTPCr=",0,"! [0.,0.,8] \"detector response probabilities\" (for the PID)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTRDr=",0,"! [0.,0.,8] \"detector response probabilities\" (for the PID)  ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTOFr=",0,"! [0.,0.,8] \"detector response probabilities\" (for the PID)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fHMPIDr=",0,"! [0.,0.,8] \"detector response probabilities\" (for the PID)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fHMPIDtrkTheta=",0,"[-2*pi,2*pi,16] theta of the track extrapolated to the HMPID, LORS");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fHMPIDtrkPhi=",0,"[-2*pi,2*pi,16] phi of the track extrapolated to the HMPID, LORS");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fHMPIDsignal=",0,"HMPID PID signal (Theta ckov, rad)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTrackTime=",0,"! TOFs estimated by the tracking");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTrackLength=",0,"! Track length");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fdTPC=",0,"TPC-only impact parameter in XY plane");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fzTPC=",0,"TPC-only impact parameter in Z");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCddTPC=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCdzTPC=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCzzTPC=",0,"Covariance matrix of the TPC-only impact parameters ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCchi2TPC=",0,"[0.,0.,8] TPC-only chi2 at the primary vertex");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fD=",0,"Impact parameter in XY plane");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fZ=",0,"Impact parameter in Z");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCdd=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCdz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCzz=",0,"Covariance matrix of the impact parameters ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCchi2=",0,"[0.,0.,8] chi2 at the primary vertex");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fITSchi2Std[3]=",0,"[0.,0.,8] standard chi2 in the ITS (with standard errors)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fITSchi2=",0,"[0.,0.,8] chi2 in the ITS");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTPCchi2=",0,"[0.,0.,8] chi2 in the TPC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTPCchi2Iter1=",0,"[0.,0.,8] chi2 in the TPC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTRDchi2=",0,"[0.,0.,8] chi2 in the TRD");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTOFchi2=",0,"[0.,0.,8] chi2 in the TOF");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fHMPIDchi2=",0,"[0.,0.,8] chi2 in the HMPID");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fGlobalChi2=",0,"[0.,0.,8] chi2 of the global track");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fITSsignal=",0,"[0.,0.,10] detector's PID signal");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fITSsignalTuned=",0,"! [0.,0.,10] detector's PID signal");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fITSdEdxSamples[4]=",0,"[0.,0.,10] ITS dE/dx samples");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTPCsignal=",0,"[0.,0.,10] detector's PID signal");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTPCsignalTuned=",0,"! [0.,0.,10] detector's PID signal tuned on data when using MC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTPCsignalS=",0,"[0.,0.,10] RMS of dEdx measurement");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliTPCdEdxInfo),-1,-1,2,"fTPCdEdxInfo=",0,"object containing dE/dx information for different pad regions");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTPCPoints[4]=",0,"[0.,0.,10] TPC points -first, max. dens, last and max density");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTRDsignal=",0,"detector's PID signal");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTRDQuality=",0,"trd quality factor for TOF");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTRDBudget=",0,"trd material budget");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTOFsignal=",0,"! detector's PID signal [ps]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTOFsignalTuned=",0,"! detector's PID signal tuned on data when using MC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTOFsignalToT=",0,"! detector's ToT signal [ns]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTOFsignalRaw=",0,"! detector's uncorrected time signal [ps]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTOFsignalDz=",0,"! local z  of track's impact on the TOF pad [cm]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTOFsignalDx=",0,"! local x  of track's impact on the TOF pad [cm]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTOFInfo[10]=",0,"! TOF informations");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fTOFdeltaBC=",0,"! detector's Delta Bunch Crossing correction");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fTOFl0l1=",0,"! detector's L0L1 latency correction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCaloDx=",0,"[0.,0.,8] distance to calorimeter cluster in calo plain (phi direction)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCaloDz=",0,"[0.,0.,8] distance to calorimeter cluster in calo plain (z direction)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fHMPIDtrkX=",0,"x of the track impact, LORS ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fHMPIDtrkY=",0,"y of the track impact, LORS ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fHMPIDmipX=",0,"x of the MIP in LORS");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fHMPIDmipY=",0,"y of the MIP in LORS");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fTPCncls=",0,"number of clusters assigned in the TPC");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fTPCnclsF=",0,"number of findable clusters in the TPC");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fTPCsignalN=",0,"number of points used for dEdx");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fTPCnclsIter1=",0,"number of clusters assigned in the TPC - iteration 1");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fTPCnclsFIter1=",0,"number of findable clusters in the TPC - iteration 1");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fITSncls=",0,"number of clusters assigned in the ITS");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fITSClusterMap=",0,"map of clusters, one bit per a layer");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fITSSharedMap=",0,"map of shared clusters, one bit per a layer");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fTRDncls=",0,"number of clusters assigned in the TRD");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fTRDncls0=",0,"number of clusters assigned in the TRD before first material cross");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fTRDntracklets=",0,"number of TRD tracklets used for tracking/PID");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fTRDNchamberdEdx=",0,"number of chambers used to calculated the TRD truncated mean");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fTRDNclusterdEdx=",0,"number of clusters used to calculated the TRD truncated mean");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTRDnSlices=",0,"number of slices used for PID in the TRD");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTRDslices=",0,"[fTRDnSlices] ");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fTRDTimBin[6]=",0,"Time bin of Max cluster from all six planes");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fVertexID=",0,"ID of the primary vertex this track belongs to");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fPIDForTracking=",0,"mass used for tracking");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fPIDForTrackingIn=",0,"mass used for tracking set during TPCin ");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent),-1,-1,2,"fESDEvent=",0,"!Pointer back to event to which the track belongs");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fCacheNCrossedRows=",0,"! Cache for the number of crossed rows");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fCacheChi2TPCConstrainedVsGlobal=",0,"! Cache for the chi2 of constrained TPC vs global track");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex),-1,-1,2,"fCacheChi2TPCConstrainedVsGlobalVertex=",0,"! Vertex for which the cache is valid");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliDetectorPID),-1,-1,2,"fDetectorPID=",0,"! transient object to cache PID information");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTrackPhiOnEMCal=",0,"phi of track after being propagated to the EMCal surface (default r = 440 cm)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTrackEtaOnEMCal=",0,"eta of track after being propagated to the EMCal surface (default r = 440 cm)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTrackPtOnEMCal=",0,"pt of track after being propagated to the EMCal surface (default r = 440 cm)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNtofClusters=",0,"number of matchable TOF clusters ");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTOFcluster=",0,"[fNtofClusters]");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-2,4,"fgkOnlineMode=",0,"! indicate the online mode to skip some of the functionality");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDTrdTrack */
static void G__setup_memvarAliESDTrdTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrack));
   { AliESDTrdTrack *p; p=(AliESDTrdTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSector=",0,"sector in which the track was found");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fStack=",0,"stack in which the track was found");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fA=",0,"transverse offset from nominal primary vertex");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fB=",0,"slope in transverse plane");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fC=",0,"slope in r-z plane");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fY=",0,"y position of the track");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fPID=",0,"electron PID for this track");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fLayerMask=",0,"mask of contributing tracklets");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fTrackletIndex[6]=",0,"[fgkNlayers] index to tracklets");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fFlags=",0,"flags (high-pt, electron, positron)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fFlagsTiming=",0,"timing flags (track in-time, ...)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fReserved=",0,"reserved for future use");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TRef),-1,-1,2,"fTrackletRefs[6]=",0,"references to contributing tracklets");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TRef),-1,-1,2,"fTrackMatch=",0,"reference to matched global track");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLabel=",0,"Track label");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVertex */
static void G__setup_memvarAliVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliVertex));
   { AliVertex *p; p=(AliVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPosition[3]=",0,"vertex position");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fSigma=",0,"track dispersion around found vertex");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNContributors=",0,"# of tracklets/tracks used for the estimate ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNIndices=",0,"# of indices ");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fIndices=",0,"[fNIndices] indices of tracks used for vertex");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDkink */
static void G__setup_memvarAliESDkink(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDkink));
   { AliESDkink *p; p=(AliESDkink*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),-1,-1,2,"fParamDaughter=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam),-1,-1,2,"fParamMother=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fDist1=",0,"info about closest distance according closest MC - linear DCA");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fDist2=",0,"info about closest distance parabolic DCA");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPdr[3]=",0,"momentum at vertex daughter  - according approx at DCA");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fXr[3]=",0,"rec. position according helix");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPm[3]=",0,"momentum at the vertex mother");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fRr=",0,"rec position of the vertex ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fShapeFactor=",0,"tpc clusters shape factor");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTPCdensity[2][2]=",0,"[0,1,16]tpc cluster density before and after kink");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fAngle[3]=",0,"[-2*pi,2*pi,16]three angles");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLab[2]=",0,"MC label of the partecle");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fIndex[2]=",0,"reconstructed labels of the tracks");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fID=",0,"kink ID");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fRow0=",0,"critical pad row number");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fMultiple[2]=",0,"how many times the track's were used");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fTPCncls[2]=",0,"number of clusters for mother particle");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fStatus[12]=",0,"status of kink - first 4 mother (ITS,TPC,TRD,TOF)  other daughter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDHLTtrack */
static void G__setup_memvarAliESDHLTtrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTtrack));
   { AliESDHLTtrack *p; p=(AliESDHLTtrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fNHits=",0,"Number of assigned clusters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMCid=",0,"Assigned id from MC data.");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fWeight=",0,"Weight associated to Hough Transform");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFromMainVertex=",0,"true if tracks origin is the main vertex, otherwise false");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRowRange[2]=",0,"Subsector where this track was build");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fSector=",0,"Sector # where  this track was build");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fFirstPoint[3]=",0,"First track point in TPC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fLastPoint[3]=",0,"Last track point in TPC");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fQ=",0,"track charge");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTanl=",0,"tan of dipangle");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPsi=",0,"azimuthal angle of the momentum ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPt=",0,"transverse momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPterr=",0,"Pt error");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPsierr=",0,"Psi error");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTanlerr=",0,"Error of Tangent lambda");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBinX=",0,"X bin?");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBinY=",0,"Y bin?");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSizeX=",0,"X size?");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSizeY=",0,"Y size?");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPID=",0,"so far filled only for conformal mapper tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliFMDMap */
static void G__setup_memvarAliFMDMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliFMDMap));
   { AliFMDMap *p; p=(AliFMDMap*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMaxDetectors=%lldLL",(long long)AliFMDMap::kMaxDetectors).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMaxRings=%lldLL",(long long)AliFMDMap::kMaxRings).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMaxSectors=%lldLL",(long long)AliFMDMap::kMaxSectors).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMaxStrips=%lldLL",(long long)AliFMDMap::kMaxStrips).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kInner=%lldLL",(long long)AliFMDMap::kInner).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kOuter=%lldLL",(long long)AliFMDMap::kOuter).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNStripOuter=%lldLL",(long long)AliFMDMap::kNStripOuter).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNStripInner=%lldLL",(long long)AliFMDMap::kNStripInner).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNSectorInner=%lldLL",(long long)AliFMDMap::kNSectorInner).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNSectorOuter=%lldLL",(long long)AliFMDMap::kNSectorOuter).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kBaseInner=%lldLL",(long long)AliFMDMap::kBaseInner).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kBaseOuter=%lldLL",(long long)AliFMDMap::kBaseOuter).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kFMD1Base=%lldLL",(long long)AliFMDMap::kFMD1Base).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kFMD2Base=%lldLL",(long long)AliFMDMap::kFMD2Base).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kFMD3Base=%lldLL",(long long)AliFMDMap::kFMD3Base).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliFMDMapcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNeedUShort=%lldLL",(long long)AliFMDMap::kNeedUShort).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fMaxDetectors=",0,"Maximum # of detectors");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fMaxRings=",0,"Maximum # of rings");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fMaxSectors=",0,"Maximum # of sectors");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fMaxStrips=",0,"Maximum # of strips");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliFMDFloatMap */
static void G__setup_memvarAliFMDFloatMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap));
   { AliFMDFloatMap *p; p=(AliFMDFloatMap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTotal=",0,"Total number of entries");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fData=",0,"[fTotal]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDFMD */
static void G__setup_memvarAliESDFMD(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDFMD));
   { AliESDFMD *p; p=(AliESDFMD*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDFMDcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNeedNoiseFix=%lldLL",(long long)AliESDFMD::kNeedNoiseFix).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDFMDcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kInvalidMult=%lldLL",(long long)AliESDFMD::kInvalidMult).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDFMDcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kInvalidEta=%lldLL",(long long)AliESDFMD::kInvalidEta).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap),-1,-1,2,"fMultiplicity=",0,"Psuedo multplicity per strip");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap),-1,-1,2,"fEta=",0,"Psuedo-rapidity per strip");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fNoiseFactor=",0,"Factor used for noise suppresion");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fAngleCorrected=",0,"Whether we've done angle correction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDVZERO */
static void G__setup_memvarAliESDVZERO(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO));
   { AliESDVZERO *p; p=(AliESDVZERO*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fBBtriggerV0A=",0,"bit mask for Beam-Beam trigger in V0A");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fBGtriggerV0A=",0,"bit mask for Beam-Gas trigger in V0A");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fBBtriggerV0C=",0,"bit mask for Beam-Beam trigger in V0C");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fBGtriggerV0C=",0,"bit mask for Beam-Gas trigger in V0C");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMultiplicity[64]=",0,"multiplicity for each channel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAdc[64]=",0,"adc for each channel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTime[64]=",0,"time for each channel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fWidth[64]=",0,"time width for each channel");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fBBFlag[64]=",0,"BB Flags from Online V0 Electronics");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fBGFlag[64]=",0,"BG Flags from Online V0 Electronics");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fV0ATime=",0,"Average time in V0A");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fV0CTime=",0,"Average time in V0C");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fV0ATimeError=",0,"Error in the average time in V0A");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fV0CTimeError=",0,"Error in the average time in V0C");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliVVZEROcLcLDecision),-1,-1,2,"fV0ADecision=",0,"V0A final decision based on average time of channels");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliVVZEROcLcLDecision),-1,-1,2,"fV0CDecision=",0,"V0C final decision based on average time of channels");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fTriggerChargeA=",0,"Sum of the trigger (clock=10) charge on A side");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fTriggerChargeC=",0,"Sum of the trigger (clock=10) charge on C side");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fTriggerBits=",0,"V0 trigger bits as defined in the firmware");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsBB[64][21]=",0,"'Beam-Beam' flag for all channels and 21 clocks");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsBG[64][21]=",0,"'Beam-Gas' flag for all channels and 21 clocks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliMultiplicity */
static void G__setup_memvarAliMultiplicity(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity));
   { AliMultiplicity *p; p=(AliMultiplicity*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNtracks=",0,"Number of tracklets");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNsingle=",0,"Number of clusters on SPD layer 1 and 2 (if storage of spd2 singles requested), not associated with a tracklet on otherSPD ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNsingleSPD2=",0,"Number of clusters on SPD layer 2 not associated (if stored)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDPhiWindow2=",0,"sigma^2 in dphi used in reco");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDThetaWindow2=",0,"sigma^2 in dtheta used in reco");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDPhiShift=",0,"bending shift used");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fNStdDev=",0,"number of standard deviations kept");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLabels=",0,"[fNtracks] array with labels of cluster in L1 used for tracklet");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLabelsL2=",0,"[fNtracks] array with labels of cluster in L2 used for tracklet");
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fUsedClusS=",0,"[fNsingle] id+1 of the tracks using cluster, coded as (TPC/ITS+ITS_SA)+(ITS_SA_PURE<<16) !!! Outphased for multiple refs");
   G__memvar_setup((void*)0,77,0,0,-1,G__defined_typename("ULong64_t"),-1,2,"fUsedClusT=",0,"[fNtracks] id+1 of the tracks using clusters, coded as (TPC/ITS+ITS_SA)+(ITS_SA_PURE<<16) for SPD1 and SPD2 in low and high parts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliRefArray),-1,-1,2,"fTCl2Tracks[2][2]=",0,"container with multiple tracklet_cluster->track references");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliRefArray),-1,-1,2,"fSCl2Tracks[2]=",0,"container with multiple single_cluster->track references");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fTh=",0,"[fNtracks] array with theta values");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPhi=",0,"[fNtracks] array with phi values");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fDeltTh=",0,"[fNtracks] array with delta theta values");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fDeltPhi=",0,"[fNtracks] array with delta phi values");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fThsingle=",0,"[fNsingle] array with theta values of L1 clusters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fPhisingle=",0,"[fNsingle] array with phi values of L1 clusters");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLabelssingle=",0,"[fNsingle] array with labels of clusters in L1 not used for tracklets ");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fFiredChips[2]=",0,"Number of fired chips in the two SPD layers");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fITSClusters[6]=",0,"Number of ITS cluster per layer");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TBits),-1,-1,2,"fFastOrFiredChips=",0,"Map of FastOr fired chips");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TBits),-1,-1,2,"fClusterFiredChips=",0,"Map of fired chips (= at least one cluster)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNtracksOnline=",0,"!Number of SPD tracklets set on the fly in online processing (HLT)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliRawDataErrorLog */
static void G__setup_memvarAliRawDataErrorLog(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLog));
   { AliRawDataErrorLog *p; p=(AliRawDataErrorLog*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLogcLcLERawDataErrorLevel),-1,-2,1,G__FastAllocString(2048).Format("kMinor=%lldLL",(long long)AliRawDataErrorLog::kMinor).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLogcLcLERawDataErrorLevel),-1,-2,1,G__FastAllocString(2048).Format("kMajor=%lldLL",(long long)AliRawDataErrorLog::kMajor).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLogcLcLERawDataErrorLevel),-1,-2,1,G__FastAllocString(2048).Format("kFatal=%lldLL",(long long)AliRawDataErrorLog::kFatal).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventNumber=",0,"Event number as it appears in the input raw-data file");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDdlID=",0,"ID of the DLL in which the error occured");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLogcLcLERawDataErrorLevel),-1,-1,4,"fErrorLevel=",0,"Level of the raw data error");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fErrorCode=",0,"Code of the raw data error (detector-specific)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCount=",0,"Counter of identical errors (occurances)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDfriend */
static void G__setup_memvarAliESDfriend(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend));
   { AliESDfriend *p; p=(AliESDfriend*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fESDIndicesStored=",0,"Flag new format of sparse friends");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fTracks=",0,"ESD friend tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDVZEROfriend),-1,-1,2,"fESDVZEROfriend=",0,"VZERO object containing complete raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDTZEROfriend),-1,-1,2,"fESDTZEROfriend=",0,"TZERO calibration object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDADfriend),-1,-1,2,"fESDADfriend=",0,"AD object containing complete raw data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNclustersTPC[72]=",0,"cluster occupancy per sector per sector");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNclustersTPCused[72]=",0,"number of clusters used in tracking per sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESD */
static void G__setup_memvarAliESD(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESD));
   { AliESD *p; p=(AliESD*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEventNumberInFile=",0,"running Event count in the file");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fBunchCrossNumber=",0,"Bunch Crossing Number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fOrbitNumber=",0,"Orbit Number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fPeriodNumber=",0,"Period Number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRunNumber=",0,"Run Number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fTimeStamp=",0,"Time stamp");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fEventType=",0,"Type of Event");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,2,"fTriggerMask=",0,"Trigger Type (mask)");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,2,"fTriggerMaskNext50=",0,"Trigger Type (mask)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fTriggerCluster=",0,"Trigger cluster (mask)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRecoVersion=",0,"Version of reconstruction ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMagneticField=",0,"Solenoid Magnetic Field in kG : for compatibility with AliMagF");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZDCN1Energy=",0,"reconstructed energy in the neutron ZDC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZDCP1Energy=",0,"reconstructed energy in the proton ZDC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZDCN2Energy=",0,"reconstructed energy in the neutron ZDC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZDCP2Energy=",0,"reconstructed energy in the proton ZDC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZDCEMEnergy=",0,"reconstructed energy in the electromagnetic ZDC");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fZDCParticipants=",0,"number of participants estimated by the ZDC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fT0zVertex=",0,"vertex z position estimated by the T0");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex),-1,-1,2,"fSPDVertex=",0,"Primary vertex estimated by the SPD");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex),-1,-1,2,"fPrimaryVertex=",0,"Primary vertex estimated using ESD tracks");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDiamondXY[2]=",0,"Interaction diamond (x,y) in RUN");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDiamondCovXY[3]=",0,"Interaction diamond covariance (x,y) in RUN");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity),-1,-1,2,"fSPDMult=",0,"SPD tracklet multiplicity");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fT0clock=",0,"backward compatibility");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fT0TOF[3]=",0,"interaction time in ns ( A&C, A, C)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fT0timeStart=",0,"interaction time estimated by the T0");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fT0trig=",0,"T0 trigger signals");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fT0time[24]=",0,"best TOF on each T0 PMT");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fT0amplitude[24]=",0,"number of particles(MIPs) on each T0 PMT");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fTracks=",0,"ESD tracks");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fHLTConfMapTracks=",0,"HLT ESD tracks from Conformal Mapper method");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fHLTHoughTracks=",0,"HLT ESD tracks from Hough Transform method");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fMuonTracks=",0,"MUON ESD tracks");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fPmdTracks=",0,"PMD ESD tracks");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fTrdTracks=",0,"TRD ESD tracks (triggered)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fV0s=",0,"V0 vertices");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fCascades=",0,"Cascade vertices");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fKinks=",0,"Kinks");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fCaloClusters=",0,"Calorimeter clusters for PHOS/EMCAL");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEMCALClusters=",0,"Number of EMCAL clusters (subset of caloclusters)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fFirstEMCALCluster=",0,"First EMCAL cluster in the fCaloClusters list ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TArrayF),-1,-1,2,"fEMCALTriggerPosition=",0,"/(x,y,z of 2x2 and x,y,z of nxn) not position of centroid but of patch corner");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TArrayF),-1,-1,2,"fEMCALTriggerAmplitudes=",0,"(2x2 max ampl, 2x2 amp out of patch,  nxn max ampl, nxn amp out of patch)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPHOSClusters=",0,"Number of PHOS clusters (subset of caloclusters)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fFirstPHOSCluster=",0,"First PHOS cluster in the fCaloClusters list ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TArrayF),-1,-1,2,"fPHOSTriggerPosition=",0,"(x,y,z of 2x2 and x,y,z of nxn), not position of centroid but of patch corner");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TArrayF),-1,-1,2,"fPHOSTriggerAmplitudes=",0,"(2x2 max ampl, 2x2 amp out of patch,  nxn max ampl, nxn amp out of patch)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDFMD),-1,-1,2,"fESDFMD=",0,"FMD object containing rough multiplicity");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO),-1,-1,2,"fESDVZERO=",0,"VZERO object containing rough multiplicity");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDACORDE),-1,-1,2,"fESDACORDE=",0,"ACORDE ESD object containing bit pattern");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDAD),-1,-1,2,"fESDAD=",0,"AD ESD object containing bit pattern");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fErrorLogs=",0,"Raw-data reading error messages");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDRun */
static void G__setup_memvarAliESDRun(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDRun));
   { AliESDRun *p; p=(AliESDRun*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDRuncLcLStatusBits),-1,-2,1,G__FastAllocString(2048).Format("kBInfoStored=%lldLL",(long long)AliESDRun::kBInfoStored).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDRuncLcLStatusBits),-1,-2,1,G__FastAllocString(2048).Format("kUniformBMap=%lldLL",(long long)AliESDRun::kUniformBMap).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDRuncLcLStatusBits),-1,-2,1,G__FastAllocString(2048).Format("kConvSqrtSHalfGeV=%lldLL",(long long)AliESDRun::kConvSqrtSHalfGeV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDRuncLcLStatusBits),-1,-2,1,G__FastAllocString(2048).Format("kESDDownscaledOnline=%lldLL",(long long)AliESDRun::kESDDownscaledOnline).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDRuncLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNTriggerClasses=%lldLL",(long long)AliESDRun::kNTriggerClasses).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDRuncLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNPHOSMatrix=%lldLL",(long long)AliESDRun::kNPHOSMatrix).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDRuncLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNEMCALMatrix=%lldLL",(long long)AliESDRun::kNEMCALMatrix).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDRuncLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kT0spreadSize=%lldLL",(long long)AliESDRun::kT0spreadSize).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCurrentL3=",0,"signed current in the L3     (LHC convention: +current -> +Bz)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCurrentDip=",0,"signed current in the Dipole (LHC convention: +current -> -Bx)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBeamEnergy=",0,"beamEnergy entry from GRP");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fMagneticField=",0,"Solenoid Magnetic Field in kG : for compatibility with AliMagF");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fMeanBeamInt[2][2]=",0,"mean intensity of interacting and non-intercting bunches per beam");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fDiamondXY[2]=",0,"Interaction diamond (x,y) in RUN");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fDiamondCovXY[3]=",0,"Interaction diamond covariance (x,y) in RUN");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fDiamondZ=",0,"Interaction diamond (z) in RUN");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fDiamondSig2Z=",0,"Interaction diamond sigma^2 (z) in RUN");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPeriodNumber=",0,"PeriodNumber");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRunNumber=",0,"Run Number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRecoVersion=",0,"Version of reconstruction");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBeamParticle[2]=",0,"A*1000+Z for each beam particle");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TString),-1,-1,4,"fBeamType=",0,"beam type from GRP");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,4,"fTriggerClasses=",0,"array of TNamed containing the names of the active trigger classes");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fDetInDAQ=",0,"Detector mask for detectors in datataking");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fDetInReco=",0,"Detector mask for detectors in reconstruction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TGeoHMatrix),-1,-1,4,"fPHOSMatrix[5]=",0,"PHOS module position and orientation matrices");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TGeoHMatrix),-1,-1,4,"fEMCALMatrix[22]=",0,"EMCAL supermodule position and orientation matrices");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fT0spread[4]=",0,"spread of time distributions on T0A, T0C, (T0A+T0C)/2, (T0A-T0C)/2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCaloTriggerType[15]=",0,"Calorimeter trigger type");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVZEROEqFactors[64]=",0,"V0 channel equalization factors for event-plane reconstruction");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCaloTriggerTypeNew[19]=",0,"Calorimeter trigger type");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliTimeStamp),-1,-1,4,"fCTPStart=",0,"CTP start time stamp, to allow extraction of event trigger time     ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTriggerScalersESD */
static void G__setup_memvarAliTriggerScalersESD(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD));
   { AliTriggerScalersESD *p; p=(AliTriggerScalersESD*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fClassIndex=",0,"number of triggered classes        ");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fLOCB=",0,"L0 triggers before any vetos  (64 bits)");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fLOCA=",0,"L0 triggers after all vetos   (64 bits)");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fL1CB=",0,"L1 triggers before any vetos  (64 bits)");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fL1CA=",0,"L1 triggers after all vetos   (64 bits)");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fL2CB=",0,"L2 triggers before any vetos  (64 bits)");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fL2CA=",0,"L2 triggers after all vetos   (64 bits)");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fLMCB=",0,"L2 triggers before any vetos  (64 bits)");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fLMCA=",0,"L2 triggers after all vetos   (64 bits)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTriggerScalersRecordESD */
static void G__setup_memvarAliTriggerScalersRecordESD(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersRecordESD));
   { AliTriggerScalersRecordESD *p; p=(AliTriggerScalersRecordESD*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliTimeStamp),-1,-1,4,"fTimestamp=",0,"record timestamp");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,4,"fScalers=",0,"Array of scalers (AliTriggerScalersESD) ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fTimeGroup=",0,"Active time group");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTriggerIR */
static void G__setup_memvarAliTriggerIR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerIR));
   { AliTriggerIR *p; p=(AliTriggerIR*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fOrbit=",0,"Orbit number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNWord=",0,"Number of recorded interaction signals");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fInt1=",0,"[fNWord] signals for interaction 1");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fInt2=",0,"[fNWord] signals for interaction 2");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fBC=",0,"[fNWord] bunch-crossing number");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIncomplete=",0,"flag which says if the IR is incomplete or not");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTransErr=",0,"flag which says if there was a transmission error (gap) or not");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNWord2=",0,(char*)NULL);
   G__memvar_setup((void*)0,77,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fIntRun2=",0,"[fNWord2]");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fBC2=",0,"[fNWord2]");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIncomplete2=",0,"flag which says if the IR is incomplete or not");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTransErr2=",0,"flag which says if there was a transmission error (gap) or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDDLflag=",0,"1=DDL1, 2=DDL2, 3=DDL1+DDL2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTriggerConfiguration */
static void G__setup_memvarAliTriggerConfiguration(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfiguration));
   { AliTriggerConfiguration *p; p=(AliTriggerConfiguration*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfigurationcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNMaxInputs=%lldLL",(long long)AliTriggerConfiguration::kNMaxInputs).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfigurationcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNMaxInteractions=%lldLL",(long long)AliTriggerConfiguration::kNMaxInteractions).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfigurationcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNMaxFunctions=%lldLL",(long long)AliTriggerConfiguration::kNMaxFunctions).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfigurationcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNMaxClasses=%lldLL",(long long)AliTriggerConfiguration::kNMaxClasses).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfigurationcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNMaxClusters=%lldLL",(long long)AliTriggerConfiguration::kNMaxClusters).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfigurationcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNMaxPFProtections=%lldLL",(long long)AliTriggerConfiguration::kNMaxPFProtections).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfigurationcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNMaxMasks=%lldLL",(long long)AliTriggerConfiguration::kNMaxMasks).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,4,"fInputs=",0,"Array with active CTP inputs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,4,"fInteractions=",0,"Array with the trigger interactions");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,4,"fFunctions=",0,"Array with the logical functions of the first 4 inputs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,4,"fPFProtections=",0,"Array of Past-Future Protections");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,4,"fMasks=",0,"Array with BC masks");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,4,"fDescriptors=",0,"Array with trigger descriptors");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,4,"fClusters=",0,"Array of Detector Trigger Clusters");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,4,"fClasses=",0,"Array of Trigger Classes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVersion=",0,"Configuration format version");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__G__ESDLN_TString),-1,-2,4,"fgkConfigurationFileName=",0,"! name of default configurations file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDHeader */
static void G__setup_memvarAliESDHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHeader));
   { AliESDHeader *p; p=(AliESDHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDHeadercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNTriggerInputs=%lldLL",(long long)AliESDHeader::kNTriggerInputs).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fTriggerMask=",0,"Trigger Type (mask) 1-50 bits");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fTriggerMaskNext50=",0,"Trigger Type (mask) 51-100 bits");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fOrbitNumber=",0,"Orbit Number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fTimeStamp=",0,"Time stamp");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fEventType=",0,"Type of Event");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fEventSpecie=",0,"Reconstruction event specie (1-default,2-lowM,4-highM,8-cosmic,16-cal)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPeriodNumber=",0,"Period Number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventNumberInFile=",0,"Running Event count in the file");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fBunchCrossNumber=",0,"Bunch Crossing Number");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fTriggerCluster=",0,"Trigger cluster (mask)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fL0TriggerInputs=",0,"L0 Trigger Inputs (mask)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fL1TriggerInputs=",0,"L1 Trigger Inputs (mask)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fL2TriggerInputs=",0,"L2 Trigger Inputs (mask)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersRecordESD),-1,-1,4,"fTriggerScalers=",0,"Trigger counters of triggered classes in event, interpolated to the event time");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersRecordESD),-1,-1,4,"fTriggerScalersDeltaEvent=",0,"Change in the trigger scalers between the two counter readings closest to the event time ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersRecordESD),-1,-1,4,"fTriggerScalersDeltaRun=",0,"Total number of counts in the trigger scalers for the duration of the run");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDHeadercLcLdA),-1,-2,4,"kNMaxIR=3LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerIR),-1,-1,4,"fIRArray[3]=",0,"Array with trigger IRs ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,4,"fTriggerInputsNames=",0,"Array of TNamed of the active trigger inputs (L0,L1 and L2)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfiguration),-1,-1,4,"fCTPConfig=",0,"Trigger configuration for the run");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,4,"fIRBufferArray=",0,"Array with interaction records before and after triggered event");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TBits),-1,-1,4,"fIRInt2InteractionsMap=",0,"map of the Int2 events (normally 0TVX) near the event, that's Int2Id-EventId within -90 +90 BXs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TBits),-1,-1,4,"fIRInt1InteractionsMap=",0,"map of the Int1 events (normally V0A&V0C) near the event, that's Int1Id-EventId within -90 +90 BXs");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fTPCNoiseFilterCounter[3]=",0,"filter counter [0]=sector, [1]-timebin/sector, [2]-padrowsector ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDTZERO */
static void G__setup_memvarAliESDTZERO(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTZERO));
   { AliESDTZERO *p; p=(AliESDTZERO*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fT0clock=",0,"backward compatibility");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fT0TOF[3]=",0,"interaction time in ps with 1st time( A&C, A, C)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fT0zVertex=",0,"vertex z position estimated by the T0, cm");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fT0timeStart=",0,"interaction time estimated by the T0");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fT0trig=",0,"T0 trigger signals");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fT0time[24]=",0,"best TOF on each T0 PMT");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fT0amplitude[24]=",0,"number of particles(MIPs) on each T0 PMT");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeFull[24][5]=",0,"array's TDC no-correction ;centred  around 0, ns");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fOrA[5]=",0,"hardware OrA centred around 0, ns");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fOrC[5]=",0,"hardware OrC centred around 0, ns");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTVDC[5]=",0,"hardware TVDC centred around 0, ns");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPileup=",0,"pile-up flag");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSattelite=",0,"sattelite flag");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMultC=",0,"multiplicity on the C side");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMultA=",0,"multiplicity on the A side");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fBackground=",0,"sattelite flag");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPileupTime[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fT0TOFbest[3]=",0,"interaction time in ps ( A&C, A, C) with best time");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fT0NewAmplitude[24]=",0,"new QTC");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TBits),-1,-1,4,"fPileupBits=",0,"BC number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDFIT */
static void G__setup_memvarAliESDFIT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDFIT));
   { AliESDFIT *p; p=(AliESDFIT*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fT0[3]=",0,"interaction time in ps with 1st time( A&C, A, C)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFITzVertex=",0,"vertex z position estimated by the T0, cm");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFITtime[240]=",0,"best TOF on each T0 PMT");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFITamplitude[240]=",0,"number of particles(MIPs) on each T0 PMT");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fT0best[3]=",0,"interaction time in ps ( A&C, A, C) with best time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDZDC */
static void G__setup_memvarAliESDZDC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDZDC));
   { AliESDZDC *p; p=(AliESDZDC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZDCN1Energy=",0,"reconstructed energy in the neutron ZDC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZDCP1Energy=",0,"reconstructed energy in the proton ZDC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZDCN2Energy=",0,"reconstructed energy in the neutron ZDC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZDCP2Energy=",0,"reconstructed energy in the proton ZDC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZDCEMEnergy=",0,"signal in the electromagnetic ZDCs");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZDCEMEnergy1=",0,"second EM signal,cannot change fZDCEMEnergy to array (not backward compatible)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZN1TowerEnergy[5]=",0,"reco E in 5 ZN1 sectors - high gain chain");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZN2TowerEnergy[5]=",0,"reco E in 5 ZN2 sectors - high gain chain");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZP1TowerEnergy[5]=",0,"reco E in 5 ZP1 sectors - high gain chain");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZP2TowerEnergy[5]=",0,"reco E in 5 ZP2 sectors - high gain chain");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZN1TowerEnergyLR[5]=",0,"reco E in 5 ZN1 sectors - low gain chain");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZN2TowerEnergyLR[5]=",0,"reco E in 5 ZN2 sectors - low gain chain");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZP1TowerEnergyLR[5]=",0,"reco E in 5 ZP1 sectors - low gain chain");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZP2TowerEnergyLR[5]=",0,"reco E in 5 ZP2 sectors - low gain chain");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fZDCParticipants=",0,"number of participants estimated by the ZDC (ONLY in A-A)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fZDCPartSideA=",0,"number of participants estimated by the ZDC (ONLY in A-A)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fZDCPartSideC=",0,"number of participants estimated by the ZDC (ONLY in A-A)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fImpactParameter=",0,"impact parameter estimated by the ZDC (ONLY in A-A)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fImpactParamSideA=",0,"impact parameter estimated by the ZDC (ONLY in A-A)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fImpactParamSideC=",0,"impact parameter estimated by the ZDC (ONLY in A-A)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZNACentrCoord[2]=",0,"Coordinates of the centroid over ZNC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fZNCCentrCoord[2]=",0,"Coordinates of the centroid over ZNA");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fESDQuality=",0,"flags from reconstruction");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fVMEScaler[32]=",0,"counts from VME scaler");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fZDCTDCData[32][4]=",0,"ZDC TDC data");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZDCTDCCorrected[32][4]=",0,"ZDC TDC data in ns corrected 4 phase shift");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fZNCTDChit=",0,"true if ZNC TDC has at least 1 hit");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fZNATDChit=",0,"true if ZNA TDC has at least 1 hit");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fZPCTDChit=",0,"true if ZPC TDC has at least 1 hit");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fZPATDChit=",0,"true if ZPA TDC has at least 1 hit");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fZEM1TDChit=",0,"true if ZEM1 TDC has at least 1 hit");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fZEM2TDChit=",0,"true if ZEM2 TDC has at least 1 hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fZDCTDCChannels[7]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDVZEROfriend */
static void G__setup_memvarAliESDVZEROfriend(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDVZEROfriend));
   { AliESDVZEROfriend *p; p=(AliESDVZEROfriend*)0x1000; if (p) { }
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fBBScalers[64]=",0,"'Beam-Beam' scalers for all channels");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fBGScalers[64]=",0,"'Beam-Gas' scalers for all channels");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fScalers[16]=",0,"Trigger scalers");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fBunchNumbers[10]=",0,"Bunch numbers for the previous 10 MB events");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fChargeMB[64][10]=",0,"ADC counts for all channels for the previous 10 MB events");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsIntMB[64][10]=",0,"'Integrator' flag for all channels for the previous 10 MB events");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsBBMB[64][10]=",0,"'Beam-Beam' flag for all channels for the previous 10 MB events");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsBGMB[64][10]=",0,"'Beam-Gas' for all channels for the previous 10 MB events");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fADC[64][21]=",0,"ADC counts for all channels and all events of interest");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsInt[64][21]=",0,"'Integrator' flag for all channels ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsBB[64][21]=",0,"'Beam-Beam' flag for all channels");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsBG[64][21]=",0,"'Beam-Gas' flag for all channels");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTime[64]=",0,"leading time for all channels - from HPTDC - in nanoseconds");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWidth[64]=",0,"pulse width for all channels - from HPTDC - in nanoseconds");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fTrigger=",0,"VZERO trigger inputs");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fTriggerMask=",0,"VZERO trigger inputs mask");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDTZEROfriend */
static void G__setup_memvarAliESDTZEROfriend(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTZEROfriend));
   { AliESDTZEROfriend *p; p=(AliESDTZEROfriend*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fT0time[24]=",0,"best TOF on each T0 PMT");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fT0ampQTC[24]=",0,"amp in #channels QTC on each T0 PMT");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fT0ampLEDminCFD[24]=",0,"amp in #channels LED-CFD on each T0 PMT");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDTrdTrigger */
static void G__setup_memvarAliESDTrdTrigger(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrigger));
   { AliESDTrdTrigger *p; p=(AliESDTrdTrigger*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"fgkNsectors=18LL",0,"number of sectors");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fFlags[18]=",0,"trigger flags for every sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDMuonCluster */
static void G__setup_memvarAliESDMuonCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonCluster));
   { AliESDMuonCluster *p; p=(AliESDMuonCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fXYZ[3]=",0,"/< cluster position");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fErrXY[2]=",0,"/< transverse position errors");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCharge=",0,"/< cluster charge");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fChi2=",0,"/< cluster chi2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,2,"fPads=",0,"/< Array of pads attached to the cluster -- deprecated");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNPads=",0,"/< number of pads attached to the cluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TArrayI),-1,-1,2,"fPadsId=",0,"/< array of Ids of pads attached to the cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLabel=",0,"/< point to the corresponding MC track");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDMuonPad */
static void G__setup_memvarAliESDMuonPad(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonPad));
   { AliESDMuonPad *p; p=(AliESDMuonPad*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fADC=",0,"/< ADC value");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fCharge=",0,"/< Calibrated charge");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDMuonGlobalTrack */
static void G__setup_memvarAliESDMuonGlobalTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonGlobalTrack));
   { AliESDMuonGlobalTrack *p; p=(AliESDMuonGlobalTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fCharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fMatchTrigger=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fNMFTClusters=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fNWrongMFTClustersMC=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,2,"fMFTClusterPattern=",0,"Tells us which MFT clusters are contained in the track, and which one is a good one (if MC)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPt=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fP=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fEta=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRapidity=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fFirstTrackingPointX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fFirstTrackingPointY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fFirstTrackingPointZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXAtVertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fYAtVertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRAtAbsorberEnd=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,2,"fCovariances=",0,"Covariance matrix of track parameters (see AliMUONTrackParam)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fChi2OverNdf=",0,"chi2/ndf in the MUON+MFT track fit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fChi2MatchTrigger=",0,"chi2 of trigger/track matching");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLabel=",0,"point to the corresponding MC track");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fMuonClusterMap=",0,"Map of clusters in MUON tracking chambers");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fHitsPatternInTrigCh=",0,"Word containing info on the hits left in trigger chambers");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fHitsPatternInTrigChTrk=",0,"Trigger hit map from tracker track extrapolation");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLoCircuit=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsConnected=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fProdVertexXYZ[3]=",0,"vertex of origin");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent),-1,-1,2,"fESDEvent=",0,"! Pointer back to event to which the track belongs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDHLTDecision */
static void G__setup_memvarAliESDHLTDecision(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTDecision));
   { AliESDHLTDecision *p; p=(AliESDHLTDecision*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTDecisioncLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTriggerResult=%lldLL",(long long)AliESDHLTDecision::kTriggerResult).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTDecisioncLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTriggerDecision=%lldLL",(long long)AliESDHLTDecision::kTriggerDecision).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClonesArray),-1,-1,4,"fInputObjectInfo=",0,"TNamed objects");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TArrayI),-1,-1,4,"fTriggerItems=",0,"list of fired trigger items");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TArrayL64),-1,-1,4,"fCounters=",0,"event counters for trigger items");
   G__memvar_setup((void*)0,67,0,1,-1,-1,-2,4,"fgkName=",0,"the name of the HLT decision");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDHandler */
static void G__setup_memvarAliESDHandler(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHandler));
   { AliESDHandler *p; p=(AliESDHandler*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend),-1,-1,4,"fesdf=",0,"! Pointer to the ESD friend");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TTree),-1,-1,4,"fTreeEF=",0,"! Output tree for friends");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TFile),-1,-1,4,"fFileEF=",0,"! Output file for friends");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TString),-1,-1,4,"fFileName=",0,"! Output file name for friends");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsEventSelectedForFriends=",0,"! flag to indicate if the event was selected to have the friends kept ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDpid */
static void G__setup_memvarAliESDpid(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDpid));
   { AliESDpid *p; p=(AliESDpid*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRangeTOFMismatch=",0,"nSigma max for TOF matching with TPC");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliVEventHandler),-1,-1,4,"fEventHandler=",0,"! MC event handler");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDInputHandler */
static void G__setup_memvarAliESDInputHandler(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandler));
   { AliESDInputHandler *p; p=(AliESDInputHandler*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent),-1,-1,2,"fEvent=",0,"! Pointer to the event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend),-1,-1,2,"fFriend=",0,"! Pointer to the esd friend");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDpid),-1,-1,2,"fESDpid=",0,"! Pointer to PID information");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Option_t"),-1,2,"fAnalysisType=",0,"! local, proof, grid");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNEvents=",0,"! Number of events in the current tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent),-1,-1,2,"fHLTEvent=",0,"! Pointer to the HLT Event (if present)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TTree),-1,-1,2,"fHLTTree=",0,"! Pointer to the HLT Event (if present)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fUseHLT=",0,"Flag to access HLT Events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TMap),-1,-1,2,"fTagCutSumm=",0,"! Tag cut summary map");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fUseTags=",0,"Flag to use tags");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TChain),-1,-1,2,"fChainT=",0,"! File with event tags");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TTree),-1,-1,2,"fTreeT=",0,"! Tree of tags");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliRunTag),-1,-1,2,"fRunTag=",0,"! Pointer to the run tag");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliEventTag),-1,-1,2,"fEventTag=",0,"! Current event tag");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fReadFriends=",0,"Flag for friends reading ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TString),-1,-1,2,"fFriendFileName=",0,"Name of the file containing the frien tree (branch)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDInputHandlerRP */
static void G__setup_memvarAliESDInputHandlerRP(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandlerRP));
   { AliESDInputHandlerRP *p; p=(AliESDInputHandlerRP*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandlerRPcLcLdA),-1,-2,4,"kReadFromArchiveBIT=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,4,"fRTrees=",0,"List of RecPoint Trees");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,4,"fRDirs=",0,"List of RecPoint directories");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TList),-1,-1,4,"fRFiles=",0,"List of RecPoint Files");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TList),-1,-1,4,"fDetectors=",0,"List of detector names");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TDirectoryFile),-1,-1,4,"fDirR=",0,"! Directory for RP Tree");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventNumber=",0,"! Current event number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFileNumber=",0,"! Input file number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventsPerFile=",0,"! Number of events per file");
   G__memvar_setup((void*)0,67,0,1,-1,G__defined_typename("Char_t"),-1,4,"fExtension=",0,"! File name extension");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TString),-1,-1,4,"fPathName=",0,"! Input file path");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsArchive=",0,"! True if directory is an archive");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fReadDirectory=",0,"! read also from directory");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDMultITS */
static void G__setup_memvarAliESDMultITS(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMultITS));
   { AliESDMultITS *p; p=(AliESDMultITS*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPhi=",0,"Phi angle");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEta=",0,"Pseudo-rapidity");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVertexerTracks */
static void G__setup_memvarAliVertexerTracks(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTracks));
   { AliVertexerTracks *p; p=(AliVertexerTracks*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTrackscLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTOFBCShift=%lldLL",(long long)AliVertexerTracks::kTOFBCShift).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTrackscLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kStrLinVertexFinderMinDist1=%lldLL",(long long)AliVertexerTracks::kStrLinVertexFinderMinDist1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTrackscLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kStrLinVertexFinderMinDist0=%lldLL",(long long)AliVertexerTracks::kStrLinVertexFinderMinDist0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTrackscLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kHelixVertexFinder=%lldLL",(long long)AliVertexerTracks::kHelixVertexFinder).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTrackscLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kVertexFinder1=%lldLL",(long long)AliVertexerTracks::kVertexFinder1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTrackscLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kVertexFinder0=%lldLL",(long long)AliVertexerTracks::kVertexFinder0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTrackscLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMultiVertexer=%lldLL",(long long)AliVertexerTracks::kMultiVertexer).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTrackscLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kBitUsed=%lldLL",(long long)AliVertexerTracks::kBitUsed).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTrackscLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kBitAccounted=%lldLL",(long long)AliVertexerTracks::kBitAccounted).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex),-1,-1,2,"fVert=",0,"vertex after vertex finder");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex),-1,-1,2,"fCurrentVertex=",0,"ESD vertex after fitter");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fMode=",0,"0 ITS+TPC; 1 TPC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fFieldkG=",0,"z component of field (kGauss) ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fNominalPos[3]=",0,"initial knowledge on vertex position");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fNominalCov[6]=",0,"initial knowledge on vertex position");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,2,"fTrkArraySel=",0,"array with tracks to be processed");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fIdSel=",0,"! IDs of the tracks (AliESDtrack::GetID())");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTrksToSkip=",0,"! track IDs to be skipped for find and fit ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNTrksToSkip=",0,"number of tracks to be skipped ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fConstraint=",0,"true when \"mean vertex\" was set in ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fOnlyFitter=",0,"primary with one fitter shot only");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMinTracks=",0,"minimum number of tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMinClusters=",0,"minimum number of ITS or TPC clusters per track");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDCAcut=",0,"maximum DCA between 2 tracks used for vertex");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDCAcutIter0=",0,"maximum DCA between 2 tracks used for vertex");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fNSigma=",0,"number of sigmas for d0 cut in PrepareTracks()");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxd0z0=",0,"value for sqrt(d0d0+z0z0) cut ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMinDetFitter=",0,"minimum determinant to try to invertex matrix");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxTgl=",0,"maximum tgl of tracks");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fITSrefit=",0,"if kTRUE (default), use only kITSrefit tracks");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fITSpureSA=",0,"if kFALSE (default) skip ITSpureSA tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fFiducialR=",0,"radius of fiducial cylinder for tracks ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fFiducialZ=",0,"length of fiducial cylinder for tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fnSigmaForUi00=",0,"n. sigmas from finder in TrackToPoint");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fAlgo=",0,"option for vertex finding algorythm");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fAlgoIter0=",0,"this is for iteration 0  ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fSelectOnTOFBunchCrossing=",0,"tracks from bunch crossing 0 ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fKeepAlsoUnflaggedTOFBunchCrossing=",0,"also tracks w/o bunch crossing number (-1)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMVWSum=",0,"sum of weights for multivertexer");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMVWE2=",0,"sum of weighted chi2's for  multivertexer");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMVTukey2=",0,"Tukey constant for multivertexer");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMVSigma2=",0,"chi2 current scaling param for multivertexer");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMVSig2Ini=",0,"initial value for fMVSigma2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMVMaxSigma2=",0,"max acceptable value for final fMVSigma2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMVMinSig2Red=",0,"min reduction of fMVSigma2 to exit the loop");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMVMinDst=",0,"min distance between vertices at two iterations to exit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMVScanStep=",0,"step of vertices scan");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMVMaxWghNtr=",0,"min W-distance*Ncontr_min for close vertices");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fMVFinalWBinary=",0,"for the final fit use binary weights");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBCSpacing=",0,"BC Spacing in ns (will define the rounding of BCid)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TObjArray),-1,-1,2,"fMVVertices=",0,"array of found vertices");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDisableBCInCPass0=",0,"do not use BC from TOF in CPass0");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fClusterize=",0,"flag to activate track clusterization into vertices before vertex finder");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDeltaZCutForCluster=",0,"minimum distance in z between tracks to create new cluster");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fnSigmaZCutForCluster=",0,"minimum distacnce in number of sigma along z to create new cluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliESDUtils */
static void G__setup_memvarAliESDUtils(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDUtils));
   {
   }
   G__tag_memvar_reset();
}


   /* AliExpression */
static void G__setup_memvarAliExpression(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliExpression));
   { AliExpression *p; p=(AliExpression*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fVname)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TString),-1,-1,1,"fVname=",0,"Variable name");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExpression),-1,-1,4,"fArg1=",0,"left argument");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliExpression),-1,-1,4,"fArg2=",0,"right argument");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fOperator=",0,"operator");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliVariableExpression */
static void G__setup_memvarAliVariableExpression(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliVariableExpression));
   { AliVariableExpression *p; p=(AliVariableExpression*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliKFParticleBase */
static void G__setup_memvarAliKFParticleBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKFParticleBase));
   { AliKFParticleBase *p; p=(AliKFParticleBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fP[8]=",0,"* Main particle parameters {X,Y,Z,Px,Py,Pz,E,S[=DecayLength/P]}");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fC[36]=",0,"* Low-triangle covariance matrix of fP");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fQ=",0,"* Particle charge ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNDF=",0,"* Number of degrees of freedom ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fChi2=",0,"* Chi^2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSFromDecay=",0,"* Distance from decay vertex to current position");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fAtProductionVertex=",0,"* Flag shows that the particle error along");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fVtxGuess[3]=",0,"* Guess for the position of the decay vertex ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsLinearized=",0,"* Flag shows that the guess is present");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fConstructMethod=",0,"* Determines the method for the particle construction. ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"SumDaughterMass=",0,"* sum of the daughter particles masses");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMassHypo=",0,"* sum of the daughter particles masses");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliKFParticle */
static void G__setup_memvarAliKFParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle));
   { AliKFParticle *p; p=(AliKFParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgBz=",0,"* Bz compoment of the magnetic field");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliKFVertex */
static void G__setup_memvarAliKFVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKFVertex));
   { AliKFVertex *p; p=(AliKFVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsConstrained=",0,"Is the beam constraint set");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliMeanVertex */
static void G__setup_memvarAliMeanVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliMeanVertex));
   { AliMeanVertex *p; p=(AliMeanVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,2,"fErrW[3]=",0,"errors on vertex coordinates (weighted average)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTotTracklets=",0,"total number of tracklets used for M.V.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAverTracklets=",0,"average number of tracklets per event");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSigmaOnAverTrack=",0,"sigma on fAverTracklets");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliSelector */
static void G__setup_memvarAliSelector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliSelector));
   { AliSelector *p; p=(AliSelector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TTree),-1,-1,2,"fTree=",0,"! pointer to the TTree containing the events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliESD),-1,-1,2,"fESD=",0,"! \"ESD\" branch in fChain");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCountFiles=",0,"number of processed file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliStrLine */
static void G__setup_memvarAliStrLine(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliStrLine));
   { AliStrLine *p; p=(AliStrLine*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fP0[3]=",0,"given point");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSigma2P0[3]=",0,"errors on coordinates of given point");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fWMatrix=",0,"[6] weighting matrix");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCd[3]=",0,"direction cosines");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTpar=",0,"! parameter ");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fIdPoint[2]=",0,"Identifiers of RecPoints defining the line");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTrackerBase */
static void G__setup_memvarAliTrackerBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTrackerBase));
   { AliTrackerBase *p; p=(AliTrackerBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fX=",0,"X-coordinate of the primary vertex");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fY=",0,"Y-coordinate of the primary vertex");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZ=",0,"Z-coordinate of the primary vertex");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigmaX=",0,"error of the primary vertex position in X");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigmaY=",0,"error of the primary vertex position in Y");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigmaZ=",0,"error of the primary vertex position in Z");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fTimeStamp=",0,"event time stamp");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRun=",0,"run number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTriggerBCMask */
static void G__setup_memvarAliTriggerBCMask(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask));
   { AliTriggerBCMask *p; p=(AliTriggerBCMask*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMaskcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNBytesPerBCMask=%lldLL",(long long)AliTriggerBCMask::kNBytesPerBCMask).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMaskcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNBits=%lldLL",(long long)AliTriggerBCMask::kNBits).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fBCMask[446]=",0,"Bunch cross mask (3564 bits)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTriggerDescriptor */
static void G__setup_memvarAliTriggerDescriptor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerDescriptor));
   { AliTriggerDescriptor *p; p=(AliTriggerDescriptor*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTriggerCluster */
static void G__setup_memvarAliTriggerCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerCluster));
   { AliTriggerCluster *p; p=(AliTriggerCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fClusterMask=",0,"The trigger cluster mask pattern");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTriggerPFProtection */
static void G__setup_memvarAliTriggerPFProtection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection));
   { AliTriggerPFProtection *p; p=(AliTriggerPFProtection*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TString),-1,-1,4,"fINTa=",0,"Logical function of INT1 and INT2;");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TString),-1,-1,4,"fINTb=",0,"Logical function of INT1 and INT2;");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ESDLN_TString),-1,-1,4,"fINT=",0,"Logical function of INT1 and INT2;");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNa1=",0,"Max number of INTa for the event of type INT");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNa2=",0,"max number of INTa for the event of type NOT INT");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fTa=",0,"mprotection interval for INTa ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNb1=",0,"mmax number of INTb   for  the event of type INT ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNb2=",0,"mmax number of INTb for the event of  type NOT INT");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fTb=",0,"mprotection interval for INTb");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPFdef[12]=",0,"12 words=3 levels * 4; pfcommon,pfblocka,pfblockb,pflut");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fInter=",0,"1=INT1, 2=INT2");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fBCmask=",0,"12 bit BCmask applied to interaction");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fVersion=",0,"7=12 hexa words, 8= human interface");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTriggerClass */
static void G__setup_memvarAliTriggerClass(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass));
   { AliTriggerClass *p; p=(AliTriggerClass*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClasscLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kNMaxMasks=%lldLL",(long long)AliTriggerClass::kNMaxMasks).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fClassMask=",0,"trigger mask (1<< (index-1))");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fClassMaskNext50=",0,"trigger mask (1<< (index-1))");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fIndex=",0,"position of class in mask");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerDescriptor),-1,-1,4,"fDescriptor=",0,"pointer to the descriptor");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerCluster),-1,-1,4,"fCluster=",0,"pointer to the cluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection),-1,-1,4,"fPFProtection=",0,"pointer to the past-future protection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask),-1,-1,4,"fMask[13]=",0,"array of pinters pointer to bunch-crossing mask");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPrescaler=",0,"Downscaling factor");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAllRare=",0,"All or Rare trigger");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStatus=",0,"! true = Condition has been satisfied after Trigger");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fTimeGroup=",0,"time group");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fTimeWindow=",0,"the size of time window for its group");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTriggerInput */
static void G__setup_memvarAliTriggerInput(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput));
   { AliTriggerInput *p; p=(AliTriggerInput*)0x1000; if (p) { }
   G__memvar_setup((void*)(&AliTriggerInput::fgkIsTriggerDetector),103,0,0,-1,G__defined_typename("Bool_t"),-2,1,"fgkIsTriggerDetector[25]=",0,"List of trigger detectors");
   G__memvar_setup((void*)(&AliTriggerInput::fgkCTPDetectorName),67,0,1,-1,-1,-2,1,"fgkCTPDetectorName[25]=",0,(char*)NULL);
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,2,"fMask=",0,"Trigger ID mask (1 bit)");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,2,"fValue=",0,"Trigger Signal (0 = false, > 1 = true = fMask )");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSignature=",0,"8 bit signature (internal CTP inputs can have longer signature)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fLevel=",0,"L0, L1 or L2");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fDetectorId=",0,"Alice-wide detector id, see AliDAQ class for details");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsActive=",0,"Is trigger input active (during simulation)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fIndexCTP=",0,"input position as seen at CTP (fMask=(1<<(fIndexCTP-1)) [1..24]      ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fIndexSwitch=",0,"input position in connector to CTP board (as seen in IR2) [1..48]    ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliTriggerInteraction */
static void G__setup_memvarAliTriggerInteraction(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInteraction));
   { AliTriggerInteraction *p; p=(AliTriggerInteraction*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AliV0vertexer */
static void G__setup_memvarAliV0vertexer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ESDLN_AliV0vertexer));
   { AliV0vertexer *p; p=(AliV0vertexer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgChi2max=",0,"maximal allowed chi2 ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgDNmin=",0,"min allowed impact parameter for the 1st daughter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgDPmin=",0,"min allowed impact parameter for the 2nd daughter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgDCAmax=",0,"maximal allowed DCA between the daughter tracks ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgCPAmin=",0,"minimal allowed cosine of V0's pointing angle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgRmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgRmax=",0,"max & min radii of the fiducial volume");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fChi2max=",0,"maximal allowed chi2 ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDNmin=",0,"min allowed impact parameter for the 1st daughter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDPmin=",0,"min allowed impact parameter for the 2nd daughter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDCAmax=",0,"maximal allowed DCA between the daughter tracks ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCPAmin=",0,"minimal allowed cosine of V0's pointing angle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRmax=",0,"max & min radii of the fiducial volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ESDLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__ESD() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncAliESDEvent(void) {
   /* AliESDEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent));
   G__memfunc_setup("AliESDEvent",1012,G__G__ESD_170_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_170_0_2, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent), -1, 1, 1, 1, 1, 0, "u 'AliESDEvent' - 11 - source", "or make private and use only copy? ", (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetESDRun",817,G__G__ESD_170_0_4, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDRun), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCTPStart",1045,G__G__ESD_170_0_5, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTimeStamp), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCTPStart",1057,G__G__ESD_170_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTimeStamp' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunNumber",1226,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRunNumber",1214,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPeriodNumber",1528,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPeriodNumber",1516,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMagneticField",1592,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - mf", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMagneticField",1580,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDiamond",1000,G__G__ESD_170_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDVertex' - 10 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDiamondX",1076,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDiamondY",1077,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDiamondZ",1078,G__G__ESD_170_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma2DiamondX",1623,G__G__ESD_170_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma2DiamondY",1624,G__G__ESD_170_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma2DiamondZ",1625,G__G__ESD_170_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDiamondCovXY",1461,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "F - 'Float_t' 0 - cov", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTriggerClass",1526,G__G__ESD_170_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPHOSMatrix",1243,G__G__ESD_170_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TGeoHMatrix' - 0 - matrix i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPHOSMatrix",1231,G__G__ESD_170_0_23, 85, G__get_linked_tagnum(&G__G__ESDLN_TGeoHMatrix), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEMCALMatrix",1283,G__G__ESD_170_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TGeoHMatrix' - 0 - matrix i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEMCALMatrix",1271,G__G__ESD_170_0_25, 85, G__get_linked_tagnum(&G__G__ESDLN_TGeoHMatrix), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCaloTriggerType",1825,G__G__ESD_170_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCaloTriggerType",1825,G__G__ESD_170_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - i I - 'Int_t' 10 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCaloTriggerType",1813,G__G__ESD_170_0_28, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCaloTriggerType",1813,G__G__ESD_170_0_29, 73, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVZEROEqFactors",1598,(G__InterfaceMethod) NULL,70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVZEROEqMultiplicity",2165,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCurrentL3",1166,G__G__ESD_170_0_32, 121, -1, -1, 0, 1, 1, 1, 8, "f - 'Float_t' 0 - cur", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrentDip",1324,G__G__ESD_170_0_33, 121, -1, -1, 0, 1, 1, 1, 8, "f - 'Float_t' 0 - cur", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamEnergy",1291,G__G__ESD_170_0_34, 121, -1, -1, 0, 1, 1, 1, 8, "f - 'Float_t' 0 - be", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamType",1091,G__G__ESD_170_0_35, 121, -1, -1, 0, 1, 1, 1, 8, "C - - 10 - bt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamParticle",1493,G__G__ESD_170_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - az i - 'Int_t' 0 - ibeam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUniformBMap",1388,G__G__ESD_170_0_37, 121, -1, -1, 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kTRUE' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBInfoStored",1387,G__G__ESD_170_0_38, 121, -1, -1, 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kTRUE' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetESDDownscaledOnline",2161,G__G__ESD_170_0_39, 105, -1, -1, 0, 1, 1, 1, 8, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentL3",1154,G__G__ESD_170_0_40, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentDip",1312,G__G__ESD_170_0_41, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamEnergy",1279,G__G__ESD_170_0_42, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamType",1079,G__G__ESD_170_0_43, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamParticle",1481,G__G__ESD_170_0_44, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ibeam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamParticleA",1546,G__G__ESD_170_0_45, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ibeam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamParticleZ",1571,G__G__ESD_170_0_46, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ibeam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsUniformBMap",1276,G__G__ESD_170_0_47, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMagneticField",1696,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetT0spread",1071,G__G__ESD_170_0_49, 121, -1, -1, 0, 1, 1, 1, 8, "F - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0spread",1059,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVZEROEqFactors",1610,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "F - 'Float_t' 0 - factors", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHeader",873,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDHeader), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTriggerMask",1420,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTriggerMaskNext50",1936,G__G__ESD_170_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOrbitNumber",1429,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTimeStamp",1216,G__G__ESD_170_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - timeStamp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventType",1232,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - eventType", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEventSpecie",1415,G__G__ESD_170_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - eventSpecie", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventNumberInFile",1998,G__G__ESD_170_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBunchCrossNumber",1935,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTriggerCluster",1762,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerMask",1408,(G__InterfaceMethod) NULL,109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerMaskNext50",1924,(G__InterfaceMethod) NULL,109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFiredTriggerClasses",2220,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsTriggerClassFired",1904,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEventSelected",1511,G__G__ESD_170_0_66, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "C - - 10 - trigExpr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHLTTriggerDecision",2058,G__G__ESD_170_0_67, 85, G__get_linked_tagnum(&G__G__ESDLN_TObject), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHLTTriggerDescription",2400,G__G__ESD_170_0_68, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsHLTTriggerFired",1634,G__G__ESD_170_0_69, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOrbitNumber",1417,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTimeStamp",1204,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTimeStampCTP",1435,G__G__ESD_170_0_72, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStampCTPBCCorr",1974,G__G__ESD_170_0_73, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventType",1220,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventSpecie",1403,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventNumberInFile",1986,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBunchCrossNumber",1923,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerCluster",1750,(G__InterfaceMethod) NULL,98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsDetectorInTriggerCluster",2659,G__G__ESD_170_0_79, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'TString' - 0 - detector U 'AliTriggerConfiguration' - 0 - trigConf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDZDC",733,G__G__ESD_170_0_80, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDZDC), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCData",891,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDZDC), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZDCData",903,G__G__ESD_170_0_82, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDZDC' - 10 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCN1Energy",1258,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCP1Energy",1260,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCN2Energy",1259,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCP2Energy",1261,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCEMEnergy",1277,G__G__ESD_170_0_87, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCParticipants",1779,G__G__ESD_170_0_88, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCentrality",1343,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliCentrality), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventplane",1330,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliEventplane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZDC",525,G__G__ESD_170_0_91, 121, -1, -1, 0, 13, 1, 1, 0, 
"f - 'Float_t' 0 - n1Energy f - 'Float_t' 0 - p1Energy "
"f - 'Float_t' 0 - em1Energy f - 'Float_t' 0 - em2Energy "
"f - 'Float_t' 0 - n2Energy f - 'Float_t' 0 - p2Energy "
"i - 'Int_t' 0 - participants i - 'Int_t' 0 - nPartA "
"i - 'Int_t' 0 - nPartC d - 'Double_t' 0 - b "
"d - 'Double_t' 0 - bA d - 'Double_t' 0 - bC "
"h - 'UInt_t' 0 - recoflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFMDData",893,G__G__ESD_170_0_92, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDFMD' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFMDData",881,G__G__ESD_170_0_93, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDFMD), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDFIT",735,G__G__ESD_170_0_94, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDFIT), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFITData",905,G__G__ESD_170_0_95, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDFIT' - 10 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDTZERO",912,G__G__ESD_170_0_96, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDTZERO), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTZEROData",1082,G__G__ESD_170_0_97, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDTZERO' - 10 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0zVertex",1180,G__G__ESD_170_0_98, 100, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0zVertex",1192,G__G__ESD_170_0_99, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double32_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0",420,G__G__ESD_170_0_100, 100, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0",432,G__G__ESD_170_0_101, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double32_t' 0 - timeStart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0clock",944,G__G__ESD_170_0_102, 100, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0clock",956,G__G__ESD_170_0_103, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double32_t' 0 - timeStart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0TOF",653,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double32_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - icase", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetT0TOF",653,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetT0TOF",665,G__G__ESD_170_0_106, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - icase d - 'Double32_t' 0 - timeStart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0time",851,G__G__ESD_170_0_107, 68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0time",863,G__G__ESD_170_0_108, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double32_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0amplitude",1385,G__G__ESD_170_0_109, 68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0amplitude",1397,G__G__ESD_170_0_110, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double32_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0Trig",826,G__G__ESD_170_0_111, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0Trig",838,G__G__ESD_170_0_112, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - tvdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVZEROData",1072,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVZEROData",1084,G__G__ESD_170_0_114, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDVZERO' - 10 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVZEROData",1072,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliESDVZERO' - 1 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetACORDEData",1096,G__G__ESD_170_0_116, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDACORDE), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetACORDEData",1108,G__G__ESD_170_0_117, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDACORDE' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADData",799,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDAD), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetADData",811,G__G__ESD_170_0_119, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDAD' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetESDfriend",1152,G__G__ESD_170_0_120, 121, -1, -1, 0, 1, 1, 1, 8, "U 'AliESDfriend' - 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDfriend",1140,G__G__ESD_170_0_121, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDfriend' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindFriend",985,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPrimaryVertexTPC",1909,G__G__ESD_170_0_123, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDVertex' - 10 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrimaryVertexTPC",1897,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPrimaryVertexSPD",1909,G__G__ESD_170_0_125, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDVertex' - 10 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrimaryVertexSPD",1897,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVertex",926,G__G__ESD_170_0_127, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrimaryVertexTracks",2294,G__G__ESD_170_0_128, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDVertex' - 10 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrimaryVertexTracks",2282,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrimaryVertexTracksUnconstrained",3367,G__G__ESD_170_0_130, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrimaryVertex",1666,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrimaryVertex",1666,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliESDVertex' - 1 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrimaryVertexTPC",1897,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliESDVertex' - 1 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrimaryVertexSPD",1897,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliESDVertex' - 1 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrimaryVertexTracks",2282,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliESDVertex' - 1 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTOFHeader",1118,G__G__ESD_170_0_136, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTOFHeader' - 10 - tofEventTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFHeader",1106,G__G__ESD_170_0_137, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTOFHeader), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventTimeSpread",1808,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFTimeResolution",1996,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetESDTOFClusters",1594,G__G__ESD_170_0_140, 85, G__get_linked_tagnum(&G__G__ESDLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDTOFHits",1149,G__G__ESD_170_0_141, 85, G__get_linked_tagnum(&G__G__ESDLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDTOFMatches",1450,G__G__ESD_170_0_142, 85, G__get_linked_tagnum(&G__G__ESDLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFcluster",1303,G__G__ESD_170_0_143, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - ntofclusters U 'AliESDTOFCluster' - 0 - cluster "
"I - 'Int_t' 0 '0' mapping", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFcluster",1303,G__G__ESD_170_0_144, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - ntofclusters U 'AliESDTOFCluster' - 2 - cluster "
"I - 'Int_t' 0 '0' mapping", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNTOFclusters",1484,G__G__ESD_170_0_145, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfITSClusters",2179,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - lr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMultiplicity",1589,G__G__ESD_170_0_147, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliMultiplicity' - 10 - mul", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultiplicity",1577,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMultiplicity",1577,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliMultiplicity' - 1 - mult", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EstimateMultiplicity",2117,G__G__ESD_170_0_150, 121, -1, -1, 0, 6, 1, 1, 8, 
"i - 'Int_t' 1 - tracklets i - 'Int_t' 1 - trITSTPC "
"i - 'Int_t' 1 - trITSSApure d - 'Double_t' 0 '1.' eta "
"g - 'Bool_t' 0 'kTRUE' useDCAFlag g - 'Bool_t' 0 'kTRUE' useV0Flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfTPCClusters",2170,G__G__ESD_170_0_151, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfTPCClusters",2182,G__G__ESD_170_0_152, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clean",483,G__G__ESD_170_0_153, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - cleanPars U 'TObjArray' - 0 - track2destroy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveKink",1019,G__G__ESD_170_0_154, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveV0",756,G__G__ESD_170_0_155, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveTrack",1123,G__G__ESD_170_0_156, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPileupVertexSPD",1780,G__G__ESD_170_0_157, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPileupVertexSPD",1757,G__G__ESD_170_0_158, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 0, "U 'AliESDVertex' - 10 - vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPileupVertexTracks",2165,G__G__ESD_170_0_159, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPileupVertexTracks",2142,G__G__ESD_170_0_160, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 0, "U 'AliESDVertex' - 10 - vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPileupVerticesTracks",2364,G__G__ESD_170_0_161, 85, G__get_linked_tagnum(&G__G__ESDLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPileupVerticesSPD",1979,G__G__ESD_170_0_162, 85, G__get_linked_tagnum(&G__G__ESDLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPileupFromSPD",1446,G__G__ESD_170_0_163, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 0 '3' minContributors d - 'Double_t' 0 '0.8' minZdist "
"d - 'Double_t' 0 '3.' nSigmaZdist d - 'Double_t' 0 '2.' nSigmaDiamXY "
"d - 'Double_t' 0 '5.' nSigmaDiamZ", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsPileupFromSPDInMultBins",2443,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConnectTracks",1330,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AreTracksConnected",1811,G__G__ESD_170_0_166, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrack",789,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddTrack",766,G__G__ESD_170_0_168, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'AliESDtrack' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVTrack",875,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NewTrack",799,G__G__ESD_170_0_170, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHLTConfMapTrack",1697,G__G__ESD_170_0_171, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTtrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddHLTConfMapTrack",1674,G__G__ESD_170_0_172, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDHLTtrack' - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHLTHoughTrack",1528,G__G__ESD_170_0_173, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTtrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddHLTHoughTrack",1505,G__G__ESD_170_0_174, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDHLTtrack' - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MoveMuonObjects",1536,G__G__ESD_170_0_175, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMuonTrack",1204,G__G__ESD_170_0_176, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrack), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewMuonTrack",1214,G__G__ESD_170_0_177, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMuonCluster",1441,G__G__ESD_170_0_178, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonCluster), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindMuonCluster",1538,G__G__ESD_170_0_179, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonCluster), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - clusterId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewMuonCluster",1451,G__G__ESD_170_0_180, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMuonPad",980,G__G__ESD_170_0_181, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonPad), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindMuonPad",1077,G__G__ESD_170_0_182, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonPad), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - padId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewMuonPad",990,G__G__ESD_170_0_183, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonPad), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMuonGlobalTrack",1797,G__G__ESD_170_0_184, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonGlobalTrack), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", "AU", (void*) NULL, 0);
   G__memfunc_setup("NewMuonGlobalTrack",1807,G__G__ESD_170_0_185, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonGlobalTrack), -1, 0, 0, 1, 1, 0, "", "AU", (void*) NULL, 0);
   G__memfunc_setup("GetPmdTrack",1078,G__G__ESD_170_0_186, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDPmdTrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPmdTrack",1055,G__G__ESD_170_0_187, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDPmdTrack' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrdTrack",1087,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTrdTrigger",1322,G__G__ESD_170_0_189, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDTrdTrigger' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrdTrigger",1310,G__G__ESD_170_0_190, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrigger), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrdTrack",1064,G__G__ESD_170_0_191, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDTrdTrack' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrdTracklet",1412,G__G__ESD_170_0_192, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTracklet), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrdTracklet",1389,G__G__ESD_170_0_193, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDTrdTracklet' - 10 - trkl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrdTracklet",1389,G__G__ESD_170_0_194, 121, -1, -1, 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - trackletWord s - 'Short_t' 0 - hcid "
"i - 'Int_t' 0 '-1' label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetV0",422,G__G__ESD_170_0_195, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDv0), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetV0",422,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"u 'AliESDv0' - 1 - v0dum i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddV0",399,G__G__ESD_170_0_197, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'AliESDv0' - 10 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCascade",964,G__G__ESD_170_0_198, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDcascade), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCascade",941,G__G__ESD_170_0_199, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDcascade' - 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKink",685,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDkink), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddKink",662,G__G__ESD_170_0_201, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'AliESDkink' - 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCaloCluster",1409,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCluster), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddCaloCluster",1386,G__G__ESD_170_0_203, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'AliESDCaloCluster' - 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEMCALCells",1141,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPHOSCells",1101,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCaloTrigger",1395,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloTrigger), -1, 0, 1, 1, 1, 8, "u 'TString' - 0 - calo", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCosmicTrack",1395,G__G__ESD_170_0_207, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDCosmicTrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCosmicTracks",1510,G__G__ESD_170_0_208, 85, G__get_linked_tagnum(&G__G__ESDLN_TClonesArray), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCosmicTrack",1372,G__G__ESD_170_0_209, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDCosmicTrack' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrorLog",1100,G__G__ESD_170_0_210, 85, G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLog), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRawDataErrorLog",1753,G__G__ESD_170_0_211, 121, -1, -1, 0, 1, 1, 1, 8, "U 'AliRawDataErrorLog' - 10 - log", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfErrorLogs",2013,G__G__ESD_170_0_212, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfPileupVerticesSPD",2777,G__G__ESD_170_0_213, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfPileupVerticesTracks",3162,G__G__ESD_170_0_214, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfTracks",1702,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfESDTracks",1922,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfHLTConfMapTracks",2610,G__G__ESD_170_0_217, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfHLTHoughTracks",2441,G__G__ESD_170_0_218, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfMuonTracks",2117,G__G__ESD_170_0_219, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfMuonClusters",2354,G__G__ESD_170_0_220, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfMuonPads",1893,G__G__ESD_170_0_221, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfMuonGlobalTracks",2710,G__G__ESD_170_0_222, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "AU", (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfPmdTracks",1991,G__G__ESD_170_0_223, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfTrdTracks",2000,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfTrdTracklets",2325,G__G__ESD_170_0_225, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfV0s",1335,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfCascades",1877,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfKinks",1598,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfCosmicTracks",2308,G__G__ESD_170_0_229, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEMCALClusters",1495,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TRefArray' - 0 - clusters", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPHOSClusters",1455,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TRefArray' - 0 - clusters", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfCaloClusters",2322,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUseOwnList",1321,G__G__ESD_170_0_233, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUseOwnList",1309,G__G__ESD_170_0_234, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetV0s",764,G__G__ESD_170_0_235, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetCascades",1306,G__G__ESD_170_0_236, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddObject",864,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadFromTree",1184,G__G__ESD_170_0_240, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindListObject",1396,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAliESDOld",1073,G__G__ESD_170_0_242, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteToTree",1118,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStdContent",1318,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetStdContent",1545,G__G__ESD_170_0_245, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateStdContent",1626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateStdContent",1626,G__G__ESD_170_0_247, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - bUseThisList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CompleteStdContent",1855,G__G__ESD_170_0_248, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStdNames",1099,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CopyFromOldESD",1322,G__G__ESD_170_0_250, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetList",700,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFriendEvent",1414,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'AliVfriendEvent' - 0 - f", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EventIndex",1018,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EventIndexForCaloCluster",2434,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EventIndexForPHOSCell",2011,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EventIndexForEMCALCell",2051,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDetectorStatus",1770,G__G__ESD_170_0_257, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - detMask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetDetectorStatus",1985,G__G__ESD_170_0_258, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - detMask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorStatus",1758,G__G__ESD_170_0_259, 107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDetectorOn",1203,G__G__ESD_170_0_260, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "k - 'ULong_t' 0 - detMask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDAQDetectorPattern",2074,G__G__ESD_170_0_261, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - pattern", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDAQAttributes",1577,G__G__ESD_170_0_262, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - attributes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDAQDetectorPattern",2062,G__G__ESD_170_0_263, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDAQAttributes",1565,G__G__ESD_170_0_264, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsIncompleteDAQ",1442,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNTPCFriend2Store",1784,G__G__ESD_170_0_266, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNTPCFriend2Store",1772,G__G__ESD_170_0_267, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataLayoutType",1722,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ESDLN_AliVEventcLcLEDataLayoutType), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AliESDEvent",1012,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent), -1, 0, 1, 1, 2, 0, "u 'AliESDEvent' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetWithPlacementNew",2146,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 2, 0, "U 'TObject' - 0 - pObject", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMuonTrack",1181,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'AliESDMuonTrack' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMuonGlobalTrack",1774,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'AliESDMuonGlobalTrack' - 10 - t", "AU", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_170_0_273, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_170_0_274, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_170_0_275, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_170_0_276, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_170_0_280, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_170_0_281, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_170_0_282, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_170_0_283, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_170_0_284, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDEvent", 1138, G__G__ESD_170_0_285, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDv0(void) {
   /* AliESDv0 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDv0));
   G__memfunc_setup("AliESDv0",664,G__G__ESD_171_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDv0), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDv0",664,G__G__ESD_171_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDv0), -1, 0, 4, 1, 1, 0, 
"u 'AliExternalTrackParam' - 11 - t1 i - 'Int_t' 0 - i1 "
"u 'AliExternalTrackParam' - 11 - t2 i - 'Int_t' 0 - i2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDv0",664,G__G__ESD_171_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDv0), -1, 0, 1, 1, 1, 0, "u 'AliESDv0' - 11 - v0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Refit",506,G__G__ESD_171_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_171_0_5, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDv0), -1, 1, 1, 1, 1, 0, "u 'AliESDv0' - 11 - v0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Px",200,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Py",201,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Pz",202,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Pt",196,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("P",80,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PxPyPz",603,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Xv",206,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Yv",207,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Zv",208,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("XvYvZv",621,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OneOverPt",898,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Phi",289,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Theta",502,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("E",69,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "default is KOs but can be changed via ChangeMassHypothesis (defined in the .cxx)", (void*) NULL, 1);
   G__memfunc_setup("M",77,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Eta",282,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Y",89,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Charge",586,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabel",768,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "temporary", (void*) NULL, 1);
   G__memfunc_setup("PID",221,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", "return PID object ? (to be discussed!)", (void*) NULL, 1);
   G__memfunc_setup("E",69,G__G__ESD_171_0_27, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - pdg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__G__ESD_171_0_28, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - pdg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RapK0Short",942,G__G__ESD_171_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RapLambda",868,G__G__ESD_171_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlphaV0",620,G__G__ESD_171_0_31, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PtArmV0",618,G__G__ESD_171_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeMassHypothesis",2058,G__G__ESD_171_0_33, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 'kK0Short' code", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPdgCode",950,G__G__ESD_171_0_34, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEffMass",965,G__G__ESD_171_0_35, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"h - 'UInt_t' 0 - p1 h - 'UInt_t' 0 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEffMassExplicit",1799,G__G__ESD_171_0_36, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - m1 d - 'Double_t' 0 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEffMass",965,G__G__ESD_171_0_37, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2V0",748,G__G__ESD_171_0_38, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPxPyPz",891,G__G__ESD_171_0_39, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - px d - 'Double_t' 1 - py "
"d - 'Double_t' 1 - pz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPxPyPz",969,G__G__ESD_171_0_40, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - px d - 'Double_t' 1 - py "
"d - 'Double_t' 1 - pz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPPxPyPz",971,G__G__ESD_171_0_41, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - px d - 'Double_t' 1 - py "
"d - 'Double_t' 1 - pz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXYZ",555,G__G__ESD_171_0_42, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetD",356,G__G__ESD_171_0_43, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - x0 d - 'Double_t' 0 - y0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetD",356,G__G__ESD_171_0_44, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - x0 d - 'Double_t' 0 - y0 "
"d - 'Double_t' 0 - z0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNindex",902,G__G__ESD_171_0_45, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPindex",904,G__G__ESD_171_0_46, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDcaV0Daughters",1633,G__G__ESD_171_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0.' rDcaV0Daughters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDcaV0Daughters",1621,G__G__ESD_171_0_48, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetV0CosineOfPointingAngle",2539,G__G__ESD_171_0_49, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - refPointX d - 'Double_t' 0 - refPointY "
"d - 'Double_t' 0 - refPointZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetV0CosineOfPointingAngle",2539,G__G__ESD_171_0_50, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetV0CosineOfPointingAngle",2551,G__G__ESD_171_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - cpa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOnFlyStatus",1432,G__G__ESD_171_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOnFlyStatus",1420,G__G__ESD_171_0_53, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParamP",865,G__G__ESD_171_0_54, 85, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParamN",863,G__G__ESD_171_0_55, 85, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertex",926,G__G__ESD_171_0_56, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosCov",890,G__G__ESD_171_0_57, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - cov", "getter for the covariance matrix of the V0 position ", (void*) NULL, 0);
   G__memfunc_setup("GetSigmaY",874,G__G__ESD_171_0_58, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "sigma of y coordinate at vertex posistion", (void*) NULL, 0);
   G__memfunc_setup("GetSigmaZ",875,G__G__ESD_171_0_59, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "sigma of z coordinate at vertex posistion", (void*) NULL, 0);
   G__memfunc_setup("GetSigmaAP0",978,G__G__ESD_171_0_60, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "calculate sigma of Point angle resolution at vertex pos.", (void*) NULL, 0);
   G__memfunc_setup("GetSigmaD0",901,G__G__ESD_171_0_61, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "calculate sigma of position resolution at vertex pos.", (void*) NULL, 0);
   G__memfunc_setup("GetEffectiveSigmaAP0",1891,G__G__ESD_171_0_62, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "calculate sigma of point angle resolution at vertex pos. effecive parameterization", (void*) NULL, 0);
   G__memfunc_setup("GetEffectiveSigmaD0",1814,G__G__ESD_171_0_63, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "calculate sigma of position resolution at vertex pos.", (void*) NULL, 0);
   G__memfunc_setup("GetMinimaxSigmaAP0",1701,G__G__ESD_171_0_64, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "calculate mini-max sigma of point angle resolution", (void*) NULL, 0);
   G__memfunc_setup("GetMinimaxSigmaD0",1624,G__G__ESD_171_0_65, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "calculate mini-max sigma of dca resolution", (void*) NULL, 0);
   G__memfunc_setup("GetLikelihoodAP",1461,G__G__ESD_171_0_66, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - mode0 i - 'Int_t' 0 - mode1", "get likelihood for point angle", (void*) NULL, 0);
   G__memfunc_setup("GetLikelihoodD",1384,G__G__ESD_171_0_67, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - mode0 i - 'Int_t' 0 - mode1", "get likelihood for DCA", (void*) NULL, 0);
   G__memfunc_setup("GetLikelihoodC",1383,G__G__ESD_171_0_68, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - mode0 i - 'Int_t' 0 - mode1", "get likelihood for Causality", (void*) NULL, 0);
   G__memfunc_setup("GetParameterization",1983,G__G__ESD_171_0_69, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDV0Params), -1, 1, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const AliESDV0Params& (*)())(&AliESDv0::GetParameterization) ), 0);
   G__memfunc_setup("SetParamP",877,G__G__ESD_171_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliExternalTrackParam' - 11 - paramP", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParamN",875,G__G__ESD_171_0_71, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliExternalTrackParam' - 11 - paramN", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStatus",944,G__G__ESD_171_0_72, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__G__ESD_171_0_73, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIndex",792,G__G__ESD_171_0_74, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIndex",804,G__G__ESD_171_0_75, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAnglep",887,G__G__ESD_171_0_76, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRr",484,G__G__ESD_171_0_77, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistSigma",1189,G__G__ESD_171_0_78, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDistSigma",1201,G__G__ESD_171_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2Before",1209,G__G__ESD_171_0_80, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChi2Before",1221,G__G__ESD_171_0_81, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2After",1112,G__G__ESD_171_0_82, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChi2After",1124,G__G__ESD_171_0_83, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ca", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNAfter",864,G__G__ESD_171_0_84, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNAfter",876,G__G__ESD_171_0_85, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - na", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNBefore",961,G__G__ESD_171_0_86, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNBefore",973,G__G__ESD_171_0_87, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - nb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCausality",1243,G__G__ESD_171_0_88, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - pb0 f - 'Float_t' 0 - pb1 "
"f - 'Float_t' 0 - pa0 f - 'Float_t' 0 - pa1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCausalityP",1311,G__G__ESD_171_0_89, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClusters",1153,G__G__ESD_171_0_90, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'Int_t' 10 - clp I - 'Int_t' 10 - clm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusters",1141,G__G__ESD_171_0_91, 73, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNormDCAPrim",1320,G__G__ESD_171_0_92, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - nd0 f - 'Float_t' 0 - nd1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNormDCAPrimP",1388,G__G__ESD_171_0_93, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PdgCode",662,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetID",441,G__G__ESD_171_0_95, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetKFInfo",829,G__G__ESD_171_0_96, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"h - 'UInt_t' 0 - p1 h - 'UInt_t' 0 - p2 "
"i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKFInfoScale",1317,G__G__ESD_171_0_97, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 8, 
"h - 'UInt_t' 0 - p1 h - 'UInt_t' 0 - p2 "
"i - 'Int_t' 0 - type d - 'Double_t' 0 - d1pt "
"d - 'Double_t' 0 - s1pt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_171_0_98, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDv0::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_171_0_99, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDv0::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_171_0_100, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDv0::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_171_0_101, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDv0::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_171_0_105, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_171_0_106, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDv0::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_171_0_107, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDv0::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_171_0_108, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDv0::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_171_0_109, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDv0::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDv0", 790, G__G__ESD_171_0_110, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliCascadeVertexer(void) {
   /* AliCascadeVertexer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliCascadeVertexer));
   G__memfunc_setup("AliCascadeVertexer",1807,G__G__ESD_173_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliCascadeVertexer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCuts",715,G__G__ESD_173_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - cuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefaultCuts",1424,G__G__ESD_173_0_3, 121, -1, -1, 0, 1, 3, 1, 0, "D - 'Double_t' 10 - cuts", (char*)NULL, (void*) G__func2void( (void (*)(const Double_t*))(&AliCascadeVertexer::SetDefaultCuts) ), 0);
   G__memfunc_setup("V0sTracks2CascadeVertices",2428,G__G__ESD_173_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'AliESDEvent' - 0 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Det",285,G__G__ESD_173_0_5, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 0 - a00 d - 'Double_t' 0 - a01 "
"d - 'Double_t' 0 - a10 d - 'Double_t' 0 - a11", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Det",285,G__G__ESD_173_0_6, 100, -1, G__defined_typename("Double_t"), 0, 9, 1, 1, 8, 
"d - 'Double_t' 0 - a00 d - 'Double_t' 0 - a01 "
"d - 'Double_t' 0 - a02 d - 'Double_t' 0 - a10 "
"d - 'Double_t' 0 - a11 d - 'Double_t' 0 - a12 "
"d - 'Double_t' 0 - a20 d - 'Double_t' 0 - a21 "
"d - 'Double_t' 0 - a22", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateToDCA",1326,G__G__ESD_173_0_7, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"U 'AliESDv0' - 0 - vtx U 'AliExternalTrackParam' - 0 - trk "
"d - 'Double_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCuts",703,G__G__ESD_173_0_8, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - cuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDefaultCuts",1412,G__G__ESD_173_0_9, 121, -1, -1, 0, 1, 3, 1, 0, "D - 'Double_t' 0 - cuts", (char*)NULL, (void*) G__func2void( (void (*)(Double_t*))(&AliCascadeVertexer::GetDefaultCuts) ), 0);
   G__memfunc_setup("Class",502,G__G__ESD_173_0_10, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliCascadeVertexer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_173_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCascadeVertexer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_173_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliCascadeVertexer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_173_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliCascadeVertexer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_173_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_173_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCascadeVertexer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_173_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCascadeVertexer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_173_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliCascadeVertexer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_173_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliCascadeVertexer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliCascadeVertexer", 1807, G__G__ESD_173_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__ESDLN_AliCascadeVertexer), -1, 0, 1, 1, 1, 0, "u 'AliCascadeVertexer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliCascadeVertexer", 1933, G__G__ESD_173_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ESD_173_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__ESDLN_AliCascadeVertexer), -1, 1, 1, 1, 1, 0, "u 'AliCascadeVertexer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDACORDE(void) {
   /* AliESDACORDE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDACORDE));
   G__memfunc_setup("AliESDACORDE",928,G__G__ESD_174_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDACORDE), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDACORDE",928,G__G__ESD_174_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDACORDE), -1, 0, 1, 1, 1, 0, "u 'AliESDACORDE' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDACORDE",928,G__G__ESD_174_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDACORDE), -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - ACORDEBitPattern", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetACORDEBitPattern",1751,G__G__ESD_174_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - ACORDEBitPattern", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitChannel",1278,G__G__ESD_174_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_174_0_7, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDACORDE), -1, 1, 1, 1, 1, 0, "u 'AliESDACORDE' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_174_0_8, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDACORDE::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_174_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDACORDE::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_174_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDACORDE::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_174_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDACORDE::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_174_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_174_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDACORDE::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_174_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDACORDE::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_174_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDACORDE::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_174_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDACORDE::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDACORDE", 1054, G__G__ESD_174_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDAD(void) {
   /* AliESDAD */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDAD));
   G__memfunc_setup("AliESDAD",631,G__G__ESD_179_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDAD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDAD",631,G__G__ESD_179_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDAD), -1, 0, 1, 1, 1, 0, "u 'AliESDAD' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDAD",631,G__G__ESD_179_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDAD), -1, 0, 10, 1, 1, 0, 
"h - 'UInt_t' 0 - BBtriggerADA h - 'UInt_t' 0 - BGtriggerADA "
"h - 'UInt_t' 0 - BBtriggerADC h - 'UInt_t' 0 - BGtriggerADC "
"F - 'Float_t' 0 - Multiplicity F - 'Float_t' 0 - Adc "
"F - 'Float_t' 0 - Time F - 'Float_t' 0 - Width "
"G - 'Bool_t' 0 - BBFlag G - 'Bool_t' 0 - BGFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetBBtriggerADA",1386,G__G__ESD_179_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - BBtrigger", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBGtriggerADA",1391,G__G__ESD_179_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - BGtrigger", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBBtriggerADC",1388,G__G__ESD_179_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - BBtrigger", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBGtriggerADC",1393,G__G__ESD_179_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - BGtrigger", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMultiplicity",1589,G__G__ESD_179_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - Multiplicity", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADC",500,G__G__ESD_179_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - adc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__G__ESD_179_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWidth",812,G__G__ESD_179_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBBFlag",810,G__G__ESD_179_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - BBFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBGFlag",815,G__G__ESD_179_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - BGFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADATime",897,G__G__ESD_179_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADCTime",899,G__G__ESD_179_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADATimeError",1419,G__G__ESD_179_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADCTimeError",1421,G__G__ESD_179_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADADecision",1312,G__G__ESD_179_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i 'AliVAD::Decision' - 0 - des", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADCDecision",1314,G__G__ESD_179_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i 'AliVAD::Decision' - 0 - des", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerChargeA",1675,G__G__ESD_179_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - chargeA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerChargeC",1677,G__G__ESD_179_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - chargeC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerBits",1426,G__G__ESD_179_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - triggerBits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPFBBFlag",960,G__G__ESD_179_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - clock "
"g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPFBGFlag",965,G__G__ESD_179_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - clock "
"g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADCTail",894,G__G__ESD_179_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - adc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADCTrigger",1224,G__G__ESD_179_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - adc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbPMADA",819,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNbPMADC",821,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMTotADA",874,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMTotADC",876,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMultiplicity",1577,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMultiplicityADA",1775,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMultiplicityADC",1777,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAdc",552,G__G__ESD_179_0_35, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAdcADA",750,G__G__ESD_179_0_36, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAdcADC",752,G__G__ESD_179_0_37, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTime",687,G__G__ESD_179_0_38, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTimeADA",885,G__G__ESD_179_0_39, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTimeADC",887,G__G__ESD_179_0_40, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWidth",800,G__G__ESD_179_0_41, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWidthADA",998,G__G__ESD_179_0_42, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWidthADC",1000,G__G__ESD_179_0_43, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BBTriggerADA",1054,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BGTriggerADA",1059,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BBTriggerADC",1056,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BGTriggerADC",1061,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBBFlag",798,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBGFlag",803,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetADATime",885,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetADCTime",887,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetADATimeError",1407,G__G__ESD_179_0_52, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetADCTimeError",1409,G__G__ESD_179_0_53, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetADADecision",1300,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ESDLN_AliVADcLcLDecision), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetADCDecision",1302,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ESDLN_AliVADcLcLDecision), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerChargeA",1663,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerChargeC",1665,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerBits",1414,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPFBBFlag",948,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - clock", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPFBGFlag",953,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - clock", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAdcTail",946,G__G__ESD_179_0_61, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAdcTailADA",1144,G__G__ESD_179_0_62, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAdcTailADC",1146,G__G__ESD_179_0_63, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAdcTrigger",1276,G__G__ESD_179_0_64, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAdcTriggerADA",1474,G__G__ESD_179_0_65, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAdcTriggerADC",1476,G__G__ESD_179_0_66, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__G__ESD_179_0_67, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDAD), -1, 1, 1, 1, 1, 0, "u 'AliESDAD' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_179_0_68, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDAD::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_179_0_69, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDAD::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_179_0_70, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDAD::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_179_0_71, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDAD::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_179_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_179_0_76, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDAD::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_179_0_77, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDAD::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_179_0_78, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDAD::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_179_0_79, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDAD::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDAD", 757, G__G__ESD_179_0_80, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDADfriend(void) {
   /* AliESDADfriend */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDADfriend));
   G__memfunc_setup("AliESDADfriend",1263,G__G__ESD_180_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDADfriend), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDADfriend",1263,G__G__ESD_180_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDADfriend), -1, 0, 1, 1, 1, 0, "u 'AliESDADfriend' - 11 - adfriend", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_180_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDADfriend), -1, 1, 1, 1, 1, 0, "u 'AliESDADfriend' - 11 - adfriend", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__ESD_180_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBBScalers",1137,G__G__ESD_180_0_5, 109, -1, G__defined_typename("ULong64_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - channel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBGScalers",1142,G__G__ESD_180_0_6, 109, -1, G__defined_typename("ULong64_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - channel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerScalers",1729,G__G__ESD_180_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num_scaler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADC",488,G__G__ESD_180_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - channel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedestal",1106,G__G__ESD_180_0_9, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntegratorFlag",1721,G__G__ESD_180_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBBFlag",798,G__G__ESD_180_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBGFlag",803,G__G__ESD_180_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__G__ESD_180_0_13, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - channel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWidth",800,G__G__ESD_180_0_14, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - channel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBBScalers",1149,G__G__ESD_180_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - channel m - 'ULong64_t' 0 - scalers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBGScalers",1154,G__G__ESD_180_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - channel m - 'ULong64_t' 0 - scalers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerScalers",1741,G__G__ESD_180_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - num_scaler h - 'UInt_t' 0 - scaler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPedestal",1118,G__G__ESD_180_0_18, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event "
"f - 'Float_t' 0 - adc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIntegratorFlag",1733,G__G__ESD_180_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event "
"g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBBFlag",810,G__G__ESD_180_0_20, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event "
"g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBGFlag",815,G__G__ESD_180_0_21, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event "
"g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__G__ESD_180_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - channel f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWidth",812,G__G__ESD_180_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - channel f - 'Float_t' 0 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerInputs",1655,G__G__ESD_180_0_24, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerInputsMask",2051,G__G__ESD_180_0_25, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerInputs",1667,G__G__ESD_180_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - inputs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerInputsMask",2063,G__G__ESD_180_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_180_0_28, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDADfriend::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_180_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDADfriend::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_180_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDADfriend::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_180_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDADfriend::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_180_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_180_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDADfriend::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_180_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDADfriend::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_180_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDADfriend::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_180_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDADfriend::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDADfriend", 1389, G__G__ESD_180_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDCaloCells(void) {
   /* AliESDCaloCells */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells));
   G__memfunc_setup("AliESDCaloCells",1380,G__G__ESD_198_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDCaloCells",1380,G__G__ESD_198_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"i 'AliVCaloCells::VCells_t' - 0 'kUndef' ttype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDCaloCells",1380,G__G__ESD_198_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells), -1, 0, 1, 1, 1, 0, "u 'AliESDCaloCells' - 11 - cells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_198_0_4, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCells), -1, 1, 1, 1, 1, 0, "u 'AliESDCaloCells' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyCaloCells",1293,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliVCaloCells), -1, 0, 1, 1, 1, 8, "g - 'Bool_t' 0 - all", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateContainer",1527,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - nCells", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DeleteContainer",1526,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Sort",424,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEMCAL",542,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsPHOS",502,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetType",706,(G__InterfaceMethod) NULL,99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetType",718,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCell",672,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 8, 
"s - 'Short_t' 0 - pos s - 'Short_t' 1 - cellNumber "
"d - 'Double_t' 1 - amplitude d - 'Double_t' 1 - time "
"i - 'Int_t' 1 - mclabel d - 'Double_t' 1 - efrac", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCell",684,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 0, 
"s - 'Short_t' 0 - pos s - 'Short_t' 0 - cellNumber "
"d - 'Double_t' 0 - amplitude d - 'Double_t' 0 - time "
"i - 'Int_t' 0 '-1' mclabel d - 'Double_t' 0 '0.' efrac "
"g - 'Bool_t' 0 'kFALSE' isHG", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfCells",1585,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumberOfCells",1597,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellAmplitude",1605,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cellNumber", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellHighGain",1439,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cellNumber", "is this cell High Gain", (void*) NULL, 1);
   G__memfunc_setup("GetCellPosition",1525,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cellNumber", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellTime",1071,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cellNumber", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAmplitude",1221,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 - pos", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHighGain",1055,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 - pos", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTime",687,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 - pos", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellNumber",1289,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 - pos", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellMCLabel",1296,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cellNumber", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMCLabel",912,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 - pos", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellEFraction",1563,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cellNumber", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEFraction",1179,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 - pos", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEFraction",1191,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"s - 'Short_t' 0 - pos d - 'Double32_t' 0 - efrac", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCellEFraction",1575,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"s - 'Short_t' 0 - cellNumber d - 'Double32_t' 0 - efrac", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_198_0_33, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDCaloCells::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_198_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDCaloCells::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_198_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDCaloCells::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_198_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDCaloCells::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_198_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_198_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDCaloCells::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_198_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDCaloCells::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_198_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDCaloCells::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_198_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDCaloCells::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDCaloCells", 1506, G__G__ESD_198_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDCaloCluster(void) {
   /* AliESDCaloCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCluster));
   G__memfunc_setup("AliESDCaloCluster",1619,G__G__ESD_499_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDCaloCluster",1619,G__G__ESD_499_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCluster), -1, 0, 1, 1, 1, 0, "u 'AliESDCaloCluster' - 11 - clus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_499_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCluster), -1, 1, 1, 1, 1, 0, "u 'AliESDCaloCluster' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetID",441,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetID",429,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetType",718,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetType",706,(G__InterfaceMethod) NULL,99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEMCAL",542,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsPHOS",502,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPosition",1141,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "F - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPosition",1153,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPositionAt",1334,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - pos i - 'Int_t' 0 - ipos", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetE",369,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ene", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("E",69,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDispersion",1356,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - disp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDispersion",1344,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetChi2",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - chi2", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Chi2",326,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPID",509,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPID",521,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - pid", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPIDAt",702,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - p i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetM20",475,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - m20", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetM20",463,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetM02",475,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - m02", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetM02",463,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNExMax",861,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - nExMax", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNExMax",849,(G__InterfaceMethod) NULL,98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEmcCpvDistance",1685,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dEmcCpv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEmcCpvDistance",1673,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTrackDistance",1612,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - dx d - 'Double_t' 0 - dz", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackDx",977,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackDz",979,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDistanceToBadChannel",2266,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDistanceToBadChannel",2254,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTOF",533,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - tof", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOF",521,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddTracksMatched",1575,G__G__ESD_499_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayI' - 1 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddLabels",860,G__G__ESD_499_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayI' - 1 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLabel",780,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'Int_t' 0 - array h - 'UInt_t' 0 - size", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTracksMatched",1598,G__G__ESD_499_0_42, 85, G__get_linked_tagnum(&G__G__ESDLN_TArrayI), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabelsArray",1394,G__G__ESD_499_0_43, 85, G__get_linked_tagnum(&G__G__ESDLN_TArrayI), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabels",883,(G__InterfaceMethod) NULL,73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackMatchedIndex",1987,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabel",768,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabelAt",949,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNTracksMatched",1676,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNLabels",961,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMomentum",1138,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TLorentzVector' - 1 - p D - 'Double_t' 10 - vertexPosition", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMomentum",1138,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TLorentzVector' - 1 - p D - 'Double_t' 10 - vertexPosition "
"i 'AliVCluster::VCluUserDefEnergy_t' - 0 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNCells",877,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNCells",865,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCellsAbsId",1250,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - array", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellsAbsId",1238,(G__InterfaceMethod) NULL,82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCellsAmplitudeFraction",2554,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double32_t' 0 - array", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellsAmplitudeFraction",2542,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellAbsId",1123,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellAmplitudeFraction",2427,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCoreEnergy",1299,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCoreEnergy",1311,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMCEnergyFraction",1872,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMCEnergyFraction",1884,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIsExotic",1096,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetIsExotic",1108,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetUserDefEnergy",1592,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetUserDefEnergy",1592,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i 'AliVCluster::VCluUserDefEnergy_t' - 0 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUserDefEnergy",1604,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - t d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUserDefEnergy",1604,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i 'AliVCluster::VCluUserDefEnergy_t' - 0 - t d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUserDefEnergyCorrFactor",2617,G__G__ESD_499_0_70, 121, -1, -1, 0, 2, 1, 1, 0, 
"i 'AliVCluster::VCluUserDefEnergy_t' - 0 - t d - 'Double_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCellsMCEdepFractionMap",2433,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "H - 'UInt_t' 0 - array", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellsMCEdepFractionMap",2421,(G__InterfaceMethod) NULL,72, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellMCEdepFractionArray",2531,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - cellIndex F - 'Float_t' 0 - eDep", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PackMCEdepFraction",1731,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "F - 'Float_t' 0 - eDep", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetClusterMCEdepFractionFromEdepArray",3683,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - array", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetClusterMCEdepFraction",2386,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - array", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetClusterMCEdepFraction",2374,(G__InterfaceMethod) NULL,82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetClusterMCEdepFraction",2374,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - mcIndex", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_499_0_79, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDCaloCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_499_0_80, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDCaloCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_499_0_81, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDCaloCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_499_0_82, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDCaloCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_499_0_86, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_499_0_87, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDCaloCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_499_0_88, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDCaloCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_499_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDCaloCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_499_0_90, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDCaloCluster::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDCaloCluster", 1745, G__G__ESD_499_0_91, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDCaloTrigger(void) {
   /* AliESDCaloTrigger */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloTrigger));
   G__memfunc_setup("AliESDCaloTrigger",1605,G__G__ESD_501_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloTrigger), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDCaloTrigger",1605,G__G__ESD_501_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloTrigger), -1, 0, 1, 1, 1, 0, "u 'AliESDCaloTrigger' - 11 - ctrig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_501_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloTrigger), -1, 1, 1, 1, 1, 0, "u 'AliESDCaloTrigger' - 11 - ctrig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEmpty",715,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Allocate",805,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DeAllocate",974,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Add",265,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - row "
"f - 'Float_t' 0 - amp f - 'Float_t' 0 - time "
"I - 'Int_t' 0 - trgtimes i - 'Int_t' 0 - ntrgtimes "
"i - 'Int_t' 0 - trgts i - 'Int_t' 0 - trgbits", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Add",265,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 9, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - row "
"f - 'Float_t' 0 - amp f - 'Float_t' 0 - time "
"I - 'Int_t' 0 - trgtimes i - 'Int_t' 0 - ntrgtimes "
"i - 'Int_t' 0 - trgts i - 'Int_t' 0 - subra "
"i - 'Int_t' 0 - trgbits", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetL1Threshold",1366,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - thr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetL1Threshold",1366,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j "
"i - 'Int_t' 0 - thr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetL1V0",559,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetL1V0",559,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i I - 'Int_t' 10 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetL1FrameMask",1312,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetL1FrameMask",1312,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTriggerBitWord",1723,G__G__ESD_501_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMedian",890,G__G__ESD_501_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosition",1141,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 1 - col i - 'Int_t' 1 - row", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAmplitude",1221,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "f - 'Float_t' 1 - amp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTime",687,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "f - 'Float_t' 1 - time", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerBits",1414,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 1 - bits", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNL0Times",1004,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 1 - ntimes", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL0Times",926,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "I - 'Int_t' 0 - times", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntries",1018,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL1TimeSum",1121,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 1 - timesum", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL1TimeSum",1121,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL1SubRegion",1323,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 1 - subreg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL1SubRegion",1323,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL1Threshold",1354,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL1Threshold",1354,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL1V0",547,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL1V0",547,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL1FrameMask",1300,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL1FrameMask",1300,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMedian",878,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerBitWord",1711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerBitWord",1711,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 1 - bw", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Next",415,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_501_0_41, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDCaloTrigger::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_501_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDCaloTrigger::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_501_0_43, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDCaloTrigger::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_501_0_44, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDCaloTrigger::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_501_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_501_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDCaloTrigger::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_501_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDCaloTrigger::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_501_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDCaloTrigger::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_501_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDCaloTrigger::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDCaloTrigger", 1731, G__G__ESD_501_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDVertex(void) {
   /* AliESDVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex));
   G__memfunc_setup("AliESDVertex",1136,G__G__ESD_509_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDVertex",1136,G__G__ESD_509_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - positionZ d - 'Double_t' 0 - sigmaZ "
"i - 'Int_t' 0 - nContributors C - 'Char_t' 10 '\"Vertex\"' vtxName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDVertex",1136,G__G__ESD_509_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 5, 1, 1, 0, 
"D - 'Double_t' 10 - position D - 'Double_t' 10 - covmatrix "
"d - 'Double_t' 0 - chi2 i - 'Int_t' 0 - nContributors "
"C - 'Char_t' 10 '\"Vertex\"' vtxName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDVertex",1136,G__G__ESD_509_0_4, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 0 - position D - 'Double_t' 0 - sigma "
"C - 'Char_t' 10 '\"Vertex\"' vtxName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDVertex",1136,G__G__ESD_509_0_5, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 4, 1, 1, 0, 
"D - 'Double_t' 0 - position D - 'Double_t' 0 - sigma "
"D - 'Double_t' 0 - snr C - 'Char_t' 10 '\"Vertex\"' vtxName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDVertex",1136,G__G__ESD_509_0_6, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 1, 1, 1, 0, "u 'AliESDVertex' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_509_0_7, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 1, 1, 1, 1, 0, "u 'AliESDVertex' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSigmaXYZ",1052,G__G__ESD_509_0_9, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCovMatrix",1213,G__G__ESD_509_0_10, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - covmatrix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCovarianceMatrix",1936,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - covmatrix", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSNR",531,G__G__ESD_509_0_12, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - snr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCovarianceMatrix",1948,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - cov", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXRes",674,G__G__ESD_509_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYRes",675,G__G__ESD_509_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZRes",676,G__G__ESD_509_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXSNR",619,G__G__ESD_509_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYSNR",620,G__G__ESD_509_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZSNR",621,G__G__ESD_509_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSNR",543,G__G__ESD_509_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - snr i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2",614,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetChi2",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - chi", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetChi2toNDF",1057,G__G__ESD_509_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2perNDF",1157,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNDF",504,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintStatus",1169,G__G__ESD_509_0_27, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__ESD_509_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetID",441,G__G__ESD_509_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__G__ESD_509_0_30, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBC",433,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - bc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBC",421,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWDist",779,G__G__ESD_509_0_33, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "U 'AliESDVertex' - 10 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetToZero",911,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_509_0_35, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_509_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_509_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_509_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_509_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_509_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_509_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_509_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_509_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDVertex::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDVertex", 1262, G__G__ESD_509_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDV0Params(void) {
   /* AliESDV0Params */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDV0Params));
   G__memfunc_setup("AliESDV0Params",1244,G__G__ESD_516_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDV0Params), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxDist0",1046,G__G__ESD_516_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.1' kMaxDist0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxDist1",1047,G__G__ESD_516_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.1' kMaxDist1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxDist",998,G__G__ESD_516_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1.' kMaxDist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinPointAngle",1601,G__G__ESD_516_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.85' kMinPointAngle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinPointAngle2",1651,G__G__ESD_516_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.99' kMinPointAngle2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinR",674,G__G__ESD_516_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.5' kMinR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxR",676,G__G__ESD_516_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '220.' kMaxR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinPABestConst",1654,G__G__ESD_516_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.9999' kMinPABestConst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxRBestConst",1593,G__G__ESD_516_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '10.' kMaxRBestConst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCausality0Cut",1591,G__G__ESD_516_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.19' kCausality0Cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLikelihood01Cut",1725,G__G__ESD_516_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.45' kLikelihood01Cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLikelihood1Cut",1677,G__G__ESD_516_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.5' kLikelihood1Cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCombinedCut",1401,G__G__ESD_516_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.55' kCombinedCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinClFullTrk",1475,G__G__ESD_516_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '5.0' kMinClFullTrk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinTgl0",935,G__G__ESD_516_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1.05' kMinTgl0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinRTgl0",1017,G__G__ESD_516_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '40.0' kMinRTgl0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinNormDistForbTgl0",2144,G__G__ESD_516_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '3.0' kMinNormDistForbTgl0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinClForb0",1208,G__G__ESD_516_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '4.5' kMinClForb0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinNormDistForb1",1850,G__G__ESD_516_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '3.0' kMinNormDistForb1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinNormDistForb2",1851,G__G__ESD_516_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '2.0' kMinNormDistForb2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinNormDistForb3",1852,G__G__ESD_516_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1.0' kMinNormDistForb3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinNormDistForb4",1853,G__G__ESD_516_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '4.0' kMinNormDistForb4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinNormDistForb5",1854,G__G__ESD_516_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '5.0' kMinNormDistForb5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinNormDistForbProt",2222,G__G__ESD_516_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '2.0' kMinNormDistForbProt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxPidProbPionForb",2081,G__G__ESD_516_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.5' kMaxPidProbPionForb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinRTPCdensity",1673,G__G__ESD_516_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '40.0' kMinRTPCdensity", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxRTPCdensity0",1723,G__G__ESD_516_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '110.0' kMaxRTPCdensity0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxRTPCdensity10",1772,G__G__ESD_516_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '120.0' kMaxRTPCdensity10", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxRTPCdensity20",1773,G__G__ESD_516_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '130.0' kMaxRTPCdensity20", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxRTPCdensity30",1774,G__G__ESD_516_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '140.0' kMaxRTPCdensity30", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinTPCdensity",1591,G__G__ESD_516_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.6' kMinTPCdensity", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinTgl1",936,G__G__ESD_516_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1.1' kMinTgl1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinTgl2",937,G__G__ESD_516_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1.' kMinTgl2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinchi2before0",1625,G__G__ESD_516_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '16.' kMinchi2before0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinchi2before1",1626,G__G__ESD_516_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '16.' kMinchi2before1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinchi2after0",1528,G__G__ESD_516_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '16.' kMinchi2after0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinchi2after1",1529,G__G__ESD_516_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '16.' kMinchi2after1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAddchi2SharedCl",1697,G__G__ESD_516_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '18' kAddchi2SharedCl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAddchi2NegCl0",1428,G__G__ESD_516_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '25' kAddchi2NegCl0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAddchi2NegCl1",1429,G__G__ESD_516_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '30' kAddchi2NegCl1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigp0Par0",1090,G__G__ESD_516_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.0001' kSigp0Par0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigp0Par1",1091,G__G__ESD_516_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.001' kSigp0Par1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigp0Par2",1092,G__G__ESD_516_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.1' kSigp0Par2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigpPar0",1042,G__G__ESD_516_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.5' kSigpPar0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigpPar1",1043,G__G__ESD_516_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.6' kSigpPar1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigpPar2",1044,G__G__ESD_516_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.4' kSigpPar2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxDcaLh0",1086,G__G__ESD_516_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0.5' kMaxDcaLh0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChi2KF",771,G__G__ESD_516_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '100.' kChi2KF", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRobustChi2KF",1410,G__G__ESD_516_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '100.' kRobustChi2KF", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxDist0",1034,G__G__ESD_516_0_51, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxDist1",1035,G__G__ESD_516_0_52, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxDist",986,G__G__ESD_516_0_53, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinPointAngle",1589,G__G__ESD_516_0_54, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinPointAngle2",1639,G__G__ESD_516_0_55, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinR",662,G__G__ESD_516_0_56, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxR",664,G__G__ESD_516_0_57, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinPABestConst",1642,G__G__ESD_516_0_58, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxRBestConst",1581,G__G__ESD_516_0_59, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCausality0Cut",1579,G__G__ESD_516_0_60, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLikelihood01Cut",1713,G__G__ESD_516_0_61, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLikelihood1Cut",1665,G__G__ESD_516_0_62, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCombinedCut",1389,G__G__ESD_516_0_63, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinClFullTrk",1463,G__G__ESD_516_0_64, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinTgl0",923,G__G__ESD_516_0_65, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinRTgl0",1005,G__G__ESD_516_0_66, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinNormDistForbTgl0",2132,G__G__ESD_516_0_67, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinClForb0",1196,G__G__ESD_516_0_68, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinNormDistForb1",1838,G__G__ESD_516_0_69, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinNormDistForb2",1839,G__G__ESD_516_0_70, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinNormDistForb3",1840,G__G__ESD_516_0_71, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinNormDistForb4",1841,G__G__ESD_516_0_72, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinNormDistForb5",1842,G__G__ESD_516_0_73, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinNormDistForbProt",2210,G__G__ESD_516_0_74, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxPidProbPionForb",2069,G__G__ESD_516_0_75, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinRTPCdensity",1661,G__G__ESD_516_0_76, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxRTPCdensity0",1711,G__G__ESD_516_0_77, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxRTPCdensity10",1760,G__G__ESD_516_0_78, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxRTPCdensity20",1761,G__G__ESD_516_0_79, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxRTPCdensity30",1762,G__G__ESD_516_0_80, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinTPCdensity",1579,G__G__ESD_516_0_81, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinTgl1",924,G__G__ESD_516_0_82, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinTgl2",925,G__G__ESD_516_0_83, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinchi2before0",1613,G__G__ESD_516_0_84, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinchi2before1",1614,G__G__ESD_516_0_85, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinchi2after0",1516,G__G__ESD_516_0_86, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinchi2after1",1517,G__G__ESD_516_0_87, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAddchi2SharedCl",1685,G__G__ESD_516_0_88, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAddchi2NegCl0",1416,G__G__ESD_516_0_89, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAddchi2NegCl1",1417,G__G__ESD_516_0_90, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigp0Par0",1078,G__G__ESD_516_0_91, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigp0Par1",1079,G__G__ESD_516_0_92, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigp0Par2",1080,G__G__ESD_516_0_93, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigpPar0",1030,G__G__ESD_516_0_94, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigpPar1",1031,G__G__ESD_516_0_95, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigpPar2",1032,G__G__ESD_516_0_96, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxDcaLh0",1074,G__G__ESD_516_0_97, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2KF",759,G__G__ESD_516_0_98, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRobustChi2KF",1398,G__G__ESD_516_0_99, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StreamLevel",1124,G__G__ESD_516_0_100, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStreamLevel",1424,G__G__ESD_516_0_101, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_516_0_102, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDV0Params::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_516_0_103, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDV0Params::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_516_0_104, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDV0Params::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_516_0_105, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDV0Params::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_516_0_109, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_516_0_110, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDV0Params::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_516_0_111, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDV0Params::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_516_0_112, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDV0Params::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_516_0_113, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDV0Params::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliESDV0Params", 1244, G__G__ESD_516_0_114, (int) ('i'), G__get_linked_tagnum(&G__G__ESDLN_AliESDV0Params), -1, 0, 1, 1, 1, 0, "u 'AliESDV0Params' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliESDV0Params", 1370, G__G__ESD_516_0_115, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ESD_516_0_116, (int) ('u'), G__get_linked_tagnum(&G__G__ESDLN_AliESDV0Params), -1, 1, 1, 1, 1, 0, "u 'AliESDV0Params' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDcascade(void) {
   /* AliESDcascade */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDcascade));
   G__memfunc_setup("AliESDcascade",1206,G__G__ESD_517_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDcascade), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDcascade",1206,G__G__ESD_517_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDcascade), -1, 0, 1, 1, 1, 0, "u 'AliESDcascade' - 11 - cas", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDcascade",1206,G__G__ESD_517_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDcascade), -1, 0, 3, 1, 1, 0, 
"u 'AliESDv0' - 11 - v0 u 'AliExternalTrackParam' - 11 - t "
"i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_517_0_4, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDcascade), -1, 1, 1, 1, 1, 0, "u 'AliESDcascade' - 11 - cas", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Px",200,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Py",201,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Pz",202,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Pt",196,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("P",80,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PxPyPz",603,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Xv",206,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Yv",207,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Zv",208,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("XvYvZv",621,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OneOverPt",898,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Phi",289,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Theta",502,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("E",69,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "default is Xis but can be changed via ChangeMassHypothesis (defined in the .cxx)", (void*) NULL, 1);
   G__memfunc_setup("M",77,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Eta",282,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Y",89,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Charge",586,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", "due to PDG sign convention !", (void*) NULL, 1);
   G__memfunc_setup("GetLabel",768,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "temporary", (void*) NULL, 1);
   G__memfunc_setup("PID",221,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", "return PID object ? (to be discussed!)", (void*) NULL, 1);
   G__memfunc_setup("E",69,G__G__ESD_517_0_26, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - pdg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__G__ESD_517_0_27, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - pdg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RapXi",484,G__G__ESD_517_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RapOmega",780,G__G__ESD_517_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlphaXi",679,G__G__ESD_517_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PtArmXi",677,G__G__ESD_517_0_31, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeMassHypothesis",2058,G__G__ESD_517_0_32, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 1 - v0q i - 'Int_t' 0 'kXiMinus' code", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPdgCodeXi",1143,G__G__ESD_517_0_33, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEffMassXi",1158,G__G__ESD_517_0_34, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2Xi",807,G__G__ESD_517_0_35, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPxPyPz",891,G__G__ESD_517_0_36, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - px d - 'Double_t' 1 - py "
"d - 'Double_t' 1 - pz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXYZcascade",1263,G__G__ESD_517_0_37, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDcascade",1064,G__G__ESD_517_0_38, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - x0 d - 'Double_t' 0 - y0 "
"d - 'Double_t' 0 - z0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBPxPyPz",957,G__G__ESD_517_0_39, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - px d - 'Double_t' 1 - py "
"d - 'Double_t' 1 - pz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBindex",890,G__G__ESD_517_0_40, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIndex",804,G__G__ESD_517_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", "for the consistency with V0", (void*) NULL, 0);
   G__memfunc_setup("GetIndex",792,G__G__ESD_517_0_42, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "for the consistency with V0", (void*) NULL, 0);
   G__memfunc_setup("SetDcaXiDaughters",1692,G__G__ESD_517_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0.' rDcaXiDaughters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDcaXiDaughters",1680,G__G__ESD_517_0_44, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCascadeCosineOfPointingAngle",3081,G__G__ESD_517_0_45, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - refPointX d - 'Double_t' 0 - refPointY "
"d - 'Double_t' 0 - refPointZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosCovXi",1083,G__G__ESD_517_0_46, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_517_0_47, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDcascade::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_517_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDcascade::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_517_0_49, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDcascade::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_517_0_50, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDcascade::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_517_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_517_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDcascade::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_517_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDcascade::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_517_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDcascade::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_517_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDcascade::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDcascade", 1332, G__G__ESD_517_0_59, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDCosmicTrack(void) {
   /* AliESDCosmicTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDCosmicTrack));
   G__memfunc_setup("AliESDCosmicTrack",1605,G__G__ESD_518_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDCosmicTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDCosmicTrack",1605,G__G__ESD_518_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDCosmicTrack), -1, 0, 15, 1, 1, 0, 
"i - 'Int_t' 10 - idUp i - 'Int_t' 10 - idLow "
"U 'AliExternalTrackParam' - 10 - trkparUp U 'AliExternalTrackParam' - 10 - trkparLow "
"U 'AliExternalTrackParam' - 10 - parx0Up U 'AliExternalTrackParam' - 10 - parx0Low "
"i - 'Int_t' 10 - ncls d - 'Double_t' 10 - la "
"d - 'Double_t' 10 - chi2 d - 'Double_t' 10 - vd "
"d - 'Double_t' 10 - vz g - 'Bool_t' 10 - isreuse "
"d - 'Double_t' 10 - findable u 'TVector3' - 10 - innerclusterupper "
"u 'TVector3' - 10 - innerclusterlower", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDCosmicTrack",1605,G__G__ESD_518_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDCosmicTrack), -1, 0, 1, 1, 1, 0, "u 'AliESDCosmicTrack' - 11 - costrk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_518_0_4, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDCosmicTrack), -1, 1, 1, 1, 1, 0, "u 'AliESDCosmicTrack' - 11 - costrk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLowerPartner",1541,G__G__ESD_518_0_5, 85, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDUpperTrackParamAt0",2259,G__G__ESD_518_0_6, 85, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDLowerTrackParamAt0",2256,G__G__ESD_518_0_7, 85, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInnerClusterUpper",2058,G__G__ESD_518_0_8, 85, G__get_linked_tagnum(&G__G__ESDLN_TVector3), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInnerClusterLower",2055,G__G__ESD_518_0_9, 85, G__get_linked_tagnum(&G__G__ESDLN_TVector3), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDUpperTrackIndex",2037,G__G__ESD_518_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDLowerTrackIndex",2034,G__G__ESD_518_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNCluster",1104,G__G__ESD_518_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLeverArm",1086,G__G__ESD_518_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2PerCluster",1647,G__G__ESD_518_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImpactD",962,G__G__ESD_518_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImpactZ",984,G__G__ESD_518_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsReuse",704,G__G__ESD_518_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinFindableRatio",1880,G__G__ESD_518_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_518_0_19, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDCosmicTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_518_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDCosmicTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_518_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDCosmicTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_518_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDCosmicTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_518_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_518_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDCosmicTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_518_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDCosmicTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_518_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDCosmicTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_518_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDCosmicTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDCosmicTrack", 1731, G__G__ESD_518_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDMuonTrack(void) {
   /* AliESDMuonTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrack));
   G__memfunc_setup("AliESDMuonTrack",1414,G__G__ESD_549_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrack), -1, 0, 0, 1, 1, 0, "", "Constructor", (void*) NULL, 0);
   G__memfunc_setup("AliESDMuonTrack",1414,G__G__ESD_549_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrack), -1, 0, 1, 1, 1, 0, "u 'AliESDMuonTrack' - 11 - esdm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_549_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrack), -1, 1, 1, 1, 1, 0, "u 'AliESDMuonTrack' - 11 - esdm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,G__G__ESD_549_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ContainTrackerData",1810,G__G__ESD_549_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ContainTriggerData",1818,G__G__ESD_549_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInverseBendingMomentum",2565,G__G__ESD_549_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetInverseBendingMomentum",2577,G__G__ESD_549_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - InverseBendingMomentum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThetaX",878,G__G__ESD_549_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThetaX",890,G__G__ESD_549_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ThetaX", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThetaY",879,G__G__ESD_549_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThetaY",891,G__G__ESD_549_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ThetaY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__ESD_549_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ",390,G__G__ESD_549_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBendingCoor",1386,G__G__ESD_549_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBendingCoor",1398,G__G__ESD_549_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - BendingCoor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNonBendingCoor",1685,G__G__ESD_549_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNonBendingCoor",1697,G__G__ESD_549_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - NonBendingCoor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInverseBendingMomentumAtDCA",2946,G__G__ESD_549_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetInverseBendingMomentumAtDCA",2958,G__G__ESD_549_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - InverseBendingMomentum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThetaXAtDCA",1259,G__G__ESD_549_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThetaXAtDCA",1271,G__G__ESD_549_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ThetaX", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThetaYAtDCA",1260,G__G__ESD_549_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThetaYAtDCA",1272,G__G__ESD_549_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ThetaY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBendingCoorAtDCA",1767,G__G__ESD_549_0_27, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBendingCoorAtDCA",1779,G__G__ESD_549_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - BendingCoor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNonBendingCoorAtDCA",2066,G__G__ESD_549_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNonBendingCoorAtDCA",2078,G__G__ESD_549_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - NonBendingCoor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDCA",488,G__G__ESD_549_0_31, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInverseBendingMomentumUncorrected",3715,G__G__ESD_549_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetInverseBendingMomentumUncorrected",3727,G__G__ESD_549_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - InverseBendingMomentum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThetaXUncorrected",2028,G__G__ESD_549_0_34, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThetaXUncorrected",2040,G__G__ESD_549_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ThetaX", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThetaYUncorrected",2029,G__G__ESD_549_0_36, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThetaYUncorrected",2041,G__G__ESD_549_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ThetaY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZUncorrected",1528,G__G__ESD_549_0_38, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZUncorrected",1540,G__G__ESD_549_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBendingCoorUncorrected",2536,G__G__ESD_549_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBendingCoorUncorrected",2548,G__G__ESD_549_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - BendingCoor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNonBendingCoorUncorrected",2835,G__G__ESD_549_0_42, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNonBendingCoorUncorrected",2847,G__G__ESD_549_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - NonBendingCoor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCovariances",1422,G__G__ESD_549_0_44, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TMatrixT<double>' 'TMatrixD' 1 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCovariances",1434,G__G__ESD_549_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMatrixT<double>' 'TMatrixD' 11 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCovarianceXYZPxPyPz",2177,G__G__ESD_549_0_46, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRAtAbsorberEnd",1646,G__G__ESD_549_0_47, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRAtAbsorberEnd",1658,G__G__ESD_549_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2",614,G__G__ESD_549_0_49, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChi2",626,G__G__ESD_549_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNHit",659,G__G__ESD_549_0_51, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNDF",504,G__G__ESD_549_0_52, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNormalizedChi2",1659,G__G__ESD_549_0_53, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMatchTrigger",1505,G__G__ESD_549_0_54, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MatchTriggerDigits",1829,G__G__ESD_549_0_55, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "g - 'Bool_t' 0 - fromTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2MatchTrigger",1831,G__G__ESD_549_0_56, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChi2MatchTrigger",1843,G__G__ESD_549_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Chi2MatchTrigger", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitsPatternInTrigCh",2190,G__G__ESD_549_0_58, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHitsPatternInTrigCh",2202,G__G__ESD_549_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - hitsPatternInTrigCh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitsPatternInTrigChTrk",2495,G__G__ESD_549_0_60, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHitsPatternInTrigChTrk",2507,G__G__ESD_549_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - hitsPatternInTrigChTrk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLocalTrigger",1515,G__G__ESD_549_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - locTrig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoCircuit",910,G__G__ESD_549_0_63, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoStripX",805,G__G__ESD_549_0_64, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoStripY",806,G__G__ESD_549_0_65, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoDev",474,G__G__ESD_549_0_66, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoLpt",491,G__G__ESD_549_0_67, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoHpt",487,G__G__ESD_549_0_68, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerWithoutChamber",2458,G__G__ESD_549_0_69, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TriggerFiredWithoutChamber",2660,G__G__ESD_549_0_70, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ich", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMuonTrigDevSign",1797,G__G__ESD_549_0_71, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerX1Pattern",1883,G__G__ESD_549_0_72, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerY1Pattern",1884,G__G__ESD_549_0_73, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerX2Pattern",1884,G__G__ESD_549_0_74, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerY2Pattern",1885,G__G__ESD_549_0_75, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerX3Pattern",1885,G__G__ESD_549_0_76, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerY3Pattern",1886,G__G__ESD_549_0_77, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerX4Pattern",1886,G__G__ESD_549_0_78, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerY4Pattern",1887,G__G__ESD_549_0_79, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerX1Pattern",1895,G__G__ESD_549_0_80, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerY1Pattern",1896,G__G__ESD_549_0_81, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerX2Pattern",1896,G__G__ESD_549_0_82, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerY2Pattern",1897,G__G__ESD_549_0_83, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerX3Pattern",1897,G__G__ESD_549_0_84, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerY3Pattern",1898,G__G__ESD_549_0_85, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerX4Pattern",1898,G__G__ESD_549_0_86, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerY4Pattern",1899,G__G__ESD_549_0_87, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMuonClusterMap",1727,G__G__ESD_549_0_88, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMuonClusterMap",1739,G__G__ESD_549_0_89, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - muonClusterMap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddInMuonClusterMap",1887,G__G__ESD_549_0_90, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - chamber", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInMuonClusterMap",1810,G__G__ESD_549_0_91, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - chamber", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connected",915,G__G__ESD_549_0_92, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsConnected",1103,G__G__ESD_549_0_93, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddClusterId",1176,G__G__ESD_549_0_94, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - clusterId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNClusters",1219,G__G__ESD_549_0_95, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterId",1199,G__G__ESD_549_0_96, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOldTrack",976,G__G__ESD_549_0_97, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MoveClustersToESD",1675,G__G__ESD_549_0_98, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliESDEvent' - 1 - esd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Px",200,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Py",201,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Pz",202,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("P",80,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PxPyPz",603,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LorentzP",830,G__G__ESD_549_0_104, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TLorentzVector' - 1 - vP", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PxAtDCA",581,G__G__ESD_549_0_105, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PyAtDCA",582,G__G__ESD_549_0_106, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PzAtDCA",583,G__G__ESD_549_0_107, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PAtDCA",461,G__G__ESD_549_0_108, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PxPyPzAtDCA",984,G__G__ESD_549_0_109, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LorentzPAtDCA",1211,G__G__ESD_549_0_110, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TLorentzVector' - 1 - vP", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PxUncorrected",1350,G__G__ESD_549_0_111, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PyUncorrected",1351,G__G__ESD_549_0_112, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PzUncorrected",1352,G__G__ESD_549_0_113, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PUncorrected",1230,G__G__ESD_549_0_114, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PxPyPzUncorrected",1753,G__G__ESD_549_0_115, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LorentzPUncorrected",1980,G__G__ESD_549_0_116, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TLorentzVector' - 1 - vP", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xv",206,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "put reasonable values here", (void*) NULL, 1);
   G__memfunc_setup("Yv",207,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Zv",208,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("XvYvZv",621,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Pt",196,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OneOverPt",898,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Phi",289,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Theta",502,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("E",69,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("M",77,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Eta",282,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Y",89,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Charge",586,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PID",221,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PdgCode",662,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLabel",780,G__G__ESD_549_0_132, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabel",768,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFiredChamber",1480,G__G__ESD_549_0_134, 121, -1, -1, 0, 3, 3, 1, 0, 
"h - 'UInt_t' 1 - pattern i - 'Int_t' 0 - cathode "
"i - 'Int_t' 0 - chamber", (char*)NULL, (void*) G__func2void( (void (*)(UInt_t&, Int_t, Int_t))(&AliESDMuonTrack::SetFiredChamber) ), 0);
   G__memfunc_setup("AddEffInfo",934,G__G__ESD_549_0_135, 121, -1, -1, 0, 4, 3, 1, 0, 
"h - 'UInt_t' 1 - pattern i - 'Int_t' 0 - slatOrInfo "
"i - 'Int_t' 0 '0' board i 'AliESDMuonTrack::EAliTriggerChPatternFlag' - 0 'kNoEff' effType", (char*)NULL, (void*) G__func2void( (void (*)(UInt_t&, Int_t, Int_t, AliESDMuonTrack::EAliTriggerChPatternFlag))(&AliESDMuonTrack::AddEffInfo) ), 0);
   G__memfunc_setup("IsChamberHit",1171,G__G__ESD_549_0_136, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"h - 'UInt_t' 0 - pattern i - 'Int_t' 0 - cathode "
"i - 'Int_t' 0 - chamber", (char*)NULL, (void*) G__func2void( (Bool_t (*)(UInt_t, Int_t, Int_t))(&AliESDMuonTrack::IsChamberHit) ), 0);
   G__memfunc_setup("GetEffFlag",939,G__G__ESD_549_0_137, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "h - 'UInt_t' 0 - pattern", (char*)NULL, (void*) G__func2void( (Int_t (*)(UInt_t))(&AliESDMuonTrack::GetEffFlag) ), 0);
   G__memfunc_setup("GetSlatOrInfo",1281,G__G__ESD_549_0_138, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "h - 'UInt_t' 0 - pattern", (char*)NULL, (void*) G__func2void( (Int_t (*)(UInt_t))(&AliESDMuonTrack::GetSlatOrInfo) ), 0);
   G__memfunc_setup("GetCrossedBoard",1499,G__G__ESD_549_0_139, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "h - 'UInt_t' 0 - pattern", (char*)NULL, (void*) G__func2void( (Int_t (*)(UInt_t))(&AliESDMuonTrack::GetCrossedBoard) ), 0);
   G__memfunc_setup("AddMuonTrigDevSignInfo",2170,G__G__ESD_549_0_140, 121, -1, -1, 0, 1, 1, 1, 8, "h - 'UInt_t' 1 - pattern", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDEvent",1022,G__G__ESD_549_0_141, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetESDEvent",1034,G__G__ESD_549_0_142, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDEvent' - 0 - evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_549_0_143, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDMuonTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_549_0_144, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDMuonTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_549_0_145, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDMuonTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_549_0_146, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDMuonTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_549_0_150, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_549_0_151, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDMuonTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_549_0_152, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDMuonTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_549_0_153, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDMuonTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_549_0_154, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDMuonTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDMuonTrack", 1540, G__G__ESD_549_0_155, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDPmdTrack(void) {
   /* AliESDPmdTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDPmdTrack));
   G__memfunc_setup("AliESDPmdTrack",1288,G__G__ESD_552_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDPmdTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDPmdTrack",1288,G__G__ESD_552_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDPmdTrack), -1, 0, 1, 1, 1, 0, "u 'AliESDPmdTrack' - 11 - PMDTrack", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_552_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDPmdTrack), -1, 1, 1, 1, 1, 0, "u 'AliESDPmdTrack' - 11 - PMDTrack", "assignment op", (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDetector",1126,G__G__ESD_552_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClusterX",1126,G__G__ESD_552_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - xglobal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClusterY",1127,G__G__ESD_552_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - yglobal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClusterZ",1128,G__G__ESD_552_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - zglobal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClusterADC",1238,G__G__ESD_552_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cluadc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClusterCells",1537,G__G__ESD_552_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ncell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClusterPID",1259,G__G__ESD_552_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - clupid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSmn",602,G__G__ESD_552_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - smn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClusterTrackNo",1728,G__G__ESD_552_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trno", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClusterTrackPid",1824,G__G__ESD_552_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trpid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClusterMatching",1849,G__G__ESD_552_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - mstat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClusterSigmaX",1623,G__G__ESD_552_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - sigx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClusterSigmaY",1624,G__G__ESD_552_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - sigy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterX",1114,G__G__ESD_552_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterY",1115,G__G__ESD_552_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterZ",1116,G__G__ESD_552_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterADC",1226,G__G__ESD_552_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterPID",1247,G__G__ESD_552_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterCells",1525,G__G__ESD_552_0_23, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetector",1114,G__G__ESD_552_0_24, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSmn",590,G__G__ESD_552_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterTrackNo",1716,G__G__ESD_552_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterTrackPid",1812,G__G__ESD_552_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterMatching",1837,G__G__ESD_552_0_28, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterSigmaX",1611,G__G__ESD_552_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterSigmaY",1612,G__G__ESD_552_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_552_0_31, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDPmdTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_552_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDPmdTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_552_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDPmdTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_552_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDPmdTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_552_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_552_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDPmdTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_552_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDPmdTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_552_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDPmdTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_552_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDPmdTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDPmdTrack", 1414, G__G__ESD_552_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDTrdTracklet(void) {
   /* AliESDTrdTracklet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTracklet));
   G__memfunc_setup("AliESDTrdTracklet",1622,G__G__ESD_559_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTracklet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDTrdTracklet",1622,G__G__ESD_559_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTracklet), -1, 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - trackletWord s - 'Short_t' 0 - hcid "
"i - 'Int_t' 0 '-1' label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDTrdTracklet",1622,G__G__ESD_559_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTracklet), -1, 0, 1, 1, 1, 0, "u 'AliESDTrdTracklet' - 11 - trkl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_559_0_4, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTracklet), -1, 1, 1, 1, 1, 0, "u 'AliESDTrdTracklet' - 11 - trkl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrackletWord",1538,G__G__ESD_559_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - trklWord", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHCId",612,G__G__ESD_559_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - hcid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLabel",780,G__G__ESD_559_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackletWord",1526,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBinY",658,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBinDy",758,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBinZ",659,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPID",509,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHCId",600,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDetector",1114,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetROB",515,G__G__ESD_559_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMCM",509,G__G__ESD_559_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabel",768,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_559_0_18, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDTrdTracklet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_559_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTrdTracklet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_559_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDTrdTracklet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_559_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDTrdTracklet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_559_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_559_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTrdTracklet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_559_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTrdTracklet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_559_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTrdTracklet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_559_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTrdTracklet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDTrdTracklet", 1748, G__G__ESD_559_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDTOFHit(void) {
   /* AliESDTOFHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFHit));
   G__memfunc_setup("AliESDTOFHit",1024,G__G__ESD_563_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDTOFHit",1024,G__G__ESD_563_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFHit), -1, 0, 11, 1, 1, 0, 
"d - 'Double_t' 0 - time d - 'Double_t' 0 - timeraw "
"d - 'Double_t' 0 - tot i - 'Int_t' 0 - channel "
"I - 'Int_t' 0 - label i - 'Int_t' 0 - latency "
"i - 'Int_t' 0 - deltabc i - 'Int_t' 0 - cluster "
"f - 'Float_t' 0 - z f - 'Float_t' 0 - r "
"f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDTOFHit",1024,G__G__ESD_563_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFHit), -1, 0, 1, 1, 1, 0, "u 'AliESDTOFHit' - 1 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_563_0_4, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFHit), -1, 1, 1, 1, 1, 0, "u 'AliESDTOFHit' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDTOFClusterIndex",1983,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetESDTOFClusterIndex",1995,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTime",699,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - time", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTimeRaw",997,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - timeraw", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTOT",547,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - tot", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetL0L1Latency",1269,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - latency", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDeltaBC",923,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - deltabc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTOFchannel",1262,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - tofch", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTimeRaw",985,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOT",535,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL0L1Latency",1257,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDeltaBC",911,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFchannel",1250,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTime",687,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFLabel",1001,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTOFLabel",1013,G__G__ESD_563_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - label", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetR",370,G__G__ESD_563_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__ESD_563_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhi",577,G__G__ESD_563_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetR",382,G__G__ESD_563_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ",390,G__G__ESD_563_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhi",589,G__G__ESD_563_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_563_0_28, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDTOFHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_563_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTOFHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_563_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDTOFHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_563_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDTOFHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_563_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_563_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTOFHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_563_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTOFHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_563_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTOFHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_563_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTOFHit::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDTOFHit", 1150, G__G__ESD_563_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDTOFMatch(void) {
   /* AliESDTOFMatch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFMatch));
   G__memfunc_setup("AliESDTOFMatch",1224,G__G__ESD_565_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFMatch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDTOFMatch",1224,G__G__ESD_565_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFMatch), -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - i D - 'Double_t' 0 - inttimes "
"d - 'Double_t' 0 - dx d - 'Double_t' 0 - dy "
"d - 'Double_t' 0 - dz d - 'Double_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDTOFMatch",1224,G__G__ESD_565_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFMatch), -1, 0, 1, 1, 1, 0, "u 'AliESDTOFMatch' - 1 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_565_0_4, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFMatch), -1, 1, 1, 1, 1, 0, "u 'AliESDTOFMatch' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDx",476,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDy",477,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDz",478,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackLength",1399,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDx",488,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - delta", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDy",489,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - delta", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDz",490,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - delta", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTrackLength",1411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - length", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIntegratedTimes",1833,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIntegratedTimes",1833,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetIntegratedTimes",1845,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackIndex",1293,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTrackIndex",1305,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_565_0_19, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDTOFMatch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_565_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTOFMatch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_565_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDTOFMatch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_565_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDTOFMatch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_565_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_565_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTOFMatch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_565_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTOFMatch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_565_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTOFMatch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_565_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTOFMatch::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDTOFMatch", 1350, G__G__ESD_565_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDTOFCluster(void) {
   /* AliESDTOFCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFCluster));
   G__memfunc_setup("AliESDTOFCluster",1469,G__G__ESD_566_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFCluster), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDTOFCluster",1469,G__G__ESD_566_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFCluster), -1, 0, 18, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - I - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"g - 'Bool_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"i - 'Int_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDTOFCluster",1469,G__G__ESD_566_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFCluster), -1, 0, 12, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - t I - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"g - 'Bool_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDTOFCluster",1469,G__G__ESD_566_0_4, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFCluster), -1, 0, 1, 1, 1, 0, "u 'AliESDTOFCluster' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_566_0_5, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFCluster), -1, 1, 1, 1, 1, 0, "u 'AliESDTOFCluster' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDID",649,G__G__ESD_566_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetESDID",661,G__G__ESD_566_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__G__ESD_566_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetID",441,G__G__ESD_566_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Update",611,G__G__ESD_566_0_10, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - trackIndex f - 'Float_t' 0 - dX "
"f - 'Float_t' 0 - dY f - 'Float_t' 0 - dZ "
"f - 'Float_t' 0 - length D - 'Double_t' 0 - expTimes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SuppressMatchedTrack",2064,G__G__ESD_566_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReplaceMatchedTrackID",2036,G__G__ESD_566_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - oldID i - - 0 - newID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReplaceMatchID",1334,G__G__ESD_566_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - oldID i - - 0 - newID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReplaceHitID",1134,G__G__ESD_566_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - oldID i - - 0 - newID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FixSelfReferences",1715,G__G__ESD_566_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - oldID i - - 0 - newID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterIndex",1530,G__G__ESD_566_0_16, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' ihit", "cluster index", (void*) NULL, 1);
   G__memfunc_setup("GetTOFchannel",1250,G__G__ESD_566_0_17, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' ihit", "TOF channel", (void*) NULL, 1);
   G__memfunc_setup("GetTime",687,G__G__ESD_566_0_18, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' ihit", "TOF time", (void*) NULL, 1);
   G__memfunc_setup("GetTimeRaw",985,G__G__ESD_566_0_19, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' ihit", "TOF raw time", (void*) NULL, 1);
   G__memfunc_setup("GetTOT",535,G__G__ESD_566_0_20, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' ihit", "TOF tot", (void*) NULL, 1);
   G__memfunc_setup("GetTOFsignalToT",1438,G__G__ESD_566_0_21, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' ihit", "TOF tot", (void*) NULL, 0);
   G__memfunc_setup("GetLabel",768,G__G__ESD_566_0_22, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 '0' i i - 'Int_t' 0 '0' ihit", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDeltaBC",911,G__G__ESD_566_0_23, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' ihit", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL0L1Latency",1257,G__G__ESD_566_0_24, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' ihit", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStatus",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZ",378,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPhi",577,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetR",370,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNMatchableTracks",1879,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNTOFhits",1039,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackIndex",1293,G__G__ESD_566_0_31, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDistanceInStripPlane",2308,G__G__ESD_566_0_32, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' i", "distance", (void*) NULL, 1);
   G__memfunc_setup("GetDx",476,G__G__ESD_566_0_33, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' i", "distance, X component", (void*) NULL, 1);
   G__memfunc_setup("GetDy",477,G__G__ESD_566_0_34, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' i", "distance, Y component", (void*) NULL, 1);
   G__memfunc_setup("GetDz",478,G__G__ESD_566_0_35, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' i", "distance, Z component", (void*) NULL, 1);
   G__memfunc_setup("GetLength",898,G__G__ESD_566_0_36, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' i", "reconstructed track length at TOF", (void*) NULL, 1);
   G__memfunc_setup("GetIntegratedTime",1718,G__G__ESD_566_0_37, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 '0' iPart i - 'Int_t' 0 '0' i", "reconstructed track length at TOF", (void*) NULL, 1);
   G__memfunc_setup("SetStatus",944,G__G__ESD_566_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddESDTOFHitIndex",1515,G__G__ESD_566_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - hitID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTOFhit",823,G__G__ESD_566_0_40, 121, -1, -1, 0, 12, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - I - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"g - 'Bool_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTOFhit",823,G__G__ESD_566_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDTOFHit' - 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitIndex",1085,G__G__ESD_566_0_42, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHitIndex",1097,G__G__ESD_566_0_43, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFHit",814,G__G__ESD_566_0_45, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFHit), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFMatch",1014,G__G__ESD_566_0_46, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDTOFMatch), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_566_0_47, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDTOFCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_566_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTOFCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_566_0_49, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDTOFCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_566_0_50, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDTOFCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_566_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_566_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTOFCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_566_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTOFCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_566_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTOFCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_566_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTOFCluster::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDTOFCluster", 1595, G__G__ESD_566_0_59, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTrackPointArray(void) {
   /* AliTrackPointArray */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTrackPointArray));
   G__memfunc_setup("AliTrackPointArray",1812,G__G__ESD_569_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTrackPointArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTrackPointArray",1812,G__G__ESD_569_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTrackPointArray), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - npoints", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTrackPointArray",1812,G__G__ESD_569_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTrackPointArray), -1, 0, 1, 1, 1, 0, "u 'AliTrackPointArray' - 11 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_569_0_4, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTrackPointArray), -1, 1, 1, 1, 1, 0, "u 'AliTrackPointArray' - 11 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPoint",787,G__G__ESD_569_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i U 'AliTrackPoint' - 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPoints",1003,G__G__ESD_569_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCovSize",995,G__G__ESD_569_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPoint",810,G__G__ESD_569_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'AliTrackPoint' - 1 - p i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__G__ESD_569_0_9, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__G__ESD_569_0_10, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__ESD_569_0_11, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCharge",874,G__G__ESD_569_0_12, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDriftTime",1192,G__G__ESD_569_0_13, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChargeRatio",1385,G__G__ESD_569_0_14, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterType",1444,G__G__ESD_569_0_15, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtra",804,G__G__ESD_569_0_16, 71, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCov",584,G__G__ESD_569_0_17, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolumeID",1061,G__G__ESD_569_0_18, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasVolumeID",1057,G__G__ESD_569_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "r - 'UShort_t' 0 - volid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Sort",424,G__G__ESD_569_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' down", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_569_0_22, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTrackPointArray::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_569_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTrackPointArray::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_569_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTrackPointArray::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_569_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTrackPointArray::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_569_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_569_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTrackPointArray::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_569_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTrackPointArray::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_569_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTrackPointArray::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_569_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTrackPointArray::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTrackPointArray", 1938, G__G__ESD_569_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTrackPoint(void) {
   /* AliTrackPoint */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTrackPoint));
   G__memfunc_setup("AliTrackPoint",1301,G__G__ESD_580_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTrackPoint), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTrackPoint",1301,G__G__ESD_580_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTrackPoint), -1, 0, 9, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z F - 'Float_t' 10 - cov "
"r - 'UShort_t' 0 - volid f - 'Float_t' 0 '0' charge "
"f - 'Float_t' 0 '0' drifttime f - 'Float_t' 0 '0' chargeratio "
"i - 'Int_t' 0 '0' clutype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTrackPoint",1301,G__G__ESD_580_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTrackPoint), -1, 0, 7, 1, 1, 0, 
"F - 'Float_t' 10 - xyz F - 'Float_t' 10 - cov "
"r - 'UShort_t' 0 - volid f - 'Float_t' 0 '0' charge "
"f - 'Float_t' 0 '0' drifttime f - 'Float_t' 0 '0' chargeratio "
"i - 'Int_t' 0 '0' clutype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTrackPoint",1301,G__G__ESD_580_0_4, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTrackPoint), -1, 0, 1, 1, 1, 0, "u 'AliTrackPoint' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_580_0_5, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTrackPoint), -1, 1, 1, 1, 1, 0, "u 'AliTrackPoint' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXYZ",567,G__G__ESD_580_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z F - 'Float_t' 10 '0' cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXYZ",567,G__G__ESD_580_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 10 - xyz F - 'Float_t' 10 '0' cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCov",596,G__G__ESD_580_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVolumeID",1073,G__G__ESD_580_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - volid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCharge",886,G__G__ESD_580_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDriftTime",1204,G__G__ESD_580_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChargeRatio",1397,G__G__ESD_580_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ratio", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClusterType",1456,G__G__ESD_580_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - clutype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExtra",816,G__G__ESD_580_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__G__ESD_580_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__G__ESD_580_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__ESD_580_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXYZ",555,G__G__ESD_580_0_18, 121, -1, -1, 0, 2, 1, 1, 8, 
"F - 'Float_t' 0 - xyz F - 'Float_t' 0 '0' cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCov",584,G__G__ESD_580_0_19, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolumeID",1061,G__G__ESD_580_0_20, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCharge",874,G__G__ESD_580_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDriftTime",1192,G__G__ESD_580_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChargeRatio",1385,G__G__ESD_580_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterType",1444,G__G__ESD_580_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExtra",704,G__G__ESD_580_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResidual",1113,G__G__ESD_580_0_26, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"u 'AliTrackPoint' - 11 - p g - 'Bool_t' 0 'kFALSE' weighted", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPCA",500,G__G__ESD_580_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'AliTrackPoint' - 11 - p u 'AliTrackPoint' - 1 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAngle",775,G__G__ESD_580_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRotMatrix",1226,G__G__ESD_580_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TGeoRotation' - 1 - rot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAlignCovMatrix",1716,G__G__ESD_580_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - alignparmtrx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Rotate",623,G__G__ESD_580_0_31, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTrackPoint), -1, 1, 1, 1, 1, 8, "f - 'Float_t' 0 - alpha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MasterToLocal",1306,G__G__ESD_580_0_32, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTrackPoint), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_580_0_34, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTrackPoint::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_580_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTrackPoint::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_580_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTrackPoint::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_580_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTrackPoint::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_580_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_580_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTrackPoint::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_580_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTrackPoint::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_580_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTrackPoint::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_580_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTrackPoint::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTrackPoint", 1427, G__G__ESD_580_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliKalmanTrack(void) {
   /* AliKalmanTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKalmanTrack));
   G__memfunc_setup("operator=",937,G__G__ESD_582_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliKalmanTrack), -1, 1, 1, 1, 1, 0, "u 'AliKalmanTrack' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLabel",780,G__G__ESD_582_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - lab", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredictedChi2",1530,G__G__ESD_582_0_5, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "U 'AliCluster' - 10 - c", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("PropagateTo",1126,G__G__ESD_582_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - xr d - 'Double_t' 0 - x0 "
"d - 'Double_t' 0 - rho", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Update",611,G__G__ESD_582_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'AliCluster' - 10 - c d - 'Double_t' 0 - chi2 "
"i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabel",768,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetChi2",614,G__G__ESD_582_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMass",692,G__G__ESD_582_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfClusters",1939,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetClusterIndex",1530,G__G__ESD_582_0_13, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfTracklets",2027,G__G__ESD_582_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackletIndex",1618,G__G__ESD_582_0_15, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPIDsignal",1147,G__G__ESD_582_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetExternalParameters",2167,G__G__ESD_582_0_18, 121, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - xr D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExternalCovariance",2142,G__G__ESD_582_0_19, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StartTimeIntegral",1747,G__G__ESD_582_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIntegratedLength",1941,G__G__ESD_582_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIntegratedTimes",1845,G__G__ESD_582_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - times", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsStartedTimeIntegral",2136,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddTimeStep",1076,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - length", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIntegratedTimes",1833,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 0 - times i - 'Int_t' 0 'AliPID::kSPECIESC' nspec", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIntegratedTime",1718,G__G__ESD_582_0_26, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - pdg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntegratedLength",1929,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumberOfClusters",1951,G__G__ESD_582_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFakeRatio",1186,G__G__ESD_582_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ratio", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFakeRatio",1174,G__G__ESD_582_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMass",704,G__G__ESD_582_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - mass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChi2",626,G__G__ESD_582_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_582_0_33, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliKalmanTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_582_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliKalmanTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_582_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliKalmanTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_582_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliKalmanTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_582_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_582_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliKalmanTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_582_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliKalmanTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_582_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliKalmanTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_582_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliKalmanTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliKalmanTrack", 1501, G__G__ESD_582_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDfriendTrack(void) {
   /* AliESDfriendTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack));
   G__memfunc_setup("AliESDfriendTrack",1631,G__G__ESD_585_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDfriendTrack",1631,G__G__ESD_585_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack), -1, 0, 2, 1, 1, 0, 
"u 'AliESDfriendTrack' - 11 - t g - 'Bool_t' 0 'kFALSE' shallow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOwner",823,G__G__ESD_585_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetESDtrackID",1194,G__G__ESD_585_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDtrackID",1182,G__G__ESD_585_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set1P",429,G__G__ESD_585_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrackPointArray",1834,G__G__ESD_585_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTrackPointArray' - 0 - points", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get1P",417,G__G__ESD_585_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSindices",1263,G__G__ESD_585_0_10, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCindices",1254,G__G__ESD_585_0_11, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDindices",1257,G__G__ESD_585_0_12, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackPointArray",1822,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliTrackPointArray), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetITStrack",1073,G__G__ESD_585_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliKalmanTrack' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDtrack",1067,G__G__ESD_585_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliKalmanTrack' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDtrack",1055,G__G__ESD_585_0_16, 85, G__get_linked_tagnum(&G__G__ESDLN_AliKalmanTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITStrack",1061,G__G__ESD_585_0_17, 85, G__get_linked_tagnum(&G__G__ESDLN_AliKalmanTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCalibObject",1339,G__G__ESD_585_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - calibObject", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveCalibObject",1696,G__G__ESD_585_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - calibObject", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibObject",1362,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TObject), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTPCOut",843,G__G__ESD_585_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliExternalTrackParam' - 11 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSOut",852,G__G__ESD_585_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliExternalTrackParam' - 11 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDIn",717,G__G__ESD_585_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliExternalTrackParam' - 11 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCOut",831,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetITSOut",840,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDIn",705,G__G__ESD_585_0_26, 85, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackParamTPCOut",1829,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamITSOut",1838,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetTrackParamTPCOut",2056,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'AliExternalTrackParam' - 10 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetITSIndices",1243,G__G__ESD_585_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'Int_t' 0 - indices i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCIndices",1234,G__G__ESD_585_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'Int_t' 0 - indices i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDIndices",1237,G__G__ESD_585_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'Int_t' 0 - indices i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxITScluster",1592,G__G__ESD_585_0_33, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxTPCcluster",1583,G__G__ESD_585_0_34, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxTRDcluster",1586,G__G__ESD_585_0_35, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSkipBit",994,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - skip", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TestSkipBit",1110,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCseed",936,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliTPCseed' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCseed",936,G__G__ESD_585_0_39, 85, G__get_linked_tagnum(&G__G__ESDLN_TObject), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetTPCseed",1163,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTPCseed' - 10 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TagSuppressSharedObjectsBeforeDeletion",3881,G__G__ESD_585_0_41, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack), -1, 1, 1, 1, 4, 0, "u 'AliESDfriendTrack' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_585_0_43, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDfriendTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_585_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDfriendTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_585_0_45, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDfriendTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_585_0_46, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDfriendTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_585_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_585_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDfriendTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_585_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDfriendTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_585_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDfriendTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_585_0_54, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDfriendTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDfriendTrack", 1757, G__G__ESD_585_0_55, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDtrack(void) {
   /* AliESDtrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack));
   G__memfunc_setup("AliESDtrack",1031,G__G__ESD_590_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDtrack",1031,G__G__ESD_590_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack), -1, 0, 1, 1, 1, 0, "u 'AliESDtrack' - 11 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDtrack",1031,G__G__ESD_590_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack), -1, 0, 1, 1, 1, 0, "U 'AliVTrack' - 10 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDtrack",1031,G__G__ESD_590_0_4, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack), -1, 0, 1, 1, 1, 0, "U 'TParticle' - 0 - part", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFriendTrack",1389,G__G__ESD_590_0_6, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFriendTrack",1401,G__G__ESD_590_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDfriendTrack' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReleaseESDfriendTrack",2058,G__G__ESD_590_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFriendTrackPointer",2138,G__G__ESD_590_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDfriendTrack' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCalibObject",1339,G__G__ESD_590_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - object", "add calib object to the list", (void*) NULL, 0);
   G__memfunc_setup("GetCalibObject",1362,G__G__ESD_590_0_11, 85, G__get_linked_tagnum(&G__G__ESDLN_TObject), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", "return calib objct at given position", (void*) NULL, 0);
   G__memfunc_setup("MakeMiniESDtrack",1532,G__G__ESD_590_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetID",441,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - id", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetID",429,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVertexID",1079,G__G__ESD_590_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertexID",1067,G__G__ESD_590_0_16, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStatus",944,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - flags", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetStatus",1159,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - flags", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UpdateTrackParams",1724,G__G__ESD_590_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'AliKalmanTrack' - 10 - t k - 'ULong_t' 0 - flags", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIntegratedLength",1941,G__G__ESD_590_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIntegratedTimes",1845,G__G__ESD_590_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - times", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetESDpid",837,G__G__ESD_590_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDpid",825,G__G__ESD_590_0_23, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PID",221,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsOn",377,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - mask", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStatus",932,(G__InterfaceMethod) NULL,107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabel",768,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLabel",780,G__G__ESD_590_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExternalParameters",2167,G__G__ESD_590_0_29, 121, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - x D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExternalCovariance",2142,G__G__ESD_590_0_30, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntegratedLength",1929,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIntegratedLengthOld",2216,G__G__ESD_590_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntegratedTimes",1833,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 0 - times i - 'Int_t' 0 'AliPID::kSPECIES' nspec", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIntegratedTimesOld",2120,G__G__ESD_590_0_34, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPID",509,G__G__ESD_590_0_35, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kFALSE' tpcOnly", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFBunchCrossing",1857,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 '0' b g - 'Bool_t' 0 'kTRUE' pidTPConly", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFExpTDiff",1283,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 '0' b g - 'Bool_t' 0 'kTRUE' pidTPConly", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFExpTDiffSpec",1678,G__G__ESD_590_0_38, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i 'AliPID::EParticleType' - 0 'AliPID::kPion' specie d - 'Double_t' 0 '0' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMass",692,G__G__ESD_590_0_39, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kFALSE' tpcOnly", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMassForTracking",1806,G__G__ESD_590_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPIDForTracking",1635,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pid", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPIDForTracking",1623,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPIDForTracking0",1671,G__G__ESD_590_0_43, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("M",77,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("E",69,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Y",89,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetConstrainedPxPyPz",2037,G__G__ESD_590_0_47, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConstrainedXYZ",1701,G__G__ESD_590_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConstrainedParam",1931,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetConstrainedExternalParameters",3313,G__G__ESD_590_0_50, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - alpha d - 'Double_t' 1 - x "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConstrainedExternalCovariance",3288,G__G__ESD_590_0_51, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConstrainedChi2",1760,G__G__ESD_590_0_52, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2TPCConstrainedVsGlobal",2785,G__G__ESD_590_0_53, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "U 'AliESDVertex' - 10 - vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCachedChi2TPCConstrainedVsGlobalVal",3644,G__G__ESD_590_0_54, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGlobalChi2",1219,G__G__ESD_590_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGlobalChi2",1207,G__G__ESD_590_0_56, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInnerPxPyPz",1399,G__G__ESD_590_0_57, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInnerParam",1293,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCInnerParam",1524,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillTPCOnlyTrack",1541,G__G__ESD_590_0_60, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'AliESDtrack' - 1 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInnerXYZ",1063,G__G__ESD_590_0_61, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInnerExternalParameters",2675,G__G__ESD_590_0_62, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - alpha d - 'Double_t' 1 - x "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInnerExternalCovariance",2650,G__G__ESD_590_0_63, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOuterParam",1324,G__G__ESD_590_0_64, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'AliExternalTrackParam' - 10 - p k - 'ULong_t' 0 - flags", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOuterHmpParam",1617,G__G__ESD_590_0_65, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'AliExternalTrackParam' - 10 - p k - 'ULong_t' 0 - flags", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOuterParam",1312,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOuterHmpParam",1605,G__G__ESD_590_0_67, 85, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOuterPxPyPz",1418,G__G__ESD_590_0_68, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOuterHmpPxPyPz",1711,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOuterXYZ",1082,G__G__ESD_590_0_70, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOuterHmpXYZ",1375,G__G__ESD_590_0_71, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOuterExternalParameters",2694,G__G__ESD_590_0_72, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - alpha d - 'Double_t' 1 - x "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOuterExternalCovariance",2669,G__G__ESD_590_0_73, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOuterHmpExternalParameters",2987,G__G__ESD_590_0_74, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - alpha d - 'Double_t' 1 - x "
"D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOuterHmpExternalCovariance",2962,G__G__ESD_590_0_75, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNcls",688,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idet", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetClusters",1141,G__G__ESD_590_0_77, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - idet I - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSpid",857,G__G__ESD_590_0_78, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSpid",845,G__G__ESD_590_0_79, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSsignal",1166,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetITSdEdxSamples",1654,G__G__ESD_590_0_81, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSdEdxSamples",1642,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetITSsignalTunedOnData",2245,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetITSsignalTunedOnData",2257,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - signal", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetITSchi2",898,G__G__ESD_590_0_85, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ITSchi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSNcls",940,G__G__ESD_590_0_86, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - ITSncls", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSchi2",886,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetITSchi2Std",1185,G__G__ESD_590_0_88, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSchi2Std",1197,G__G__ESD_590_0_89, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - chi2 i - 'Int_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSclusters",1413,(G__InterfaceMethod) NULL,99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 8, "I - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetITSClusterMap",1552,(G__InterfaceMethod) NULL,98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetITSClusterMap",1564,G__G__ESD_590_0_92, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - amap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSNcls",928,G__G__ESD_590_0_93, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSSharedMap",1413,G__G__ESD_590_0_94, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSSharedFlag",1517,G__G__ESD_590_0_95, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - lr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSFakeFlag",1281,G__G__ESD_590_0_96, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSFakeFlag",1293,G__G__ESD_590_0_97, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSSharedMap",1425,G__G__ESD_590_0_98, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - map", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSModuleIndex",1658,G__G__ESD_590_0_99, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ilayer i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSModuleIndex",1646,G__G__ESD_590_0_100, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ilayer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSModuleIndexInfo",2042,G__G__ESD_590_0_101, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 0 - ilayer i - 'Int_t' 1 - idet "
"i - 'Int_t' 1 - status f - 'Float_t' 1 - xloc "
"f - 'Float_t' 1 - zloc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSLabel",1008,G__G__ESD_590_0_102, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSLabel",1020,G__G__ESD_590_0_103, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITStrack",1073,G__G__ESD_590_0_104, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliKalmanTrack' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITStrack",1061,G__G__ESD_590_0_105, 85, G__get_linked_tagnum(&G__G__ESDLN_AliKalmanTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasPointOnITSLayer",1744,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HasSharedPointOnITSLayer",2343,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTPCpid",848,G__G__ESD_590_0_108, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCpid",836,G__G__ESD_590_0_109, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCPoints",1168,G__G__ESD_590_0_110, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - points", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCNcls",931,G__G__ESD_590_0_111, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - assigned", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCchi2",889,G__G__ESD_590_0_112, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - TPCchi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCPointsF",1238,G__G__ESD_590_0_113, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - findable", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCPointsFIter1",1691,G__G__ESD_590_0_114, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - findable", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCNcls",919,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCNclsF",989,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCNclsIter1",1372,G__G__ESD_590_0_117, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCNclsFIter1",1442,G__G__ESD_590_0_118, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCnclsS",1034,G__G__ESD_590_0_119, 114, -1, G__defined_typename("UShort_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 '0' i0 i - 'Int_t' 0 '159' i1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCncls",951,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 '0' row0 i - 'Int_t' 0 '159' row1", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCPoints",1156,G__G__ESD_590_0_121, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetKinkIndexes",1417,G__G__ESD_590_0_122, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - points", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetV0Indexes",1154,G__G__ESD_590_0_123, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - points", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCsignal",1169,G__G__ESD_590_0_124, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - signal f - 'Float_t' 0 - sigma "
"b - 'UChar_t' 0 - npoints", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCsignalTunedOnData",2248,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - signal", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTPCdEdxInfo",1316,G__G__ESD_590_0_126, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTPCdEdxInfo' - 0 - dEdxInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetdEdxInfo",1073,G__G__ESD_590_0_127, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - regionID i - 'Int_t' 0 - calibID "
"i - 'Int_t' 0 - qID i - 'Int_t' 0 - valueID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetdEdxInfoTRD",1307,G__G__ESD_590_0_128, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - method d - 'Double_t' 0 - p0 "
"d - 'Double_t' 0 - p1 d - 'Double_t' 0 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCdEdxInfo",1304,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliTPCdEdxInfo), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCsignal",1157,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCsignalTunedOnData",2236,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCsignalSigma",1654,G__G__ESD_590_0_132, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCsignalN",1235,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCmomentum",1401,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCTgl",814,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCchi2",877,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCchi2Iter1",1330,G__G__ESD_590_0_137, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCclusters",1404,G__G__ESD_590_0_138, 114, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 8, "I - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCdensity",1287,G__G__ESD_590_0_139, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - row0 i - 'Int_t' 0 - row1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCLabel",999,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetKinkIndex",1189,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetV0Index",926,G__G__ESD_590_0_142, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCFitMap",1096,G__G__ESD_590_0_143, 117, G__get_linked_tagnum(&G__G__ESDLN_TBits), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCFitMapPtr",1406,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TBits), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCClusterMap",1543,G__G__ESD_590_0_145, 117, G__get_linked_tagnum(&G__G__ESDLN_TBits), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCClusterMapPtr",1853,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TBits), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCSharedMap",1404,G__G__ESD_590_0_147, 117, G__get_linked_tagnum(&G__G__ESDLN_TBits), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCSharedMapPtr",1714,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TBits), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTPCFitMap",1108,G__G__ESD_590_0_149, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBits' - 11 - amap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCClusterMap",1555,G__G__ESD_590_0_150, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBits' - 11 - amap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCSharedMap",1416,G__G__ESD_590_0_151, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBits' - 11 - amap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCClusterInfo",1653,G__G__ESD_590_0_152, 102, -1, G__defined_typename("Float_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 0 '3' nNeighbours i - 'Int_t' 0 '0' type "
"i - 'Int_t' 0 '0' row0 i - 'Int_t' 0 '159' row1 "
"i - 'Int_t' 0 '0' bitType", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCClusterDensity",1993,G__G__ESD_590_0_153, 102, -1, G__defined_typename("Float_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 0 '3' nNeighbours i - 'Int_t' 0 '0' type "
"i - 'Int_t' 0 '0' row0 i - 'Int_t' 0 '159' row1 "
"i - 'Int_t' 0 '0' bitType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCCrossedRows",1669,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTRDpid",851,G__G__ESD_590_0_155, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDsignal",1172,G__G__ESD_590_0_156, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDNchamberdEdx",1723,G__G__ESD_590_0_157, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - nch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDNclusterdEdx",1771,G__G__ESD_590_0_158, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - ncls", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDntracklets",1617,G__G__ESD_590_0_159, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDntracklets",1605,G__G__ESD_590_0_160, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDntrackletsPID",1826,(G__InterfaceMethod) NULL,98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDpidQuality",1584,G__G__ESD_590_0_162, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDtrkltOccupancy",2016,G__G__ESD_590_0_163, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ly", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDtrkltClCross",1780,G__G__ESD_590_0_164, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ly", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTRDtrkltChmbGood",1754,G__G__ESD_590_0_165, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ly", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfTRDslices",1975,G__G__ESD_590_0_166, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfTRDslices",1963,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTRDslice",1062,G__G__ESD_590_0_168, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - q i - 'Int_t' 0 - plane "
"i - 'Int_t' 0 - slice", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDmomentum",1416,G__G__ESD_590_0_169, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - p i - 'Int_t' 0 - plane "
"D - 'Double_t' 0 '0x0' sp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDslice",1050,G__G__ESD_590_0_170, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - plane i - 'Int_t' 0 '-1' slice", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDmomentum",1404,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - plane D - 'Double_t' 0 '0x0' sp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTRDQuality",1279,G__G__ESD_590_0_172, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - quality", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDQuality",1267,G__G__ESD_590_0_173, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDBudget",1137,G__G__ESD_590_0_174, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - budget", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDBudget",1125,G__G__ESD_590_0_175, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDTimBin",1113,G__G__ESD_590_0_176, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - timbin i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDpid",839,G__G__ESD_590_0_177, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDsignal",1160,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDNchamberdEdx",1711,(G__InterfaceMethod) NULL,98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDNclusterdEdx",1759,(G__InterfaceMethod) NULL,98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDTimBin",1101,G__G__ESD_590_0_181, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDchi2",880,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDclusters",1407,(G__InterfaceMethod) NULL,98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "I - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDncls",954,(G__InterfaceMethod) NULL,98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTRDncls0",1002,G__G__ESD_590_0_185, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDtracklets",1495,G__G__ESD_590_0_186, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "I - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDpid",851,G__G__ESD_590_0_187, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - iSpecies f - 'Float_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDpid",839,G__G__ESD_590_0_188, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - iSpecies", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDLabel",1002,G__G__ESD_590_0_189, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTRDtrack",1067,G__G__ESD_590_0_190, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliKalmanTrack' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTRDtrack",1055,G__G__ESD_590_0_191, 85, G__get_linked_tagnum(&G__G__ESDLN_AliKalmanTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFclusterArray",1814,G__G__ESD_590_0_192, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ncluster I - 'Int_t' 0 - TOFcluster", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFclusterArray",1802,G__G__ESD_590_0_193, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNTOFclusters",1484,G__G__ESD_590_0_194, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SuppressTOFMatches",1811,G__G__ESD_590_0_195, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReplaceTOFTrackID",1575,G__G__ESD_590_0_196, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - oldID i - - 0 - newID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReplaceTOFClusterID",1812,G__G__ESD_590_0_197, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - oldID i - - 0 - newID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReplaceTOFMatchID",1567,G__G__ESD_590_0_198, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - oldID i - - 0 - newID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTOFcluster",1268,G__G__ESD_590_0_199, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - icl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SortTOFcluster",1427,G__G__ESD_590_0_200, 121, -1, -1, 0, 0, 1, 1, 0, "", "RS? Not to be used?", (void*) NULL, 0);
   G__memfunc_setup("ReMapTOFcluster",1472,G__G__ESD_590_0_201, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ncl I - 'Int_t' 0 - mapping", "RS? Not to be used?", (void*) NULL, 0);
   G__memfunc_setup("SetTOFsignal",1171,G__G__ESD_590_0_202, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - tof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFsignal",1159,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTOFsignalToT",1450,G__G__ESD_590_0_204, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ToT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFsignalToT",1438,G__G__ESD_590_0_205, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFsignalRaw",1469,G__G__ESD_590_0_206, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - tof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFsignalRaw",1457,G__G__ESD_590_0_207, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFsignalDz",1361,G__G__ESD_590_0_208, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFsignalDz",1349,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTOFsignalDx",1359,G__G__ESD_590_0_210, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFsignalDx",1347,G__G__ESD_590_0_211, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFDeltaBC",1156,G__G__ESD_590_0_212, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - deltaBC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFDeltaBC",1144,G__G__ESD_590_0_213, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFL0L1",782,G__G__ESD_590_0_214, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - l0l1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFL0L1",770,G__G__ESD_590_0_215, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFchi2",879,G__G__ESD_590_0_216, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFpid",850,G__G__ESD_590_0_217, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFLabel",1013,G__G__ESD_590_0_218, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFpid",838,G__G__ESD_590_0_219, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFLabel",1001,G__G__ESD_590_0_220, 121, -1, -1, 0, 1, 1, 1, 8, "I - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFInfo",917,G__G__ESD_590_0_221, 121, -1, -1, 0, 1, 1, 1, 8, "F - 'Float_t' 0 - info", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFInfo",929,G__G__ESD_590_0_222, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - info", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFCalChannel",1490,G__G__ESD_590_0_223, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFcluster",1291,G__G__ESD_590_0_224, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFcluster",1303,G__G__ESD_590_0_225, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFCalChannel",1502,G__G__ESD_590_0_226, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFclusterN",1369,G__G__ESD_590_0_227, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTOFHitAlreadyMatched",2114,G__G__ESD_590_0_228, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOFsignalTunedOnData",2250,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - signal", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTOFsignalTunedOnData",2238,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetHMPIDsignal",1308,G__G__ESD_590_0_231, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHMPIDsignal",1296,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHMPIDoccupancy",1623,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetHMPIDpid",987,G__G__ESD_590_0_234, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHMPIDpid",975,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetHMPIDchi2",1028,G__G__ESD_590_0_236, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHMPIDchi2",1016,G__G__ESD_590_0_237, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHMPIDcluIdx",1287,G__G__ESD_590_0_238, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ch i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHMPIDcluIdx",1275,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetHMPIDtrk",1007,G__G__ESD_590_0_240, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - th f - 'Float_t' 0 - ph", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHMPIDtrk",995,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 8, 
"f - 'Float_t' 1 - x f - 'Float_t' 1 - y "
"f - 'Float_t' 1 - th f - 'Float_t' 1 - ph", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetHMPIDmip",996,G__G__ESD_590_0_242, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"i - 'Int_t' 0 - q i - 'Int_t' 0 '0' nph", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHMPIDmip",984,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 8, 
"f - 'Float_t' 1 - x f - 'Float_t' 1 - y "
"i - 'Int_t' 1 - q i - 'Int_t' 1 - nph", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsHMPID",558,G__G__ESD_590_0_244, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPureITSStandalone",1873,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsMultPrimary",1346,G__G__ESD_590_0_246, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsMultSecondary",1542,G__G__ESD_590_0_247, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEMCALcluster",1412,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEMCALcluster",1424,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEMCAL",542,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackPhiOnEMCal",1685,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackEtaOnEMCal",1678,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackPtOnEMCal",1592,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackPOnEMCal",1476,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTrackPhiEtaPtOnEMCal",2175,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - phi d - 'Double_t' 0 - eta "
"d - 'Double_t' 0 - pt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPHOScluster",1372,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPHOScluster",1384,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsPHOS",502,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPHOSdx",822,G__G__ESD_590_0_259, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPHOSdz",824,G__G__ESD_590_0_260, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPHOSdxdz",1056,G__G__ESD_590_0_261, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - dx d - 'Double_t' 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrackPointArray",1834,G__G__ESD_590_0_262, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTrackPointArray' - 0 - points", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackPointArray",1822,G__G__ESD_590_0_263, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTrackPointArray), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RelateToVertexTPC",1669,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliESDVertex' - 10 - vtx d - 'Double_t' 0 - b "
"d - 'Double_t' 0 - maxd U 'AliExternalTrackParam' - 0 '0' cParam", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RelateToVertexTPCBxByBz",2230,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliESDVertex' - 10 - vtx D - 'Double_t' 0 - b "
"d - 'Double_t' 0 - maxd U 'AliExternalTrackParam' - 0 '0' cParam", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetImpactParametersTPC",2169,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 1 - xy f - 'Float_t' 1 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetImpactParametersTPC",2169,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"F - 'Float_t' 0 - p F - 'Float_t' 0 - cov", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetConstrainedChi2TPC",1991,G__G__ESD_590_0_268, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RelateToVertex",1438,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliESDVertex' - 10 - vtx d - 'Double_t' 0 - b "
"d - 'Double_t' 0 - maxd U 'AliExternalTrackParam' - 0 '0' cParam", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RelateToVertexBxByBz",1999,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliESDVertex' - 10 - vtx D - 'Double_t' 0 - b "
"d - 'Double_t' 0 - maxd U 'AliExternalTrackParam' - 0 '0' cParam", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetImpactParameters",1938,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 1 - xy f - 'Float_t' 1 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetImpactParameters",1938,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"F - 'Float_t' 0 - p F - 'Float_t' 0 - cov", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RelateToVVertexTPC",1755,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliVVertex' - 10 - vtx d - 'Double_t' 0 - b "
"d - 'Double_t' 0 - maxd U 'AliExternalTrackParam' - 0 '0' cParam", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RelateToVVertexTPCBxByBz",2316,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliVVertex' - 10 - vtx D - 'Double_t' 0 - b "
"d - 'Double_t' 0 - maxd U 'AliExternalTrackParam' - 0 '0' cParam", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RelateToVVertex",1524,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliVVertex' - 10 - vtx d - 'Double_t' 0 - b "
"d - 'Double_t' 0 - maxd U 'AliExternalTrackParam' - 0 '0' cParam", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RelateToVVertexBxByBz",2085,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'AliVVertex' - 10 - vtx D - 'Double_t' 0 - b "
"d - 'Double_t' 0 - maxd U 'AliExternalTrackParam' - 0 '0' cParam", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetImpactParameters",1950,G__G__ESD_590_0_277, 121, -1, -1, 0, 4, 1, 1, 0, 
"F - 'Float_t' 10 - p F - 'Float_t' 10 - cov "
"f - 'Float_t' 10 - chi2 U 'AliExternalTrackParam' - 10 - cParam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImpactParametersTPC",2181,G__G__ESD_590_0_278, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 10 - p F - 'Float_t' 10 - cov "
"f - 'Float_t' 10 - chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetESDEvent",1022,G__G__ESD_590_0_280, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOFHeader",1106,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliTOFHeader), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEvent",802,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliVEvent), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetESDEvent",1034,G__G__ESD_590_0_283, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDEvent' - 10 - evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorPID",1347,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'AliDetectorPID' - 10 - pid", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDetectorPID",1335,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliDetectorPID), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillPolymarker",1453,(G__InterfaceMethod) NULL,121, -1, -1, 0, 5, 1, 1, 0, 
"U 'TPolyMarker3D' - 0 - pol f - 'Float_t' 0 - magf "
"f - 'Float_t' 0 - minR f - 'Float_t' 0 - maxR "
"f - 'Float_t' 0 - stepR", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OnlineMode",1002,G__G__ESD_590_0_287, 121, -1, -1, 0, 1, 3, 1, 0, "g - - 0 - mode", (char*)NULL, (void*) G__func2void( (void (*)(bool))(&AliESDtrack::OnlineMode) ), 0);
   G__memfunc_setup("OnlineMode",1002,G__G__ESD_590_0_288, 103, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (bool (*)())(&AliESDtrack::OnlineMode) ), 0);
   G__memfunc_setup("GetLengthInActiveZone",2097,G__G__ESD_590_0_289, 100, -1, G__defined_typename("Double_t"), 0, 6, 3, 1, 0, 
"U 'AliExternalTrackParam' - 10 - paramT d - 'Double_t' 0 - deltaY "
"d - 'Double_t' 0 - deltaZ d - 'Double_t' 0 - bz "
"d - 'Double_t' 0 '0' exbPhi U 'TTreeSRedirector' - 0 '0' pcstream", (char*)NULL, (void*) G__func2void( (Double_t (*)(const AliExternalTrackParam*, Double_t, Double_t, Double_t, Double_t, TTreeSRedirector*))(&AliESDtrack::GetLengthInActiveZone) ), 0);
   G__memfunc_setup("GetLengthInActiveZone",2097,G__G__ESD_590_0_290, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 1, 8, 
"i - 'Int_t' 0 - mode d - 'Double_t' 0 - deltaY "
"d - 'Double_t' 0 - deltaZ d - 'Double_t' 0 - bz "
"d - 'Double_t' 0 '0' exbPhi U 'TTreeSRedirector' - 0 '0' pcstream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackParam",1286,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamRefitted",2109,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamITSOut",1838,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamIp",1471,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamOp",1477,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamTPCInner",2025,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackParamCp",1465,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliExternalTrackParam' - 1 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetTrackParamIp",1698,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'AliExternalTrackParam' - 10 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetTrackParamOp",1704,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'AliExternalTrackParam' - 10 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetTrackParamTPCInner",2252,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'AliExternalTrackParam' - 10 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfITSClusters",2179,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfTPCClusters",2170,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfTRDClusters",2173,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFriendNotStored",1830,G__G__ESD_590_0_304, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFriendNotStored",1818,G__G__ESD_590_0_305, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFriendTrackID",1542,G__G__ESD_590_0_306, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFriendTrackID",1530,G__G__ESD_590_0_307, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack), -1, 1, 1, 1, 4, 0, "u 'AliESDtrack' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_590_0_309, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDtrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_590_0_310, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDtrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_590_0_311, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDtrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_590_0_312, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDtrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_590_0_316, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_590_0_317, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDtrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_590_0_318, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDtrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_590_0_319, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDtrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_590_0_320, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDtrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDtrack", 1157, G__G__ESD_590_0_321, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDTrdTrack(void) {
   /* AliESDTrdTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrack));
   G__memfunc_setup("AliESDTrdTrack",1297,G__G__ESD_592_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDTrdTrack",1297,G__G__ESD_592_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrack), -1, 0, 1, 1, 1, 0, "u 'AliESDTrdTrack' - 11 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_592_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrack), -1, 1, 1, 1, 1, 0, "u 'AliESDTrdTrack' - 11 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackWord",1201,G__G__ESD_592_0_5, 109, -1, G__defined_typename("ULong64_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - rev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtendedTrackWord",2018,G__G__ESD_592_0_6, 109, -1, G__defined_typename("ULong64_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - rev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetA",353,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetB",354,G__G__ESD_592_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetC",355,G__G__ESD_592_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__G__ESD_592_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLayerMask",1193,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPID",509,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPt",484,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStack",790,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSector",912,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFlags",781,G__G__ESD_592_0_16, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFlagsTiming",1397,(G__InterfaceMethod) NULL,98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackInTime",1371,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabel",768,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackletIndex",1618,G__G__ESD_592_0_20, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - iLayer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pt",196,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Phi",289,G__G__ESD_592_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eta",282,G__G__ESD_592_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNTracklets",1307,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTracklet",1114,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTracklet), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackMatch",1282,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliVTrack), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetA",365,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetB",366,G__G__ESD_592_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetC",367,G__G__ESD_592_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY",389,G__G__ESD_592_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLayerMask",1205,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mask", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPID",521,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pid", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLabel",780,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - label", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSector",924,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sector", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetStack",802,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - stack", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFlags",793,G__G__ESD_592_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - flags", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFlagsTiming",1409,G__G__ESD_592_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - flags", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetReserved",1132,G__G__ESD_592_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrackletIndex",1630,G__G__ESD_592_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"c - 'Char_t' 10 - idx i - 'Int_t' 10 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrackletReference",2002,G__G__ESD_592_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'AliESDTrdTracklet' - 0 - trkl i - 'Int_t' 0 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrackMatchReference",2205,G__G__ESD_592_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliVTrack' - 0 - trk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AppendBits",1002,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 8, 
"m - 'ULong64_t' 1 - word i - 'Int_t' 0 - nBits "
"i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_592_0_45, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDTrdTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_592_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTrdTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_592_0_47, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDTrdTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_592_0_48, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDTrdTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_592_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_592_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTrdTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_592_0_54, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTrdTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_592_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTrdTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_592_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTrdTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDTrdTrack", 1423, G__G__ESD_592_0_57, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVertex(void) {
   /* AliVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliVertex));
   G__memfunc_setup("AliVertex",916,G__G__ESD_593_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliVertex",916,G__G__ESD_593_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliVertex), -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 10 - position d - 'Double_t' 0 - dispersion "
"i - 'Int_t' 0 - nContributors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliVertex",916,G__G__ESD_593_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliVertex), -1, 0, 1, 1, 1, 0, "u 'AliVertex' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_593_0_4, 117, G__get_linked_tagnum(&G__G__ESDLN_AliVertex), -1, 1, 1, 1, 1, 0, "u 'AliVertex' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__G__ESD_593_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetXYZ",567,G__G__ESD_593_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - pos", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetXv",506,G__G__ESD_593_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - xVert", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetYv",507,G__G__ESD_593_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - yVert", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZv",508,G__G__ESD_593_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - zVert", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDispersion",1356,G__G__ESD_593_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - disp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNContributors",1672,G__G__ESD_593_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nContr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXYZ",555,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - position", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetX",376,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetY",377,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZ",378,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDispersion",1344,G__G__ESD_593_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNContributors",1660,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNIndices",1069,G__G__ESD_593_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStatus",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsFromVertexer3D",1564,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsFromVertexerZ",1535,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetIndices",1003,G__G__ESD_593_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nindices R - 'UShort_t' 0 - indices", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIndices",991,G__G__ESD_593_0_24, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UsesTrack",917,G__G__ESD_593_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintIndices",1228,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCovarianceMatrix",1936,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - covmatrix", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCovarianceMatrix",1948,G__G__ESD_593_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetChi2perNDF",1157,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetChi2",614,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetChi2",626,G__G__ESD_593_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNDF",504,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_593_0_33, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_593_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_593_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_593_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_593_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_593_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_593_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_593_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_593_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVertex::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVertex", 1042, G__G__ESD_593_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDkink(void) {
   /* AliESDkink */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDkink));
   G__memfunc_setup("AliESDkink",927,G__G__ESD_594_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDkink), -1, 0, 0, 1, 1, 0, "", "constructor", (void*) NULL, 0);
   G__memfunc_setup("AliESDkink",927,G__G__ESD_594_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDkink), -1, 0, 1, 1, 1, 0, "u 'AliESDkink' - 11 - source", "constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_594_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDkink), -1, 1, 1, 1, 1, 0, "u 'AliESDkink' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetID",441,G__G__ESD_594_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__G__ESD_594_0_6, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMother",923,G__G__ESD_594_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliExternalTrackParam' - 11 - pmother", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDaughter",1120,G__G__ESD_594_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliExternalTrackParam' - 11 - pdaughter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCDensityFactor",1862,G__G__ESD_594_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQt",485,G__G__ESD_594_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetR",370,G__G__ESD_594_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistance",1099,G__G__ESD_594_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCRow0",879,G__G__ESD_594_0_13, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAngle",775,G__G__ESD_594_0_14, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosition",1141,G__G__ESD_594_0_15, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMotherP",991,G__G__ESD_594_0_16, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDaughterP",1188,G__G__ESD_594_0_17, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCRow0",891,G__G__ESD_594_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - row0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabel",768,G__G__ESD_594_0_19, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLabel",780,G__G__ESD_594_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - label i - 'Int_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIndex",792,G__G__ESD_594_0_21, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIndex",804,G__G__ESD_594_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - index i - 'Int_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStatus",944,G__G__ESD_594_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"c - 'Char_t' 0 - status i - 'Int_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__G__ESD_594_0_24, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCncls",963,G__G__ESD_594_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - ncls i - 'Int_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCncls",951,G__G__ESD_594_0_26, 66, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCDensity",1267,G__G__ESD_594_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - dens i - 'Int_t' 0 - pos0 "
"i - 'Int_t' 0 - pos1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTPCDensity",1255,G__G__ESD_594_0_28, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - pos0 i - 'Int_t' 0 - pos1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetShapeFactor",1392,G__G__ESD_594_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetShapeFactor",1404,G__G__ESD_594_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - factor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMultiple",1144,G__G__ESD_594_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - mult i - 'Int_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultiple",1132,G__G__ESD_594_0_32, 66, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RefParamDaughter",1602,G__G__ESD_594_0_33, 117, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RefParamMother",1405,G__G__ESD_594_0_34, 117, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_594_0_35, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDkink::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_594_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDkink::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_594_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDkink::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_594_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDkink::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_594_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_594_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDkink::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_594_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDkink::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_594_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDkink::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_594_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDkink::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDkink", 1053, G__G__ESD_594_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDHLTtrack(void) {
   /* AliESDHLTtrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTtrack));
   G__memfunc_setup("AliESDHLTtrack",1263,G__G__ESD_595_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTtrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNHits",774,G__G__ESD_595_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMCid",637,G__G__ESD_595_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWeight",904,G__G__ESD_595_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComesFromMainVertex",1934,G__G__ESD_595_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirstRow",1120,G__G__ESD_595_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLastRow",1004,G__G__ESD_595_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSector",912,G__G__ESD_595_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirstPointX",1418,G__G__ESD_595_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirstPointY",1419,G__G__ESD_595_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirstPointZ",1420,G__G__ESD_595_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLastPointX",1302,G__G__ESD_595_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLastPointY",1303,G__G__ESD_595_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLastPointZ",1304,G__G__ESD_595_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCharge",874,G__G__ESD_595_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPt",484,G__G__ESD_595_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTgl",583,G__G__ESD_595_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPsi",588,G__G__ESD_595_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPterr",813,G__G__ESD_595_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPsierr",917,G__G__ESD_595_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTglerr",912,G__G__ESD_595_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBinX",657,G__G__ESD_595_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBinY",658,G__G__ESD_595_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSizeX",787,G__G__ESD_595_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSizeY",788,G__G__ESD_595_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPx",488,G__G__ESD_595_0_26, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPy",489,G__G__ESD_595_0_27, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPz",490,G__G__ESD_595_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetP",368,G__G__ESD_595_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPseudoRapidity",1750,G__G__ESD_595_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPID",509,G__G__ESD_595_0_31, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNHits",786,G__G__ESD_595_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMCid",649,G__G__ESD_595_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWeight",916,G__G__ESD_595_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComesFromMainVertex",1934,G__G__ESD_595_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRowRange",1105,G__G__ESD_595_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - f i - 'Int_t' 0 - g", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSector",924,G__G__ESD_595_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFirstPoint",1342,G__G__ESD_595_0_38, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - f d - 'Double_t' 0 - g "
"d - 'Double_t' 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLastPoint",1226,G__G__ESD_595_0_39, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - f d - 'Double_t' 0 - g "
"d - 'Double_t' 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCharge",886,G__G__ESD_595_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTgl",595,G__G__ESD_595_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPsi",600,G__G__ESD_595_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPt",496,G__G__ESD_595_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPterr",825,G__G__ESD_595_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPsierr",929,G__G__ESD_595_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTglerr",924,G__G__ESD_595_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinXY",758,G__G__ESD_595_0_47, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - binx f - 'Float_t' 0 - biny "
"f - 'Float_t' 0 - sizex f - 'Float_t' 0 - sizey", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPID",521,G__G__ESD_595_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateTrackParams",1724,G__G__ESD_595_0_49, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'AliKalmanTrack' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_595_0_50, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDHLTtrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_595_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDHLTtrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_595_0_52, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDHLTtrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_595_0_53, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDHLTtrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_595_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_595_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDHLTtrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_595_0_59, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDHLTtrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_595_0_60, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDHLTtrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_595_0_61, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDHLTtrack::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliESDHLTtrack", 1263, G__G__ESD_595_0_62, (int) ('i'), G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTtrack), -1, 0, 1, 1, 1, 0, "u 'AliESDHLTtrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliESDHLTtrack", 1389, G__G__ESD_595_0_63, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ESD_595_0_64, (int) ('u'), G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTtrack), -1, 1, 1, 1, 1, 0, "u 'AliESDHLTtrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliFMDMap(void) {
   /* AliFMDMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliFMDMap));
   G__memfunc_setup("MaxDetectors",1235,G__G__ESD_596_0_3, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxRings",809,G__G__ESD_596_0_4, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxSectors",1033,G__G__ESD_596_0_5, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxStrips",939,G__G__ESD_596_0_6, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCoords",989,G__G__ESD_596_0_7, 121, -1, -1, 0, 5, 1, 1, 8, 
"i - 'Int_t' 0 - idx r - 'UShort_t' 1 - det "
"c - 'Char_t' 1 - ring r - 'UShort_t' 1 - sec "
"r - 'UShort_t' 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcIndex",875,G__G__ESD_596_0_8, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 8, 
"r - 'UShort_t' 0 - det c - 'Char_t' 0 - ring "
"r - 'UShort_t' 0 - sec r - 'UShort_t' 0 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckIndex",982,G__G__ESD_596_0_9, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 8, 
"r - 'UShort_t' 0 - det c - 'Char_t' 0 - ring "
"r - 'UShort_t' 0 - sec r - 'UShort_t' 0 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckNeedUShort",1471,G__G__ESD_596_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFile' - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__G__ESD_596_0_11, 117, G__get_linked_tagnum(&G__G__ESDLN_AliFMDMap), -1, 1, 1, 1, 1, 0, "u 'AliFMDMap' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__G__ESD_596_0_12, 117, G__get_linked_tagnum(&G__G__ESDLN_AliFMDMap), -1, 1, 1, 1, 1, 0, "u 'AliFMDMap' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__G__ESD_596_0_13, 117, G__get_linked_tagnum(&G__G__ESDLN_AliFMDMap), -1, 1, 1, 1, 1, 0, "u 'AliFMDMap' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__G__ESD_596_0_14, 117, G__get_linked_tagnum(&G__G__ESDLN_AliFMDMap), -1, 1, 1, 1, 1, 0, "u 'AliFMDMap' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ForEach",664,G__G__ESD_596_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'AliFMDMap::ForOne' - 1 - algo", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MaxIndex",798,G__G__ESD_596_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AtAsFloat",863,G__G__ESD_596_0_18, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AtAsFloat",863,G__G__ESD_596_0_19, 102, -1, G__defined_typename("Float_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AtAsInt",660,G__G__ESD_596_0_20, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AtAsInt",660,G__G__ESD_596_0_21, 105, -1, G__defined_typename("Int_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AtAsUShort",974,G__G__ESD_596_0_22, 114, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AtAsUShort",974,G__G__ESD_596_0_23, 114, -1, G__defined_typename("UShort_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AtAsBool",757,G__G__ESD_596_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AtAsBool",757,G__G__ESD_596_0_25, 103, -1, G__defined_typename("Bool_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsFloat",690,G__G__ESD_596_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsInt",487,G__G__ESD_596_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsUShort",801,G__G__ESD_596_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsBool",584,G__G__ESD_596_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Ptr",310,G__G__ESD_596_0_30, 89, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Coords2Index",1172,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 2, 8, 
"r - 'UShort_t' 0 - det c - 'Char_t' 0 - ring "
"r - 'UShort_t' 0 - sec r - 'UShort_t' 0 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Coords2IndexOld",1459,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 2, 8, 
"r - 'UShort_t' 0 - det c - 'Char_t' 0 - ring "
"r - 'UShort_t' 0 - sec r - 'UShort_t' 0 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Index2CoordsOld",1459,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 8, 
"i - 'Int_t' 0 - idx r - 'UShort_t' 1 - det "
"c - 'Char_t' 1 - ring r - 'UShort_t' 1 - sec "
"r - 'UShort_t' 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Index2Coords",1172,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 8, 
"i - 'Int_t' 0 - idx r - 'UShort_t' 1 - det "
"c - 'Char_t' 1 - ring r - 'UShort_t' 1 - sec "
"r - 'UShort_t' 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_596_0_35, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliFMDMap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_596_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliFMDMap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_596_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliFMDMap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_596_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliFMDMap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_596_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_596_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliFMDMap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_596_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliFMDMap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_596_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliFMDMap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_596_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliFMDMap::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliFMDMap", 905, G__G__ESD_596_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ESD_596_0_48, (int) ('u'), G__get_linked_tagnum(&G__G__ESDLN_AliFMDMap), -1, 1, 1, 1, 1, 0, "u 'AliFMDMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliFMDFloatMap(void) {
   /* AliFMDFloatMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap));
   G__memfunc_setup("AliFMDFloatMap",1281,G__G__ESD_600_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliFMDFloatMap",1281,G__G__ESD_600_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - maxDet i - 'Int_t' 0 '0' maxRing "
"i - 'Int_t' 0 '0' maxSec i - 'Int_t' 0 '0' maxStr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliFMDFloatMap",1281,G__G__ESD_600_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap), -1, 0, 1, 1, 1, 0, "u 'AliFMDMap' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliFMDFloatMap",1281,G__G__ESD_600_0_4, 105, G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap), -1, 0, 1, 1, 1, 0, "u 'AliFMDFloatMap' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_600_0_5, 117, G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap), -1, 1, 1, 1, 1, 0, "u 'AliFMDFloatMap' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__ESD_600_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 11 'Float_t()' v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,G__G__ESD_600_0_7, 102, -1, G__defined_typename("Float_t"), 1, 4, 1, 1, 0, 
"r - 'UShort_t' 0 - det c - 'Char_t' 0 - ring "
"r - 'UShort_t' 0 - sec r - 'UShort_t' 0 - str", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,G__G__ESD_600_0_8, 102, -1, G__defined_typename("Float_t"), 1, 4, 1, 1, 9, 
"r - 'UShort_t' 0 - det c - 'Char_t' 0 - ring "
"r - 'UShort_t' 0 - sec r - 'UShort_t' 0 - str", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Data",378,G__G__ESD_600_0_9, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"%8.4f\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Ptr",310,(G__InterfaceMethod) NULL,89, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MaxIndex",798,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AtAsFloat",863,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AtAsFloat",863,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 1, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsFloat",690,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_600_0_16, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliFMDFloatMap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_600_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliFMDFloatMap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_600_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliFMDFloatMap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_600_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliFMDFloatMap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_600_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_600_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliFMDFloatMap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_600_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliFMDFloatMap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_600_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliFMDFloatMap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_600_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliFMDFloatMap::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliFMDFloatMap", 1407, G__G__ESD_600_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDFMD(void) {
   /* AliESDFMD */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDFMD));
   G__memfunc_setup("AliESDFMD",713,G__G__ESD_601_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDFMD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDFMD",713,G__G__ESD_601_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDFMD), -1, 0, 1, 1, 1, 0, "u 'AliESDFMD' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_601_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDFMD), -1, 1, 1, 1, 1, 0, "u 'AliESDFMD' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Multiplicity",1289,G__G__ESD_601_0_6, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 8, 
"r - 'UShort_t' 0 - detector c - 'Char_t' 0 - ring "
"r - 'UShort_t' 0 - sector r - 'UShort_t' 0 - strip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eta",282,G__G__ESD_601_0_7, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 8, 
"r - 'UShort_t' 0 - detector c - 'Char_t' 0 - ring "
"r - 'UShort_t' 0 - sector r - 'UShort_t' 0 - strip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Phi",289,G__G__ESD_601_0_8, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 8, 
"r - 'UShort_t' 0 - detector c - 'Char_t' 0 - ring "
"r - 'UShort_t' 0 - sector r - 'UShort_t' 0 - strip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Theta",502,G__G__ESD_601_0_9, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 8, 
"r - 'UShort_t' 0 - detector c - 'Char_t' 0 - ring "
"r - 'UShort_t' 0 - sector r - 'UShort_t' 0 - strip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("R",82,G__G__ESD_601_0_10, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 8, 
"r - 'UShort_t' 0 - detector c - 'Char_t' 0 - ring "
"r - 'UShort_t' 0 - sector r - 'UShort_t' 0 - strip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMultiplicity",1589,G__G__ESD_601_0_11, 121, -1, -1, 0, 5, 1, 1, 0, 
"r - 'UShort_t' 0 - detector c - 'Char_t' 0 - ring "
"r - 'UShort_t' 0 - sector r - 'UShort_t' 0 - strip "
"f - 'Float_t' 0 - mult", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEta",582,G__G__ESD_601_0_12, 121, -1, -1, 0, 5, 1, 1, 0, 
"r - 'UShort_t' 0 - detector c - 'Char_t' 0 - ring "
"r - 'UShort_t' 0 - sector r - 'UShort_t' 0 - strip "
"f - 'Float_t' 0 - eta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNoiseFactor",1417,G__G__ESD_601_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAngleCorrected",1710,G__G__ESD_601_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - done", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAngleCorrected",1598,G__G__ESD_601_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNoiseFactor",1405,G__G__ESD_601_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxDetectors",1235,G__G__ESD_601_0_17, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxRings",809,G__G__ESD_601_0_18, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxSectors",1033,G__G__ESD_601_0_19, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxStrips",939,G__G__ESD_601_0_20, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckNeedUShort",1471,G__G__ESD_601_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFile' - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NeedNoiseFix",1185,G__G__ESD_601_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ForEach",664,G__G__ESD_601_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'AliESDFMD::ForOne' - 1 - algo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MultiplicityMap",1575,G__G__ESD_601_0_25, 117, G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EtaMap",568,G__G__ESD_601_0_26, 117, G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_601_0_27, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDFMD::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_601_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDFMD::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_601_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDFMD::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_601_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDFMD::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_601_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_601_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDFMD::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_601_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDFMD::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_601_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDFMD::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_601_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDFMD::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDFMD", 839, G__G__ESD_601_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDVZERO(void) {
   /* AliESDVZERO */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO));
   G__memfunc_setup("AliESDVZERO",904,G__G__ESD_608_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDVZERO",904,G__G__ESD_608_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO), -1, 0, 1, 1, 1, 0, "u 'AliESDVZERO' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDVZERO",904,G__G__ESD_608_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO), -1, 0, 10, 1, 1, 0, 
"h - 'UInt_t' 0 - BBtriggerV0A h - 'UInt_t' 0 - BGtriggerV0A "
"h - 'UInt_t' 0 - BBtriggerV0C h - 'UInt_t' 0 - BGtriggerV0C "
"F - 'Float_t' 0 - Multiplicity F - 'Float_t' 0 - Adc "
"F - 'Float_t' 0 - Time F - 'Float_t' 0 - Width "
"G - 'Bool_t' 0 - BBFlag G - 'Bool_t' 0 - BGFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetBBtriggerV0A",1387,G__G__ESD_608_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - BBtrigger", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBGtriggerV0A",1392,G__G__ESD_608_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - BGtrigger", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBBtriggerV0C",1389,G__G__ESD_608_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - BBtrigger", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBGtriggerV0C",1394,G__G__ESD_608_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - BGtrigger", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMultiplicity",1589,G__G__ESD_608_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - Multiplicity", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADC",500,G__G__ESD_608_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - adc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__G__ESD_608_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWidth",812,G__G__ESD_608_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBBFlag",810,G__G__ESD_608_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 10 - BBFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBGFlag",815,G__G__ESD_608_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 10 - BGFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetV0ATime",898,G__G__ESD_608_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetV0CTime",900,G__G__ESD_608_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetV0ATimeError",1420,G__G__ESD_608_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetV0CTimeError",1422,G__G__ESD_608_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetV0ADecision",1313,G__G__ESD_608_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i 'AliVVZERO::Decision' - 0 - des", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetV0CDecision",1315,G__G__ESD_608_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i 'AliVVZERO::Decision' - 0 - des", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerChargeA",1675,G__G__ESD_608_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - chargeA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerChargeC",1677,G__G__ESD_608_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - chargeC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerBits",1426,G__G__ESD_608_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - triggerBits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPFBBFlag",960,G__G__ESD_608_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - clock "
"g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPFBGFlag",965,G__G__ESD_608_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - clock "
"g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbPMV0A",820,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNbPMV0C",822,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMTotV0A",875,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMTotV0C",877,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMRingV0A",964,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ring", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMRingV0C",966,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ring", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMultiplicity",1577,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMultiplicityV0A",1776,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMultiplicityV0C",1778,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAdc",552,G__G__ESD_608_0_35, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAdcV0A",751,G__G__ESD_608_0_36, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAdcV0C",753,G__G__ESD_608_0_37, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTime",687,G__G__ESD_608_0_38, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTimeV0A",886,G__G__ESD_608_0_39, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTimeV0C",888,G__G__ESD_608_0_40, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWidth",800,G__G__ESD_608_0_41, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWidthV0A",999,G__G__ESD_608_0_42, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWidthV0C",1001,G__G__ESD_608_0_43, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BBTriggerV0A",1055,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BGTriggerV0A",1060,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BBTriggerV0C",1057,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BGTriggerV0C",1062,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBBFlag",798,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBGFlag",803,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetV0ATime",886,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetV0CTime",888,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetV0ATimeError",1408,G__G__ESD_608_0_52, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetV0CTimeError",1410,G__G__ESD_608_0_53, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetV0ADecision",1301,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ESDLN_AliVVZEROcLcLDecision), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetV0CDecision",1303,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ESDLN_AliVVZEROcLcLDecision), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerChargeA",1663,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerChargeC",1665,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerBits",1414,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBBTriggerV0A",1343,G__G__ESD_608_0_59, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBGTriggerV0A",1348,G__G__ESD_608_0_60, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBBTriggerV0C",1345,G__G__ESD_608_0_61, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBGTriggerV0C",1350,G__G__ESD_608_0_62, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPFBBFlag",948,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - clock", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPFBGFlag",953,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - clock", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__G__ESD_608_0_65, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO), -1, 1, 1, 1, 1, 0, "u 'AliESDVZERO' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_608_0_66, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDVZERO::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_608_0_67, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDVZERO::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_608_0_68, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDVZERO::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_608_0_69, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDVZERO::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_608_0_73, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_608_0_74, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDVZERO::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_608_0_75, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDVZERO::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_608_0_76, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDVZERO::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_608_0_77, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDVZERO::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDVZERO", 1030, G__G__ESD_608_0_78, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliMultiplicity(void) {
   /* AliMultiplicity */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity));
   G__memfunc_setup("AliMultiplicity",1567,G__G__ESD_612_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity), -1, 0, 0, 1, 1, 0, "", "default constructor", (void*) NULL, 0);
   G__memfunc_setup("AliMultiplicity",1567,G__G__ESD_612_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity), -1, 0, 14, 1, 1, 0, 
"i - 'Int_t' 0 - ntr F - 'Float_t' 0 - th "
"F - 'Float_t' 0 - ph F - 'Float_t' 0 - dth "
"F - 'Float_t' 0 - dph I - 'Int_t' 0 - labels "
"I - 'Int_t' 0 - labelsL2 i - 'Int_t' 0 - ns "
"F - 'Float_t' 0 - ts F - 'Float_t' 0 - ps "
"I - 'Int_t' 0 - labelss s - 'Short_t' 0 - nfcL1 "
"s - 'Short_t' 0 - nfcL2 u 'TBits' - 11 - fFastOrFiredChips", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMultiplicity",1567,G__G__ESD_612_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - ntr i - 'Int_t' 0 - ns "
"s - 'Short_t' 0 - nfcL1 s - 'Short_t' 0 - nfcL2 "
"u 'TBits' - 11 - fFastOr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMultiplicity",1567,G__G__ESD_612_0_4, 105, G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity), -1, 0, 1, 1, 1, 0, "u 'AliMultiplicity' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_612_0_5, 117, G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity), -1, 1, 1, 1, 1, 0, "u 'AliMultiplicity' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMultTrackRefs",1607,G__G__ESD_612_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMultTrackRefs",1619,G__G__ESD_612_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScaleDThetaBySin2T",1965,G__G__ESD_612_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScaleDThetaBySin2T",1977,G__G__ESD_612_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfTracklets",2027,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumberOfTracklets",2039,G__G__ESD_612_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - tr", "used online (HLT)", (void*) NULL, 1);
   G__memfunc_setup("GetTheta",790,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPhi",577,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDeltaPhi",1067,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabel",768,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLabel",780,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - layer "
"i - 'Int_t' 0 - label", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTheta",790,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPhi",577,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDeltPhi",970,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabels",883,(G__InterfaceMethod) NULL,73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLabels2",933,(G__InterfaceMethod) NULL,73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDeltaTheta",1280,G__G__ESD_612_0_25, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcDist",775,G__G__ESD_612_0_26, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThetaAll",1071,G__G__ESD_612_0_27, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - - 0 - icl i - - 0 - lr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhiAll",858,G__G__ESD_612_0_28, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - - 0 - icl i - - 0 - lr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabelAll",1049,G__G__ESD_612_0_29, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - - 0 - icl i - - 0 - lr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabelSingle",1378,G__G__ESD_612_0_30, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabelSingleLr",1568,G__G__ESD_612_0_31, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLabelSingle",1390,G__G__ESD_612_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FreeClustersTracklet",2065,G__G__ESD_612_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FreeSingleCluster",1734,G__G__ESD_612_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfSingleClustersSPD2",2842,G__G__ESD_612_0_35, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSingleClusters",2549,G__G__ESD_612_0_36, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSingleClustersLr",2739,G__G__ESD_612_0_37, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - lr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AreSPD2SinglesStored",1911,G__G__ESD_612_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSPD2SinglesStored",1931,G__G__ESD_612_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThetaSingle",1400,G__G__ESD_612_0_40, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThetaSingleLr",1590,G__G__ESD_612_0_41, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - lr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhiSingle",1187,G__G__ESD_612_0_42, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhiSingleLr",1377,G__G__ESD_612_0_43, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - lr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfITSClusters",2179,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfITSClusters",2179,G__G__ESD_612_0_45, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - layMin i - 'Int_t' 0 - layMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSPDClusters",2170,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetITSClusters",1393,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - layer h - 'UInt_t' 0 - clusters", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfFiredChips",2079,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFiredChips",1293,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - layer s - 'Short_t' 0 - firedChips", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFastOrFiredChips",1884,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - chipKey", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFastOrFiredChipMap",2055,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBits' - 11 - fochips", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFastOrFiredChips",1872,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__ESDLN_TBits), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TestFastOrFiredChips",2000,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - chipKey", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFiredChipMap",1464,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBits' - 11 - firedChips", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFiredChipMap",1464,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - chipKey", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFiredChipMap",1452,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__ESDLN_TBits), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TestFiredChipMap",1580,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - chipKey", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackletTrackIDs",1871,G__G__ESD_612_0_58, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - mode "
"i - 'Int_t' 1 - spd1 i - 'Int_t' 1 - spd2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackletTrackIDsLay",2165,G__G__ESD_612_0_59, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 0 - lr i - 'Int_t' 0 - i "
"i - 'Int_t' 0 - mode H - 'UInt_t' 0 - refs "
"h - 'UInt_t' 0 - maxRef", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSingleClusterTrackID",2278,G__G__ESD_612_0_60, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - mode "
"i - 'Int_t' 1 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSingleClusterTrackIDs",2393,G__G__ESD_612_0_61, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - mode "
"H - 'UInt_t' 0 - refs h - 'UInt_t' 0 - maxRef", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeltTheta",1183,G__G__ESD_612_0_62, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThetaSingle",1400,G__G__ESD_612_0_63, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhiSingle",1187,G__G__ESD_612_0_64, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabelsSingle",1493,G__G__ESD_612_0_65, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AttachTracklet2TrackRefs",2374,G__G__ESD_612_0_66, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'AliRefArray' - 0 - l1t1 U 'AliRefArray' - 0 - l1t2 "
"U 'AliRefArray' - 0 - l2t1 U 'AliRefArray' - 0 - l2t2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AttachCluster2TrackRefs",2286,G__G__ESD_612_0_67, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'AliRefArray' - 0 - l1t1 U 'AliRefArray' - 0 - l1t2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrackletData",1504,G__G__ESD_612_0_68, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - id F - 'Float_t' 10 - tlet "
"h - 'UInt_t' 0 '0' trSPD1 h - 'UInt_t' 0 '0' trSPD2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSingleClusterData",2026,G__G__ESD_612_0_69, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - id F - 'Float_t' 10 - scl "
"h - 'UInt_t' 0 '0' tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CompactBits",1113,G__G__ESD_612_0_70, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDPhiWindow2",1339,G__G__ESD_612_0_71, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '-1' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDThetaWindow2",1552,G__G__ESD_612_0_72, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '-1' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDPhiShift",1167,G__G__ESD_612_0_73, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '-1' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNStdDev",964,G__G__ESD_612_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDPhiWindow2",1327,G__G__ESD_612_0_75, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDThetaWindow2",1540,G__G__ESD_612_0_76, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDPhiShift",1155,G__G__ESD_612_0_77, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNStdDev",952,G__G__ESD_612_0_78, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Duplicate",923,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'AliMultiplicity' - 11 - m", "used by copy ctr.", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_612_0_80, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliMultiplicity::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_612_0_81, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMultiplicity::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_612_0_82, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliMultiplicity::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_612_0_83, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliMultiplicity::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_612_0_87, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_612_0_88, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMultiplicity::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_612_0_89, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMultiplicity::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_612_0_90, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMultiplicity::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_612_0_91, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMultiplicity::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliMultiplicity", 1693, G__G__ESD_612_0_92, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliRawDataErrorLog(void) {
   /* AliRawDataErrorLog */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLog));
   G__memfunc_setup("AliRawDataErrorLog",1766,G__G__ESD_613_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLog), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliRawDataErrorLog",1766,G__G__ESD_613_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLog), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - eventNumber i - 'Int_t' 0 - ddlId "
"i 'AliRawDataErrorLog::ERawDataErrorLevel' - 0 - errorLevel i - 'Int_t' 0 - errorCode "
"C - - 10 '0' message", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliRawDataErrorLog",1766,G__G__ESD_613_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLog), -1, 0, 1, 1, 1, 0, "u 'AliRawDataErrorLog' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_613_0_4, 117, G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLog), -1, 1, 1, 1, 1, 0, "u 'AliRawDataErrorLog' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventNumber",1419,G__G__ESD_613_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDdlID",705,G__G__ESD_613_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrorLevel",1314,G__G__ESD_613_0_8, 105, G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLogcLcLERawDataErrorLevel), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrorLevelAsString",2125,G__G__ESD_613_0_9, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrorCode",1189,G__G__ESD_613_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMessage",997,G__G__ESD_613_0_11, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCount",809,G__G__ESD_613_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddCount",786,G__G__ESD_613_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_613_0_17, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliRawDataErrorLog::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_613_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliRawDataErrorLog::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_613_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliRawDataErrorLog::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_613_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliRawDataErrorLog::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_613_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_613_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliRawDataErrorLog::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_613_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliRawDataErrorLog::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_613_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliRawDataErrorLog::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_613_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliRawDataErrorLog::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliRawDataErrorLog", 1892, G__G__ESD_613_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDfriend(void) {
   /* AliESDfriend */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend));
   G__memfunc_setup("AliESDfriend",1130,G__G__ESD_615_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDfriend",1130,G__G__ESD_615_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend), -1, 0, 1, 1, 1, 0, "u 'AliESDfriend' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_615_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend), -1, 1, 1, 1, 1, 0, "u 'AliESDfriend' - 11 - esd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOwner",823,G__G__ESD_615_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfTracks",1702,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrack",789,G__G__ESD_615_0_6, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntriesInTracks",1817,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddTrack",766,G__G__ESD_615_0_8, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack), -1, 0, 2, 1, 1, 0, 
"U 'AliESDfriendTrack' - 10 - t g - 'Bool_t' 0 'kFALSE' shallow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrackAt",947,G__G__ESD_615_0_9, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDfriendTrack), -1, 0, 3, 1, 1, 0, 
"U 'AliESDfriendTrack' - 10 - t i - 'Int_t' 0 - i "
"g - 'Bool_t' 0 'kFALSE' shallow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVZEROfriend",1338,G__G__ESD_615_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDVZEROfriend' - 10 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVZEROfriend",1326,G__G__ESD_615_0_11, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVZEROfriend), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVZEROfriendConst",1845,G__G__ESD_615_0_12, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVZEROfriend), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVVZEROfriend",1412,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliVVZEROfriend), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetESDVZEROfriend",1546,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'AliESDVZEROfriend' - 1 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTZEROfriend",1336,G__G__ESD_615_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDTZEROfriend' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTZEROfriend",1324,G__G__ESD_615_0_16, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDTZEROfriend), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADfriend",1065,G__G__ESD_615_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDADfriend' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADfriend",1053,G__G__ESD_615_0_18, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDADfriend), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ls",191,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetSoft",927,G__G__ESD_615_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSkipBit",994,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - skip", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TestSkipBit",1110,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNclustersTPC",1482,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - sector", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNclustersTPCused",1915,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - sector", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNclustersTPC",1494,G__G__ESD_615_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - sector i - 'Int_t' 0 - occupancy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNclustersTPCused",1927,G__G__ESD_615_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - sector i - 'Int_t' 0 - occupancy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDIndicesStored",1836,G__G__ESD_615_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetESDIndicesStored",1848,G__G__ESD_615_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteTracksSafe",1594,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_615_0_31, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDfriend::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_615_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDfriend::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_615_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDfriend::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_615_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDfriend::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_615_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_615_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDfriend::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_615_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDfriend::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_615_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDfriend::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_615_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDfriend::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDfriend", 1256, G__G__ESD_615_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESD(void) {
   /* AliESD */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESD));
   G__memfunc_setup("AliESD",498,G__G__ESD_616_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESD",498,G__G__ESD_616_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESD), -1, 0, 1, 1, 1, 0, "u 'AliESD' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetESDfriend",1152,G__G__ESD_616_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDfriend' - 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDfriend",1140,G__G__ESD_616_0_4, 121, -1, -1, 0, 1, 1, 1, 8, "U 'AliESDfriend' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventNumberInFile",1998,G__G__ESD_616_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBunchCrossNumber",1935,G__G__ESD_616_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOrbitNumber",1429,G__G__ESD_616_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPeriodNumber",1528,G__G__ESD_616_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunNumber",1226,G__G__ESD_616_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeStamp",1216,G__G__ESD_616_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - timeStamp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventType",1232,G__G__ESD_616_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - eventType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerMask",1420,G__G__ESD_616_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerMaskNext50",1936,G__G__ESD_616_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerCluster",1762,G__G__ESD_616_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMagneticField",1592,G__G__ESD_616_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - mf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMagneticField",1580,G__G__ESD_616_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrack",789,G__G__ESD_616_0_17, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDtrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHLTConfMapTrack",1697,G__G__ESD_616_0_18, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTtrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHLTHoughTrack",1528,G__G__ESD_616_0_19, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTtrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMuonTrack",1204,G__G__ESD_616_0_20, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonTrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPmdTrack",1078,G__G__ESD_616_0_21, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDPmdTrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrdTrack",1087,G__G__ESD_616_0_22, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clean",483,G__G__ESD_616_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "F - 'Float_t' 0 - cleanPars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveKink",1019,G__G__ESD_616_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveV0",756,G__G__ESD_616_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveTrack",1123,G__G__ESD_616_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrack",766,G__G__ESD_616_0_27, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'AliESDtrack' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddHLTConfMapTrack",1674,G__G__ESD_616_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDHLTtrack' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddHLTHoughTrack",1505,G__G__ESD_616_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDHLTtrack' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMuonTrack",1181,G__G__ESD_616_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDMuonTrack' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPmdTrack",1055,G__G__ESD_616_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDPmdTrack' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrdTrack",1064,G__G__ESD_616_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDTrdTrack' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetV0",422,G__G__ESD_616_0_33, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDv0), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddV0",399,G__G__ESD_616_0_34, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'AliESDv0' - 10 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCascade",964,G__G__ESD_616_0_35, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDcascade), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCascade",941,G__G__ESD_616_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDcascade' - 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKink",685,G__G__ESD_616_0_37, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDkink), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddKink",662,G__G__ESD_616_0_38, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'AliESDkink' - 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCaloCluster",1409,G__G__ESD_616_0_39, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDCaloCluster), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCaloCluster",1386,G__G__ESD_616_0_40, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'AliESDCaloCluster' - 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPHOSTriggerPosition",2156,G__G__ESD_616_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayF' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPHOSTriggerAmplitudes",2351,G__G__ESD_616_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayF' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEMCALTriggerPosition",2196,G__G__ESD_616_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayF' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEMCALTriggerAmplitudes",2391,G__G__ESD_616_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayF' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertex",938,G__G__ESD_616_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDVertex' - 10 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertex",926,G__G__ESD_616_0_46, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMultiplicity",1589,G__G__ESD_616_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliMultiplicity' - 10 - mul", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultiplicity",1577,G__G__ESD_616_0_48, 85, G__get_linked_tagnum(&G__G__ESDLN_AliMultiplicity), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrimaryVertex",1678,G__G__ESD_616_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDVertex' - 10 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrimaryVertex",1666,G__G__ESD_616_0_50, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDiamond",1000,G__G__ESD_616_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDVertex' - 10 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDiamondX",1076,G__G__ESD_616_0_52, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDiamondY",1077,G__G__ESD_616_0_53, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma2DiamondX",1623,G__G__ESD_616_0_54, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma2DiamondY",1624,G__G__ESD_616_0_55, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDiamondCovXY",1461,G__G__ESD_616_0_56, 121, -1, -1, 0, 1, 1, 1, 8, "F - 'Float_t' 0 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventNumberInFile",1986,G__G__ESD_616_0_57, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBunchCrossNumber",1923,G__G__ESD_616_0_58, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOrbitNumber",1417,G__G__ESD_616_0_59, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPeriodNumber",1516,G__G__ESD_616_0_60, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunNumber",1214,G__G__ESD_616_0_61, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStamp",1204,G__G__ESD_616_0_62, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventType",1220,G__G__ESD_616_0_63, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerMask",1408,G__G__ESD_616_0_64, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerMaskNext50",1924,G__G__ESD_616_0_65, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerCluster",1750,G__G__ESD_616_0_66, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfTracks",1702,G__G__ESD_616_0_67, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfHLTConfMapTracks",2610,G__G__ESD_616_0_68, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfHLTHoughTracks",2441,G__G__ESD_616_0_69, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfMuonTracks",2117,G__G__ESD_616_0_70, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfPmdTracks",1991,G__G__ESD_616_0_71, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfTrdTracks",2000,G__G__ESD_616_0_72, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfV0s",1335,G__G__ESD_616_0_73, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfCascades",1877,G__G__ESD_616_0_74, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfKinks",1598,G__G__ESD_616_0_75, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfCaloClusters",2322,G__G__ESD_616_0_76, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfEMCALClusters",2293,G__G__ESD_616_0_77, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfEMCALClusters",2305,G__G__ESD_616_0_78, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - clus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirstEMCALCluster",1900,G__G__ESD_616_0_79, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFirstEMCALCluster",1912,G__G__ESD_616_0_80, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEMCALTriggerPosition",2219,G__G__ESD_616_0_81, 85, G__get_linked_tagnum(&G__G__ESDLN_TArrayF), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEMCALTriggerAmplitudes",2414,G__G__ESD_616_0_82, 85, G__get_linked_tagnum(&G__G__ESDLN_TArrayF), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfPHOSClusters",2253,G__G__ESD_616_0_83, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfPHOSClusters",2265,G__G__ESD_616_0_84, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - part", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFirstPHOSCluster",1872,G__G__ESD_616_0_85, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirstPHOSCluster",1860,G__G__ESD_616_0_86, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPHOSTriggerPosition",2179,G__G__ESD_616_0_87, 85, G__get_linked_tagnum(&G__G__ESDLN_TArrayF), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPHOSTriggerAmplitudes",2374,G__G__ESD_616_0_88, 85, G__get_linked_tagnum(&G__G__ESDLN_TArrayF), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0zVertex",1180,G__G__ESD_616_0_89, 100, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0zVertex",1192,G__G__ESD_616_0_90, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double32_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0",420,G__G__ESD_616_0_91, 100, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0",432,G__G__ESD_616_0_92, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double32_t' 0 - timeStart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0clock",944,G__G__ESD_616_0_93, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0clock",956,G__G__ESD_616_0_94, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - timeStart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0TOF",653,G__G__ESD_616_0_95, 100, -1, G__defined_typename("Double32_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0TOF",653,G__G__ESD_616_0_96, 68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0TOF",665,G__G__ESD_616_0_97, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - icase f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0Trig",826,G__G__ESD_616_0_98, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0Trig",838,G__G__ESD_616_0_99, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - tvdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0time",851,G__G__ESD_616_0_100, 68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0time",863,G__G__ESD_616_0_101, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double32_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0amplitude",1385,G__G__ESD_616_0_102, 68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0amplitude",1397,G__G__ESD_616_0_103, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double32_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCN1Energy",1258,G__G__ESD_616_0_104, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCP1Energy",1260,G__G__ESD_616_0_105, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCN2Energy",1259,G__G__ESD_616_0_106, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCP2Energy",1261,G__G__ESD_616_0_107, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCEMEnergy",1277,G__G__ESD_616_0_108, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCParticipants",1779,G__G__ESD_616_0_109, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDC",525,G__G__ESD_616_0_110, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - 'Float_t' 0 - n1Energy f - 'Float_t' 0 - p1Energy "
"f - 'Float_t' 0 - emEnergy f - 'Float_t' 0 - n2Energy "
"f - 'Float_t' 0 - p2Energy i - 'Int_t' 0 - participants", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetV0s",764,G__G__ESD_616_0_111, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetCascades",1306,G__G__ESD_616_0_112, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__ESD_616_0_113, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFMDData",893,G__G__ESD_616_0_115, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDFMD' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFMDData",881,G__G__ESD_616_0_116, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDFMD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVZEROData",1084,G__G__ESD_616_0_117, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDVZERO' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVZEROData",1072,G__G__ESD_616_0_118, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVZERO), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetACORDEData",1108,G__G__ESD_616_0_119, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDACORDE' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetACORDEDAta",1064,G__G__ESD_616_0_120, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDACORDE), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADData",811,G__G__ESD_616_0_121, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDAD' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADData",799,G__G__ESD_616_0_122, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDAD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrorLog",1100,G__G__ESD_616_0_123, 85, G__get_linked_tagnum(&G__G__ESDLN_AliRawDataErrorLog), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRawDataErrorLog",1753,G__G__ESD_616_0_124, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliRawDataErrorLog' - 10 - log", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfErrorLogs",2013,G__G__ESD_616_0_125, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESD), -1, 1, 1, 1, 2, 0, "u 'AliESD' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_616_0_127, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESD::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_616_0_128, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESD::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_616_0_129, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESD::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_616_0_130, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESD::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_616_0_134, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_616_0_135, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESD::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_616_0_136, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESD::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_616_0_137, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESD::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_616_0_138, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESD::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESD", 624, G__G__ESD_616_0_139, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDRun(void) {
   /* AliESDRun */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDRun));
   G__memfunc_setup("AliESDRun",807,G__G__ESD_701_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDRun), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDRun",807,G__G__ESD_701_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDRun), -1, 0, 1, 1, 1, 0, "u 'AliESDRun' - 11 - esd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_701_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDRun), -1, 1, 1, 1, 1, 0, "u 'AliESDRun' - 11 - esd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", "Interface for using TOBject::Copy()", (void*) NULL, 1);
   G__memfunc_setup("InitMagneticField",1696,G__G__ESD_701_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunNumber",1214,G__G__ESD_701_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunNumber",1226,G__G__ESD_701_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMagneticField",1592,G__G__ESD_701_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - mf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMagneticField",1580,G__G__ESD_701_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPeriodNumber",1516,G__G__ESD_701_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPeriodNumber",1528,G__G__ESD_701_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__ESD_701_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDiamond",1000,G__G__ESD_701_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDVertex' - 10 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerClass",1526,G__G__ESD_701_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrentL3",1166,G__G__ESD_701_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cur", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrentDip",1324,G__G__ESD_701_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cur", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamEnergy",1291,G__G__ESD_701_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - be", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamType",1091,G__G__ESD_701_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - bt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamEnergyIsSqrtSHalfGeV",2625,G__G__ESD_701_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorsInDAQ",1638,G__G__ESD_701_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - detmask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorsInReco",1817,G__G__ESD_701_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - detmask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCTPStart",1057,G__G__ESD_701_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTimeStamp' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsBeamEnergyIsSqrtSHalfGeV",2513,G__G__ESD_701_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDiamondX",1076,G__G__ESD_701_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDiamondY",1077,G__G__ESD_701_0_26, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDiamondZ",1078,G__G__ESD_701_0_27, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma2DiamondX",1623,G__G__ESD_701_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma2DiamondY",1624,G__G__ESD_701_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma2DiamondZ",1625,G__G__ESD_701_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDiamondCovXY",1461,G__G__ESD_701_0_31, 121, -1, -1, 0, 1, 1, 1, 8, "F - 'Float_t' 0 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerClass",1514,G__G__ESD_701_0_32, 67, -1, -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetActiveTriggerClasses",2334,G__G__ESD_701_0_33, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFiredTriggerClasses",2220,G__G__ESD_701_0_34, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 1, 1, 1, 8, "m - 'ULong64_t' 0 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFiredTriggerClassesNext50",2736,G__G__ESD_701_0_35, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 1, 1, 1, 8, "m - 'ULong64_t' 0 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFiredTriggerClasses",2220,G__G__ESD_701_0_36, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 2, 1, 1, 8, 
"m - 'ULong64_t' 0 - mask m - 'ULong64_t' 0 - mask2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintAllTriggerClasses",2248,G__G__ESD_701_0_37, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTriggerClassFired",1904,G__G__ESD_701_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"m - 'ULong64_t' 0 - mask C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTriggerClassFiredNext50",2420,G__G__ESD_701_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"m - 'ULong64_t' 0 - mask C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTriggerClassFired",1904,G__G__ESD_701_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"m - 'ULong64_t' 0 - mask m - 'ULong64_t' 0 - mask2 "
"C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentL3",1154,G__G__ESD_701_0_41, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentDip",1312,G__G__ESD_701_0_42, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamEnergy",1279,G__G__ESD_701_0_43, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamType",1079,G__G__ESD_701_0_44, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamParticle",1493,G__G__ESD_701_0_45, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - az i - 'Int_t' 0 - ibeam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamParticle",1481,G__G__ESD_701_0_46, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ibeam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamParticleA",1546,G__G__ESD_701_0_47, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ibeam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamParticleZ",1571,G__G__ESD_701_0_48, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ibeam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorsInDAQ",1626,G__G__ESD_701_0_49, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorsInReco",1805,G__G__ESD_701_0_50, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCTPStart",1045,G__G__ESD_701_0_51, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTimeStamp), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPHOSMatrix",1243,G__G__ESD_701_0_52, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TGeoHMatrix' - 0 - matrix i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPHOSMatrix",1231,G__G__ESD_701_0_53, 85, G__get_linked_tagnum(&G__G__ESDLN_TGeoHMatrix), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEMCALMatrix",1283,G__G__ESD_701_0_54, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TGeoHMatrix' - 0 - matrix i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEMCALMatrix",1271,G__G__ESD_701_0_55, 85, G__get_linked_tagnum(&G__G__ESDLN_TGeoHMatrix), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanIntensity",1640,G__G__ESD_701_0_56, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - - 0 - beam i - - 0 - btp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeanIntensity",1652,G__G__ESD_701_0_57, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - beam i - - 0 - btp "
"d - - 0 '-1' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanIntensityIntecting",2573,G__G__ESD_701_0_58, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - - 0 - beam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanIntensityNonIntecting",2872,G__G__ESD_701_0_59, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - - 0 - beam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0spread",1059,G__G__ESD_701_0_60, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0spread",1071,G__G__ESD_701_0_61, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0spread",1071,G__G__ESD_701_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCaloTriggerType",1825,G__G__ESD_701_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCaloTriggerType",1825,G__G__ESD_701_0_64, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - i I - 'Int_t' 10 - in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCaloTriggerType",1813,G__G__ESD_701_0_65, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCaloTriggerType",1813,G__G__ESD_701_0_66, 73, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVZEROEqFactors",1610,G__G__ESD_701_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - factors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVZEROEqFactors",1598,G__G__ESD_701_0_68, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVZEROEqFactors",1598,G__G__ESD_701_0_69, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_701_0_70, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDRun::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_701_0_71, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDRun::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_701_0_72, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDRun::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_701_0_73, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDRun::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_701_0_77, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_701_0_78, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDRun::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_701_0_79, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDRun::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_701_0_80, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDRun::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_701_0_81, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDRun::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDRun", 933, G__G__ESD_701_0_82, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTriggerScalersESD(void) {
   /* AliTriggerScalersESD */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD));
   G__memfunc_setup("AliTriggerScalersESD",1939,G__G__ESD_704_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerScalersESD",1939,G__G__ESD_704_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD), -1, 0, 7, 1, 1, 0, 
"b - 'UChar_t' 0 - classIndex m - 'ULong64_t' 0 - LOCB "
"m - 'ULong64_t' 0 - LOCA m - 'ULong64_t' 0 - L1CB "
"m - 'ULong64_t' 0 - L1CA m - 'ULong64_t' 0 - L2CB "
"m - 'ULong64_t' 0 - L2CA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerScalersESD",1939,G__G__ESD_704_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD), -1, 0, 9, 1, 1, 0, 
"b - 'UChar_t' 0 - classIndex m - 'ULong64_t' 0 - LOCB "
"m - 'ULong64_t' 0 - LOCA m - 'ULong64_t' 0 - L1CB "
"m - 'ULong64_t' 0 - L1CA m - 'ULong64_t' 0 - L2CB "
"m - 'ULong64_t' 0 - L2CA m - 'ULong64_t' 0 - LMCB "
"m - 'ULong64_t' 0 - LMCA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerScalersESD",1939,G__G__ESD_704_0_4, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD), -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - xlassIndex M - 'ULong64_t' 0 - s64", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AliTriggerScalersESD",1939,G__G__ESD_704_0_6, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD), -1, 0, 1, 1, 1, 0, "u 'AliTriggerScalersESD' - 11 - scal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_704_0_7, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD), -1, 1, 1, 1, 1, 0, "u 'AliTriggerScalersESD' - 11 - scal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLMCB",586,G__G__ESD_704_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - count", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLMCA",585,G__G__ESD_704_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - count", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLOCB",576,G__G__ESD_704_0_10, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLOCA",575,G__G__ESD_704_0_11, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL1CB",546,G__G__ESD_704_0_12, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL1CA",545,G__G__ESD_704_0_13, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL2CB",547,G__G__ESD_704_0_14, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL2CA",546,G__G__ESD_704_0_15, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLMCB",574,G__G__ESD_704_0_16, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLMCA",573,G__G__ESD_704_0_17, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAllScalers",1286,G__G__ESD_704_0_18, 121, -1, -1, 0, 1, 1, 1, 8, "M - 'ULong64_t' 0 - scalers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAllScalersM012",1510,G__G__ESD_704_0_19, 121, -1, -1, 0, 1, 1, 1, 8, "M - 'ULong64_t' 0 - scalers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClassIndex",1294,G__G__ESD_704_0_20, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_704_0_21, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTriggerScalersESD::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_704_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerScalersESD::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_704_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTriggerScalersESD::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_704_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTriggerScalersESD::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_704_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_704_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerScalersESD::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_704_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerScalersESD::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_704_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerScalersESD::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_704_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerScalersESD::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTriggerScalersESD", 2065, G__G__ESD_704_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTriggerScalersRecordESD(void) {
   /* AliTriggerScalersRecordESD */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersRecordESD));
   G__memfunc_setup("AliTriggerScalersRecordESD",2546,G__G__ESD_705_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersRecordESD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__ESD_705_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTriggerScalers",1706,G__G__ESD_705_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTriggerScalersESD' - 0 - scaler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTriggerScalers",1706,G__G__ESD_705_0_4, 121, -1, -1, 0, 7, 1, 1, 0, 
"b - 'UChar_t' 0 - classIndex m - 'ULong64_t' 0 - LOCB "
"m - 'ULong64_t' 0 - LOCA m - 'ULong64_t' 0 - L1CB "
"m - 'ULong64_t' 0 - L1CA m - 'ULong64_t' 0 - L2CB "
"m - 'ULong64_t' 0 - L2CA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerScalers",1729,G__G__ESD_705_0_5, 85, G__get_linked_tagnum(&G__G__ESDLN_TObjArray), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerScalersForClass",2526,G__G__ESD_705_0_6, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersESD), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 10 - classindex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStamp",1204,G__G__ESD_705_0_7, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTimeStamp), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeGroup",1212,G__G__ESD_705_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeStamp",1216,G__G__ESD_705_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTimeStamp' - 10 - stamp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeGroup",1224,G__G__ESD_705_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - group", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AliTriggerScalersRecordESD",2546,G__G__ESD_705_0_12, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersRecordESD), -1, 0, 1, 1, 1, 0, "u 'AliTriggerScalersRecordESD' - 11 - rec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_705_0_13, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersRecordESD), -1, 1, 1, 1, 1, 0, "u 'AliTriggerScalersRecordESD' - 11 - rec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_705_0_14, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTriggerScalersRecordESD::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_705_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerScalersRecordESD::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_705_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTriggerScalersRecordESD::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_705_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTriggerScalersRecordESD::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_705_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_705_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerScalersRecordESD::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_705_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerScalersRecordESD::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_705_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerScalersRecordESD::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_705_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerScalersRecordESD::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTriggerScalersRecordESD", 2672, G__G__ESD_705_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTriggerIR(void) {
   /* AliTriggerIR */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerIR));
   G__memfunc_setup("AliTriggerIR",1157,G__G__ESD_706_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerIR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerIR",1157,G__G__ESD_706_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerIR), -1, 0, 5, 1, 1, 0, 
"h - 'UInt_t' 0 - orbit h - 'UInt_t' 0 - nwords "
"H - 'UInt_t' 0 - words g - 'Bool_t' 0 'kFALSE' incomplete "
"g - 'Bool_t' 0 'kFALSE' transerr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerIR",1157,G__G__ESD_706_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerIR), -1, 0, 5, 1, 1, 0, 
"h - 'UInt_t' 0 - orbit h - 'UInt_t' 0 - nwords "
"M - 'ULong64_t' 0 - words g - 'Bool_t' 0 'kFALSE' incomplete "
"g - 'Bool_t' 0 'kFALSE' transerr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerIR",1157,G__G__ESD_706_0_4, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerIR), -1, 0, 1, 1, 1, 0, "u 'AliTriggerIR' - 11 - rec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_706_0_5, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerIR), -1, 1, 1, 1, 1, 0, "u 'AliTriggerIR' - 11 - rec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOrbit",812,G__G__ESD_706_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - orbit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIncomplete",1340,G__G__ESD_706_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTransErr",1117,G__G__ESD_706_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDDLflag",922,G__G__ESD_706_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOrbit",800,G__G__ESD_706_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNWord",778,G__G__ESD_706_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNWord2",828,G__G__ESD_706_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInt1s",751,G__G__ESD_706_0_13, 71, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInt2s",752,G__G__ESD_706_0_14, 71, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntsRun2",1061,G__G__ESD_706_0_15, 77, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBCs",536,G__G__ESD_706_0_16, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBC2s",586,G__G__ESD_706_0_17, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIncomplete",1328,G__G__ESD_706_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIncomplete2",1378,G__G__ESD_706_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTransErr",1105,G__G__ESD_706_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTransErr2",1155,G__G__ESD_706_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDDLflag",910,G__G__ESD_706_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_706_0_24, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTriggerIR::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_706_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerIR::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_706_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTriggerIR::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_706_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTriggerIR::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_706_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_706_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerIR::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_706_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerIR::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_706_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerIR::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_706_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerIR::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTriggerIR", 1283, G__G__ESD_706_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTriggerConfiguration(void) {
   /* AliTriggerConfiguration */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfiguration));
   G__memfunc_setup("AliTriggerConfiguration",2370,G__G__ESD_707_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfiguration), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerConfiguration",2370,G__G__ESD_707_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfiguration), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 1 - name u 'TString' - 1 - description", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddInput",793,G__G__ESD_707_0_3, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput), -1, 0, 5, 1, 1, 0, 
"u 'TString' - 1 - name u 'TString' - 1 - det "
"b - 'UChar_t' 0 - level h - 'UInt_t' 0 - signature "
"b - 'UChar_t' 0 - number", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddInput",793,G__G__ESD_707_0_4, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput), -1, 0, 6, 1, 1, 0, 
"u 'TString' - 1 - name u 'TString' - 1 - det "
"b - 'UChar_t' 0 - level h - 'UInt_t' 0 - signature "
"h - 'UInt_t' 0 - indexCTP h - 'UInt_t' 0 - indexSwitch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddInput",793,G__G__ESD_707_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'AliTriggerInput' - 0 - input", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddInteraction",1417,G__G__ESD_707_0_6, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInteraction), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 1 - name u 'TString' - 1 - logic", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddInteraction",1417,G__G__ESD_707_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'AliTriggerInteraction' - 0 - interact", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFunction",1103,G__G__ESD_707_0_8, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInteraction), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 1 - name u 'TString' - 1 - logic", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFunction",1103,G__G__ESD_707_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'AliTriggerInteraction' - 0 - func", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPFProtection",1478,G__G__ESD_707_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'AliTriggerPFProtection' - 0 - pf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMask",661,G__G__ESD_707_0_11, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 1 - name u 'TString' - 1 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMask",661,G__G__ESD_707_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'AliTriggerBCMask' - 0 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCluster",1003,G__G__ESD_707_0_13, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerCluster), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 1 - name b - 'UChar_t' 0 - index "
"u 'TString' - 1 - detectors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCluster",1003,G__G__ESD_707_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'AliTriggerCluster' - 0 - cluster", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddDescriptor",1320,G__G__ESD_707_0_15, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerDescriptor), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 1 - name u 'TString' - 1 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddDescriptor",1320,G__G__ESD_707_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'AliTriggerDescriptor' - 0 - desc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddClass",767,G__G__ESD_707_0_17, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass), -1, 0, 8, 1, 1, 0, 
"u 'TString' - 1 - name b - 'UChar_t' 0 - index "
"U 'AliTriggerDescriptor' - 0 - desc U 'AliTriggerCluster' - 0 - clus "
"U 'AliTriggerPFProtection' - 0 - pfp U 'AliTriggerBCMask' - 0 - mask "
"h - 'UInt_t' 0 - prescaler g - 'Bool_t' 0 - allrare", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddClass",767,G__G__ESD_707_0_18, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass), -1, 0, 8, 1, 1, 0, 
"u 'TString' - 1 - name b - 'UChar_t' 0 - index "
"u 'TString' - 1 - desc u 'TString' - 1 - clus "
"u 'TString' - 1 - pfp u 'TString' - 1 - mask "
"h - 'UInt_t' 0 - prescaler g - 'Bool_t' 0 - allrare", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddClass",767,G__G__ESD_707_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'AliTriggerClass' - 0 - trclass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__ESD_707_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPartitionName",1627,G__G__ESD_707_0_21, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetActiveDetectors",1833,G__G__ESD_707_0_22, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggeringDetectors",2271,G__G__ESD_707_0_23, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggeringModules",2059,G__G__ESD_707_0_24, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInputs",931,G__G__ESD_707_0_25, 117, G__get_linked_tagnum(&G__G__ESDLN_TObjArray), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInteractions",1555,G__G__ESD_707_0_26, 117, G__get_linked_tagnum(&G__G__ESDLN_TObjArray), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFunctions",1241,G__G__ESD_707_0_27, 117, G__get_linked_tagnum(&G__G__ESDLN_TObjArray), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPFProtections",1616,G__G__ESD_707_0_28, 117, G__get_linked_tagnum(&G__G__ESDLN_TObjArray), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMasks",799,G__G__ESD_707_0_29, 117, G__get_linked_tagnum(&G__G__ESDLN_TObjArray), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusters",1141,G__G__ESD_707_0_30, 117, G__get_linked_tagnum(&G__G__ESDLN_TObjArray), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDescriptors",1458,G__G__ESD_707_0_31, 117, G__get_linked_tagnum(&G__G__ESDLN_TObjArray), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClasses",1006,G__G__ESD_707_0_32, 117, G__get_linked_tagnum(&G__G__ESDLN_TObjArray), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVersion",1030,G__G__ESD_707_0_33, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClassIndexFromName",2083,G__G__ESD_707_0_34, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "C - - 10 - className", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClassNameFromIndex",2083,G__G__ESD_707_0_35, 67, -1, -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - classIndex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerClass",1514,G__G__ESD_707_0_36, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - classIndex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteConfiguration",1891,G__G__ESD_707_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAvailableConfigurations",2668,G__G__ESD_707_0_39, 85, G__get_linked_tagnum(&G__G__ESDLN_TObjArray), -1, 0, 1, 3, 1, 0, "C - - 10 '\"\"' filename", (char*)NULL, (void*) G__func2void( (TObjArray* (*)(const char*))(&AliTriggerConfiguration::GetAvailableConfigurations) ), 0);
   G__memfunc_setup("LoadConfiguration",1752,G__G__ESD_707_0_40, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfiguration), -1, 0, 1, 3, 1, 0, "u 'TString' - 1 - des", (char*)NULL, (void*) G__func2void( (AliTriggerConfiguration* (*)(TString&))(&AliTriggerConfiguration::LoadConfiguration) ), 0);
   G__memfunc_setup("LoadConfigurationFromString",2787,G__G__ESD_707_0_41, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfiguration), -1, 0, 1, 3, 1, 0, "C - - 10 - configuration", (char*)NULL, (void*) G__func2void( (AliTriggerConfiguration* (*)(const char*))(&AliTriggerConfiguration::LoadConfigurationFromString) ), 0);
   G__memfunc_setup("IsSelected",997,G__G__ESD_707_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'TString' - 0 - detName u 'TString' - 1 - detectors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessConfigurationLine",2495,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"C - - 10 - line i - 'Int_t' 1 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfiguration), -1, 1, 1, 1, 4, 0, "u 'AliTriggerConfiguration' - 11 - des", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerConfiguration",2370,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfiguration), -1, 0, 1, 1, 4, 0, "u 'AliTriggerConfiguration' - 11 - des", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_707_0_46, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTriggerConfiguration::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_707_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerConfiguration::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_707_0_48, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTriggerConfiguration::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_707_0_49, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTriggerConfiguration::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_707_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_707_0_54, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerConfiguration::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_707_0_55, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerConfiguration::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_707_0_56, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerConfiguration::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_707_0_57, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerConfiguration::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTriggerConfiguration", 2496, G__G__ESD_707_0_58, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDHeader(void) {
   /* AliESDHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHeader));
   G__memfunc_setup("AliESDHeader",1083,G__G__ESD_708_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDHeader",1083,G__G__ESD_708_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDHeader), -1, 0, 1, 1, 1, 0, "u 'AliESDHeader' - 11 - header", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_708_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDHeader), -1, 1, 1, 1, 1, 0, "u 'AliESDHeader' - 11 - header", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTriggerMask",1420,G__G__ESD_708_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerMaskNext50",1936,G__G__ESD_708_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOrbitNumber",1429,G__G__ESD_708_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeStamp",1216,G__G__ESD_708_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - timeStamp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventType",1232,G__G__ESD_708_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - eventType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventSpecie",1415,G__G__ESD_708_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - eventSpecie", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventNumberInFile",1998,G__G__ESD_708_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBunchCrossNumber",1935,G__G__ESD_708_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPeriodNumber",1528,G__G__ESD_708_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerCluster",1762,G__G__ESD_708_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTriggerIR",1144,G__G__ESD_708_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'AliTriggerIR' - 10 - ir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCTPConfig",1129,G__G__ESD_708_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTriggerConfiguration' - 0 - ctpConfig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetL0TriggerInputs",1791,G__G__ESD_708_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetL1TriggerInputs",1792,G__G__ESD_708_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetL2TriggerInputs",1793,G__G__ESD_708_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL0TriggerInputs",1779,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL1TriggerInputs",1780,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL2TriggerInputs",1781,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTriggerScalersRecord",2348,G__G__ESD_708_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTriggerScalersESD' - 0 - scalerRun", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerScalersDeltaEvent",2745,G__G__ESD_708_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTriggerScalersRecordESD' - 10 - scalerRun", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerScalersDeltaRun",2540,G__G__ESD_708_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliTriggerScalersRecordESD' - 10 - scalerRun", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerScalersRecord",2336,G__G__ESD_708_0_26, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersRecordESD), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerScalersDeltaEvent",2733,G__G__ESD_708_0_27, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersRecordESD), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerScalersDeltaRun",2528,G__G__ESD_708_0_28, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerScalersRecordESD), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerIR",1167,G__G__ESD_708_0_29, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerIR), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetActiveTriggerInputs",2271,G__G__ESD_708_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerInputName",1925,G__G__ESD_708_0_31, 67, -1, -1, 0, 2, 1, 1, 9, 
"i - 'Int_t' 0 - index i - 'Int_t' 0 - trglevel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetActiveTriggerInputs",2259,G__G__ESD_708_0_32, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFiredTriggerInputs",2145,G__G__ESD_708_0_33, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTriggerInputFired",1930,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCTPConfig",1117,G__G__ESD_708_0_35, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerConfiguration), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindIRIntInteractionsBXMap",2546,G__G__ESD_708_0_36, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - difference", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIRInt2InteractionMap",2230,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__ESDLN_TBits), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIRInt1InteractionMap",2229,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__ESDLN_TBits), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIRInt2ClosestInteractionMap",2963,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIRInt1ClosestInteractionMap",2962,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '3' gap", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIRInt2LastInteractionMap",2634,G__G__ESD_708_0_41, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerMask",1408,(G__InterfaceMethod) NULL,109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerMaskNext50",1924,G__G__ESD_708_0_43, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerMaskAll",1689,G__G__ESD_708_0_44, 121, -1, -1, 0, 2, 1, 1, 8, 
"m - 'ULong64_t' 1 - low m - 'ULong64_t' 1 - high", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOrbitNumber",1417,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTimeStamp",1204,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventType",1220,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventSpecie",1403,G__G__ESD_708_0_48, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventNumberInFile",1986,G__G__ESD_708_0_49, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBunchCrossNumber",1923,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPeriodNumber",1516,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerCluster",1750,(G__InterfaceMethod) NULL,98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerIREntries",1897,G__G__ESD_708_0_53, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerIREntries",1897,G__G__ESD_708_0_54, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - int1 i - 'Int_t' 0 - int2 "
"f - 'Float_t' 0 '180.' deltaTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIRArray",954,G__G__ESD_708_0_55, 117, G__get_linked_tagnum(&G__G__ESDLN_TObjArray), -1, 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - int1 i - 'Int_t' 0 - int2 "
"f - 'Float_t' 0 '180.' deltaTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__ESD_708_0_56, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTPCNoiseFilterCounter",2379,G__G__ESD_708_0_58, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCNoiseFilterCounter",2391,G__G__ESD_708_0_59, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - index b - 'UChar_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIRInteractionMap",1893,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_708_0_61, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_708_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_708_0_63, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_708_0_64, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_708_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_708_0_69, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_708_0_70, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_708_0_71, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_708_0_72, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDHeader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDHeader", 1209, G__G__ESD_708_0_73, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDTZERO(void) {
   /* AliESDTZERO */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTZERO));
   G__memfunc_setup("AliESDTZERO",902,G__G__ESD_710_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTZERO), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDTZERO",902,G__G__ESD_710_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTZERO), -1, 0, 1, 1, 1, 0, "u 'AliESDTZERO' - 11 - tzero", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_710_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDTZERO), -1, 1, 1, 1, 1, 0, "u 'AliESDTZERO' - 11 - tzero", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetT0zVertex",1180,G__G__ESD_710_0_5, 100, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0zVertex",1192,G__G__ESD_710_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double32_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0",420,G__G__ESD_710_0_7, 100, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0",432,G__G__ESD_710_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - timeStart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0clock",944,G__G__ESD_710_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0clock",956,G__G__ESD_710_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - timeStart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0TOF",653,G__G__ESD_710_0_11, 100, -1, G__defined_typename("Double32_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0TOF",653,G__G__ESD_710_0_12, 68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0TOF",665,G__G__ESD_710_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - icase f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0TOFbest",1083,G__G__ESD_710_0_14, 100, -1, G__defined_typename("Double32_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0TOFbest",1083,G__G__ESD_710_0_15, 68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0TOFbest",1095,G__G__ESD_710_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - icase f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0Trig",826,G__G__ESD_710_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0Trig",838,G__G__ESD_710_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - tvdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0Trig",826,G__G__ESD_710_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0time",851,G__G__ESD_710_0_20, 68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0time",863,G__G__ESD_710_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double32_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0amplitude",1385,G__G__ESD_710_0_22, 68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0amplitude",1397,G__G__ESD_710_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double32_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeFull",1090,G__G__ESD_710_0_24, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - ch i - 'Int_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOrA",546,G__G__ESD_710_0_25, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOrC",548,G__G__ESD_710_0_26, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTVDC",593,G__G__ESD_710_0_27, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeFull",1102,G__G__ESD_710_0_28, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - ch i - 'Int_t' 0 - hit "
"f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOrA",558,G__G__ESD_710_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - hit f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOrC",560,G__G__ESD_710_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - hit f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTVDC",605,G__G__ESD_710_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - hit f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMultC",785,G__G__ESD_710_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - mult", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMultA",783,G__G__ESD_710_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - mult", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultC",773,G__G__ESD_710_0_34, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultA",771,G__G__ESD_710_0_35, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBackgroundFlag",1702,G__G__ESD_710_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'false' back", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPileupFlag",1301,G__G__ESD_710_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'false' back", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSatelliteFlag",1613,G__G__ESD_710_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'false' sat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBackgroundFlag",1690,G__G__ESD_710_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPileupFlag",1289,G__G__ESD_710_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSatellite",1223,G__G__ESD_710_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPileupTime",1322,G__G__ESD_710_0_42, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - hit f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPileupTime",1310,G__G__ESD_710_0_43, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPileupBits",1325,G__G__ESD_710_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBits' - 0 - pileup", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0PileupBits",1445,G__G__ESD_710_0_45, 117, G__get_linked_tagnum(&G__G__ESDLN_TBits), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0NewAmplitude",1651,G__G__ESD_710_0_46, 68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0NewAmplitude",1663,G__G__ESD_710_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double32_t' 0 - newamp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__ESD_710_0_48, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_710_0_50, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDTZERO::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_710_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTZERO::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_710_0_52, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDTZERO::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_710_0_53, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDTZERO::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_710_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_710_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTZERO::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_710_0_59, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTZERO::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_710_0_60, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTZERO::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_710_0_61, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTZERO::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDTZERO", 1028, G__G__ESD_710_0_62, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDFIT(void) {
   /* AliESDFIT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDFIT));
   G__memfunc_setup("AliESDFIT",725,G__G__ESD_711_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDFIT), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDFIT",725,G__G__ESD_711_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDFIT), -1, 0, 1, 1, 1, 0, "u 'AliESDFIT' - 11 - tzero", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_711_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDFIT), -1, 1, 1, 1, 1, 0, "u 'AliESDFIT' - 11 - tzero", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFITzVertex",1275,G__G__ESD_711_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFITzVertex",1287,G__G__ESD_711_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFITT0",647,G__G__ESD_711_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFITT0",647,G__G__ESD_711_0_8, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFITT0",659,G__G__ESD_711_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - icase f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0best",850,G__G__ESD_711_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0best",850,G__G__ESD_711_0_11, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0best",862,G__G__ESD_711_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - icase f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFITtime",946,G__G__ESD_711_0_13, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFITtime",958,G__G__ESD_711_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFITamplitude",1480,G__G__ESD_711_0_15, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFITamplitude",1492,G__G__ESD_711_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__ESD_711_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_711_0_19, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDFIT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_711_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDFIT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_711_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDFIT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_711_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDFIT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_711_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_711_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDFIT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_711_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDFIT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_711_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDFIT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_711_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDFIT::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDFIT", 851, G__G__ESD_711_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDZDC(void) {
   /* AliESDZDC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDZDC));
   G__memfunc_setup("AliESDZDC",723,G__G__ESD_713_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDZDC), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDZDC",723,G__G__ESD_713_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDZDC), -1, 0, 1, 1, 1, 0, "u 'AliESDZDC' - 11 - zdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_713_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDZDC), -1, 1, 1, 1, 1, 0, "u 'AliESDZDC' - 11 - zdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCParticipants",1779,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCPartSideA",1374,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCPartSideC",1376,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetImpactParameter",1823,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetImpactParamSideA",1845,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetImpactParamSideC",1847,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZNCEnergy",1141,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZPCEnergy",1143,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZNAEnergy",1139,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZPAEnergy",1141,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZEM1Energy",1191,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZEM2Energy",1192,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZNCTowerEnergy",1670,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZNATowerEnergy",1668,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZPCTowerEnergy",1672,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZPATowerEnergy",1670,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZNCTowerEnergyLR",1828,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZNATowerEnergyLR",1826,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZPCTowerEnergyLR",1830,G__G__ESD_713_0_22, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZPATowerEnergyLR",1828,G__G__ESD_713_0_23, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDQuality",1253,G__G__ESD_713_0_24, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCN1Energy",1258,G__G__ESD_713_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCP1Energy",1260,G__G__ESD_713_0_26, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCN2Energy",1259,G__G__ESD_713_0_27, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCP2Energy",1261,G__G__ESD_713_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCEMEnergy",1277,G__G__ESD_713_0_29, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZN1TowerEnergy",1652,G__G__ESD_713_0_30, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZN2TowerEnergy",1653,G__G__ESD_713_0_31, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZP1TowerEnergy",1654,G__G__ESD_713_0_32, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZP2TowerEnergy",1655,G__G__ESD_713_0_33, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZN1TowerEnergyLR",1810,G__G__ESD_713_0_34, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZN2TowerEnergyLR",1811,G__G__ESD_713_0_35, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZP1TowerEnergyLR",1812,G__G__ESD_713_0_36, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZP2TowerEnergyLR",1813,G__G__ESD_713_0_37, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZNCentroidInPbPb",1819,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - beamEne D - 'Double_t' 0 - centrZNC "
"D - 'Double_t' 0 - centrZNA", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZNCentroidInpp",1687,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - centrZNC D - 'Double_t' 0 - centrZNA", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCScaler",1115,G__G__ESD_713_0_40, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCScaler",1115,G__G__ESD_713_0_41, 72, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCTDCData",1110,G__G__ESD_713_0_42, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCTDCCorrected",1655,G__G__ESD_713_0_43, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZNATDCChannel",1437,G__G__ESD_713_0_44, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZPATDCChannel",1439,G__G__ESD_713_0_45, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZEM1TDCChannel",1489,G__G__ESD_713_0_46, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZEM2TDCChannel",1490,G__G__ESD_713_0_47, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZNCTDCChannel",1439,G__G__ESD_713_0_48, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZPCTDCChannel",1441,G__G__ESD_713_0_49, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL0TDCChannel",1328,G__G__ESD_713_0_50, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZNTDCSum",984,G__G__ESD_713_0_51, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ihit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZNTDCDiff",1052,G__G__ESD_713_0_52, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ihit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZDCTimeSum",1221,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZDCTimeDiff",1289,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsZDCTDCcablingSet",1652,G__G__ESD_713_0_55, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDC",525,G__G__ESD_713_0_56, 121, -1, -1, 0, 13, 1, 1, 0, 
"d - 'Double_t' 0 - n1Energy d - 'Double_t' 0 - p1Energy "
"d - 'Double_t' 0 - emEnergy0 d - 'Double_t' 0 - emEnergy1 "
"d - 'Double_t' 0 - n2Energy d - 'Double_t' 0 - p2Energy "
"s - 'Short_t' 0 - participants s - 'Short_t' 0 - nPartA "
"s - 'Short_t' 0 - nPartC d - 'Double_t' 0 - b "
"d - 'Double_t' 0 - bA d - 'Double_t' 0 - bC "
"h - 'UInt_t' 0 - recoFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZN1TowerEnergy",1664,G__G__ESD_713_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - tow1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZN2TowerEnergy",1665,G__G__ESD_713_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - tow2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZP1TowerEnergy",1666,G__G__ESD_713_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - tow1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZP2TowerEnergy",1667,G__G__ESD_713_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - tow2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZN1TowerEnergyLR",1822,G__G__ESD_713_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - tow1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZN2TowerEnergyLR",1823,G__G__ESD_713_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - tow2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZP1TowerEnergyLR",1824,G__G__ESD_713_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - tow1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZP2TowerEnergyLR",1825,G__G__ESD_713_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - tow2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZNACentroid",1357,G__G__ESD_713_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - centrCoord", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZNCCentroid",1359,G__G__ESD_713_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - centrCoord", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDCScaler",1127,G__G__ESD_713_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "H - 'UInt_t' 10 - count", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDCTDCData",1122,G__G__ESD_713_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 12 - values", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDCTDCCorrected",1667,G__G__ESD_713_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 12 - values", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsZNChit",748,G__G__ESD_713_0_70, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsZNAhit",746,G__G__ESD_713_0_71, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsZPChit",750,G__G__ESD_713_0_72, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsZPAhit",748,G__G__ESD_713_0_73, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsZEM1hit",798,G__G__ESD_713_0_74, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsZEM2hit",799,G__G__ESD_713_0_75, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZNCTDChit",1079,G__G__ESD_713_0_76, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - isf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZPCTDChit",1081,G__G__ESD_713_0_77, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - isf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZNATDChit",1077,G__G__ESD_713_0_78, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - isf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZPATDChit",1079,G__G__ESD_713_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - isf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZEM1TDChit",1129,G__G__ESD_713_0_80, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - isf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZEM2TDChit",1130,G__G__ESD_713_0_81, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - isf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZDCTDCChannel",1441,G__G__ESD_713_0_82, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ich i - - 0 - ival", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__ESD_713_0_83, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_713_0_86, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDZDC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_713_0_87, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDZDC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_713_0_88, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDZDC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_713_0_89, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDZDC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_713_0_93, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_713_0_94, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDZDC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_713_0_95, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDZDC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_713_0_96, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDZDC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_713_0_97, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDZDC::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDZDC", 849, G__G__ESD_713_0_98, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDVZEROfriend(void) {
   /* AliESDVZEROfriend */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDVZEROfriend));
   G__memfunc_setup("AliESDVZEROfriend",1536,G__G__ESD_715_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDVZEROfriend), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDVZEROfriend",1536,G__G__ESD_715_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDVZEROfriend), -1, 0, 1, 1, 1, 0, "u 'AliESDVZEROfriend' - 11 - vzerofriend", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_715_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDVZEROfriend), -1, 1, 1, 1, 1, 0, "u 'AliESDVZEROfriend' - 11 - vzerofriend", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBBScalers",1137,(G__InterfaceMethod) NULL,109, -1, G__defined_typename("ULong64_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - channel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBGScalers",1142,(G__InterfaceMethod) NULL,109, -1, G__defined_typename("ULong64_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - channel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTriggerScalers",1729,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num_scaler", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBunchNumbersMB",1659,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num_bunch", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetChargeMB",1017,(G__InterfaceMethod) NULL,114, -1, G__defined_typename("UShort_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - num_bunch", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIntMBFlag",1108,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - num_bunch", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBBMBFlag",941,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - num_bunch", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBGMBFlag",946,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - num_bunch", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetADC",488,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - channel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPedestal",1106,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIntegratorFlag",1721,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBBFlag",798,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBGFlag",803,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTime",687,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - channel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWidth",800,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - channel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetBBScalers",1149,G__G__ESD_715_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - channel m - 'ULong64_t' 0 - scalers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBGScalers",1154,G__G__ESD_715_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - channel m - 'ULong64_t' 0 - scalers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerScalers",1741,G__G__ESD_715_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - num_scaler h - 'UInt_t' 0 - scaler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBunchNumbersMB",1671,G__G__ESD_715_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - num_bunch h - 'UInt_t' 0 - bunch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChargeMB",1029,G__G__ESD_715_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - num_bunch "
"r - 'UShort_t' 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIntMBFlag",1120,G__G__ESD_715_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - num_bunch "
"g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBBMBFlag",953,G__G__ESD_715_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - num_bunch "
"g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBGMBFlag",958,G__G__ESD_715_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - num_bunch "
"g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPedestal",1118,G__G__ESD_715_0_28, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event "
"f - 'Float_t' 0 - adc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIntegratorFlag",1733,G__G__ESD_715_0_29, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event "
"g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBBFlag",810,G__G__ESD_715_0_30, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event "
"g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBGFlag",815,G__G__ESD_715_0_31, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - event "
"g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__G__ESD_715_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - channel f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWidth",812,G__G__ESD_715_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - channel f - 'Float_t' 0 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerInputs",1655,G__G__ESD_715_0_34, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerInputsMask",2051,G__G__ESD_715_0_35, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerInputs",1667,G__G__ESD_715_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - inputs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerInputsMask",2063,G__G__ESD_715_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_715_0_38, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDVZEROfriend::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_715_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDVZEROfriend::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_715_0_40, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDVZEROfriend::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_715_0_41, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDVZEROfriend::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_715_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_715_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDVZEROfriend::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_715_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDVZEROfriend::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_715_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDVZEROfriend::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_715_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDVZEROfriend::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDVZEROfriend", 1662, G__G__ESD_715_0_50, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDTZEROfriend(void) {
   /* AliESDTZEROfriend */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTZEROfriend));
   G__memfunc_setup("AliESDTZEROfriend",1534,G__G__ESD_717_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTZEROfriend), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDTZEROfriend",1534,G__G__ESD_717_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTZEROfriend), -1, 0, 1, 1, 1, 0, "u 'AliESDTZEROfriend' - 11 - tzerofriend", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_717_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDTZEROfriend), -1, 1, 1, 1, 1, 0, "u 'AliESDTZEROfriend' - 11 - tzerofriend", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,G__G__ESD_717_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0timeCorr",1257,G__G__ESD_717_0_6, 68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0timeCorr",1269,G__G__ESD_717_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double32_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0ampQTC",970,G__G__ESD_717_0_8, 68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0ampQTC",982,G__G__ESD_717_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double32_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT0ampLEDminCFD",1480,G__G__ESD_717_0_10, 68, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT0ampLEDminCFD",1492,G__G__ESD_717_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double32_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_717_0_12, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDTZEROfriend::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_717_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTZEROfriend::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_717_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDTZEROfriend::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_717_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDTZEROfriend::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_717_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_717_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTZEROfriend::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_717_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTZEROfriend::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_717_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTZEROfriend::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_717_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTZEROfriend::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDTZEROfriend", 1660, G__G__ESD_717_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDTrdTrigger(void) {
   /* AliESDTrdTrigger */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrigger));
   G__memfunc_setup("AliESDTrdTrigger",1520,G__G__ESD_718_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrigger), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDTrdTrigger",1520,G__G__ESD_718_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrigger), -1, 0, 1, 1, 1, 0, "u 'AliESDTrdTrigger' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_718_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDTrdTrigger), -1, 1, 1, 1, 1, 0, "u 'AliESDTrdTrigger' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFlags",781,G__G__ESD_718_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - sector", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFlags",793,G__G__ESD_718_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - sector h - 'UInt_t' 10 - flags", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_718_0_6, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDTrdTrigger::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_718_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTrdTrigger::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_718_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDTrdTrigger::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_718_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDTrdTrigger::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_718_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_718_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTrdTrigger::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_718_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTrdTrigger::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_718_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDTrdTrigger::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_718_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDTrdTrigger::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDTrdTrigger", 1646, G__G__ESD_718_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDMuonCluster(void) {
   /* AliESDMuonCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonCluster));
   G__memfunc_setup("AliESDMuonCluster",1651,G__G__ESD_719_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonCluster), -1, 0, 0, 1, 1, 0, "", "Constructor", (void*) NULL, 0);
   G__memfunc_setup("AliESDMuonCluster",1651,G__G__ESD_719_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonCluster), -1, 0, 1, 1, 1, 0, "u 'AliESDMuonCluster' - 11 - cluster", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_719_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonCluster), -1, 1, 1, 1, 1, 0, "u 'AliESDMuonCluster' - 11 - cluster", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetXYZ",567,G__G__ESD_719_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__G__ESD_719_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__G__ESD_719_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__ESD_719_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetErrXY",774,G__G__ESD_719_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - errX d - 'Double_t' 0 - errY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrX",673,G__G__ESD_719_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrX2",723,G__G__ESD_719_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrY",674,G__G__ESD_719_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrY2",724,G__G__ESD_719_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCharge",886,G__G__ESD_719_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCharge",874,G__G__ESD_719_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChi2",626,G__G__ESD_719_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2",614,G__G__ESD_719_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChamberId",1151,G__G__ESD_719_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetElemId",1133,G__G__ESD_719_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterIndex",1530,G__G__ESD_719_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPadId",715,G__G__ESD_719_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - padId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPadsId",865,G__G__ESD_719_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nPads H - 'UInt_t' 10 - padsId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPads",758,G__G__ESD_719_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPadId",738,G__G__ESD_719_0_25, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPadsId",853,G__G__ESD_719_0_26, 72, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PadsStored",1017,G__G__ESD_719_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MovePadsToESD",1214,G__G__ESD_719_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliESDEvent' - 1 - esd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLabel",780,G__G__ESD_719_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabel",768,G__G__ESD_719_0_30, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_719_0_32, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDMuonCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_719_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDMuonCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_719_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDMuonCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_719_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDMuonCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_719_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_719_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDMuonCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_719_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDMuonCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_719_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDMuonCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_719_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDMuonCluster::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDMuonCluster", 1777, G__G__ESD_719_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDMuonPad(void) {
   /* AliESDMuonPad */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonPad));
   G__memfunc_setup("AliESDMuonPad",1190,G__G__ESD_720_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonPad), -1, 0, 0, 1, 1, 0, "", "Constructor", (void*) NULL, 0);
   G__memfunc_setup("AliESDMuonPad",1190,G__G__ESD_720_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonPad), -1, 0, 1, 1, 1, 0, "u 'AliESDMuonPad' - 11 - pad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_720_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonPad), -1, 1, 1, 1, 1, 0, "u 'AliESDMuonPad' - 11 - pad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetADC",500,G__G__ESD_720_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - adc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADC",488,G__G__ESD_720_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCharge",886,G__G__ESD_720_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCharge",874,G__G__ESD_720_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetElemId",1133,G__G__ESD_720_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetManuId",862,G__G__ESD_720_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetManuChannel",1386,G__G__ESD_720_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCathode",984,G__G__ESD_720_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalibrated",1303,G__G__ESD_720_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' calibrated", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCalibrated",1191,G__G__ESD_720_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSaturated",1241,G__G__ESD_720_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' saturated", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSaturated",1129,G__G__ESD_720_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_720_0_19, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDMuonPad::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_720_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDMuonPad::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_720_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDMuonPad::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_720_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDMuonPad::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_720_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_720_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDMuonPad::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_720_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDMuonPad::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_720_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDMuonPad::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_720_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDMuonPad::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDMuonPad", 1316, G__G__ESD_720_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDMuonGlobalTrack(void) {
   /* AliESDMuonGlobalTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonGlobalTrack));
   G__memfunc_setup("AliESDMuonGlobalTrack",2007,G__G__ESD_721_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonGlobalTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDMuonGlobalTrack",2007,G__G__ESD_721_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonGlobalTrack), -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - px d - 'Double_t' 0 - py "
"d - 'Double_t' 0 - pz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDMuonGlobalTrack",2007,G__G__ESD_721_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonGlobalTrack), -1, 0, 1, 1, 1, 0, "u 'AliESDMuonGlobalTrack' - 11 - esdTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_721_0_4, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDMuonGlobalTrack), -1, 1, 1, 1, 1, 0, "u 'AliESDMuonGlobalTrack' - 11 - esdTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCharge",886,G__G__ESD_721_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCharge",874,G__G__ESD_721_0_7, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPxPyPz",903,G__G__ESD_721_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - px d - 'Double_t' 0 - py "
"d - 'Double_t' 0 - pz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2OverNdf",1306,G__G__ESD_721_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "chi2/ndf", (void*) NULL, 0);
   G__memfunc_setup("SetChi2OverNdf",1318,G__G__ESD_721_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - chi2", "chi2/ndf", (void*) NULL, 0);
   G__memfunc_setup("GetChi2MatchTrigger",1831,G__G__ESD_721_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChi2MatchTrigger",1843,G__G__ESD_721_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - chi2MatchTrigger", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitsPatternInTrigCh",2190,G__G__ESD_721_0_13, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHitsPatternInTrigCh",2202,G__G__ESD_721_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - hitsPatternInTrigCh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitsPatternInTrigChTrk",2495,G__G__ESD_721_0_15, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHitsPatternInTrigChTrk",2507,G__G__ESD_721_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - hitsPatternInTrigChTrk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMuonClusterMap",1727,G__G__ESD_721_0_17, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMuonClusterMap",1739,G__G__ESD_721_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - muonClusterMap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLoCircuit",1198,G__G__ESD_721_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLoCircuit",1210,G__G__ESD_721_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - loCircuit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsConnected",1103,G__G__ESD_721_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connected",915,G__G__ESD_721_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMatchTrigger",1517,G__G__ESD_721_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - matchTrigger", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMatchTrigger",1505,G__G__ESD_721_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNMFTClusters",1462,G__G__ESD_721_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nMFTClusters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNMFTClusters",1450,G__G__ESD_721_0_26, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNWrongMFTClustersMC",2131,G__G__ESD_721_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nWrongMFTClustersMC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNWrongMFTClustersMC",2119,G__G__ESD_721_0_28, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMFTClusterPattern",2003,G__G__ESD_721_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - mftClusterPattern", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMFTClusterPattern",1991,G__G__ESD_721_0_30, 107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pt",196,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Eta",282,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Rapidity",838,G__G__ESD_721_0_33, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Px",200,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Py",201,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Pz",202,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("P",80,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PxPyPz",603,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFirstTrackingPoint",2161,G__G__ESD_721_0_39, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirstTrackingPoint",2149,G__G__ESD_721_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXYAtVertex",1296,G__G__ESD_721_0_41, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXYAtVertex",1284,G__G__ESD_721_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRAtAbsorberEnd",1646,G__G__ESD_721_0_43, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRAtAbsorberEnd",1658,G__G__ESD_721_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xv",206,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "put reasonable values here", (void*) NULL, 1);
   G__memfunc_setup("Yv",207,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Zv",208,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("XvYvZv",621,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OneOverPt",898,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Phi",289,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Theta",502,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("E",69,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("M",77,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Y",89,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Charge",586,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ContainTrackerData",1810,G__G__ESD_721_0_56, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PID",221,(G__InterfaceMethod) NULL,68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PdgCode",662,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLabel",780,G__G__ESD_721_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabel",768,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetProdVertexXYZ",1610,G__G__ESD_721_0_61, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProdVertexXYZ",1598,G__G__ESD_721_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCovariances",1422,G__G__ESD_721_0_63, 117, G__get_linked_tagnum(&G__G__ESDLN_TMatrixTlEdoublegR), G__defined_typename("TMatrixD"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCovariances",1434,G__G__ESD_721_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMatrixT<double>' 'TMatrixD' 11 - covariances", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDEvent",1022,G__G__ESD_721_0_65, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetESDEvent",1034,G__G__ESD_721_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDEvent' - 0 - evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_721_0_67, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDMuonGlobalTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_721_0_68, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDMuonGlobalTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_721_0_69, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDMuonGlobalTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_721_0_70, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDMuonGlobalTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_721_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_721_0_75, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDMuonGlobalTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_721_0_76, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDMuonGlobalTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_721_0_77, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDMuonGlobalTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_721_0_78, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDMuonGlobalTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDMuonGlobalTrack", 2133, G__G__ESD_721_0_79, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDHLTDecision(void) {
   /* AliESDHLTDecision */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTDecision));
   G__memfunc_setup("AliESDHLTDecision",1544,G__G__ESD_722_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTDecision), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDHLTDecision",1544,G__G__ESD_722_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTDecision), -1, 0, 2, 1, 1, 0, 
"g - - 0 - result C - - 10 - description", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDHLTDecision",1544,G__G__ESD_722_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTDecision), -1, 0, 1, 1, 1, 0, "u 'AliESDHLTDecision' - 11 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_722_0_4, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDHLTDecision), -1, 1, 1, 1, 1, 0, "u 'AliESDHLTDecision' - 11 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerResult",1663,G__G__ESD_722_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - result", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerItems",1538,G__G__ESD_722_0_6, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayI' - 0 - items", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCounters",1151,G__G__ESD_722_0_7, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayL64' - 0 - counters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDescription",1444,G__G__ESD_722_0_8, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Result",639,G__G__ESD_722_0_9, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOption",921,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Option_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsTriggerFired",1402,G__G__ESD_722_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - object", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 '\"\"' newname", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Name",385,G__G__ESD_722_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDHLTDecision::Name) ), 0);
   G__memfunc_setup("Class",502,G__G__ESD_722_0_16, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDHLTDecision::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_722_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDHLTDecision::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_722_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDHLTDecision::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_722_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDHLTDecision::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_722_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_722_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDHLTDecision::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_722_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDHLTDecision::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_722_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDHLTDecision::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_722_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDHLTDecision::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDHLTDecision", 1670, G__G__ESD_722_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDHandler(void) {
   /* AliESDHandler */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDHandler));
   G__memfunc_setup("AliESDHandler",1200,G__G__ESD_726_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDHandler), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDHandler",1200,G__G__ESD_726_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDHandler), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOutputFileName",1726,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOutputFileName",1714,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - - C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntry",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginEvent",999,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishEvent",1123,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TerminateIO",1089,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetESDfriend",1140,G__G__ESD_726_0_14, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTree",688,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TTree), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillTree",791,G__G__ESD_726_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetInputTree",1228,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SelectEventForFriends",2132,G__G__ESD_726_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDHandler",1200,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDHandler), -1, 0, 1, 1, 4, 0, "u 'AliESDHandler' - 11 - -", "Not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDHandler), -1, 1, 1, 1, 4, 0, "u 'AliESDHandler' - 11 - -", "Not implemented", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_726_0_21, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDHandler::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_726_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDHandler::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_726_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDHandler::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_726_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDHandler::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_726_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_726_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDHandler::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_726_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDHandler::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_726_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDHandler::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_726_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDHandler::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDHandler", 1326, G__G__ESD_726_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDpid(void) {
   /* AliESDpid */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDpid));
   G__memfunc_setup("AliESDpid",815,G__G__ESD_738_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDpid), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' forMC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDpid",815,G__G__ESD_738_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDpid), -1, 0, 1, 1, 1, 0, "u 'AliESDpid' - 11 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_738_0_3, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDpid), -1, 1, 1, 1, 1, 0, "u 'AliESDpid' - 11 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakePID",603,G__G__ESD_738_0_4, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"U 'AliESDEvent' - 0 - event g - 'Bool_t' 0 'kFALSE' TPCOnly "
"f - 'Float_t' 0 '9999' timeZeroTOF", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakePIDForTracking",1717,G__G__ESD_738_0_5, 121, -1, -1, 0, 1, 1, 1, 8, "U 'AliESDEvent' - 0 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeTPCPID",834,G__G__ESD_738_0_6, 121, -1, -1, 0, 1, 1, 1, 8, "U 'AliESDtrack' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeITSPID",843,G__G__ESD_738_0_7, 121, -1, -1, 0, 1, 1, 1, 8, "U 'AliESDtrack' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeTOFPID",836,G__G__ESD_738_0_8, 121, -1, -1, 0, 2, 1, 1, 8, 
"U 'AliESDtrack' - 0 - track f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckTOFMatching",1522,G__G__ESD_738_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'AliESDtrack' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeTRDPID",837,G__G__ESD_738_0_10, 121, -1, -1, 0, 1, 1, 1, 8, "U 'AliESDtrack' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CombinePID",922,G__G__ESD_738_0_11, 121, -1, -1, 0, 1, 1, 1, 8, "U 'AliESDtrack' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPIDForTracking",1635,G__G__ESD_738_0_12, 121, -1, -1, 0, 1, 1, 1, 8, "U 'AliESDtrack' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNMaxSigmaTOFTPCMismatch",2455,G__G__ESD_738_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - range", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNMaxSigmaTOFTPCMismatch",2443,G__G__ESD_738_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventHandler",1516,G__G__ESD_738_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliVEventHandler' - 0 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalDeltaTOFold",1936,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 2, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type "
"g - 'Bool_t' 0 'kFALSE' ratio", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfSigmasTOFold",2250,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 2, 8, 
"U 'AliVParticle' - 10 - track i 'AliPID::EParticleType' - 0 - type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_738_0_18, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDpid::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_738_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDpid::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_738_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDpid::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_738_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDpid::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_738_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_738_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDpid::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_738_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDpid::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_738_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDpid::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_738_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDpid::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDpid", 941, G__G__ESD_738_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDInputHandler(void) {
   /* AliESDInputHandler */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandler));
   G__memfunc_setup("AliESDInputHandler",1728,G__G__ESD_739_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandler), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDInputHandler",1728,G__G__ESD_739_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandler), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginEvent",999,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - path", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishEvent",1123,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckSelectionMask",1808,G__G__ESD_739_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvent",802,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliVEvent), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAnalysisType",1542,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Option_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDataType",1084,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Option_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNEventAcceptedInFile",2240,G__G__ESD_739_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNEventRejectedInFile",2253,G__G__ESD_739_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCutSummaryForChain",2116,G__G__ESD_739_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"I - 'Int_t' 0 - aTotal I - 'Int_t' 0 - aAccepted "
"I - 'Int_t' 0 - aRejected", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNFilesEmpty",1392,G__G__ESD_739_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHLTEvent",1034,G__G__ESD_739_0_17, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDEvent), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHLTTree",920,G__G__ESD_739_0_18, 85, G__get_linked_tagnum(&G__G__ESDLN_TTree), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetReadHLT",912,G__G__ESD_739_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReadHLT",900,G__G__ESD_739_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetESDfriend",1140,G__G__ESD_739_0_21, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDfriend), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetReadFriends",1395,G__G__ESD_739_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReadFriends",1383,G__G__ESD_739_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFriendFileName",1669,G__G__ESD_739_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFriendFileName",1657,G__G__ESD_739_0_25, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetReadTags",1079,G__G__ESD_739_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunTag",881,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliRunTag), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEventTag",1086,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliEventTag), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStatistics",1355,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TObject), -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPIDResponse",1356,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliPIDResponse), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreatePIDResponse",1664,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' isMC", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetESDpid",825,G__G__ESD_739_0_32, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDpid), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetESDpid",837,G__G__ESD_739_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDpid' - 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVfriendEvent",1520,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_AliVfriendEvent), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AliESDInputHandler",1728,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandler), -1, 0, 1, 1, 4, 0, "u 'AliESDInputHandler' - 11 - handler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandler), -1, 1, 1, 1, 4, 0, "u 'AliESDInputHandler' - 11 - handler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConnectFriends",1429,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_739_0_38, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDInputHandler::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_739_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDInputHandler::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_739_0_40, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDInputHandler::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_739_0_41, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDInputHandler::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_739_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_739_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDInputHandler::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_739_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDInputHandler::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_739_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDInputHandler::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_739_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDInputHandler::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDInputHandler", 1854, G__G__ESD_739_0_50, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDInputHandlerRP(void) {
   /* AliESDInputHandlerRP */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandlerRP));
   G__memfunc_setup("AliESDInputHandlerRP",1890,G__G__ESD_741_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandlerRP), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDInputHandlerRP",1890,G__G__ESD_741_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandlerRP), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitIO",556,G__G__ESD_741_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginEvent",999,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishEvent",1123,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadEvent",898,G__G__ESD_741_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iev", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - path", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetIO",667,G__G__ESD_741_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadFromDirectory",1733,G__G__ESD_741_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTreeR",770,G__G__ESD_741_0_13, 85, G__get_linked_tagnum(&G__G__ESDLN_TTree), -1, 0, 1, 1, 1, 0, "C - - 10 - det", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OpenFile",786,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDInputHandlerRP",1890,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandlerRP), -1, 0, 1, 1, 4, 0, "u 'AliESDInputHandlerRP' - 11 - handler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDInputHandlerRP), -1, 1, 1, 1, 4, 0, "u 'AliESDInputHandlerRP' - 11 - handler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_741_0_17, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDInputHandlerRP::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_741_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDInputHandlerRP::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_741_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDInputHandlerRP::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_741_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDInputHandlerRP::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_741_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_741_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDInputHandlerRP::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_741_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDInputHandlerRP::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_741_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDInputHandlerRP::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_741_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDInputHandlerRP::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliESDInputHandlerRP", 2016, G__G__ESD_741_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDMultITS(void) {
   /* AliESDMultITS */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDMultITS));
   G__memfunc_setup("AliESDMultITS",1156,G__G__ESD_743_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDMultITS), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliESDMultITS",1156,G__G__ESD_743_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliESDMultITS), -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - phi f - 'Float_t' 0 - eta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhi",577,G__G__ESD_743_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEta",570,G__G__ESD_743_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTheta",790,G__G__ESD_743_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_743_0_6, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliESDMultITS::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_743_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDMultITS::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_743_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliESDMultITS::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_743_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliESDMultITS::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_743_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_743_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDMultITS::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_743_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDMultITS::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_743_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliESDMultITS::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_743_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliESDMultITS::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliESDMultITS", 1156, G__G__ESD_743_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__ESDLN_AliESDMultITS), -1, 0, 1, 1, 1, 0, "u 'AliESDMultITS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliESDMultITS", 1282, G__G__ESD_743_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ESD_743_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__ESDLN_AliESDMultITS), -1, 1, 1, 1, 1, 0, "u 'AliESDMultITS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVertexerTracks(void) {
   /* AliVertexerTracks */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTracks));
   G__memfunc_setup("AliVertexerTracks",1747,G__G__ESD_804_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTracks), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliVertexerTracks",1747,G__G__ESD_804_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTracks), -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - fieldkG", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPrimaryVertex",1763,G__G__ESD_804_0_3, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 1, 1, 1, 0, "U 'AliVEvent' - 10 - vEvent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPrimaryVertex",1763,G__G__ESD_804_0_4, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 10 - trkArrayOrig R - 'UShort_t' 0 - idOrig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VertexForSelectedTracks",2358,G__G__ESD_804_0_5, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 5, 1, 1, 0, 
"U 'TObjArray' - 10 - trkArray R - 'UShort_t' 0 - id "
"g - 'Bool_t' 0 'kTRUE' optUseFitter g - 'Bool_t' 0 'kTRUE' optPropagate "
"g - 'Bool_t' 0 'kFALSE' optUseDiamondConstraint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VertexForSelectedESDTracks",2578,G__G__ESD_804_0_6, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 4, 1, 1, 0, 
"U 'TObjArray' - 0 - trkArray g - 'Bool_t' 0 'kTRUE' optUseFitter "
"g - 'Bool_t' 0 'kTRUE' optPropagate g - 'Bool_t' 0 'kFALSE' optUseDiamondConstraint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveTracksFromVertex",2280,G__G__ESD_804_0_7, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 4, 1, 1, 8, 
"U 'AliESDVertex' - 0 - inVtx U 'TObjArray' - 10 - trkArray "
"R - 'UShort_t' 0 - id F - 'Float_t' 10 - diamondxy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveConstraintFromVertex",2725,G__G__ESD_804_0_8, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 3, 1, 1, 8, 
"U 'AliESDVertex' - 0 - inVtx F - 'Float_t' 0 - diamondxyz "
"F - 'Float_t' 0 - diamondcov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSMode",929,G__G__ESD_804_0_9, 121, -1, -1, 0, 12, 1, 1, 0, 
"d - 'Double_t' 0 '0.1' dcacut d - 'Double_t' 0 '0.1' dcacutIter0 "
"d - 'Double_t' 0 '0.5' maxd0z0 i - 'Int_t' 0 '3' minCls "
"i - 'Int_t' 0 '1' mintrks d - 'Double_t' 0 '3.' nsigma "
"d - 'Double_t' 0 '100.' mindetfitter d - 'Double_t' 0 '1000.' maxtgl "
"d - 'Double_t' 0 '3.' fidR d - 'Double_t' 0 '30.' fidZ "
"i - 'Int_t' 0 '1' finderAlgo i - 'Int_t' 0 '4' finderAlgoIter0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTPCMode",920,G__G__ESD_804_0_10, 121, -1, -1, 0, 12, 1, 1, 0, 
"d - 'Double_t' 0 '0.1' dcacut d - 'Double_t' 0 '1.0' dcacutIter0 "
"d - 'Double_t' 0 '5.0' maxd0z0 i - 'Int_t' 0 '10' minCls "
"i - 'Int_t' 0 '1' mintrks d - 'Double_t' 0 '3.' nsigma "
"d - 'Double_t' 0 '0.1' mindetfitter d - 'Double_t' 0 '1.5' maxtgl "
"d - 'Double_t' 0 '3.' fidR d - 'Double_t' 0 '30.' fidZ "
"i - 'Int_t' 0 '1' finderAlgo i - 'Int_t' 0 '4' finderAlgoIter0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCuts",715,G__G__ESD_804_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - cuts i - - 0 - ncuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConstraintOff",1644,G__G__ESD_804_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConstraintOn",1550,G__G__ESD_804_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDCAcut",832,G__G__ESD_804_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - maxdca", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDCAcutIter0",1284,G__G__ESD_804_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - maxdca", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFinderAlgorithm",1835,G__G__ESD_804_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSrefitRequired",1911,G__G__ESD_804_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSpureSA",1132,G__G__ESD_804_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSpureSA",1120,G__G__ESD_804_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetITSrefitRequired",1899,G__G__ESD_804_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetITSrefitNotRequired",2216,G__G__ESD_804_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFiducialRZ",1273,G__G__ESD_804_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '3' r d - 'Double_t' 0 '30' z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxd0z0",912,G__G__ESD_804_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0.5' maxd0z0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinClusters",1445,G__G__ESD_804_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '5' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinClusters",1433,G__G__ESD_804_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinTracks",1208,G__G__ESD_804_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNSigmad0",1023,G__G__ESD_804_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '3' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNSigmad0",1011,G__G__ESD_804_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinDetFitter",1499,G__G__ESD_804_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '100.' mindet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxTgl",889,G__G__ESD_804_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '1.' maxtgl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOnlyFitter",1340,G__G__ESD_804_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSkipTracks",1323,G__G__ESD_804_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n I - 'Int_t' 10 - skipped", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVtxStart",1148,G__G__ESD_804_0_33, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 '0' x d - 'Double_t' 0 '0' y "
"d - 'Double_t' 0 '0' z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVtxStartSigma",1645,G__G__ESD_804_0_34, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 '3.' sx d - 'Double_t' 0 '3.' sy "
"d - 'Double_t' 0 '15.' sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVtxStart",1148,G__G__ESD_804_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDVertex' - 0 - vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSelectOnTOFBunchCrossing",2666,G__G__ESD_804_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 'kFALSE' select g - 'Bool_t' 0 'kTRUE' keepAlsoUnflagged", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStrLinMinDist",1588,G__G__ESD_804_0_37, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"D - 'Double_t' 10 - p0 D - 'Double_t' 10 - p1 "
"D - 'Double_t' 10 - x0", (char*)NULL, (void*) G__func2void( (Double_t (*)(const Double_t*, const Double_t*, const Double_t*))(&AliVertexerTracks::GetStrLinMinDist) ), 0);
   G__memfunc_setup("GetDeterminant3X3",1625,G__G__ESD_804_0_38, 100, -1, G__defined_typename("Double_t"), 0, 1, 3, 1, 0, "D - 'Double_t' 2 - matr", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t**))(&AliVertexerTracks::GetDeterminant3X3) ), 0);
   G__memfunc_setup("GetStrLinDerivMatrix",2027,G__G__ESD_804_0_39, 121, -1, -1, 0, 4, 3, 1, 0, 
"D - 'Double_t' 10 - p0 D - 'Double_t' 10 - p1 "
"1 - 'Double_t (*)[3]' 0 - m D - 'Double_t' 0 - d", (char*)NULL, (void*) G__func2void( (void (*)(const Double_t*, const Double_t*, Double_t (*)[3], Double_t*))(&AliVertexerTracks::GetStrLinDerivMatrix) ), 0);
   G__memfunc_setup("GetStrLinDerivMatrix",2027,G__G__ESD_804_0_40, 121, -1, -1, 0, 5, 3, 1, 0, 
"D - 'Double_t' 10 - p0 D - 'Double_t' 10 - p1 "
"D - 'Double_t' 10 - sigmasq 1 - 'Double_t (*)[3]' 0 - m "
"D - 'Double_t' 0 - d", (char*)NULL, (void*) G__func2void( (void (*)(const Double_t*, const Double_t*, const Double_t*, Double_t (*)[3], Double_t*))(&AliVertexerTracks::GetStrLinDerivMatrix) ), 0);
   G__memfunc_setup("TrackletVertexFinder",2064,G__G__ESD_804_0_41, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 2, 3, 1, 0, 
"U 'TClonesArray' - 10 - lines i - 'Int_t' 0 '0' optUseWeights", (char*)NULL, (void*) G__func2void( (AliESDVertex (*)(const TClonesArray*, Int_t))(&AliVertexerTracks::TrackletVertexFinder) ), 0);
   G__memfunc_setup("TrackletVertexFinder",2064,G__G__ESD_804_0_42, 117, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 3, 3, 1, 0, 
"U 'AliStrLine' - 2 - lines i - 'Int_t' 10 - knacc "
"i - 'Int_t' 0 '0' optUseWeights", (char*)NULL, (void*) G__func2void( (AliESDVertex (*)(AliStrLine**, const Int_t, Int_t))(&AliVertexerTracks::TrackletVertexFinder) ), 0);
   G__memfunc_setup("SetFieldkG",962,G__G__ESD_804_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-999.' field", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFieldkG",950,G__G__ESD_804_0_44, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNSigmaForUi00",1456,G__G__ESD_804_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '1.5' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNSigmaForUi00",1444,G__G__ESD_804_0_46, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMVTukey2",1043,G__G__ESD_804_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '6' t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMVSig2Ini",1092,G__G__ESD_804_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1e3' t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMVMaxSigma2",1304,G__G__ESD_804_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '3.' t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMVMinSig2Red",1379,G__G__ESD_804_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '0.005' t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMVMinDst",1054,G__G__ESD_804_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '10e-4' t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMVScanStep",1264,G__G__ESD_804_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '2.' t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMVFinalWBinary",1653,G__G__ESD_804_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMVMaxWghNtr",1359,G__G__ESD_804_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '10.' w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindVerticesMV",1385,G__G__ESD_804_0_55, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindNextVertexMV",1601,G__G__ESD_804_0_56, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentVertex",1665,G__G__ESD_804_0_57, 85, G__get_linked_tagnum(&G__G__ESDLN_AliESDVertex), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVerticesArray",1636,G__G__ESD_804_0_58, 85, G__get_linked_tagnum(&G__G__ESDLN_TObjArray), -1, 0, 0, 1, 1, 8, "", "RS to be removed", (void*) NULL, 0);
   G__memfunc_setup("AnalyzePileUp",1315,G__G__ESD_804_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "U 'AliESDEvent' - 0 - esdEv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBCSpacing",1142,G__G__ESD_804_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '50' ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseTrackClusterization",2606,G__G__ESD_804_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDeltaZCutForCluster",2213,G__G__ESD_804_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetnSigmaZCutForCluster",2330,G__G__ESD_804_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDisableBCInCPass0",1830,G__G__ESD_804_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDisableBCInCPass0",1818,G__G__ESD_804_0_65, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUseTrackClusterization",2594,G__G__ESD_804_0_66, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeltaZCutForCluster",2201,G__G__ESD_804_0_67, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetnSigmaZCutForCluster",2318,G__G__ESD_804_0_68, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HelixVertexFinder",1744,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OneTrackVertFinder",1808,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrepareTracks",1335,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"u 'TObjArray' - 11 - trkArrayOrig R - 'UShort_t' 10 - idOrig "
"i - 'Int_t' 0 - optImpParCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateTrackTo",1627,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"U 'AliExternalTrackParam' - 0 - track d - 'Double_t' 0 - xToGo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackToPoint",1218,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 2, 8, 
"U 'AliExternalTrackParam' - 0 - t u 'TMatrixT<double>' 'TMatrixD' 1 - ri "
"u 'TMatrixT<double>' 'TMatrixD' 1 - wWi g - 'Bool_t' 0 'kFALSE' uUi3by3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VertexFinder",1238,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 '0' optUseWeights", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VertexFitter",1260,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"g - 'Bool_t' 0 'kTRUE' vfit g - 'Bool_t' 0 'kTRUE' chiCalc "
"i - 'Int_t' 0 '0' useWeights", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StrLinVertexFinderMinDist",2538,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 '0' optUseWeights", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TooFewTracks",1212,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindAllVertices",1503,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"i - 'Int_t' 0 - nTrksOrig U 'TObjArray' - 10 - trkArrayOrig "
"D - 'Double_t' 0 - zTr D - 'Double_t' 0 - err2zTr "
"R - 'UShort_t' 0 - idOrig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliVertexerTracks",1747,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTracks), -1, 0, 1, 1, 4, 0, "u 'AliVertexerTracks' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ESDLN_AliVertexerTracks), -1, 1, 1, 1, 4, 0, "u 'AliVertexerTracks' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_804_0_81, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVertexerTracks::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_804_0_82, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVertexerTracks::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_804_0_83, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVertexerTracks::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_804_0_84, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVertexerTracks::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_804_0_88, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_804_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVertexerTracks::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_804_0_90, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVertexerTracks::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_804_0_91, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVertexerTracks::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_804_0_92, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVertexerTracks::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliVertexerTracks", 1873, G__G__ESD_804_0_93, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliESDUtils(void) {
   /* AliESDUtils */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliESDUtils));
   G__memfunc_setup("GetCorrV0",828,G__G__ESD_805_0_1, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"U 'AliVEvent' - 10 - esd f - 'Float_t' 1 - v0CorrResc "
"F - 'Float_t' 0 '0' v0multChCorr F - 'Float_t' 0 '0' v0multChCorrResc", (char*)NULL, (void*) G__func2void( (Float_t (*)(const AliVEvent*, Float_t&, Float_t*, Float_t*))(&AliESDUtils::GetCorrV0) ), 0);
   G__memfunc_setup("GetCorrSPD2",975,G__G__ESD_805_0_2, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - spd2raw f - 'Float_t' 0 - zv", (char*)NULL, (void*) G__func2void( (Float_t (*)(Float_t, Float_t))(&AliESDUtils::GetCorrSPD2) ), 0);
   G__memfunc_setup("RefitESDVertexTracks",1980,G__G__ESD_805_0_3, 85, G__get_linked_tagnum(&G__G__ESDLN_TObjArray), -1, 0, 3, 1, 1, 0, 
"U 'AliESDEvent' - 0 - esdEv i - 'Int_t' 0 '6' algo "
"D - 'Double_t' 10 '0' cuts", (char*)NULL, (void*) G__func2void( (TObjArray* (*)(AliESDEvent*, Int_t, const Double_t*))(&AliESDUtils::RefitESDVertexTracks) ), 0);
   G__memfunc_setup("GetCorrV0A0",941,G__G__ESD_805_0_4, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v0araw f - 'Float_t' 0 - zv", (char*)NULL, (void*) G__func2void( (Float_t (*)(Float_t, Float_t))(&AliESDUtils::GetCorrV0A0) ), 0);
   G__memfunc_setup("GetCorrV0A",893,G__G__ESD_805_0_5, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v0araw f - 'Float_t' 0 - zv", (char*)NULL, (void*) G__func2void( (Float_t (*)(Float_t, Float_t))(&AliESDUtils::GetCorrV0A) ), 0);
   G__memfunc_setup("GetCorrV0C",895,G__G__ESD_805_0_6, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v0craw f - 'Float_t' 0 - zv", (char*)NULL, (void*) G__func2void( (Float_t (*)(Float_t, Float_t))(&AliESDUtils::GetCorrV0C) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliExpression(void) {
   /* AliExpression */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliExpression));
   G__memfunc_setup("AliExpression",1350,G__G__ESD_807_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliExpression), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliExpression",1350,G__G__ESD_807_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliExpression), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - exp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliExpression",1350,G__G__ESD_807_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliExpression), -1, 0, 1, 1, 1, 0, "u 'AliExpression' - 11 - exp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_807_0_4, 117, G__get_linked_tagnum(&G__G__ESDLN_AliExpression), -1, 1, 1, 1, 1, 0, "u 'AliExpression' - 11 - exp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Value",509,G__G__ESD_807_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TObjArray' - 11 - vars", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Unparse",734,G__G__ESD_807_0_6, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AliExpression",1350,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ESDLN_AliExpression), -1, 0, 2, 1, 4, 0, 
"i - - 0 - op U 'AliExpression' - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliExpression",1350,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ESDLN_AliExpression), -1, 0, 3, 1, 4, 0, 
"i - - 0 - op U 'AliExpression' - 0 - a "
"U 'AliExpression' - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Tokenize",841,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__ESDLN_TObjArray), -1, 0, 1, 1, 4, 8, "u 'TString' - 0 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Element",714,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__ESDLN_AliExpression), -1, 0, 2, 3, 4, 0, 
"u 'TObjArray' - 1 - st i - 'Int_t' 1 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Primary",740,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__ESDLN_AliExpression), -1, 0, 2, 3, 4, 0, 
"u 'TObjArray' - 1 - st i - 'Int_t' 1 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Expression",1072,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__ESDLN_AliExpression), -1, 0, 2, 3, 4, 0, 
"u 'TObjArray' - 1 - st i - 'Int_t' 1 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_807_0_13, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliExpression::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_807_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliExpression::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_807_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliExpression::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_807_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliExpression::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_807_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_807_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliExpression::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_807_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliExpression::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_807_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliExpression::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_807_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliExpression::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliExpression", 1476, G__G__ESD_807_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliVariableExpression(void) {
   /* AliVariableExpression */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliVariableExpression));
   G__memfunc_setup("AliVariableExpression",2156,G__G__ESD_808_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliVariableExpression), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Value",509,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TObjArray' - 11 - pgm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Unparse",734,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_808_0_4, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliVariableExpression::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_808_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVariableExpression::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_808_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliVariableExpression::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_808_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliVariableExpression::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_808_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_808_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVariableExpression::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_808_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVariableExpression::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_808_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliVariableExpression::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_808_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliVariableExpression::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliVariableExpression", 2156, G__G__ESD_808_0_16, (int) ('i'), 
G__get_linked_tagnum(&G__G__ESDLN_AliVariableExpression), -1, 0, 1, 1, 1, 0, "u 'AliVariableExpression' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliVariableExpression", 2282, G__G__ESD_808_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ESD_808_0_18, (int) ('u'), G__get_linked_tagnum(&G__G__ESDLN_AliVariableExpression), -1, 1, 1, 1, 1, 0, "u 'AliVariableExpression' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliKFParticleBase(void) {
   /* AliKFParticleBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKFParticleBase));
   G__memfunc_setup("GetFieldValue",1281,G__G__ESD_810_0_1, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - xyz D - 'Double_t' 0 - B", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetDStoPoint",1188,G__G__ESD_810_0_2, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - xyz", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetDStoParticle",1486,G__G__ESD_810_0_3, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'AliKFParticleBase' - 11 - p d - 'Double_t' 1 - DS "
"d - 'Double_t' 1 - DSp", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Transport",973,G__G__ESD_810_0_4, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - dS D - 'Double_t' 0 - P "
"D - 'Double_t' 0 - C", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Initialize",1042,G__G__ESD_810_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"D - 'Double_t' 10 - Param D - 'Double_t' 10 - Cov "
"i - 'Int_t' 0 - Charge d - 'Double_t' 0 - Mass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__G__ESD_810_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVtxGuess",1141,G__G__ESD_810_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConstructMethod",1874,G__G__ESD_810_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMassHypo",1120,G__G__ESD_810_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMassHypo",1108,G__G__ESD_810_0_11, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSumDaughterMass",1821,G__G__ESD_810_0_12, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__G__ESD_810_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__G__ESD_810_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__ESD_810_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPx",488,G__G__ESD_810_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPy",489,G__G__ESD_810_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPz",490,G__G__ESD_810_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetE",357,G__G__ESD_810_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetS",371,G__G__ESD_810_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQ",369,G__G__ESD_810_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2",614,G__G__ESD_810_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNDF",504,G__G__ESD_810_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,G__G__ESD_810_0_24, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__G__ESD_810_0_25, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Z",90,G__G__ESD_810_0_26, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Px",200,G__G__ESD_810_0_27, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Py",201,G__G__ESD_810_0_28, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pz",202,G__G__ESD_810_0_29, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("E",69,G__G__ESD_810_0_30, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S",83,G__G__ESD_810_0_31, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Q",81,G__G__ESD_810_0_32, 105, -1, G__defined_typename("Int_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2",326,G__G__ESD_810_0_33, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NDF",216,G__G__ESD_810_0_34, 105, -1, G__defined_typename("Int_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameter",1217,G__G__ESD_810_0_35, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCovariance",1307,G__G__ESD_810_0_36, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCovariance",1307,G__G__ESD_810_0_37, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMomentum",1138,G__G__ESD_810_0_38, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - P d - 'Double_t' 1 - SigmaP", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPt",484,G__G__ESD_810_0_39, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - Pt d - 'Double_t' 1 - SigmaPt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEta",570,G__G__ESD_810_0_40, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - Eta d - 'Double_t' 1 - SigmaEta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhi",577,G__G__ESD_810_0_41, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - Phi d - 'Double_t' 1 - SigmaPhi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMass",692,G__G__ESD_810_0_42, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - M d - 'Double_t' 1 - SigmaM", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDecayLength",1384,G__G__ESD_810_0_43, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - L d - 'Double_t' 1 - SigmaL", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDecayLengthXY",1561,G__G__ESD_810_0_44, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - L d - 'Double_t' 1 - SigmaL", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLifeTime",1071,G__G__ESD_810_0_45, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - T d - 'Double_t' 1 - SigmaT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetR",370,G__G__ESD_810_0_46, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - R d - 'Double_t' 1 - SigmaR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,G__G__ESD_810_0_47, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__G__ESD_810_0_48, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Z",90,G__G__ESD_810_0_49, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Px",200,G__G__ESD_810_0_50, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Py",201,G__G__ESD_810_0_51, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pz",202,G__G__ESD_810_0_52, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("E",69,G__G__ESD_810_0_53, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S",83,G__G__ESD_810_0_54, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Q",81,G__G__ESD_810_0_55, 105, -1, G__defined_typename("Int_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2",326,G__G__ESD_810_0_56, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NDF",216,G__G__ESD_810_0_57, 105, -1, G__defined_typename("Int_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Parameter",929,G__G__ESD_810_0_58, 100, -1, G__defined_typename("Double_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Covariance",1019,G__G__ESD_810_0_59, 100, -1, G__defined_typename("Double_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Covariance",1019,G__G__ESD_810_0_60, 100, -1, G__defined_typename("Double_t"), 1, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__G__ESD_810_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliKFParticleBase' - 11 - Daughter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddDaughter",1085,G__G__ESD_810_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliKFParticleBase' - 11 - Daughter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddDaughterWithEnergyFit",2406,G__G__ESD_810_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliKFParticleBase' - 11 - Daughter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddDaughterWithEnergyCalc",2486,G__G__ESD_810_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliKFParticleBase' - 11 - Daughter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddDaughterWithEnergyFitMC",2550,G__G__ESD_810_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliKFParticleBase' - 11 - Daughter", "with mass constrained", (void*) NULL, 0);
   G__memfunc_setup("SetProductionVertex",2001,G__G__ESD_810_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliKFParticleBase' - 11 - Vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNonlinearMassConstraint",2699,G__G__ESD_810_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Mass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMassConstraint",1765,G__G__ESD_810_0_68, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - Mass d - 'Double_t' 0 '0' SigmaMass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNoDecayLength",1585,G__G__ESD_810_0_69, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Construct",965,G__G__ESD_810_0_70, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'AliKFParticleBase' - 12 - vDaughters i - 'Int_t' 0 - NDaughters "
"U 'AliKFParticleBase' - 10 '0' ProdVtx d - 'Double_t' 0 '-1' Mass "
"g - 'Bool_t' 0 '0' IsConstrained", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransportToDecayVertex",2292,G__G__ESD_810_0_71, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransportToProductionVertex",2869,G__G__ESD_810_0_72, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransportToDS",1319,G__G__ESD_810_0_73, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dS", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDStoPointBz",1376,G__G__ESD_810_0_74, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - Bz D - 'Double_t' 10 - xyz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDStoParticleBz",1674,G__G__ESD_810_0_75, 121, -1, -1, 0, 4, 1, 1, 8, 
"d - 'Double_t' 0 - Bz u 'AliKFParticleBase' - 11 - p "
"d - 'Double_t' 1 - dS d - 'Double_t' 1 - dS1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransportBz",1161,G__G__ESD_810_0_76, 121, -1, -1, 0, 4, 1, 1, 8, 
"d - 'Double_t' 0 - Bz d - 'Double_t' 0 - dS "
"D - 'Double_t' 0 - P D - 'Double_t' 0 - C", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransportCBM",1183,G__G__ESD_810_0_77, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - dS D - 'Double_t' 0 - P "
"D - 'Double_t' 0 - C", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceFromVertex",2141,G__G__ESD_810_0_78, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceFromVertex",2141,G__G__ESD_810_0_79, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliKFParticleBase' - 11 - Vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceFromParticle",2323,G__G__ESD_810_0_80, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliKFParticleBase' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeviationFromVertex",2261,G__G__ESD_810_0_81, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - v D - 'Double_t' 10 '0' Cv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeviationFromVertex",2261,G__G__ESD_810_0_82, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliKFParticleBase' - 11 - Vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeviationFromParticle",2443,G__G__ESD_810_0_83, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliKFParticleBase' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SubtractFromVertex",1882,G__G__ESD_810_0_84, 121, -1, -1, 0, 1, 1, 1, 8, "u 'AliKFParticleBase' - 1 - Vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructGammaBz",1636,G__G__ESD_810_0_85, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'AliKFParticleBase' - 11 - daughter1 u 'AliKFParticleBase' - 11 - daughter2 "
"d - - 0 - Bz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetArmenterosPodolanski",2388,G__G__ESD_810_0_86, 121, -1, -1, 0, 3, 3, 1, 0, 
"u 'AliKFParticleBase' - 1 - positive u 'AliKFParticleBase' - 1 - negative "
"D - 'Double_t' 0 - QtAlfa", (char*)NULL, (void*) G__func2void( (void (*)(AliKFParticleBase&, AliKFParticleBase&, Double_t*))(&AliKFParticleBase::GetArmenterosPodolanski) ), 0);
   G__memfunc_setup("RotateXY",800,G__G__ESD_810_0_87, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - angle D - 'Double_t' 0 - Vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IJ",147,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 2, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Cij",278,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 1, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Convert",737,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "g - - 0 - ToProduction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransportLine",1365,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 8, 
"d - 'Double_t' 0 - S D - 'Double_t' 0 - P "
"D - 'Double_t' 0 - C", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDStoPointLine",1580,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 2, 8, "D - 'Double_t' 10 - xyz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InvertSym3",996,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 2, 0, 
"D - 'Double_t' 10 - A D - 'Double_t' 0 - Ainv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MultQSQt",779,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 3, 2, 0, 
"D - 'Double_t' 10 - Q D - 'Double_t' 10 - S "
"D - 'Double_t' 0 - SOut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSCorrection",1419,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 2, 0, 
"D - 'Double_t' 10 - Part D - 'Double_t' 10 - XYZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeasurement",1446,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 8, 
"D - 'Double_t' 10 - XYZ D - 'Double_t' 0 - m "
"D - 'Double_t' 0 - V", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMassConstraint",1765,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"D - 'Double_t' 0 - mP D - 'Double_t' 0 - mC "
"d - 'Double_t' 0 - mJ[][7] d - 'Double_t' 0 - mass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_810_0_98, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliKFParticleBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_810_0_99, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliKFParticleBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_810_0_100, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliKFParticleBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_810_0_101, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliKFParticleBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_810_0_105, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_810_0_106, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliKFParticleBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_810_0_107, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliKFParticleBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_810_0_108, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliKFParticleBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_810_0_109, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliKFParticleBase::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliKFParticleBase", 1748, G__G__ESD_810_0_110, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ESD_810_0_111, (int) ('u'), G__get_linked_tagnum(&G__G__ESDLN_AliKFParticleBase), -1, 1, 1, 1, 1, 0, "u 'AliKFParticleBase' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliKFParticle(void) {
   /* AliKFParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle));
   G__memfunc_setup("SetField",784,G__G__ESD_811_0_1, 121, -1, -1, 0, 1, 3, 1, 0, "d - 'Double_t' 0 - Bz", (char*)NULL, (void*) G__func2void( (void (*)(Double_t))(&AliKFParticle::SetField) ), 0);
   G__memfunc_setup("AliKFParticle",1243,G__G__ESD_811_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliKFParticle",1243,G__G__ESD_811_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle), -1, 0, 3, 1, 1, 0, 
"u 'AliKFParticle' - 11 - d1 u 'AliKFParticle' - 11 - d2 "
"g - 'Bool_t' 0 'kFALSE' gamma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliKFParticle",1243,G__G__ESD_811_0_4, 105, G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle), -1, 0, 3, 1, 1, 0, 
"u 'AliKFParticle' - 11 - d1 u 'AliKFParticle' - 11 - d2 "
"u 'AliKFParticle' - 11 - d3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliKFParticle",1243,G__G__ESD_811_0_5, 105, G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle), -1, 0, 4, 1, 1, 0, 
"u 'AliKFParticle' - 11 - d1 u 'AliKFParticle' - 11 - d2 "
"u 'AliKFParticle' - 11 - d3 u 'AliKFParticle' - 11 - d4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Create",596,G__G__ESD_811_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"D - 'Double_t' 10 - Param D - 'Double_t' 10 - Cov "
"i - 'Int_t' 0 - Charge i - 'Int_t' 0 - PID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Create",596,G__G__ESD_811_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"D - 'Double_t' 10 - Param D - 'Double_t' 10 - Cov "
"i - 'Int_t' 0 - Charge d - 'Double_t' 0 - Mass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliKFParticle",1243,G__G__ESD_811_0_8, 105, G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle), -1, 0, 2, 1, 1, 0, 
"u 'AliVTrack' - 11 - track i - 'Int_t' 0 - PID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliKFParticle",1243,G__G__ESD_811_0_9, 105, G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle), -1, 0, 3, 1, 1, 0, 
"u 'AliExternalTrackParam' - 11 - track d - 'Double_t' 0 - Mass "
"i - 'Int_t' 0 - Charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliKFParticle",1243,G__G__ESD_811_0_10, 105, G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle), -1, 0, 1, 1, 1, 0, "u 'AliVVertex' - 11 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__G__ESD_811_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVtxGuess",1141,G__G__ESD_811_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__G__ESD_811_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* x of current position", (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__G__ESD_811_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* y of current position", (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__ESD_811_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* z of current position", (void*) NULL, 0);
   G__memfunc_setup("GetPx",488,G__G__ESD_811_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* x-compoment of 3-momentum", (void*) NULL, 0);
   G__memfunc_setup("GetPy",489,G__G__ESD_811_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* y-compoment of 3-momentum", (void*) NULL, 0);
   G__memfunc_setup("GetPz",490,G__G__ESD_811_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* z-compoment of 3-momentum", (void*) NULL, 0);
   G__memfunc_setup("GetE",357,G__G__ESD_811_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* energy", (void*) NULL, 0);
   G__memfunc_setup("GetS",371,G__G__ESD_811_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* decay length / momentum", (void*) NULL, 0);
   G__memfunc_setup("GetQ",369,G__G__ESD_811_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "* charge", (void*) NULL, 0);
   G__memfunc_setup("GetChi2",614,G__G__ESD_811_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* chi^2", (void*) NULL, 0);
   G__memfunc_setup("GetNDF",504,G__G__ESD_811_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "* Number of Degrees of Freedom", (void*) NULL, 0);
   G__memfunc_setup("X",88,G__G__ESD_811_0_24, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__G__ESD_811_0_25, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Z",90,G__G__ESD_811_0_26, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Px",200,G__G__ESD_811_0_27, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Py",201,G__G__ESD_811_0_28, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pz",202,G__G__ESD_811_0_29, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("E",69,G__G__ESD_811_0_30, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S",83,G__G__ESD_811_0_31, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Q",81,G__G__ESD_811_0_32, 105, -1, G__defined_typename("Int_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2",326,G__G__ESD_811_0_33, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NDF",216,G__G__ESD_811_0_34, 105, -1, G__defined_typename("Int_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameter",1217,G__G__ESD_811_0_35, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCovariance",1307,G__G__ESD_811_0_36, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCovariance",1307,G__G__ESD_811_0_37, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - - 0 - i i - - 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetP",368,G__G__ESD_811_0_38, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* momentum", (void*) NULL, 0);
   G__memfunc_setup("GetPt",484,G__G__ESD_811_0_39, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* transverse momentum", (void*) NULL, 0);
   G__memfunc_setup("GetEta",570,G__G__ESD_811_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* pseudorapidity", (void*) NULL, 0);
   G__memfunc_setup("GetPhi",577,G__G__ESD_811_0_41, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* phi", (void*) NULL, 0);
   G__memfunc_setup("GetMomentum",1138,G__G__ESD_811_0_42, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* momentum (same as GetP() )", (void*) NULL, 0);
   G__memfunc_setup("GetMass",692,G__G__ESD_811_0_43, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* mass", (void*) NULL, 0);
   G__memfunc_setup("GetDecayLength",1384,G__G__ESD_811_0_44, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* decay length", (void*) NULL, 0);
   G__memfunc_setup("GetDecayLengthXY",1561,G__G__ESD_811_0_45, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* decay length in XY", (void*) NULL, 0);
   G__memfunc_setup("GetLifeTime",1071,G__G__ESD_811_0_46, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* life time", (void*) NULL, 0);
   G__memfunc_setup("GetR",370,G__G__ESD_811_0_47, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* distance to the origin", (void*) NULL, 0);
   G__memfunc_setup("GetErrX",673,G__G__ESD_811_0_48, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* x of current position ", (void*) NULL, 0);
   G__memfunc_setup("GetErrY",674,G__G__ESD_811_0_49, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* y of current position", (void*) NULL, 0);
   G__memfunc_setup("GetErrZ",675,G__G__ESD_811_0_50, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* z of current position", (void*) NULL, 0);
   G__memfunc_setup("GetErrPx",785,G__G__ESD_811_0_51, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* x-compoment of 3-momentum", (void*) NULL, 0);
   G__memfunc_setup("GetErrPy",786,G__G__ESD_811_0_52, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* y-compoment of 3-momentum", (void*) NULL, 0);
   G__memfunc_setup("GetErrPz",787,G__G__ESD_811_0_53, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* z-compoment of 3-momentum", (void*) NULL, 0);
   G__memfunc_setup("GetErrE",654,G__G__ESD_811_0_54, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* energy", (void*) NULL, 0);
   G__memfunc_setup("GetErrS",668,G__G__ESD_811_0_55, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* decay length / momentum", (void*) NULL, 0);
   G__memfunc_setup("GetErrP",665,G__G__ESD_811_0_56, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* momentum", (void*) NULL, 0);
   G__memfunc_setup("GetErrPt",781,G__G__ESD_811_0_57, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* transverse momentum", (void*) NULL, 0);
   G__memfunc_setup("GetErrEta",867,G__G__ESD_811_0_58, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* pseudorapidity", (void*) NULL, 0);
   G__memfunc_setup("GetErrPhi",874,G__G__ESD_811_0_59, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* phi", (void*) NULL, 0);
   G__memfunc_setup("GetErrMomentum",1435,G__G__ESD_811_0_60, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* momentum", (void*) NULL, 0);
   G__memfunc_setup("GetErrMass",989,G__G__ESD_811_0_61, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* mass", (void*) NULL, 0);
   G__memfunc_setup("GetErrDecayLength",1681,G__G__ESD_811_0_62, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* decay length", (void*) NULL, 0);
   G__memfunc_setup("GetErrDecayLengthXY",1858,G__G__ESD_811_0_63, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* decay length in XY", (void*) NULL, 0);
   G__memfunc_setup("GetErrLifeTime",1368,G__G__ESD_811_0_64, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* life time", (void*) NULL, 0);
   G__memfunc_setup("GetErrR",667,G__G__ESD_811_0_65, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "* distance to the origin", (void*) NULL, 0);
   G__memfunc_setup("GetP",368,G__G__ESD_811_0_66, 105, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - P d - 'Double_t' 1 - SigmaP", "* momentum", (void*) NULL, 0);
   G__memfunc_setup("GetPt",484,G__G__ESD_811_0_67, 105, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - Pt d - 'Double_t' 1 - SigmaPt", "* transverse momentum", (void*) NULL, 0);
   G__memfunc_setup("GetEta",570,G__G__ESD_811_0_68, 105, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - Eta d - 'Double_t' 1 - SigmaEta", "* pseudorapidity", (void*) NULL, 0);
   G__memfunc_setup("GetPhi",577,G__G__ESD_811_0_69, 105, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - Phi d - 'Double_t' 1 - SigmaPhi", "* phi", (void*) NULL, 0);
   G__memfunc_setup("GetMomentum",1138,G__G__ESD_811_0_70, 105, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - P d - 'Double_t' 1 - SigmaP", "* momentum", (void*) NULL, 0);
   G__memfunc_setup("GetMass",692,G__G__ESD_811_0_71, 105, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - M d - 'Double_t' 1 - SigmaM", "* mass", (void*) NULL, 0);
   G__memfunc_setup("GetDecayLength",1384,G__G__ESD_811_0_72, 105, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - L d - 'Double_t' 1 - SigmaL", "* decay length", (void*) NULL, 0);
   G__memfunc_setup("GetDecayLengthXY",1561,G__G__ESD_811_0_73, 105, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - L d - 'Double_t' 1 - SigmaL", "* decay length in XY", (void*) NULL, 0);
   G__memfunc_setup("GetLifeTime",1071,G__G__ESD_811_0_74, 105, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - T d - 'Double_t' 1 - SigmaT", "* life time", (void*) NULL, 0);
   G__memfunc_setup("GetR",370,G__G__ESD_811_0_75, 105, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - R d - 'Double_t' 1 - SigmaR", "* R", (void*) NULL, 0);
   G__memfunc_setup("X",88,G__G__ESD_811_0_76, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__G__ESD_811_0_77, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Z",90,G__G__ESD_811_0_78, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Px",200,G__G__ESD_811_0_79, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Py",201,G__G__ESD_811_0_80, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pz",202,G__G__ESD_811_0_81, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("E",69,G__G__ESD_811_0_82, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S",83,G__G__ESD_811_0_83, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Q",81,G__G__ESD_811_0_84, 105, -1, G__defined_typename("Int_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2",326,G__G__ESD_811_0_85, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NDF",216,G__G__ESD_811_0_86, 105, -1, G__defined_typename("Int_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Parameter",929,G__G__ESD_811_0_87, 100, -1, G__defined_typename("Double_t"), 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Covariance",1019,G__G__ESD_811_0_88, 100, -1, G__defined_typename("Double_t"), 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Covariance",1019,G__G__ESD_811_0_89, 100, -1, G__defined_typename("Double_t"), 1, 2, 1, 1, 0, 
"i - - 0 - i i - - 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Parameters",1044,G__G__ESD_811_0_90, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CovarianceMatrix",1648,G__G__ESD_811_0_91, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddDaughter",1085,G__G__ESD_811_0_92, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliKFParticle' - 11 - Daughter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__G__ESD_811_0_93, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliKFParticle' - 11 - Daughter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProductionVertex",2001,G__G__ESD_811_0_94, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliKFParticle' - 11 - Vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMassConstraint",1765,G__G__ESD_811_0_95, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - Mass d - 'Double_t' 0 '0' SigmaMass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNoDecayLength",1585,G__G__ESD_811_0_96, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Construct",965,G__G__ESD_811_0_97, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'AliKFParticle' - 12 - vDaughters i - - 0 - NDaughters "
"U 'AliKFParticle' - 10 '0' ProdVtx d - 'Double_t' 0 '-1' Mass "
"g - 'Bool_t' 0 '0' IsConstrained", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransportToDecayVertex",2292,G__G__ESD_811_0_98, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransportToProductionVertex",2869,G__G__ESD_811_0_99, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransportToPoint",1690,G__G__ESD_811_0_100, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - xyz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransportToVertex",1806,G__G__ESD_811_0_101, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliVVertex' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransportToParticle",1988,G__G__ESD_811_0_102, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliKFParticle' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransportToDS",1319,G__G__ESD_811_0_103, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dS", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDStoPoint",1188,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - xyz", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDStoParticle",1486,G__G__ESD_811_0_105, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'AliKFParticle' - 11 - p d - 'Double_t' 1 - DS "
"d - 'Double_t' 1 - DSp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDStoParticleXY",1663,G__G__ESD_811_0_106, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'AliKFParticleBase' - 11 - p d - 'Double_t' 1 - DS "
"d - 'Double_t' 1 - DSp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceFromVertex",2141,G__G__ESD_811_0_107, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceFromVertex",2141,G__G__ESD_811_0_108, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliKFParticle' - 11 - Vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceFromVertex",2141,G__G__ESD_811_0_109, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliVVertex' - 11 - Vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceFromParticle",2323,G__G__ESD_811_0_110, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliKFParticle' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeviationFromVertex",2261,G__G__ESD_811_0_111, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - v D - 'Double_t' 10 '0' Cv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeviationFromVertex",2261,G__G__ESD_811_0_112, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliKFParticle' - 11 - Vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeviationFromVertex",2261,G__G__ESD_811_0_113, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliVVertex' - 11 - Vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeviationFromParticle",2443,G__G__ESD_811_0_114, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliKFParticle' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceFromVertexXY",2318,G__G__ESD_811_0_115, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"D - 'Double_t' 10 - vtx d - 'Double_t' 1 - val "
"d - 'Double_t' 1 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceFromVertexXY",2318,G__G__ESD_811_0_116, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"D - 'Double_t' 10 - vtx D - 'Double_t' 10 - Cv "
"d - 'Double_t' 1 - val d - 'Double_t' 1 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceFromVertexXY",2318,G__G__ESD_811_0_117, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"u 'AliKFParticle' - 11 - Vtx d - 'Double_t' 1 - val "
"d - 'Double_t' 1 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceFromVertexXY",2318,G__G__ESD_811_0_118, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"u 'AliVVertex' - 11 - Vtx d - 'Double_t' 1 - val "
"d - 'Double_t' 1 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceFromVertexXY",2318,G__G__ESD_811_0_119, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceFromVertexXY",2318,G__G__ESD_811_0_120, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliKFParticle' - 11 - Vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceFromVertexXY",2318,G__G__ESD_811_0_121, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliVVertex' - 11 - Vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceFromParticleXY",2500,G__G__ESD_811_0_122, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliKFParticle' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeviationFromVertexXY",2438,G__G__ESD_811_0_123, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - v D - 'Double_t' 10 '0' Cv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeviationFromVertexXY",2438,G__G__ESD_811_0_124, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliKFParticle' - 11 - Vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeviationFromVertexXY",2438,G__G__ESD_811_0_125, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliVVertex' - 11 - Vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeviationFromParticleXY",2620,G__G__ESD_811_0_126, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliKFParticle' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAngle",775,G__G__ESD_811_0_127, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliKFParticle' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAngleXY",952,G__G__ESD_811_0_128, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliKFParticle' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAngleRZ",947,G__G__ESD_811_0_129, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'AliKFParticle' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SubtractFromVertex",1882,G__G__ESD_811_0_130, 121, -1, -1, 0, 1, 1, 1, 8, "u 'AliKFParticle' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructGamma",1448,G__G__ESD_811_0_131, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'AliKFParticle' - 11 - daughter1 u 'AliKFParticle' - 11 - daughter2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPseudoProperDecayTime",2429,G__G__ESD_811_0_132, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"u 'AliKFParticle' - 11 - primVertex d - 'Double_t' 11 - mass "
"D - 'Double_t' 0 '0' timeErr2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFieldAlice",1250,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 0, 3, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFieldValue",1281,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 8, 
"D - 'Double_t' 10 - xyz D - 'Double_t' 0 - B", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDStoParticle",1486,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 8, 
"u 'AliKFParticleBase' - 11 - p d - 'Double_t' 1 - DS "
"d - 'Double_t' 1 - DSp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Transport",973,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 8, 
"d - 'Double_t' 0 - dS D - 'Double_t' 0 - P "
"D - 'Double_t' 0 - C", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetExternalTrackParam",2121,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 3, 2, 0, 
"u 'AliKFParticleBase' - 11 - p d - 'Double_t' 1 - X "
"d - 'Double_t' 1 - Alpha D - 'Double_t' 0 - P", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_811_0_138, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliKFParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_811_0_139, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliKFParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_811_0_140, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliKFParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_811_0_141, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliKFParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_811_0_145, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_811_0_146, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliKFParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_811_0_147, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliKFParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_811_0_148, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliKFParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_811_0_149, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliKFParticle::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliKFParticle", 1243, G__G__ESD_811_0_150, (int) ('i'), G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle), -1, 0, 1, 1, 1, 0, "u 'AliKFParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliKFParticle", 1369, G__G__ESD_811_0_151, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ESD_811_0_152, (int) ('u'), G__get_linked_tagnum(&G__G__ESDLN_AliKFParticle), -1, 1, 1, 1, 1, 0, "u 'AliKFParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliKFVertex(void) {
   /* AliKFVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliKFVertex));
   G__memfunc_setup("AliKFVertex",1061,G__G__ESD_812_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliKFVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliKFVertex",1061,G__G__ESD_812_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliKFVertex), -1, 0, 1, 1, 1, 0, "u 'AliVVertex' - 11 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNContributors",1660,G__G__ESD_812_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__G__ESD_812_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliKFParticle' - 11 - Daughter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__G__ESD_812_0_5, 117, G__get_linked_tagnum(&G__G__ESDLN_AliKFVertex), -1, 0, 1, 1, 1, 8, "u 'AliKFParticle' - 11 - Daughter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__G__ESD_812_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AliKFParticle' - 11 - Daughter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamConstraint",1734,G__G__ESD_812_0_7, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - X d - 'Double_t' 0 - Y "
"d - 'Double_t' 0 - Z d - 'Double_t' 0 - ErrX "
"d - 'Double_t' 0 - ErrY d - 'Double_t' 0 - ErrZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamConstraintOff",2017,G__G__ESD_812_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructPrimaryVertex",2343,G__G__ESD_812_0_9, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'AliKFParticle' - 12 - vDaughters i - - 0 - NDaughters "
"G - 'Bool_t' 0 - vtxFlag d - 'Double_t' 0 '3.5' ChiCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_812_0_10, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliKFVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_812_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliKFVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_812_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliKFVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_812_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliKFVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_812_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_812_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliKFVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_812_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliKFVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_812_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliKFVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_812_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliKFVertex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliKFVertex", 1061, G__G__ESD_812_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__ESDLN_AliKFVertex), -1, 0, 1, 1, 1, 0, "u 'AliKFVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliKFVertex", 1187, G__G__ESD_812_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ESD_812_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__ESDLN_AliKFVertex), -1, 1, 1, 1, 1, 0, "u 'AliKFVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliMeanVertex(void) {
   /* AliMeanVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliMeanVertex));
   G__memfunc_setup("AliMeanVertex",1301,G__G__ESD_813_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliMeanVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliMeanVertex",1301,G__G__ESD_813_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliMeanVertex), -1, 0, 7, 1, 1, 0, 
"D - 'Double_t' 0 - pos D - 'Double_t' 0 - err "
"D - 'Double_t' 0 - cov i - 'Int_t' 0 - nevents "
"f - 'Float_t' 0 - notracklets f - 'Float_t' 0 - avertracklets "
"f - 'Float_t' 0 - signotrackl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfContributingEvents",2987,G__G__ESD_813_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrorsOnPosition",1967,G__G__ESD_813_0_4, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTotalNumbOfTracklets",2328,G__G__ESD_813_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageNumbOfTracklets",2511,G__G__ESD_813_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaOnAvNumbOfTracks",2356,G__G__ESD_813_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_813_0_8, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliMeanVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_813_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMeanVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_813_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliMeanVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_813_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliMeanVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_813_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_813_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMeanVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_813_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMeanVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_813_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliMeanVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_813_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliMeanVertex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliMeanVertex", 1301, G__G__ESD_813_0_20, (int) ('i'), G__get_linked_tagnum(&G__G__ESDLN_AliMeanVertex), -1, 0, 1, 1, 1, 0, "u 'AliMeanVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliMeanVertex", 1427, G__G__ESD_813_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ESD_813_0_22, (int) ('u'), G__get_linked_tagnum(&G__G__ESDLN_AliMeanVertex), -1, 1, 1, 1, 1, 0, "u 'AliMeanVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliSelector(void) {
   /* AliSelector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliSelector));
   G__memfunc_setup("AliSelector",1111,G__G__ESD_819_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliSelector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Version",742,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Begin",485,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SlaveTerminate",1444,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckOptions",1226,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliSelector",1111,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ESDLN_AliSelector), -1, 0, 1, 1, 4, 0, "u 'AliSelector' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ESDLN_AliSelector), -1, 1, 1, 1, 4, 0, "u 'AliSelector' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_819_0_13, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliSelector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_819_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliSelector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_819_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliSelector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_819_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliSelector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_819_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_819_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliSelector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_819_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliSelector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_819_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliSelector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_819_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliSelector::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliSelector", 1237, G__G__ESD_819_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliStrLine(void) {
   /* AliStrLine */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliStrLine));
   G__memfunc_setup("AliStrLine",983,G__G__ESD_820_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliStrLine), -1, 0, 0, 1, 1, 0, "", "default constructor", (void*) NULL, 0);
   G__memfunc_setup("AliStrLine",983,G__G__ESD_820_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliStrLine), -1, 0, 5, 1, 1, 0, 
"D - 'Double_t' 50 - point D - 'Double_t' 50 - cd "
"g - 'Bool_t' 0 'kFALSE' twopoints r - 'UShort_t' 0 '65535' id1 "
"r - 'UShort_t' 0 '65535' id2", "standard constructor", (void*) NULL, 0);
   G__memfunc_setup("AliStrLine",983,G__G__ESD_820_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliStrLine), -1, 0, 6, 1, 1, 0, 
"D - 'Double_t' 50 - point D - 'Double_t' 50 - sig2point "
"D - 'Double_t' 50 - cd g - 'Bool_t' 0 'kFALSE' twopoints "
"r - 'UShort_t' 0 '65535' id1 r - 'UShort_t' 0 '65535' id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliStrLine",983,G__G__ESD_820_0_4, 105, G__get_linked_tagnum(&G__G__ESDLN_AliStrLine), -1, 0, 7, 1, 1, 0, 
"D - 'Double_t' 50 - point D - 'Double_t' 50 - sig2point "
"D - 'Double_t' 50 - wmat D - 'Double_t' 50 - cd "
"g - 'Bool_t' 0 'kFALSE' twopoints r - 'UShort_t' 0 '65535' id1 "
"r - 'UShort_t' 0 '65535' id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliStrLine",983,G__G__ESD_820_0_5, 105, G__get_linked_tagnum(&G__G__ESDLN_AliStrLine), -1, 0, 1, 1, 1, 0, "u 'AliStrLine' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_820_0_6, 117, G__get_linked_tagnum(&G__G__ESDLN_AliStrLine), -1, 1, 1, 1, 1, 0, "u 'AliStrLine' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintStatus",1169,G__G__ESD_820_0_8, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetP0",428,G__G__ESD_820_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigma2P0",975,G__G__ESD_820_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - sigsq", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWMatrix",1016,G__G__ESD_820_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - wmat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCd",467,G__G__ESD_820_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - cd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIdPoints",1110,G__G__ESD_820_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"r - 'UShort_t' 0 - id1 r - 'UShort_t' 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetP0",416,G__G__ESD_820_0_14, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma2P0",963,G__G__ESD_820_0_15, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - sigsq", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWMatrix",1004,G__G__ESD_820_0_16, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - wmat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCd",455,G__G__ESD_820_0_17, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - cd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentPoint",1549,G__G__ESD_820_0_18, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIdPoint",983,G__G__ESD_820_0_19, 114, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsParallelTo",1196,G__G__ESD_820_0_20, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'AliStrLine' - 10 - line", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Crossrphi",957,G__G__ESD_820_0_21, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'AliStrLine' - 10 - line", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CrossPoints",1159,G__G__ESD_820_0_22, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"U 'AliStrLine' - 0 - line D - 'Double_t' 0 - point1 "
"D - 'Double_t' 0 - point2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Cross",522,G__G__ESD_820_0_23, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'AliStrLine' - 0 - line D - 'Double_t' 0 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDCA",488,G__G__ESD_820_0_24, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "U 'AliStrLine' - 10 - line", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistFromPoint",1618,G__G__ESD_820_0_25, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "D - 'Double_t' 10 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParamAtRadius",1582,G__G__ESD_820_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - r d - 'Double_t' 1 - t1 "
"d - 'Double_t' 1 - t2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComputePointAtT",1520,G__G__ESD_820_0_27, 121, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - t D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitDirection",1333,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"D - 'Double_t' 50 - point D - 'Double_t' 50 - cd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitTwoPoints",1355,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"D - 'Double_t' 50 - pA D - 'Double_t' 50 - pB", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPar",591,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "d - 'Double_t' 10 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_820_0_31, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliStrLine::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_820_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliStrLine::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_820_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliStrLine::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_820_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliStrLine::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_820_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_820_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliStrLine::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_820_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliStrLine::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_820_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliStrLine::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_820_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliStrLine::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliStrLine", 1109, G__G__ESD_820_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTrackerBase(void) {
   /* AliTrackerBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTrackerBase));
   G__memfunc_setup("AliTrackerBase",1373,G__G__ESD_830_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTrackerBase), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertex",938,G__G__ESD_830_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - xyz D - 'Double_t' 10 '0' ers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__G__ESD_830_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__G__ESD_830_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__ESD_830_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaX",873,G__G__ESD_830_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaY",874,G__G__ESD_830_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaZ",875,G__G__ESD_830_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStamp",1204,G__G__ESD_830_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunNumber",1214,G__G__ESD_830_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeStamp",1216,G__G__ESD_830_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunNumber",1226,G__G__ESD_830_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackPredictedChi2",2031,G__G__ESD_830_0_13, 100, -1, G__defined_typename("Double_t"), 0, 4, 3, 1, 0, 
"U 'AliExternalTrackParam' - 0 - track d - 'Double_t' 0 - mass "
"d - 'Double_t' 0 - step U 'AliExternalTrackParam' - 10 - backup", (char*)NULL, (void*) G__func2void( (Double_t (*)(AliExternalTrackParam*, Double_t, Double_t, const AliExternalTrackParam*))(&AliTrackerBase::GetTrackPredictedChi2) ), 0);
   G__memfunc_setup("UpdateTrack",1112,G__G__ESD_830_0_14, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'AliExternalTrackParam' - 1 - - u 'AliExternalTrackParam' - 11 - -", (char*)NULL, (void*) G__func2void( (void (*)(AliExternalTrackParam&, const AliExternalTrackParam&))(&AliTrackerBase::UpdateTrack) ), 0);
   G__memfunc_setup("MeanMaterialBudget",1803,G__G__ESD_830_0_15, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"D - 'Double_t' 10 - start D - 'Double_t' 10 - end "
"D - 'Double_t' 0 - mparam", (char*)NULL, (void*) G__func2void( (Double_t (*)(const Double_t*, const Double_t*, Double_t*))(&AliTrackerBase::MeanMaterialBudget) ), 0);
   G__memfunc_setup("PropagateTrackTo",1627,G__G__ESD_830_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 9, 3, 1, 0, 
"U 'AliExternalTrackParam' - 0 - track d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - m d - 'Double_t' 0 - maxStep "
"g - 'Bool_t' 0 'kTRUE' rotateTo d - 'Double_t' 0 '0.8' maxSnp "
"i - 'Int_t' 0 '0' sign g - 'Bool_t' 0 'kFALSE' addTimeStep "
"g - 'Bool_t' 0 'kTRUE' correctMaterialBudget", (char*)NULL, (void*) G__func2void( (Bool_t (*)(AliExternalTrackParam*, Double_t, Double_t, Double_t, Bool_t, Double_t, Int_t, Bool_t, Bool_t))(&AliTrackerBase::PropagateTrackTo) ), 0);
   G__memfunc_setup("PropagateTrackTo2",1677,G__G__ESD_830_0_17, 105, -1, G__defined_typename("Int_t"), 0, 9, 3, 1, 0, 
"U 'AliExternalTrackParam' - 0 - track d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - m d - 'Double_t' 0 - maxStep "
"g - 'Bool_t' 0 'kTRUE' rotateTo d - 'Double_t' 0 '0.8' maxSnp "
"i - 'Int_t' 0 '0' sign g - 'Bool_t' 0 'kFALSE' addTimeStep "
"g - 'Bool_t' 0 'kTRUE' correctMaterialBudget", (char*)NULL, (void*) G__func2void( (Int_t (*)(AliExternalTrackParam*, Double_t, Double_t, Double_t, Bool_t, Double_t, Int_t, Bool_t, Bool_t))(&AliTrackerBase::PropagateTrackTo2) ), 0);
   G__memfunc_setup("PropagateTrackToBxByBz",2188,G__G__ESD_830_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 9, 3, 1, 0, 
"U 'AliExternalTrackParam' - 0 - track d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - m d - 'Double_t' 0 - maxStep "
"g - 'Bool_t' 0 'kTRUE' rotateTo d - 'Double_t' 0 '0.8' maxSnp "
"i - 'Int_t' 0 '0' sign g - 'Bool_t' 0 'kFALSE' addTimeStep "
"g - 'Bool_t' 0 'kTRUE' correctMaterialBudget", (char*)NULL, (void*) G__func2void( (Bool_t (*)(AliExternalTrackParam*, Double_t, Double_t, Double_t, Bool_t, Double_t, Int_t, Bool_t, Bool_t))(&AliTrackerBase::PropagateTrackToBxByBz) ), 0);
   G__memfunc_setup("PropagateTrackParamOnlyToBxByBz",3103,G__G__ESD_830_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 5, 3, 1, 0, 
"U 'AliExternalTrackParam' - 0 - track d - 'Double_t' 0 - xToGo "
"d - 'Double_t' 0 - maxStep g - 'Bool_t' 0 'kTRUE' rotateTo "
"d - 'Double_t' 0 '0.8' maxSnp", (char*)NULL, (void*) G__func2void( (Bool_t (*)(AliExternalTrackParam*, Double_t, Double_t, Bool_t, Double_t))(&AliTrackerBase::PropagateTrackParamOnlyToBxByBz) ), 0);
   G__memfunc_setup("PropagateTrackParamOnlyTo",2542,G__G__ESD_830_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 5, 3, 1, 0, 
"U 'AliExternalTrackParam' - 0 - track d - 'Double_t' 0 - xToGo "
"d - 'Double_t' 0 - maxStep g - 'Bool_t' 0 'kTRUE' rotateTo "
"d - 'Double_t' 0 '0.8' maxSnp", (char*)NULL, (void*) G__func2void( (Bool_t (*)(AliExternalTrackParam*, Double_t, Double_t, Bool_t, Double_t))(&AliTrackerBase::PropagateTrackParamOnlyTo) ), 0);
   G__memfunc_setup("GetBz",476,G__G__ESD_830_0_21, 100, -1, G__defined_typename("Double_t"), 0, 1, 3, 1, 0, "D - 'Double_t' 10 - r", (char*)NULL, (void*) G__func2void( (Double_t (*)(const Double_t*))(&AliTrackerBase::GetBz) ), 0);
   G__memfunc_setup("GetBxByBz",849,G__G__ESD_830_0_22, 121, -1, -1, 0, 2, 3, 1, 0, 
"D - 'Double_t' 10 - r D - 'Double_t' 0 - b", (char*)NULL, (void*) G__func2void( (void (*)(const Double_t*, Double_t*))(&AliTrackerBase::GetBxByBz) ), 0);
   G__memfunc_setup("GetBz",476,G__G__ESD_830_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Double_t (*)())(&AliTrackerBase::GetBz) ), 0);
   G__memfunc_setup("UniformField",1220,G__G__ESD_830_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&AliTrackerBase::UniformField) ), 0);
   G__memfunc_setup("MakeC",449,G__G__ESD_830_0_25, 100, -1, G__defined_typename("Double_t"), 0, 6, 3, 1, 0, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - x2 d - 'Double_t' 0 - y2 "
"d - 'Double_t' 0 - x3 d - 'Double_t' 0 - y3", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t))(&AliTrackerBase::MakeC) ), 0);
   G__memfunc_setup("MakeSnp",687,G__G__ESD_830_0_26, 100, -1, G__defined_typename("Double_t"), 0, 6, 3, 1, 0, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - x2 d - 'Double_t' 0 - y2 "
"d - 'Double_t' 0 - x3 d - 'Double_t' 0 - y3", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t))(&AliTrackerBase::MakeSnp) ), 0);
   G__memfunc_setup("MakeTgl",677,G__G__ESD_830_0_27, 100, -1, G__defined_typename("Double_t"), 0, 6, 3, 1, 0, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - x2 d - 'Double_t' 0 - y2 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - z2", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t))(&AliTrackerBase::MakeTgl) ), 0);
   G__memfunc_setup("MakeTgl",677,G__G__ESD_830_0_28, 100, -1, G__defined_typename("Double_t"), 0, 7, 3, 1, 0, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - x2 d - 'Double_t' 0 - y2 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - z2 "
"d - 'Double_t' 0 - c", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t))(&AliTrackerBase::MakeTgl) ), 0);
   G__memfunc_setup("MakeSeed",767,G__G__ESD_830_0_29, 85, G__get_linked_tagnum(&G__G__ESDLN_AliExternalTrackParam), -1, 0, 3, 3, 1, 0, 
"u 'AliTrackPoint' - 1 - point0 u 'AliTrackPoint' - 1 - point1 "
"u 'AliTrackPoint' - 1 - point2", (char*)NULL, (void*) G__func2void( (AliExternalTrackParam* (*)(AliTrackPoint&, AliTrackPoint&, AliTrackPoint&))(&AliTrackerBase::MakeSeed) ), 0);
   G__memfunc_setup("FitTrack",792,G__G__ESD_830_0_30, 100, -1, G__defined_typename("Double_t"), 0, 4, 3, 1, 0, 
"U 'AliExternalTrackParam' - 0 - trackParam U 'AliTrackPointArray' - 0 - pointArray "
"d - 'Double_t' 0 - mass d - 'Double_t' 0 - maxStep", (char*)NULL, (void*) G__func2void( (Double_t (*)(AliExternalTrackParam*, AliTrackPointArray*, Double_t, Double_t))(&AliTrackerBase::FitTrack) ), 0);
   G__memfunc_setup("AliTrackerBase",1373,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTrackerBase), -1, 0, 1, 1, 2, 0, "u 'AliTrackerBase' - 11 - atr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTrackerBase), -1, 1, 1, 1, 4, 0, "u 'AliTrackerBase' - 11 - atr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_830_0_33, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTrackerBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_830_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTrackerBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_830_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTrackerBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_830_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTrackerBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_830_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_830_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTrackerBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_830_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTrackerBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_830_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTrackerBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_830_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTrackerBase::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTrackerBase", 1499, G__G__ESD_830_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTriggerBCMask(void) {
   /* AliTriggerBCMask */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask));
   G__memfunc_setup("AliTriggerBCMask",1531,G__G__ESD_831_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerBCMask",1531,G__G__ESD_831_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask), -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerBCMask",1531,G__G__ESD_831_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 1 - name u 'TString' - 1 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerBCMask",1531,G__G__ESD_831_0_4, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerBCMask",1531,G__G__ESD_831_0_5, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask), -1, 0, 1, 1, 1, 0, "u 'AliTriggerBCMask' - 11 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_831_0_6, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask), -1, 1, 1, 1, 1, 0, "u 'AliTriggerBCMask' - 11 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFullMask",1087,G__G__ESD_831_0_7, 66, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMask",684,G__G__ESD_831_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "r - 'UShort_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNUnmaskedBCs",1438,G__G__ESD_831_0_10, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMask",696,G__G__ESD_831_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateMask",992,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Bcm2Bits",726,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 4, 8, 
"U 'TObjArray' - 0 - tokens i - 'Int_t' 1 - index "
"u 'TBits' - 1 - bits i - 'Int_t' 1 - ibit "
"i - 'Int_t' 1 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_831_0_14, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTriggerBCMask::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_831_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerBCMask::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_831_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTriggerBCMask::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_831_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTriggerBCMask::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_831_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_831_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerBCMask::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_831_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerBCMask::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_831_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerBCMask::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_831_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerBCMask::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTriggerBCMask", 1657, G__G__ESD_831_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTriggerDescriptor(void) {
   /* AliTriggerDescriptor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerDescriptor));
   G__memfunc_setup("AliTriggerDescriptor",2057,G__G__ESD_833_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerDescriptor), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerDescriptor",2057,G__G__ESD_833_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerDescriptor), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 1 - name u 'TString' - 1 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerDescriptor",2057,G__G__ESD_833_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerDescriptor), -1, 0, 1, 1, 1, 0, "u 'AliTriggerDescriptor' - 11 - desc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_833_0_4, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerDescriptor), -1, 1, 1, 1, 1, 0, "u 'AliTriggerDescriptor' - 11 - desc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckInputsAndFunctions",2349,G__G__ESD_833_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'TObjArray' - 11 - inputs u 'TObjArray' - 11 - functions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsActive",792,G__G__ESD_833_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'TObjArray' - 11 - inputs u 'TObjArray' - 11 - functions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Trigger",724,G__G__ESD_833_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'TObjArray' - 11 - inputs u 'TObjArray' - 11 - functions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_833_0_9, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTriggerDescriptor::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_833_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerDescriptor::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_833_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTriggerDescriptor::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_833_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTriggerDescriptor::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_833_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_833_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerDescriptor::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_833_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerDescriptor::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_833_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerDescriptor::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_833_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerDescriptor::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTriggerDescriptor", 2183, G__G__ESD_833_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTriggerCluster(void) {
   /* AliTriggerCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerCluster));
   G__memfunc_setup("AliTriggerCluster",1740,G__G__ESD_834_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerCluster",1740,G__G__ESD_834_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerCluster), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 1 - name b - 'UChar_t' 0 - index "
"u 'TString' - 1 - detectors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerCluster",1740,G__G__ESD_834_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerCluster), -1, 0, 1, 1, 1, 0, "u 'AliTriggerCluster' - 11 - clus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorsInCluster",2150,G__G__ESD_834_0_4, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDetectorInCluster",1935,G__G__ESD_834_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 1 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterMask",1422,G__G__ESD_834_0_6, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSelected",997,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 8, 
"u 'TString' - 0 - detName u 'TString' - 1 - detectors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerCluster), -1, 1, 1, 1, 4, 0, "u 'AliTriggerCluster' - 11 - clus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_834_0_10, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTriggerCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_834_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_834_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTriggerCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_834_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTriggerCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_834_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_834_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_834_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_834_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_834_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerCluster::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTriggerCluster", 1866, G__G__ESD_834_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTriggerPFProtection(void) {
   /* AliTriggerPFProtection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection));
   G__memfunc_setup("AliTriggerPFProtection",2215,G__G__ESD_835_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerPFProtection",2215,G__G__ESD_835_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection), -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerPFProtection",2215,G__G__ESD_835_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection), -1, 0, 4, 1, 1, 0, 
"u 'TString' - 1 - name u 'TString' - 1 - inta "
"u 'TString' - 1 - intb u 'TString' - 1 - interaction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerPFProtection",2215,G__G__ESD_835_0_4, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection), -1, 0, 9, 1, 1, 0, 
"u 'TString' - 1 - name u 'TString' - 1 - inter "
"u 'TString' - 1 - bcm h - 'UInt_t' 0 - PBefore "
"h - 'UInt_t' 0 - PAfter h - 'UInt_t' 0 - NBefore "
"h - 'UInt_t' 0 - NAfter h - 'UInt_t' 0 - OBefore "
"h - 'UInt_t' 0 - OAfter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerPFProtection",2215,G__G__ESD_835_0_5, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 1 - name H - 'UInt_t' 0 - pfdef", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetINTa",632,G__G__ESD_835_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - inta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetINTb",633,G__G__ESD_835_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - intb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetINT",535,G__G__ESD_835_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - inti", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNa1",524,G__G__ESD_835_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNa2",525,G__G__ESD_835_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTa",481,G__G__ESD_835_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNb1",525,G__G__ESD_835_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNb2",526,G__G__ESD_835_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTb",482,G__G__ESD_835_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetINTa",620,G__G__ESD_835_0_15, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetINTb",621,G__G__ESD_835_0_16, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetINT",523,G__G__ESD_835_0_17, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNa1",512,G__G__ESD_835_0_18, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNa2",513,G__G__ESD_835_0_19, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTa",469,G__G__ESD_835_0_20, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNb1",513,G__G__ESD_835_0_21, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNb2",514,G__G__ESD_835_0_22, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTb",470,G__G__ESD_835_0_23, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckInteractions",1745,G__G__ESD_835_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TObjArray' - 1 - interactions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AliTriggerPFProtection",2215,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection), -1, 0, 1, 1, 4, 0, "u 'AliTriggerPFProtection' - 11 - inp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerPFProtection), -1, 1, 1, 1, 4, 0, "u 'AliTriggerPFProtection' - 11 - inp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_835_0_28, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTriggerPFProtection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_835_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerPFProtection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_835_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTriggerPFProtection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_835_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTriggerPFProtection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_835_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_835_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerPFProtection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_835_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerPFProtection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_835_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerPFProtection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_835_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerPFProtection::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTriggerPFProtection", 2341, G__G__ESD_835_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTriggerClass(void) {
   /* AliTriggerClass */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass));
   G__memfunc_setup("AliTriggerClass",1504,G__G__ESD_836_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerClass",1504,G__G__ESD_836_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass), -1, 0, 8, 1, 1, 0, 
"u 'TString' - 1 - name b - 'UChar_t' 0 - index "
"U 'AliTriggerDescriptor' - 0 - desc U 'AliTriggerCluster' - 0 - clus "
"U 'AliTriggerPFProtection' - 0 - pfp U 'AliTriggerBCMask' - 0 - mask "
"h - 'UInt_t' 0 - prescaler g - 'Bool_t' 0 - allrare", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerClass",1504,G__G__ESD_836_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass), -1, 0, 9, 1, 1, 0, 
"U 'AliTriggerConfiguration' - 0 - config u 'TString' - 1 - name "
"b - 'UChar_t' 0 - index u 'TString' - 1 - desc "
"u 'TString' - 1 - clus u 'TString' - 1 - pfp "
"u 'TString' - 1 - mask h - 'UInt_t' 0 - prescaler "
"g - 'Bool_t' 0 - allrare", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerClass",1504,G__G__ESD_836_0_4, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass), -1, 0, 10, 1, 1, 0, 
"U 'AliTriggerConfiguration' - 0 - config u 'TString' - 1 - name "
"b - 'UChar_t' 0 - index u 'TString' - 1 - desc "
"u 'TString' - 1 - clus u 'TString' - 1 - pfp "
"h - 'UInt_t' 0 - prescaler g - 'Bool_t' 0 - allrare "
"h - 'UInt_t' 0 - timegroup h - 'UInt_t' 0 - timewindow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerClass",1504,G__G__ESD_836_0_5, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass), -1, 0, 1, 1, 1, 0, "u 'AliTriggerClass' - 11 - trclass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_836_0_6, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerClass), -1, 1, 1, 1, 1, 0, "u 'AliTriggerClass' - 11 - trclass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__ESD_836_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValue",797,G__G__ESD_836_0_8, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValueNext50",1313,G__G__ESD_836_0_9, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__G__ESD_836_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMask",684,G__G__ESD_836_0_11, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaskNext50",1200,G__G__ESD_836_0_12, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIndex",792,G__G__ESD_836_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDescriptor",1343,G__G__ESD_836_0_14, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerDescriptor), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCluster",1026,G__G__ESD_836_0_15, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerCluster), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBCMask",817,G__G__ESD_836_0_16, 85, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerBCMask), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeGroup",1212,G__G__ESD_836_0_17, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeWindow",1319,G__G__ESD_836_0_18, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrescaler",1217,G__G__ESD_836_0_19, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDownscaleFactor",1823,G__G__ESD_836_0_20, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 1 - ds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMasks",811,G__G__ESD_836_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'AliTriggerConfiguration' - 0 - config u 'TString' - 1 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Trigger",724,G__G__ESD_836_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TObjArray' - 11 - inputs u 'TObjArray' - 11 - functions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckClass",980,G__G__ESD_836_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'AliTriggerConfiguration' - 0 - config", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsActive",792,G__G__ESD_836_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'TObjArray' - 11 - inputs u 'TObjArray' - 11 - functions", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ESD_836_0_26, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTriggerClass::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_836_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerClass::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_836_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTriggerClass::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_836_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTriggerClass::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_836_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_836_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerClass::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_836_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerClass::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_836_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerClass::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_836_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerClass::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTriggerClass", 1630, G__G__ESD_836_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTriggerInput(void) {
   /* AliTriggerInput */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput));
   G__memfunc_setup("AliTriggerInput",1530,G__G__ESD_838_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerInput",1530,G__G__ESD_838_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput), -1, 0, 5, 1, 1, 0, 
"u 'TString' - 0 - name u 'TString' - 0 - det "
"b - 'UChar_t' 0 - level i - 'Int_t' 0 '-1' signature "
"c - 'Char_t' 0 '-1' number", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerInput",1530,G__G__ESD_838_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput), -1, 0, 6, 1, 1, 0, 
"u 'TString' - 0 - name u 'TString' - 0 - det "
"b - 'UChar_t' 0 - level i - 'Int_t' 0 - signature "
"h - 'UInt_t' 0 - indexCTP h - 'UInt_t' 0 - indexSwitch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerInput",1530,G__G__ESD_838_0_4, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput), -1, 0, 1, 1, 1, 0, "u 'AliTriggerInput' - 1 - inp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__G__ESD_838_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__ESD_838_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Enable",583,G__G__ESD_838_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Status",644,G__G__ESD_838_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValue",797,G__G__ESD_838_0_9, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMask",684,G__G__ESD_838_0_10, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignature",1234,G__G__ESD_838_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInputName",1201,G__G__ESD_838_0_12, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetector",1114,G__G__ESD_838_0_13, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModule",902,G__G__ESD_838_0_14, 117, G__get_linked_tagnum(&G__G__ESDLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorId",1287,G__G__ESD_838_0_15, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLevel",792,G__G__ESD_838_0_16, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsActive",792,G__G__ESD_838_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIndexCTP",1023,G__G__ESD_838_0_18, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIndexSwitch",1418,G__G__ESD_838_0_19, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_838_0_21, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTriggerInput::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_838_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerInput::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_838_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTriggerInput::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_838_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTriggerInput::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_838_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_838_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerInput::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_838_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerInput::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_838_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerInput::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_838_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerInput::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTriggerInput", 1656, G__G__ESD_838_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ESD_838_0_34, (int) ('u'), G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInput), -1, 1, 1, 1, 1, 0, "u 'AliTriggerInput' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliTriggerInteraction(void) {
   /* AliTriggerInteraction */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInteraction));
   G__memfunc_setup("AliTriggerInteraction",2154,G__G__ESD_839_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInteraction), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerInteraction",2154,G__G__ESD_839_0_2, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInteraction), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 1 - name u 'TString' - 1 - logic", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AliTriggerInteraction",2154,G__G__ESD_839_0_3, 105, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInteraction), -1, 0, 1, 1, 1, 0, "u 'AliTriggerInteraction' - 11 - interact", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__G__ESD_839_0_4, 117, G__get_linked_tagnum(&G__G__ESDLN_AliTriggerInteraction), -1, 1, 1, 1, 1, 0, "u 'AliTriggerInteraction' - 11 - interact", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckInputs",1121,G__G__ESD_839_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TObjArray' - 11 - inputs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsActive",792,G__G__ESD_839_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TObjArray' - 11 - inputs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Trigger",724,G__G__ESD_839_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TObjArray' - 11 - inputs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ESD_839_0_9, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliTriggerInteraction::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_839_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerInteraction::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_839_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliTriggerInteraction::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_839_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliTriggerInteraction::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_839_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_839_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerInteraction::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_839_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerInteraction::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_839_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliTriggerInteraction::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_839_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliTriggerInteraction::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AliTriggerInteraction", 2280, G__G__ESD_839_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAliV0vertexer(void) {
   /* AliV0vertexer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ESDLN_AliV0vertexer));
   G__memfunc_setup("AliV0vertexer",1297,G__G__ESD_845_0_1, 105, G__get_linked_tagnum(&G__G__ESDLN_AliV0vertexer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCuts",715,G__G__ESD_845_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - cuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefaultCuts",1424,G__G__ESD_845_0_3, 121, -1, -1, 0, 1, 3, 1, 0, "D - 'Double_t' 10 - cuts", (char*)NULL, (void*) G__func2void( (void (*)(const Double_t*))(&AliV0vertexer::SetDefaultCuts) ), 0);
   G__memfunc_setup("Tracks2V0vertices",1669,G__G__ESD_845_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'AliESDEvent' - 0 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCuts",703,G__G__ESD_845_0_5, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - cuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDefaultCuts",1412,G__G__ESD_845_0_6, 121, -1, -1, 0, 1, 3, 1, 0, "D - 'Double_t' 0 - cuts", (char*)NULL, (void*) G__func2void( (void (*)(Double_t*))(&AliV0vertexer::GetDefaultCuts) ), 0);
   G__memfunc_setup("Class",502,G__G__ESD_845_0_7, 85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AliV0vertexer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ESD_845_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliV0vertexer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ESD_845_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AliV0vertexer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ESD_845_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AliV0vertexer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ESDLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ESD_845_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ESD_845_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliV0vertexer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ESD_845_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliV0vertexer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ESD_845_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AliV0vertexer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ESD_845_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AliV0vertexer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AliV0vertexer", 1297, G__G__ESD_845_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__ESDLN_AliV0vertexer), -1, 0, 1, 1, 1, 0, "u 'AliV0vertexer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AliV0vertexer", 1423, G__G__ESD_845_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ESD_845_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__ESDLN_AliV0vertexer), -1, 1, 1, 1, 1, 0, "u 'AliV0vertexer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__ESD() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__ESD() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
   G__memfunc_setup("operator*", 918, G__G__ESD__0_2740, 117, G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap), -1, 0, 2, 1, 1, 0, 
"u 'AliFMDMap' - 11 - lhs u 'AliFMDMap' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator/", 923, G__G__ESD__0_2741, 117, G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap), -1, 0, 2, 1, 1, 0, 
"u 'AliFMDMap' - 11 - lhs u 'AliFMDMap' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator+", 919, G__G__ESD__0_2742, 117, G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap), -1, 0, 2, 1, 1, 0, 
"u 'AliFMDMap' - 11 - lhs u 'AliFMDMap' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator-", 921, G__G__ESD__0_2743, 117, G__get_linked_tagnum(&G__G__ESDLN_AliFMDFloatMap), -1, 0, 2, 1, 1, 0, 
"u 'AliFMDMap' - 11 - lhs u 'AliFMDMap' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func27() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__ESD() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__ESDLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDEvent = { "AliESDEvent" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDv0 = { "AliESDv0" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliExternalTrackParam = { "AliExternalTrackParam" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliCascadeVertexer = { "AliCascadeVertexer" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDACORDE = { "AliESDACORDE" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVAD = { "AliVAD" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVADcLcLDecision = { "AliVAD::Decision" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDAD = { "AliESDAD" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDADfriend = { "AliESDADfriend" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDADfriendcLcLEESDADfriendParams = { "AliESDADfriend::EESDADfriendParams" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliVCaloCells = { "AliVCaloCells" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVCaloCellscLcLVCells_t = { "AliVCaloCells::VCells_t" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDCaloCells = { "AliESDCaloCells" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVCluster = { "AliVCluster" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVClustercLcLVCluUserDefEnergy_t = { "AliVCluster::VCluUserDefEnergy_t" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliPID = { "AliPID" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliPIDcLcLEParticleType = { "AliPID::EParticleType" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__ESDLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDCaloCluster = { "AliESDCaloCluster" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVCaloTrigger = { "AliVCaloTrigger" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDCaloTrigger = { "AliESDCaloTrigger" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TBits = { "TBits" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVParticle = { "AliVParticle" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVEvent = { "AliVEvent" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVVertex = { "AliVVertex" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDVertex = { "AliESDVertex" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTPCdEdxInfo = { "AliTPCdEdxInfo" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliDetectorPID = { "AliDetectorPID" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTOFHeader = { "AliTOFHeader" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVTrack = { "AliVTrack" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TPolyMarker3D = { "TPolyMarker3D" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDV0Params = { "AliESDV0Params" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDcascade = { "AliESDcascade" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDCosmicTrack = { "AliESDCosmicTrack" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTSparselEdoublegR = { "TMatrixTSparse<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDMuonTrack = { "AliESDMuonTrack" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternFlag = { "AliESDMuonTrack::EAliTriggerChPatternFlag" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternInfo = { "AliESDMuonTrack::EAliTriggerChPatternInfo" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDPmdTrack = { "AliESDPmdTrack" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TRef = { "TRef" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVTrdTracklet = { "AliVTrdTracklet" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVTrdTrack = { "AliVTrdTrack" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDTrdTracklet = { "AliESDTrdTracklet" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVTOFcluster = { "AliVTOFcluster" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVTOFHit = { "AliVTOFHit" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDTOFHit = { "AliESDTOFHit" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVTOFMatch = { "AliVTOFMatch" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDTOFMatch = { "AliESDTOFMatch" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDTOFCluster = { "AliESDTOFCluster" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTPCseed = { "AliTPCseed" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTrackPointArray = { "AliTrackPointArray" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVfriendTrack = { "AliVfriendTrack" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TGeoRotation = { "TGeoRotation" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTrackPoint = { "AliTrackPoint" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTrackPointArraycLcLdA = { "AliTrackPointArray::$" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliKalmanTrack = { "AliKalmanTrack" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDfriendTrack = { "AliESDfriendTrack" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDfriendTrackcLcLdA = { "AliESDfriendTrack::$" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_TParticle = { "TParticle" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TTreeSRedirector = { "TTreeSRedirector" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDtrack = { "AliESDtrack" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDtrackcLcLdA = { "AliESDtrack::$" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDTrdTrack = { "AliESDTrdTrack" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVertex = { "AliVertex" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDkink = { "AliESDkink" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDHLTtrack = { "AliESDHLTtrack" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliFMDMap = { "AliFMDMap" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliFMDMapcLcLdA = { "AliFMDMap::$" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliFMDMapcLcLForOne = { "AliFMDMap::ForOne" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliFMDFloatMap = { "AliFMDFloatMap" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDFMD = { "AliESDFMD" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDFMDcLcLForOne = { "AliESDFMD::ForOne" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDFMDcLcLdA = { "AliESDFMD::$" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliVVZERO = { "AliVVZERO" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVVZEROcLcLDecision = { "AliVVZERO::Decision" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDVZERO = { "AliESDVZERO" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVMultiplicity = { "AliVMultiplicity" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliRefArray = { "AliRefArray" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliMultiplicity = { "AliMultiplicity" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliRawDataErrorLog = { "AliRawDataErrorLog" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliRawDataErrorLogcLcLERawDataErrorLevel = { "AliRawDataErrorLog::ERawDataErrorLevel" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDfriend = { "AliESDfriend" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESD = { "AliESD" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TSelector = { "TSelector" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TGeoHMatrix = { "TGeoHMatrix" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVHeader = { "AliVHeader" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TRefArray = { "TRefArray" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVfriendEvent = { "AliVfriendEvent" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliCentrality = { "AliCentrality" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliEventplane = { "AliEventplane" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVZDC = { "AliVZDC" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVEventcLcLEDataLayoutType = { "AliVEvent::EDataLayoutType" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliTimeStamp = { "AliTimeStamp" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDRun = { "AliESDRun" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDRuncLcLStatusBits = { "AliESDRun::StatusBits" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDRuncLcLdA = { "AliESDRun::$" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliTriggerScalersESD = { "AliTriggerScalersESD" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTriggerScalersRecordESD = { "AliTriggerScalersRecordESD" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTriggerIR = { "AliTriggerIR" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTriggerConfiguration = { "AliTriggerConfiguration" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDHeader = { "AliESDHeader" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDHeadercLcLdA = { "AliESDHeader::$" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDTZERO = { "AliESDTZERO" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDFIT = { "AliESDFIT" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDZDC = { "AliESDZDC" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVVZEROfriend = { "AliVVZEROfriend" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDVZEROfriend = { "AliESDVZEROfriend" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDTZEROfriend = { "AliESDTZEROfriend" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDTrdTrigger = { "AliESDTrdTrigger" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDMuonCluster = { "AliESDMuonCluster" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDMuonPad = { "AliESDMuonPad" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDMuonGlobalTrack = { "AliESDMuonGlobalTrack" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDHLTDecision = { "AliESDHLTDecision" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDEventcLcLESDListIndex = { "AliESDEvent::ESDListIndex" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliVEventHandler = { "AliVEventHandler" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDHandler = { "AliESDHandler" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TArrayL64 = { "TArrayL64" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDHLTDecisioncLcLdA = { "AliESDHLTDecision::$" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliRunTag = { "AliRunTag" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliEventTag = { "AliEventTag" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliPIDResponse = { "AliPIDResponse" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliInputEventHandler = { "AliInputEventHandler" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TChain = { "TChain" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TMap = { "TMap" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDpid = { "AliESDpid" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDInputHandler = { "AliESDInputHandler" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_TDirectoryFile = { "TDirectoryFile" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDInputHandlerRP = { "AliESDInputHandlerRP" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDInputHandlerRPcLcLdA = { "AliESDInputHandlerRP::$" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDMultITS = { "AliESDMultITS" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVertexerTracks = { "AliVertexerTracks" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliESDUtils = { "AliESDUtils" , 110 , -1 };
G__linked_taginfo G__G__ESDLN_AliExpression = { "AliExpression" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVariableExpression = { "AliVariableExpression" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliCluster = { "AliCluster" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliKFParticleBase = { "AliKFParticleBase" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliKFParticle = { "AliKFParticle" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliKFVertex = { "AliKFVertex" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliMeanVertex = { "AliMeanVertex" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliSelector = { "AliSelector" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliStrLine = { "AliStrLine" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTrackerBase = { "AliTrackerBase" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTriggerBCMask = { "AliTriggerBCMask" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTriggerBCMaskcLcLdA = { "AliTriggerBCMask::$" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliTriggerDescriptor = { "AliTriggerDescriptor" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTriggerCluster = { "AliTriggerCluster" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTriggerPFProtection = { "AliTriggerPFProtection" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTriggerClass = { "AliTriggerClass" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTriggerClasscLcLdA = { "AliTriggerClass::$" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliTriggerInput = { "AliTriggerInput" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTriggerInteraction = { "AliTriggerInteraction" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliTriggerConfigurationcLcLdA = { "AliTriggerConfiguration::$" , 101 , -1 };
G__linked_taginfo G__G__ESDLN_AliV0vertexer = { "AliV0vertexer" , 99 , -1 };
G__linked_taginfo G__G__ESDLN_AliVertexerTrackscLcLdA = { "AliVertexerTracks::$" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__ESD() {
  G__G__ESDLN_TClass.tagnum = -1 ;
  G__G__ESDLN_TBuffer.tagnum = -1 ;
  G__G__ESDLN_TMemberInspector.tagnum = -1 ;
  G__G__ESDLN_TObject.tagnum = -1 ;
  G__G__ESDLN_TNamed.tagnum = -1 ;
  G__G__ESDLN_TString.tagnum = -1 ;
  G__G__ESDLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__ESDLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ESDLN_TList.tagnum = -1 ;
  G__G__ESDLN_TObjArray.tagnum = -1 ;
  G__G__ESDLN_TClonesArray.tagnum = -1 ;
  G__G__ESDLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__ESDLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ESDLN_AliESDEvent.tagnum = -1 ;
  G__G__ESDLN_AliESDv0.tagnum = -1 ;
  G__G__ESDLN_AliExternalTrackParam.tagnum = -1 ;
  G__G__ESDLN_AliCascadeVertexer.tagnum = -1 ;
  G__G__ESDLN_AliESDACORDE.tagnum = -1 ;
  G__G__ESDLN_AliVAD.tagnum = -1 ;
  G__G__ESDLN_AliVADcLcLDecision.tagnum = -1 ;
  G__G__ESDLN_AliESDAD.tagnum = -1 ;
  G__G__ESDLN_AliESDADfriend.tagnum = -1 ;
  G__G__ESDLN_AliESDADfriendcLcLEESDADfriendParams.tagnum = -1 ;
  G__G__ESDLN_AliVCaloCells.tagnum = -1 ;
  G__G__ESDLN_AliVCaloCellscLcLVCells_t.tagnum = -1 ;
  G__G__ESDLN_AliESDCaloCells.tagnum = -1 ;
  G__G__ESDLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__G__ESDLN_TVector3.tagnum = -1 ;
  G__G__ESDLN_TLorentzVector.tagnum = -1 ;
  G__G__ESDLN_AliVCluster.tagnum = -1 ;
  G__G__ESDLN_AliVClustercLcLVCluUserDefEnergy_t.tagnum = -1 ;
  G__G__ESDLN_AliPID.tagnum = -1 ;
  G__G__ESDLN_AliPIDcLcLEParticleType.tagnum = -1 ;
  G__G__ESDLN_TArrayI.tagnum = -1 ;
  G__G__ESDLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__ESDLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__ESDLN_AliESDCaloCluster.tagnum = -1 ;
  G__G__ESDLN_AliVCaloTrigger.tagnum = -1 ;
  G__G__ESDLN_AliESDCaloTrigger.tagnum = -1 ;
  G__G__ESDLN_TBits.tagnum = -1 ;
  G__G__ESDLN_AliVParticle.tagnum = -1 ;
  G__G__ESDLN_AliVEvent.tagnum = -1 ;
  G__G__ESDLN_AliVVertex.tagnum = -1 ;
  G__G__ESDLN_AliESDVertex.tagnum = -1 ;
  G__G__ESDLN_AliTPCdEdxInfo.tagnum = -1 ;
  G__G__ESDLN_AliDetectorPID.tagnum = -1 ;
  G__G__ESDLN_AliTOFHeader.tagnum = -1 ;
  G__G__ESDLN_AliVTrack.tagnum = -1 ;
  G__G__ESDLN_TPolyMarker3D.tagnum = -1 ;
  G__G__ESDLN_AliESDV0Params.tagnum = -1 ;
  G__G__ESDLN_AliESDcascade.tagnum = -1 ;
  G__G__ESDLN_AliESDCosmicTrack.tagnum = -1 ;
  G__G__ESDLN_TArrayF.tagnum = -1 ;
  G__G__ESDLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTSparselEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__G__ESDLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__G__ESDLN_AliESDMuonTrack.tagnum = -1 ;
  G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternFlag.tagnum = -1 ;
  G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternInfo.tagnum = -1 ;
  G__G__ESDLN_AliESDPmdTrack.tagnum = -1 ;
  G__G__ESDLN_TFile.tagnum = -1 ;
  G__G__ESDLN_TRef.tagnum = -1 ;
  G__G__ESDLN_AliVTrdTracklet.tagnum = -1 ;
  G__G__ESDLN_AliVTrdTrack.tagnum = -1 ;
  G__G__ESDLN_AliESDTrdTracklet.tagnum = -1 ;
  G__G__ESDLN_AliVTOFcluster.tagnum = -1 ;
  G__G__ESDLN_AliVTOFHit.tagnum = -1 ;
  G__G__ESDLN_AliESDTOFHit.tagnum = -1 ;
  G__G__ESDLN_AliVTOFMatch.tagnum = -1 ;
  G__G__ESDLN_AliESDTOFMatch.tagnum = -1 ;
  G__G__ESDLN_AliESDTOFCluster.tagnum = -1 ;
  G__G__ESDLN_AliTPCseed.tagnum = -1 ;
  G__G__ESDLN_AliTrackPointArray.tagnum = -1 ;
  G__G__ESDLN_AliVfriendTrack.tagnum = -1 ;
  G__G__ESDLN_TGeoRotation.tagnum = -1 ;
  G__G__ESDLN_AliTrackPoint.tagnum = -1 ;
  G__G__ESDLN_AliTrackPointArraycLcLdA.tagnum = -1 ;
  G__G__ESDLN_AliKalmanTrack.tagnum = -1 ;
  G__G__ESDLN_AliESDfriendTrack.tagnum = -1 ;
  G__G__ESDLN_AliESDfriendTrackcLcLdA.tagnum = -1 ;
  G__G__ESDLN_TParticle.tagnum = -1 ;
  G__G__ESDLN_TTreeSRedirector.tagnum = -1 ;
  G__G__ESDLN_AliESDtrack.tagnum = -1 ;
  G__G__ESDLN_AliESDtrackcLcLdA.tagnum = -1 ;
  G__G__ESDLN_AliESDTrdTrack.tagnum = -1 ;
  G__G__ESDLN_AliVertex.tagnum = -1 ;
  G__G__ESDLN_AliESDkink.tagnum = -1 ;
  G__G__ESDLN_AliESDHLTtrack.tagnum = -1 ;
  G__G__ESDLN_AliFMDMap.tagnum = -1 ;
  G__G__ESDLN_AliFMDMapcLcLdA.tagnum = -1 ;
  G__G__ESDLN_AliFMDMapcLcLForOne.tagnum = -1 ;
  G__G__ESDLN_AliFMDFloatMap.tagnum = -1 ;
  G__G__ESDLN_AliESDFMD.tagnum = -1 ;
  G__G__ESDLN_AliESDFMDcLcLForOne.tagnum = -1 ;
  G__G__ESDLN_AliESDFMDcLcLdA.tagnum = -1 ;
  G__G__ESDLN_AliVVZERO.tagnum = -1 ;
  G__G__ESDLN_AliVVZEROcLcLDecision.tagnum = -1 ;
  G__G__ESDLN_AliESDVZERO.tagnum = -1 ;
  G__G__ESDLN_AliVMultiplicity.tagnum = -1 ;
  G__G__ESDLN_AliRefArray.tagnum = -1 ;
  G__G__ESDLN_AliMultiplicity.tagnum = -1 ;
  G__G__ESDLN_AliRawDataErrorLog.tagnum = -1 ;
  G__G__ESDLN_AliRawDataErrorLogcLcLERawDataErrorLevel.tagnum = -1 ;
  G__G__ESDLN_AliESDfriend.tagnum = -1 ;
  G__G__ESDLN_AliESD.tagnum = -1 ;
  G__G__ESDLN_TTree.tagnum = -1 ;
  G__G__ESDLN_TSelector.tagnum = -1 ;
  G__G__ESDLN_TGeoHMatrix.tagnum = -1 ;
  G__G__ESDLN_AliVHeader.tagnum = -1 ;
  G__G__ESDLN_TRefArray.tagnum = -1 ;
  G__G__ESDLN_AliVfriendEvent.tagnum = -1 ;
  G__G__ESDLN_AliCentrality.tagnum = -1 ;
  G__G__ESDLN_AliEventplane.tagnum = -1 ;
  G__G__ESDLN_AliVZDC.tagnum = -1 ;
  G__G__ESDLN_AliVEventcLcLEDataLayoutType.tagnum = -1 ;
  G__G__ESDLN_AliTimeStamp.tagnum = -1 ;
  G__G__ESDLN_AliESDRun.tagnum = -1 ;
  G__G__ESDLN_AliESDRuncLcLStatusBits.tagnum = -1 ;
  G__G__ESDLN_AliESDRuncLcLdA.tagnum = -1 ;
  G__G__ESDLN_AliTriggerScalersESD.tagnum = -1 ;
  G__G__ESDLN_AliTriggerScalersRecordESD.tagnum = -1 ;
  G__G__ESDLN_AliTriggerIR.tagnum = -1 ;
  G__G__ESDLN_AliTriggerConfiguration.tagnum = -1 ;
  G__G__ESDLN_AliESDHeader.tagnum = -1 ;
  G__G__ESDLN_AliESDHeadercLcLdA.tagnum = -1 ;
  G__G__ESDLN_AliESDTZERO.tagnum = -1 ;
  G__G__ESDLN_AliESDFIT.tagnum = -1 ;
  G__G__ESDLN_AliESDZDC.tagnum = -1 ;
  G__G__ESDLN_AliVVZEROfriend.tagnum = -1 ;
  G__G__ESDLN_AliESDVZEROfriend.tagnum = -1 ;
  G__G__ESDLN_AliESDTZEROfriend.tagnum = -1 ;
  G__G__ESDLN_AliESDTrdTrigger.tagnum = -1 ;
  G__G__ESDLN_AliESDMuonCluster.tagnum = -1 ;
  G__G__ESDLN_AliESDMuonPad.tagnum = -1 ;
  G__G__ESDLN_AliESDMuonGlobalTrack.tagnum = -1 ;
  G__G__ESDLN_AliESDHLTDecision.tagnum = -1 ;
  G__G__ESDLN_AliESDEventcLcLESDListIndex.tagnum = -1 ;
  G__G__ESDLN_AliVEventHandler.tagnum = -1 ;
  G__G__ESDLN_AliESDHandler.tagnum = -1 ;
  G__G__ESDLN_TArrayL64.tagnum = -1 ;
  G__G__ESDLN_AliESDHLTDecisioncLcLdA.tagnum = -1 ;
  G__G__ESDLN_AliRunTag.tagnum = -1 ;
  G__G__ESDLN_AliEventTag.tagnum = -1 ;
  G__G__ESDLN_AliPIDResponse.tagnum = -1 ;
  G__G__ESDLN_AliInputEventHandler.tagnum = -1 ;
  G__G__ESDLN_TChain.tagnum = -1 ;
  G__G__ESDLN_TMap.tagnum = -1 ;
  G__G__ESDLN_AliESDpid.tagnum = -1 ;
  G__G__ESDLN_AliESDInputHandler.tagnum = -1 ;
  G__G__ESDLN_TDirectoryFile.tagnum = -1 ;
  G__G__ESDLN_AliESDInputHandlerRP.tagnum = -1 ;
  G__G__ESDLN_AliESDInputHandlerRPcLcLdA.tagnum = -1 ;
  G__G__ESDLN_AliESDMultITS.tagnum = -1 ;
  G__G__ESDLN_AliVertexerTracks.tagnum = -1 ;
  G__G__ESDLN_AliESDUtils.tagnum = -1 ;
  G__G__ESDLN_AliExpression.tagnum = -1 ;
  G__G__ESDLN_AliVariableExpression.tagnum = -1 ;
  G__G__ESDLN_AliCluster.tagnum = -1 ;
  G__G__ESDLN_AliKFParticleBase.tagnum = -1 ;
  G__G__ESDLN_AliKFParticle.tagnum = -1 ;
  G__G__ESDLN_AliKFVertex.tagnum = -1 ;
  G__G__ESDLN_AliMeanVertex.tagnum = -1 ;
  G__G__ESDLN_AliSelector.tagnum = -1 ;
  G__G__ESDLN_AliStrLine.tagnum = -1 ;
  G__G__ESDLN_AliTrackerBase.tagnum = -1 ;
  G__G__ESDLN_AliTriggerBCMask.tagnum = -1 ;
  G__G__ESDLN_AliTriggerBCMaskcLcLdA.tagnum = -1 ;
  G__G__ESDLN_AliTriggerDescriptor.tagnum = -1 ;
  G__G__ESDLN_AliTriggerCluster.tagnum = -1 ;
  G__G__ESDLN_AliTriggerPFProtection.tagnum = -1 ;
  G__G__ESDLN_AliTriggerClass.tagnum = -1 ;
  G__G__ESDLN_AliTriggerClasscLcLdA.tagnum = -1 ;
  G__G__ESDLN_AliTriggerInput.tagnum = -1 ;
  G__G__ESDLN_AliTriggerInteraction.tagnum = -1 ;
  G__G__ESDLN_AliTriggerConfigurationcLcLdA.tagnum = -1 ;
  G__G__ESDLN_AliV0vertexer.tagnum = -1 ;
  G__G__ESDLN_AliVertexerTrackscLcLdA.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__ESD() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TString);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TList);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDEvent),sizeof(AliESDEvent),-1,294656,"ESDEvent class ",G__setup_memvarAliESDEvent,G__setup_memfuncAliESDEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDv0),sizeof(AliESDv0),-1,327424,"ESD V0 vertex",G__setup_memvarAliESDv0,G__setup_memfuncAliESDv0);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliExternalTrackParam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliCascadeVertexer),sizeof(AliCascadeVertexer),-1,291072,"cascade verterxer ",G__setup_memvarAliCascadeVertexer,G__setup_memfuncAliCascadeVertexer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDACORDE),sizeof(AliESDACORDE),-1,327424,(char*)NULL,G__setup_memvarAliESDACORDE,G__setup_memfuncAliESDACORDE);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVAD);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVADcLcLDecision);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDAD),sizeof(AliESDAD),-1,327424,(char*)NULL,G__setup_memvarAliESDAD,G__setup_memfuncAliESDAD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDADfriend),sizeof(AliESDADfriend),-1,294656,"container class for AD DDL raw data",G__setup_memvarAliESDADfriend,G__setup_memfuncAliESDADfriend);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDADfriendcLcLEESDADfriendParams);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVCaloCells);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVCaloCellscLcLVCells_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDCaloCells),sizeof(AliESDCaloCells),-1,327424,(char*)NULL,G__setup_memvarAliESDCaloCells,G__setup_memfuncAliESDCaloCells);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TVector3);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TLorentzVector);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVCluster);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVClustercLcLVCluUserDefEnergy_t);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliPID);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliPIDcLcLEParticleType);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDCaloCluster),sizeof(AliESDCaloCluster),-1,294656,(char*)NULL,G__setup_memvarAliESDCaloCluster,G__setup_memfuncAliESDCaloCluster);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVCaloTrigger);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDCaloTrigger),sizeof(AliESDCaloTrigger),-1,327424,(char*)NULL,G__setup_memvarAliESDCaloTrigger,G__setup_memfuncAliESDCaloTrigger);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TBits);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVParticle);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVEvent);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDVertex),sizeof(AliESDVertex),-1,327424,"Class for Primary Vertex",G__setup_memvarAliESDVertex,G__setup_memfuncAliESDVertex);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTPCdEdxInfo);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliDetectorPID);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTOFHeader);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVTrack);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TPolyMarker3D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDV0Params),sizeof(AliESDV0Params),-1,291072,"ESD V0 vertex - error and likelihood parameterization constant",G__setup_memvarAliESDV0Params,G__setup_memfuncAliESDV0Params);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDcascade),sizeof(AliESDcascade),-1,327424,"reconstructed cascade vertex",G__setup_memvarAliESDcascade,G__setup_memfuncAliESDcascade);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDCosmicTrack),sizeof(AliESDCosmicTrack),-1,327424,"0: only data members derived from AliExternalTrackParam are saved in tree; 1: all are saved!!",G__setup_memvarAliESDCosmicTrack,G__setup_memfuncAliESDCosmicTrack);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTSparselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMatrixTSparseDiaglEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDMuonTrack),sizeof(AliESDMuonTrack),-1,327424,"MUON ESD track class ",G__setup_memvarAliESDMuonTrack,G__setup_memfuncAliESDMuonTrack);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternFlag);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDMuonTrackcLcLEAliTriggerChPatternInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDPmdTrack),sizeof(AliESDPmdTrack),-1,294656,"PMD ESD track class ",G__setup_memvarAliESDPmdTrack,G__setup_memfuncAliESDPmdTrack);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TFile);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TRef);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVTrdTracklet);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVTrdTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDTrdTracklet),sizeof(AliESDTrdTracklet),-1,327424,(char*)NULL,G__setup_memvarAliESDTrdTracklet,G__setup_memfuncAliESDTrdTracklet);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVTOFcluster);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVTOFHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDTOFHit),sizeof(AliESDTOFHit),-1,327424,"TOF matchable hit",G__setup_memvarAliESDTOFHit,G__setup_memfuncAliESDTOFHit);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVTOFMatch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDTOFMatch),sizeof(AliESDTOFMatch),-1,327424,"TOF matchable hit",G__setup_memvarAliESDTOFMatch,G__setup_memfuncAliESDTOFMatch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDTOFCluster),sizeof(AliESDTOFCluster),-1,327424,"TOF matchable cluster",G__setup_memvarAliESDTOFCluster,G__setup_memfuncAliESDTOFCluster);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTPCseed);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTrackPointArray),sizeof(AliTrackPointArray),-1,327424,(char*)NULL,G__setup_memvarAliTrackPointArray,G__setup_memfuncAliTrackPointArray);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVfriendTrack);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TGeoRotation);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTrackPoint),sizeof(AliTrackPoint),-1,327424,(char*)NULL,G__setup_memvarAliTrackPoint,G__setup_memfuncAliTrackPoint);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTrackPointArraycLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliKalmanTrack),sizeof(AliKalmanTrack),-1,327427,"Reconstructed track",G__setup_memvarAliKalmanTrack,G__setup_memfuncAliKalmanTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDfriendTrack),sizeof(AliESDfriendTrack),-1,327424,"ESD friend track",G__setup_memvarAliESDfriendTrack,G__setup_memfuncAliESDfriendTrack);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDfriendTrackcLcLdA);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TParticle);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TTreeSRedirector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDtrack),sizeof(AliESDtrack),-1,327424,"ESDtrack ",G__setup_memvarAliESDtrack,G__setup_memfuncAliESDtrack);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDtrackcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDTrdTrack),sizeof(AliESDTrdTrack),-1,294656,(char*)NULL,G__setup_memvarAliESDTrdTrack,G__setup_memfuncAliESDTrdTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVertex),sizeof(AliVertex),-1,327424,"Class for Primary Vertex",G__setup_memvarAliVertex,G__setup_memfuncAliVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDkink),sizeof(AliESDkink),-1,293632,"ESD V0 vertex",G__setup_memvarAliESDkink,G__setup_memfuncAliESDkink);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDHLTtrack),sizeof(AliESDHLTtrack),-1,292096,"ESD HLT track class",G__setup_memvarAliESDHLTtrack,G__setup_memfuncAliESDHLTtrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliFMDMap),sizeof(AliFMDMap),-1,292610,"Cache of per strip information",G__setup_memvarAliFMDMap,G__setup_memfuncAliFMDMap);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliFMDMapcLcLdA);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliFMDMapcLcLForOne);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliFMDFloatMap),sizeof(AliFMDFloatMap),-1,327424,"Map of floats",G__setup_memvarAliFMDFloatMap,G__setup_memfuncAliFMDFloatMap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDFMD),sizeof(AliESDFMD),-1,294656,"ESD info from FMD",G__setup_memvarAliESDFMD,G__setup_memfuncAliESDFMD);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDFMDcLcLForOne);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDFMDcLcLdA);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVVZERO);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVVZEROcLcLDecision);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDVZERO),sizeof(AliESDVZERO),-1,327424,(char*)NULL,G__setup_memvarAliESDVZERO,G__setup_memfuncAliESDVZERO);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVMultiplicity);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliRefArray);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliMultiplicity),sizeof(AliMultiplicity),-1,327424,(char*)NULL,G__setup_memvarAliMultiplicity,G__setup_memfuncAliMultiplicity);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliRawDataErrorLog),sizeof(AliRawDataErrorLog),-1,327424,(char*)NULL,G__setup_memvarAliRawDataErrorLog,G__setup_memfuncAliRawDataErrorLog);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliRawDataErrorLogcLcLERawDataErrorLevel);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDfriend),sizeof(AliESDfriend),-1,327424,"ESD friend",G__setup_memvarAliESDfriend,G__setup_memfuncAliESDfriend);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESD),sizeof(AliESD),-1,294656,"ESD class ",G__setup_memvarAliESD,G__setup_memfuncAliESD);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TTree);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TSelector);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TGeoHMatrix);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVHeader);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TRefArray);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVfriendEvent);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliCentrality);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliEventplane);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVZDC);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVEventcLcLEDataLayoutType);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTimeStamp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDRun),sizeof(AliESDRun),-1,294656,(char*)NULL,G__setup_memvarAliESDRun,G__setup_memfuncAliESDRun);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDRuncLcLStatusBits);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDRuncLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTriggerScalersESD),sizeof(AliTriggerScalersESD),-1,327424,"Define a Run Trigger Scalers (Scalers)",G__setup_memvarAliTriggerScalersESD,G__setup_memfuncAliTriggerScalersESD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTriggerScalersRecordESD),sizeof(AliTriggerScalersRecordESD),-1,294656,"Define a Record of Trigger Scalers ",G__setup_memvarAliTriggerScalersRecordESD,G__setup_memfuncAliTriggerScalersRecordESD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTriggerIR),sizeof(AliTriggerIR),-1,327424,"Trigger Interaction Record (one per orbit)",G__setup_memvarAliTriggerIR,G__setup_memfuncAliTriggerIR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTriggerConfiguration),sizeof(AliTriggerConfiguration),-1,327424,"Define a trigger configuration",G__setup_memvarAliTriggerConfiguration,G__setup_memfuncAliTriggerConfiguration);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDHeader),sizeof(AliESDHeader),-1,327424,(char*)NULL,G__setup_memvarAliESDHeader,G__setup_memfuncAliESDHeader);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDHeadercLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDTZERO),sizeof(AliESDTZERO),-1,293632,(char*)NULL,G__setup_memvarAliESDTZERO,G__setup_memfuncAliESDTZERO);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDFIT),sizeof(AliESDFIT),-1,293632,(char*)NULL,G__setup_memvarAliESDFIT,G__setup_memfuncAliESDFIT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDZDC),sizeof(AliESDZDC),-1,293632,(char*)NULL,G__setup_memvarAliESDZDC,G__setup_memfuncAliESDZDC);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVVZEROfriend);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDVZEROfriend),sizeof(AliESDVZEROfriend),-1,294656,"container class for VZERO DDL raw data",G__setup_memvarAliESDVZEROfriend,G__setup_memfuncAliESDVZEROfriend);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDTZEROfriend),sizeof(AliESDTZEROfriend),-1,294656,(char*)NULL,G__setup_memvarAliESDTZEROfriend,G__setup_memfuncAliESDTZEROfriend);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDTrdTrigger),sizeof(AliESDTrdTrigger),-1,294656,(char*)NULL,G__setup_memvarAliESDTrdTrigger,G__setup_memfuncAliESDTrdTrigger);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDMuonCluster),sizeof(AliESDMuonCluster),-1,294656,"MUON ESD cluster class",G__setup_memvarAliESDMuonCluster,G__setup_memfuncAliESDMuonCluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDMuonPad),sizeof(AliESDMuonPad),-1,294656,"MUON ESD pad class",G__setup_memvarAliESDMuonPad,G__setup_memfuncAliESDMuonPad);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDMuonGlobalTrack),sizeof(AliESDMuonGlobalTrack),-1,327424,"MUON+MFT ESD track class ",G__setup_memvarAliESDMuonGlobalTrack,G__setup_memfuncAliESDMuonGlobalTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDHLTDecision),sizeof(AliESDHLTDecision),-1,327424,(char*)NULL,G__setup_memvarAliESDHLTDecision,G__setup_memfuncAliESDHLTDecision);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDEventcLcLESDListIndex),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVEventHandler);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDHandler),sizeof(AliESDHandler),-1,327424,(char*)NULL,G__setup_memvarAliESDHandler,G__setup_memfuncAliESDHandler);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TArrayL64);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDHLTDecisioncLcLdA);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliRunTag);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliEventTag);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliPIDResponse);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliInputEventHandler);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TChain);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TMap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDpid),sizeof(AliESDpid),-1,327424,"PID calculation class",G__setup_memvarAliESDpid,G__setup_memfuncAliESDpid);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDInputHandler),sizeof(AliESDInputHandler),-1,327424,(char*)NULL,G__setup_memvarAliESDInputHandler,G__setup_memfuncAliESDInputHandler);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_TDirectoryFile);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDInputHandlerRP),sizeof(AliESDInputHandlerRP),-1,327424,(char*)NULL,G__setup_memvarAliESDInputHandlerRP,G__setup_memfuncAliESDInputHandlerRP);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDInputHandlerRPcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDMultITS),sizeof(AliESDMultITS),-1,323840,(char*)NULL,G__setup_memvarAliESDMultITS,G__setup_memfuncAliESDMultITS);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVertexerTracks),sizeof(AliVertexerTracks),-1,327424,"3D Vertexing with tracks ",G__setup_memvarAliVertexerTracks,G__setup_memfuncAliVertexerTracks);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliESDUtils),0,-1,0,(char*)NULL,G__setup_memvarAliESDUtils,G__setup_memfuncAliESDUtils);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliExpression),sizeof(AliExpression),-1,327424,"Class to evaluate an expression",G__setup_memvarAliExpression,G__setup_memfuncAliExpression);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVariableExpression),sizeof(AliVariableExpression),-1,324608,"Class to define a variable expression",G__setup_memvarAliVariableExpression,G__setup_memfuncAliVariableExpression);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliCluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliKFParticleBase),sizeof(AliKFParticleBase),-1,292100,(char*)NULL,G__setup_memvarAliKFParticleBase,G__setup_memfuncAliKFParticleBase);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliKFParticle),sizeof(AliKFParticle),-1,324864,(char*)NULL,G__setup_memvarAliKFParticle,G__setup_memfuncAliKFParticle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliKFVertex),sizeof(AliKFVertex),-1,324864,(char*)NULL,G__setup_memvarAliKFVertex,G__setup_memfuncAliKFVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliMeanVertex),sizeof(AliMeanVertex),-1,324864,"Class for mean Vertex   ",G__setup_memvarAliMeanVertex,G__setup_memfuncAliMeanVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliSelector),sizeof(AliSelector),-1,294656,(char*)NULL,G__setup_memvarAliSelector,G__setup_memfuncAliSelector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliStrLine),sizeof(AliStrLine),-1,327424,(char*)NULL,G__setup_memvarAliStrLine,G__setup_memfuncAliStrLine);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTrackerBase),sizeof(AliTrackerBase),-1,294656,"base tracker",G__setup_memvarAliTrackerBase,G__setup_memfuncAliTrackerBase);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTriggerBCMask),sizeof(AliTriggerBCMask),-1,327424,"Define a trigger bunch-crossing mask",G__setup_memvarAliTriggerBCMask,G__setup_memfuncAliTriggerBCMask);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTriggerBCMaskcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTriggerDescriptor),sizeof(AliTriggerDescriptor),-1,327424,"Define a trigger descriptor object",G__setup_memvarAliTriggerDescriptor,G__setup_memfuncAliTriggerDescriptor);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTriggerCluster),sizeof(AliTriggerCluster),-1,327424,"Define a Trigger Cluster",G__setup_memvarAliTriggerCluster,G__setup_memfuncAliTriggerCluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTriggerPFProtection),sizeof(AliTriggerPFProtection),-1,327424,"Define a Trigger Past Future Protection ",G__setup_memvarAliTriggerPFProtection,G__setup_memfuncAliTriggerPFProtection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTriggerClass),sizeof(AliTriggerClass),-1,327424,"Define a trigger class object",G__setup_memvarAliTriggerClass,G__setup_memfuncAliTriggerClass);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTriggerClasscLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTriggerInput),sizeof(AliTriggerInput),-1,325376,"Define a Trigger Input",G__setup_memvarAliTriggerInput,G__setup_memfuncAliTriggerInput);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTriggerInteraction),sizeof(AliTriggerInteraction),-1,327424,"Define a trigger interaction object",G__setup_memvarAliTriggerInteraction,G__setup_memfuncAliTriggerInteraction);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliTriggerConfigurationcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ESDLN_AliV0vertexer),sizeof(AliV0vertexer),-1,291072,"V0 verterxer ",G__setup_memvarAliV0vertexer,G__setup_memfuncAliV0vertexer);
   G__get_linked_tagnum_fwd(&G__G__ESDLN_AliVertexerTrackscLcLdA);
}
extern "C" void G__cpp_setupG__ESD(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__ESD()");
  G__set_cpp_environmentG__ESD();
  G__cpp_setup_tagtableG__ESD();

  G__cpp_setup_inheritanceG__ESD();

  G__cpp_setup_typetableG__ESD();

  G__cpp_setup_memvarG__ESD();

  G__cpp_setup_memfuncG__ESD();
  G__cpp_setup_globalG__ESD();
  G__cpp_setup_funcG__ESD();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__ESD();
  return;
}
class G__cpp_setup_initG__ESD {
  public:
    G__cpp_setup_initG__ESD() { G__add_setup_func("G__ESD",(G__incsetup)(&G__cpp_setupG__ESD)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__ESD() { G__remove_setup_func("G__ESD"); }
};
G__cpp_setup_initG__ESD G__cpp_setup_initializerG__ESD;

